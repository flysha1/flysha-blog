export default "{\"documentCount\":1765,\"nextId\":1765,\"documentIds\":{\"0\":\"0\",\"1\":\"2\",\"2\":\"2#什么是-css\",\"3\":\"2#css-规则集-详解\",\"4\":\"2#选择器-selector\",\"5\":\"2#声明-declaration\",\"6\":\"2#属性-properties\",\"7\":\"2#属性的值-property-value\",\"8\":\"2@0\",\"9\":\"2@1\",\"10\":\"3\",\"11\":\"3#选择符\",\"12\":\"3#_1-元素选择符\",\"13\":\"3#_2-关系选择符\",\"14\":\"3#_3-属性选择符\",\"15\":\"3#_4-伪类选择符\",\"16\":\"3#_5-伪元素选择符\",\"17\":\"3#优先级顺序\",\"18\":\"3#权重值比较规则\",\"19\":\"3#important\",\"20\":\"3@0\",\"21\":\"3@1\",\"22\":\"4\",\"23\":\"4#长度\",\"24\":\"4#相对长度单位\",\"25\":\"4#绝对长度单位-absolute-length-units\",\"26\":\"4#角度\",\"27\":\"4#时间\",\"28\":\"4#颜色\",\"29\":\"4#文本\",\"30\":\"4#图像\",\"31\":\"4#数字\",\"32\":\"4@0\",\"33\":\"4@1\",\"34\":\"5\",\"35\":\"5#position\",\"36\":\"5#absolute跟正常流有什么不同\",\"37\":\"5#脱离文档流\",\"38\":\"5#sticky\",\"39\":\"5#z-index\",\"40\":\"5#失效场景\",\"41\":\"5@0\",\"42\":\"5@1\",\"43\":\"6\",\"44\":\"6#display\",\"45\":\"6#行内元素与块级元素\",\"46\":\"6#行内元素的空隙问题\",\"47\":\"6#width-和-height\",\"48\":\"6#宽高自适应\",\"49\":\"6#外部尺寸与流体特性\",\"50\":\"6#正常流宽度\",\"51\":\"6#格式化宽度\",\"52\":\"6#内部尺寸与流体特性\",\"53\":\"6#包裹性\",\"54\":\"6#首选最小宽度\",\"55\":\"6#margin\",\"56\":\"6#叠加上下文\",\"57\":\"6#padding\",\"58\":\"6#box-sizing\",\"59\":\"6#box-shadow\",\"60\":\"6#outline\",\"61\":\"6#border\",\"62\":\"6#border-image\",\"63\":\"6#border-image-slice\",\"64\":\"6#border-image-source\",\"65\":\"6#border-image-repeat\",\"66\":\"6#border-image-width\",\"67\":\"6#border-image-outset\",\"68\":\"6@0\",\"69\":\"6@1\",\"70\":\"7\",\"71\":\"7#字体\",\"72\":\"7#font-family\",\"73\":\"7#font-size\",\"74\":\"7#font-style\",\"75\":\"7#font-weight\",\"76\":\"7#font-varient\",\"77\":\"7#font-stretch\",\"78\":\"7#多字体反馈机制\",\"79\":\"7#自定义字体\",\"80\":\"7#文本\",\"81\":\"7#text-align\",\"82\":\"7#vertical-align\",\"83\":\"7#text-decoration\",\"84\":\"7#text-transform\",\"85\":\"7#text-justfy\",\"86\":\"7#text-indent\",\"87\":\"7#text-overflow\",\"88\":\"7#letter-spacing\",\"89\":\"7#word-spacing\",\"90\":\"7#word-wrap\",\"91\":\"7#word-break\",\"92\":\"7#white-space\",\"93\":\"7#line-height\",\"94\":\"7#图片间隙问题\",\"95\":\"7@0\",\"96\":\"7@1\",\"97\":\"8\",\"98\":\"8#属性说明\",\"99\":\"8#background-color\",\"100\":\"8#background-image\",\"101\":\"8#background-origin\",\"102\":\"8#background-position\",\"103\":\"8#background-repeat\",\"104\":\"8#background-size\",\"105\":\"8#background-attachment\",\"106\":\"8#background-clip\",\"107\":\"8#色彩模式\",\"108\":\"8#rgb\",\"109\":\"8#hex\",\"110\":\"8#hsl\",\"111\":\"8#渐变色\",\"112\":\"8@0\",\"113\":\"8@1\",\"114\":\"9\",\"115\":\"9#什么是-html\",\"116\":\"9#剖析一个-html-元素\",\"117\":\"9#元素属性\",\"118\":\"9#布尔属性\",\"119\":\"9#关于属性的引号\",\"120\":\"9#剖析-html-文档\",\"121\":\"9#在-html-中包含特殊字符\",\"122\":\"9#html-注释\",\"123\":\"9@0\",\"124\":\"9@1\",\"125\":\"10\",\"126\":\"10#什么是-html-头部\",\"127\":\"10#元数据-meta-元素\",\"128\":\"10#指定文档中的字符编码\",\"129\":\"10#添加作者和描述\",\"130\":\"10#在你的站点增加自定义图标\",\"131\":\"10#在-html-中应用-css-和-javascript\",\"132\":\"10#为文档设定主语言\",\"133\":\"10@0\",\"134\":\"10@1\",\"135\":\"11\",\"136\":\"11#div-内容划分元素\",\"137\":\"11@0\",\"138\":\"11@1\",\"139\":\"12\",\"140\":\"12@0\",\"141\":\"12@1\",\"142\":\"13\",\"143\":\"13#渲染引擎-浏览器内核\",\"144\":\"13#javascript引擎\",\"145\":\"13@0\",\"146\":\"13@1\",\"147\":\"14\",\"148\":\"14#_1-解析url\",\"149\":\"14#_2-检查缓存\",\"150\":\"14#_3-dns解析\",\"151\":\"14#_4-建立tcp连接\",\"152\":\"14#_5-发送http请求\",\"153\":\"14#_6-服务器处理请求\",\"154\":\"14#_7-返回http响应\",\"155\":\"14#_8-浏览器接受响应\",\"156\":\"14#_9-关闭tcp连接\",\"157\":\"14#_10-浏览器解析html\",\"158\":\"14#_11-浏览器布局渲染\",\"159\":\"14@0\",\"160\":\"14@1\",\"161\":\"15\",\"162\":\"15@0\",\"163\":\"15@1\",\"164\":\"16\",\"165\":\"16#基础命令\",\"166\":\"16#查看和比较\",\"167\":\"16#分支管理\",\"168\":\"16#远程仓库\",\"169\":\"16#撤销和重置\",\"170\":\"16#标签和版本\",\"171\":\"16#其他\",\"172\":\"16@0\",\"173\":\"16@1\",\"174\":\"17\",\"175\":\"17#_1-rebase\",\"176\":\"17#_2-reset\",\"177\":\"17#_3-revert\",\"178\":\"17#区别总结\",\"179\":\"17@0\",\"180\":\"17@1\",\"181\":\"18\",\"182\":\"18@0\",\"183\":\"18@1\",\"184\":\"19\",\"185\":\"19#基础知识\",\"186\":\"19#linux-系统的文件结构\",\"187\":\"19#linux-命令行含义\",\"188\":\"19#命令组成\",\"189\":\"19#基础操作\",\"190\":\"19#关闭系统\",\"191\":\"19#帮助命令\",\"192\":\"19#切换用户\",\"193\":\"19#目录操作\",\"194\":\"19#切换目录\",\"195\":\"19#查看目录\",\"196\":\"19#创建目录\",\"197\":\"19#删除目录和文件\",\"198\":\"19#修改目录\",\"199\":\"19#拷贝目录\",\"200\":\"19#搜索目录\",\"201\":\"19#查看当前目录\",\"202\":\"19#文件操作\",\"203\":\"19#新增\",\"204\":\"19#删除\",\"205\":\"19#编辑\",\"206\":\"19#查看\",\"207\":\"19#文件权限\",\"208\":\"19#权限说明\",\"209\":\"19#文件授权\",\"210\":\"19#打包与解压\",\"211\":\"19#说明\",\"212\":\"19#打包\",\"213\":\"19#解压\",\"214\":\"19#其他常用命令\",\"215\":\"19#find\",\"216\":\"19#系统管理\",\"217\":\"19#防火墙操作\",\"218\":\"19#修改主机名-centos-7\",\"219\":\"19#查看网络\",\"220\":\"19#修改ip\",\"221\":\"19#查看进程\",\"222\":\"19#结束进程\",\"223\":\"19#查看链接\",\"224\":\"19#快速清屏\",\"225\":\"19#远程主机\",\"226\":\"19@0\",\"227\":\"19@1\",\"228\":\"20\",\"229\":\"20#名词解释\",\"230\":\"20#不同语言间的对比\",\"231\":\"20@0\",\"232\":\"20@1\",\"233\":\"21\",\"234\":\"21#字符集\",\"235\":\"21#区分大小写\",\"236\":\"21#空格、换行符和格式控制符\",\"237\":\"21#空白字符-whitespace\",\"238\":\"21#行终止符-lineterminator\",\"239\":\"21#unicode-转义序列\",\"240\":\"21#注释\",\"241\":\"21#单行注释\",\"242\":\"21#多行注释\",\"243\":\"21#阻止执行\",\"244\":\"21#行末注释\",\"245\":\"21#直接量\",\"246\":\"21#标识符\",\"247\":\"21#关键字和保留字\",\"248\":\"21#保留字\",\"249\":\"21#关键字\",\"250\":\"21#未来保留字\",\"251\":\"21#预定义变量和函数\",\"252\":\"21#分号\",\"253\":\"21#自动分号补全\",\"254\":\"21@0\",\"255\":\"21@1\",\"256\":\"23\",\"257\":\"23#_1-伪类光圈\",\"258\":\"23#_2-伪类括号效果\",\"259\":\"23#_3-炫酷丝带效果\",\"260\":\"23#双边丝带\",\"261\":\"23#右边丝带\",\"262\":\"23#箭头丝带\",\"263\":\"23#多个箭头丝带\",\"264\":\"23#悬挂标签\",\"265\":\"23#_4-绚丽流动边框\",\"266\":\"23#_5-tooltip提示\",\"267\":\"23@0\",\"268\":\"23@1\",\"269\":\"24\",\"270\":\"24#_1-纯css实现\",\"271\":\"24#clip-path\",\"272\":\"24#transform\",\"273\":\"24#_2-js实现\",\"274\":\"24#判断方向算法\",\"275\":\"24#移入方向判断\",\"276\":\"24#移出方向判断\",\"277\":\"24#_3-总结\",\"278\":\"24@0\",\"279\":\"24@1\",\"280\":\"25\",\"281\":\"25@0\",\"282\":\"25@1\",\"283\":\"26\",\"284\":\"26@0\",\"285\":\"26@1\",\"286\":\"27\",\"287\":\"27#防抖\",\"288\":\"27#_1-前缘防抖\",\"289\":\"27#_2-延迟防抖\",\"290\":\"27#_3-可选前缘或延迟防抖\",\"291\":\"27#节流\",\"292\":\"27#_1-前缘节流\",\"293\":\"27#_2-延迟节流\",\"294\":\"27#_3-可选前缘或延迟节流\",\"295\":\"27@0\",\"296\":\"27@1\",\"297\":\"28\",\"298\":\"28#tcp\",\"299\":\"28#数据包结构\",\"300\":\"28#三次握手\",\"301\":\"28#握手的目标\",\"302\":\"28#握手报文\",\"303\":\"28#其他问题\",\"304\":\"28#四次挥手\",\"305\":\"28#重传机制\",\"306\":\"28#拥塞控制机制\",\"307\":\"28#流量控制机制\",\"308\":\"28#可靠传输机制\",\"309\":\"28#udp\",\"310\":\"28#特点\",\"311\":\"28#实践\",\"312\":\"28#数据通信形式\",\"313\":\"28#tcp-与-udp\",\"314\":\"28@0\",\"315\":\"28@1\",\"316\":\"29\",\"317\":\"29#osi-七层模型\",\"318\":\"29#tcp-ip-概念层模型\",\"319\":\"29@0\",\"320\":\"29@1\",\"321\":\"30\",\"322\":\"30@0\",\"323\":\"30@1\",\"324\":\"31\",\"325\":\"31#_1-什么是bfc\",\"326\":\"31#_2-浮动和清除浮动\",\"327\":\"31@0\",\"328\":\"31@1\",\"329\":\"32\",\"330\":\"32@0\",\"331\":\"32@1\",\"332\":\"33\",\"333\":\"33@0\",\"334\":\"33@1\",\"335\":\"34\",\"336\":\"34#选择器权重\",\"337\":\"34#优先级规则\",\"338\":\"34@0\",\"339\":\"34@1\",\"340\":\"35\",\"341\":\"35#_1-let-和-const\",\"342\":\"35#_2-函数默认参数\",\"343\":\"35#_3-扩展运算符\",\"344\":\"35#_4-模版字符串\",\"345\":\"35#_5-object-keys\",\"346\":\"35#_6-箭头函数\",\"347\":\"35#_7-array-prototype-foreach\",\"348\":\"35#_8-array-prototype-map\",\"349\":\"35#_9-array-prototype-filter\",\"350\":\"35#_10-array-prototype-some\",\"351\":\"35#_11-array-prototype-every\",\"352\":\"35#_12-array-prototype-reduce\",\"353\":\"35#_13-对象属性同名简写\",\"354\":\"35#_14-解构赋值\",\"355\":\"35#_15-find和findindex\",\"356\":\"35#_16-for-of-和-for-in\",\"357\":\"35#_17-set和map\",\"358\":\"35#_18-promise\",\"359\":\"35#_19-class\",\"360\":\"35@0\",\"361\":\"35@1\",\"362\":\"36\",\"363\":\"36#_1-es7\",\"364\":\"36#_1-includes\",\"365\":\"36#_2-求幂运算\",\"366\":\"36#_2-es8\",\"367\":\"36#_1-object-values\",\"368\":\"36#_2-object-entries\",\"369\":\"36#_3-async-await\",\"370\":\"36#es9\",\"371\":\"36#_1-for-await-of\",\"372\":\"36#_2-promise-finally\",\"373\":\"36#es10\",\"374\":\"36#_1-array-flat\",\"375\":\"36#_2-array-flatmap\",\"376\":\"36#_3-bigint\",\"377\":\"36#_4-object-fromentries\",\"378\":\"36#_5-string-trimstart-string-trimend\",\"379\":\"36#es11\",\"380\":\"36#_1-promise-allsettled\",\"381\":\"36#_2-和\",\"382\":\"36#es12\",\"383\":\"36#_1-promise-any\",\"384\":\"36#_2-数字分隔符\",\"385\":\"36#_3-和\",\"386\":\"36@0\",\"387\":\"36@1\",\"388\":\"37\",\"389\":\"37@0\",\"390\":\"37@1\",\"391\":\"38\",\"392\":\"38#_1-call\",\"393\":\"38#_2-apply\",\"394\":\"38#_3-bind\",\"395\":\"38@0\",\"396\":\"38@1\",\"397\":\"39\",\"398\":\"39@0\",\"399\":\"39@1\",\"400\":\"40\",\"401\":\"40#_1-vue2-0-和-vue3-0的原理\",\"402\":\"40#_2-vue2-0响应式实现\",\"403\":\"40#_3-vue3-0-响应式的实现\",\"404\":\"40@0\",\"405\":\"40@1\",\"406\":\"41\",\"407\":\"41#_1-proxy能够监听到对象中的对象的引用吗\",\"408\":\"41#_2-如何让proxy去监听基本数据类型\",\"409\":\"41@0\",\"410\":\"41@1\",\"411\":\"42\",\"412\":\"42#_1-vuex的概念\",\"413\":\"42#_2-vuex的5个核心属性\",\"414\":\"42@0\",\"415\":\"42@1\",\"416\":\"43\",\"417\":\"43#_1-xss-跨站脚本攻击\",\"418\":\"43#_2-csrf-跨站请求伪造\",\"419\":\"43@0\",\"420\":\"43@1\",\"421\":\"44\",\"422\":\"44#_1-进程-process\",\"423\":\"44#_2-线程-thread\",\"424\":\"44#_3-区别\",\"425\":\"44#_4-浏览器有哪些进程\",\"426\":\"44@0\",\"427\":\"44@1\",\"428\":\"45\",\"429\":\"45#_1-强缓存\",\"430\":\"45#_2-协商缓存\",\"431\":\"45#_3-区别\",\"432\":\"45#_4-为什么需要浏览器缓存\",\"433\":\"45@0\",\"434\":\"45@1\",\"435\":\"46\",\"436\":\"46#_1-常见浏览器所用内核\",\"437\":\"46#_2-浏览器的渲染过程\",\"438\":\"46#_3-浏览器渲染优化\",\"439\":\"46#_4-回流与重绘\",\"440\":\"46@0\",\"441\":\"46@1\",\"442\":\"47\",\"443\":\"47#cookie\",\"444\":\"47#sessionstorage\",\"445\":\"47#localstorage\",\"446\":\"47@0\",\"447\":\"47@1\",\"448\":\"48\",\"449\":\"48#同源策略\",\"450\":\"48#如何解决跨域问题\",\"451\":\"48@0\",\"452\":\"48@1\",\"453\":\"49\",\"454\":\"49#事件冒泡和捕获的区别\",\"455\":\"49#如何阻止事件冒泡\",\"456\":\"49#对事件委托的理解\",\"457\":\"49#对浏览器事件循环的理解\",\"458\":\"49#node-js的事件循环\",\"459\":\"49#process-nexttick\",\"460\":\"49#setimmediate-和-settimeout\",\"461\":\"49#node和浏览器事件循环机制的区别\",\"462\":\"49@0\",\"463\":\"49@1\",\"464\":\"50\",\"465\":\"50@0\",\"466\":\"50@1\",\"467\":\"51\",\"468\":\"51@0\",\"469\":\"51@1\",\"470\":\"52\",\"471\":\"52@0\",\"472\":\"52@1\",\"473\":\"53\",\"474\":\"53@0\",\"475\":\"53@1\",\"476\":\"54\",\"477\":\"54@0\",\"478\":\"54@1\",\"479\":\"55\",\"480\":\"55@0\",\"481\":\"55@1\",\"482\":\"56\",\"483\":\"56@0\",\"484\":\"56@1\",\"485\":\"57\",\"486\":\"57@0\",\"487\":\"57@1\",\"488\":\"58\",\"489\":\"58@0\",\"490\":\"58@1\",\"491\":\"59\",\"492\":\"59@0\",\"493\":\"59@1\",\"494\":\"60\",\"495\":\"60@0\",\"496\":\"60@1\",\"497\":\"61\",\"498\":\"61@0\",\"499\":\"61@1\",\"500\":\"62\",\"501\":\"62@0\",\"502\":\"62@1\",\"503\":\"63\",\"504\":\"63@0\",\"505\":\"63@1\",\"506\":\"64\",\"507\":\"64@0\",\"508\":\"64@1\",\"509\":\"65\",\"510\":\"65@0\",\"511\":\"65@1\",\"512\":\"66\",\"513\":\"66@0\",\"514\":\"66@1\",\"515\":\"67\",\"516\":\"67@0\",\"517\":\"67@1\",\"518\":\"68\",\"519\":\"68@0\",\"520\":\"68@1\",\"521\":\"69\",\"522\":\"69@0\",\"523\":\"69@1\",\"524\":\"70\",\"525\":\"70@0\",\"526\":\"70@1\",\"527\":\"71\",\"528\":\"71#数据属性\",\"529\":\"71#可写性\",\"530\":\"71#可配置性\",\"531\":\"71#可枚举性\",\"532\":\"71#访问器属性\",\"533\":\"71#getter\",\"534\":\"71#setter\",\"535\":\"71@0\",\"536\":\"71@1\",\"537\":\"72\",\"538\":\"72#扩展特性\",\"539\":\"72#密封特性\",\"540\":\"72#冻结特性\",\"541\":\"72#总结\",\"542\":\"72@0\",\"543\":\"72@1\",\"544\":\"73\",\"545\":\"73#对象创建\",\"546\":\"73#对象字面量\",\"547\":\"73#构造函数\",\"548\":\"73#object-create\",\"549\":\"73#对象组成\",\"550\":\"73#键名\",\"551\":\"73#属性值\",\"552\":\"73#引用对象\",\"553\":\"73@0\",\"554\":\"73@1\",\"555\":\"74\",\"556\":\"74#属性查询\",\"557\":\"74#点运算符\",\"558\":\"74#方括号运算符\",\"559\":\"74#可计算属性名\",\"560\":\"74#属性查询错误\",\"561\":\"74#属性设置\",\"562\":\"74#赋值检测\",\"563\":\"74#原始类型\",\"564\":\"74#属性删除\",\"565\":\"74#属性继承\",\"566\":\"74@0\",\"567\":\"74@1\",\"568\":\"75\",\"569\":\"75#组合使用构造函数模式和原型模式\",\"570\":\"75#动态原型模式\",\"571\":\"75#寄生构造函数模式\",\"572\":\"75#稳妥构造函数模式\",\"573\":\"75@0\",\"574\":\"75@1\",\"575\":\"76\",\"576\":\"76#理解原型对象\",\"577\":\"76#原型与实例属性检测\",\"578\":\"76#更简单的原型语法\",\"579\":\"76#原型的动态性\",\"580\":\"76#原型对象的原型\",\"581\":\"76#原型对象的问题\",\"582\":\"76@0\",\"583\":\"76@1\",\"584\":\"77\",\"585\":\"77#应用场景\",\"586\":\"77#es5-实现工厂模式\",\"587\":\"77#es6-实现工厂模式\",\"588\":\"77@0\",\"589\":\"77@1\",\"590\":\"78\",\"591\":\"78#将构造函数当作函数\",\"592\":\"78#构造函数的问题\",\"593\":\"78#es6-模块实现\",\"594\":\"78@0\",\"595\":\"78@1\",\"596\":\"79\",\"597\":\"79#基本写法\",\"598\":\"79#表现形式\",\"599\":\"79#类的声明式\",\"600\":\"79#类的表达式\",\"601\":\"79#类的组成\",\"602\":\"79#构造函数\",\"603\":\"79#实例对象\",\"604\":\"79#访问器属性\",\"605\":\"79#属性表达式\",\"606\":\"79#生成器方法\",\"607\":\"79#运行环境的指向\",\"608\":\"79@0\",\"609\":\"79@1\",\"610\":\"80\",\"611\":\"80#私有方法\",\"612\":\"80#命名区别\",\"613\":\"80#symbol-值命名\",\"614\":\"80#引用外部方法\",\"615\":\"80#私有属性\",\"616\":\"80@0\",\"617\":\"80@1\",\"618\":\"81\",\"619\":\"81#使用方法\",\"620\":\"81#访问父类\",\"621\":\"81#super\",\"622\":\"81#普通方法\",\"623\":\"81#静态方法\",\"624\":\"81#类的原型对象\",\"625\":\"81#内置对象的继承\",\"626\":\"81@0\",\"627\":\"81@1\",\"628\":\"82\",\"629\":\"82#静态方法\",\"630\":\"82#动态作用域\",\"631\":\"82#子类继承\",\"632\":\"82#静态属性\",\"633\":\"82@0\",\"634\":\"82@1\",\"635\":\"83\",\"636\":\"83#传递参数\",\"637\":\"83#缺陷\",\"638\":\"83@0\",\"639\":\"83@1\",\"640\":\"84\",\"641\":\"84#模式缺陷\",\"642\":\"84@0\",\"643\":\"84@1\",\"644\":\"85\",\"645\":\"85#显式原型\",\"646\":\"85#隐式原型\",\"647\":\"85#构造函数\",\"648\":\"85#原型对象\",\"649\":\"85#原型对象的指向\",\"650\":\"85#字面量方式\",\"651\":\"85#构造器方式\",\"652\":\"85#object-create-方式\",\"653\":\"85#原型对象与实例\",\"654\":\"85@0\",\"655\":\"85@1\",\"656\":\"86\",\"657\":\"86@0\",\"658\":\"86@1\",\"659\":\"87\",\"660\":\"87@0\",\"661\":\"87@1\",\"662\":\"88\",\"663\":\"88#缺陷\",\"664\":\"88#组合继承优化\",\"665\":\"88@0\",\"666\":\"88@1\",\"667\":\"89\",\"668\":\"89#语法\",\"669\":\"89#方法说明\",\"670\":\"89#代码示例\",\"671\":\"89#基本用法\",\"672\":\"89#排除偶数保留奇数\",\"673\":\"89#清除数组空字符\",\"674\":\"89@0\",\"675\":\"89@1\",\"676\":\"90\",\"677\":\"90#语法\",\"678\":\"90#方法说明\",\"679\":\"90#代码示例\",\"680\":\"90@0\",\"681\":\"90@1\",\"682\":\"91\",\"683\":\"91#语法\",\"684\":\"91#代码示例\",\"685\":\"91@0\",\"686\":\"91@1\",\"687\":\"92\",\"688\":\"92#语法\",\"689\":\"92#代码示例\",\"690\":\"92@0\",\"691\":\"92@1\",\"692\":\"93\",\"693\":\"93#语法\",\"694\":\"93#示例\",\"695\":\"93#对象属性劫持\",\"696\":\"93@0\",\"697\":\"93@1\",\"698\":\"94\",\"699\":\"94#语法\",\"700\":\"94#方法说明\",\"701\":\"94#代码示例\",\"702\":\"94@0\",\"703\":\"94@1\",\"704\":\"95\",\"705\":\"95#语法\",\"706\":\"95#方法说明\",\"707\":\"95@0\",\"708\":\"95@1\",\"709\":\"96\",\"710\":\"96#语法\",\"711\":\"96#方法说明\",\"712\":\"96#代码示例\",\"713\":\"96#基本用法\",\"714\":\"96#转换-map-为-object\",\"715\":\"96#转换-array-为-object\",\"716\":\"96#其他转换\",\"717\":\"96@0\",\"718\":\"96@1\",\"719\":\"97\",\"720\":\"97#语法\",\"721\":\"97#代码示例\",\"722\":\"97@0\",\"723\":\"97@1\",\"724\":\"98\",\"725\":\"98#语法\",\"726\":\"98#代码示例\",\"727\":\"98@0\",\"728\":\"98@1\",\"729\":\"99\",\"730\":\"99#语法\",\"731\":\"99#方法说明\",\"732\":\"99#代码示例\",\"733\":\"99#数组\",\"734\":\"99#类数组\",\"735\":\"99#不可枚举属性\",\"736\":\"99#仅获取自有-property\",\"737\":\"99#只获取不可枚举-property\",\"738\":\"99@0\",\"739\":\"99@1\",\"740\":\"100\",\"741\":\"100#语法\",\"742\":\"100#代码示例\",\"743\":\"100@0\",\"744\":\"100@1\",\"745\":\"101\",\"746\":\"101#语法\",\"747\":\"101#代码示例\",\"748\":\"101#基本示例\",\"749\":\"101#标准内置对象\",\"750\":\"101@0\",\"751\":\"101@1\",\"752\":\"102\",\"753\":\"102#语法\",\"754\":\"102#方法说明\",\"755\":\"102#代码示例\",\"756\":\"102#基本用法\",\"757\":\"102#自有属性与继承属性\",\"758\":\"102@0\",\"759\":\"102@1\",\"760\":\"103\",\"761\":\"103#语法\",\"762\":\"103#方法说明\",\"763\":\"103#代码示例\",\"764\":\"103@0\",\"765\":\"103@1\",\"766\":\"104\",\"767\":\"104#语法\",\"768\":\"104#方法说明\",\"769\":\"104#代码示例\",\"770\":\"104@0\",\"771\":\"104@1\",\"772\":\"105\",\"773\":\"105#语法\",\"774\":\"105#方法说明\",\"775\":\"105#代码\",\"776\":\"105#基本用法\",\"777\":\"105@0\",\"778\":\"105@1\",\"779\":\"106\",\"780\":\"106#语法\",\"781\":\"106#代码示例\",\"782\":\"106@0\",\"783\":\"106@1\",\"784\":\"107\",\"785\":\"107#语法\",\"786\":\"107#方法说明\",\"787\":\"107#代码示例\",\"788\":\"107@0\",\"789\":\"107@1\",\"790\":\"108\",\"791\":\"108#语法\",\"792\":\"108#方法说明\",\"793\":\"108#代码示例\",\"794\":\"108#数组\",\"795\":\"108#类数组\",\"796\":\"108#不可枚举属性\",\"797\":\"108@0\",\"798\":\"108@1\",\"799\":\"109\",\"800\":\"109#语法\",\"801\":\"109#构造函数\",\"802\":\"109#属性\",\"803\":\"109#方法\",\"804\":\"109#原型对象\",\"805\":\"109#属性-1\",\"806\":\"109#方法-1\",\"807\":\"109#示例\",\"808\":\"109@0\",\"809\":\"109@1\",\"810\":\"110\",\"811\":\"110#语法\",\"812\":\"110#方法说明\",\"813\":\"110#代码示例\",\"814\":\"110@0\",\"815\":\"110@1\",\"816\":\"111\",\"817\":\"111#语法\",\"818\":\"111#代码示例\",\"819\":\"111#基本用法\",\"820\":\"111#自有属性与继承属性\",\"821\":\"111@0\",\"822\":\"111@1\",\"823\":\"112\",\"824\":\"112#语法\",\"825\":\"112#代码示例\",\"826\":\"112@0\",\"827\":\"112@1\",\"828\":\"113\",\"829\":\"113#语法\",\"830\":\"113#代码示例\",\"831\":\"113@0\",\"832\":\"113@1\",\"833\":\"114\",\"834\":\"114#语法\",\"835\":\"114#方法说明\",\"836\":\"114#代码示例\",\"837\":\"114#基本用法\",\"838\":\"114#检测对象类型\",\"839\":\"114@0\",\"840\":\"114@1\",\"841\":\"115\",\"842\":\"115#语法\",\"843\":\"115#代码示例\",\"844\":\"115@0\",\"845\":\"115@1\",\"846\":\"116\",\"847\":\"116#语法\",\"848\":\"116#说明\",\"849\":\"116#示例\",\"850\":\"116@0\",\"851\":\"116@1\",\"852\":\"117\",\"853\":\"117#说明\",\"854\":\"117#示例\",\"855\":\"117@0\",\"856\":\"117@1\",\"857\":\"118\",\"858\":\"118#说明\",\"859\":\"118#静默逃逸的-nan-值\",\"860\":\"118#示例\",\"861\":\"118#值校验\",\"862\":\"118@0\",\"863\":\"118@1\",\"864\":\"119\",\"865\":\"119#说明\",\"866\":\"119@0\",\"867\":\"119@1\",\"868\":\"120\",\"869\":\"120#语法\",\"870\":\"120#示例\",\"871\":\"120@0\",\"872\":\"120@1\",\"873\":\"121\",\"874\":\"121#语法\",\"875\":\"121#示例\",\"876\":\"121@0\",\"877\":\"121@1\",\"878\":\"122\",\"879\":\"122#语法\",\"880\":\"122#说明\",\"881\":\"122#示例\",\"882\":\"122@0\",\"883\":\"122@1\",\"884\":\"123\",\"885\":\"123#语法\",\"886\":\"123#说明\",\"887\":\"123#示例\",\"888\":\"123@0\",\"889\":\"123@1\",\"890\":\"124\",\"891\":\"124#语法\",\"892\":\"124#说明\",\"893\":\"124#永远不要使用-eval\",\"894\":\"124#示例\",\"895\":\"124@0\",\"896\":\"124@1\",\"897\":\"125\",\"898\":\"125#语法\",\"899\":\"125#示例\",\"900\":\"125@0\",\"901\":\"125@1\",\"902\":\"126\",\"903\":\"126#语法\",\"904\":\"126#说明\",\"905\":\"126#示例\",\"906\":\"126@0\",\"907\":\"126@1\",\"908\":\"127\",\"909\":\"127#语法\",\"910\":\"127#示例\",\"911\":\"127@0\",\"912\":\"127@1\",\"913\":\"128\",\"914\":\"128#示例\",\"915\":\"128@0\",\"916\":\"128@1\",\"917\":\"129\",\"918\":\"129#原始数据类型\",\"919\":\"129#空值\",\"920\":\"129#未定义值\",\"921\":\"129#布尔值\",\"922\":\"129#数字\",\"923\":\"129#进制数\",\"924\":\"129#浮点数\",\"925\":\"129#数字的范围\",\"926\":\"129#nan\",\"927\":\"129#字符串\",\"928\":\"129#符号\",\"929\":\"129#大整数\",\"930\":\"129#引用数据类型\",\"931\":\"129@0\",\"932\":\"129@1\",\"933\":\"130\",\"934\":\"130#typeof\",\"935\":\"130#instanceof\",\"936\":\"130#object-prototype-tostring\",\"937\":\"130#constructor\",\"938\":\"130#数组检测\",\"939\":\"130@0\",\"940\":\"130@1\",\"941\":\"131\",\"942\":\"131#基本规则\",\"943\":\"131#tostring\",\"944\":\"131#tonumber\",\"945\":\"131#toboolean\",\"946\":\"131#toprimitive\",\"947\":\"131#显式类型转换\",\"948\":\"131#隐式类型转换\",\"949\":\"131#运行环境\",\"950\":\"131#运算符\",\"951\":\"131#加号运算符\",\"952\":\"131#相等运算符\",\"953\":\"131#关系运算符\",\"954\":\"131#javascript-原始类型转换表\",\"955\":\"131#经典试题\",\"956\":\"131@0\",\"957\":\"131@1\",\"958\":\"132\",\"959\":\"132#语法\",\"960\":\"132#参数\",\"961\":\"132#示例\",\"962\":\"132#代码示例\",\"963\":\"132#switch-语句\",\"964\":\"132@0\",\"965\":\"132@1\",\"966\":\"133\",\"967\":\"133#语法\",\"968\":\"133#参数\",\"969\":\"133#描述\",\"970\":\"133#示例\",\"971\":\"133#代码示例\",\"972\":\"133@0\",\"973\":\"133@1\",\"974\":\"134\",\"975\":\"134#语法\",\"976\":\"134#描述\",\"977\":\"134#示例\",\"978\":\"134@0\",\"979\":\"134@1\",\"980\":\"135\",\"981\":\"135#语法\",\"982\":\"135#参数\",\"983\":\"135#描述\",\"984\":\"135#示例\",\"985\":\"135#代码示例\",\"986\":\"135#提取实例自身属性\",\"987\":\"135@0\",\"988\":\"135@1\",\"989\":\"136\",\"990\":\"136#语法\",\"991\":\"136#参数\",\"992\":\"136#示例\",\"993\":\"136#迭代-array\",\"994\":\"136#迭代-string\",\"995\":\"136#迭代-typedarray\",\"996\":\"136#迭代-map\",\"997\":\"136#迭代-set\",\"998\":\"136#迭代-arguments-对象\",\"999\":\"136#迭代-dom-集合\",\"1000\":\"136#关闭迭代器\",\"1001\":\"136#迭代生成器\",\"1002\":\"136#不要重用生成器\",\"1003\":\"136#迭代其他可迭代对象\",\"1004\":\"136#for-of-与-for-in-的区别\",\"1005\":\"136@0\",\"1006\":\"136@1\",\"1007\":\"137\",\"1008\":\"137#语法\",\"1009\":\"137#参数\",\"1010\":\"137#最佳实践\",\"1011\":\"137#从尾部向前循环\",\"1012\":\"137#位数的整倍循环\",\"1013\":\"137#涉及多个变量的循环\",\"1014\":\"137#可忽略的表达式\",\"1015\":\"137@0\",\"1016\":\"137@1\",\"1017\":\"138\",\"1018\":\"138#单层条件判断\",\"1019\":\"138#多层条件判断\",\"1020\":\"138#示例\",\"1021\":\"138@0\",\"1022\":\"138@1\",\"1023\":\"139\",\"1024\":\"139#语法\",\"1025\":\"139#描述\",\"1026\":\"139#示例\",\"1027\":\"139#标注示例\",\"1028\":\"139@0\",\"1029\":\"139@1\",\"1030\":\"140\",\"1031\":\"140#语法\",\"1032\":\"140#说明\",\"1033\":\"140#返回语句特点\",\"1034\":\"140#函数进程\",\"1035\":\"140#返回值\",\"1036\":\"140#总结\",\"1037\":\"140@0\",\"1038\":\"140@1\",\"1039\":\"141\",\"1040\":\"141#语法\",\"1041\":\"141#关键词\",\"1042\":\"141#示例\",\"1043\":\"141@0\",\"1044\":\"141@1\",\"1045\":\"142\",\"1046\":\"142#语法\",\"1047\":\"142#示例\",\"1048\":\"142#抛出一个对象\",\"1049\":\"142@0\",\"1050\":\"142@1\",\"1051\":\"143\",\"1052\":\"143#catch\",\"1053\":\"143#finally\",\"1054\":\"143#嵌套捕获\",\"1055\":\"143#异常标识符\",\"1056\":\"143@0\",\"1057\":\"143@1\",\"1058\":\"144\",\"1059\":\"144#语法\",\"1060\":\"144#示例\",\"1061\":\"144@0\",\"1062\":\"144@1\",\"1063\":\"145\",\"1064\":\"145#声明\",\"1065\":\"145#var\",\"1066\":\"145#let\",\"1067\":\"145#暂存性死区\",\"1068\":\"145#const\",\"1069\":\"145#变量作用域\",\"1070\":\"145#变量的数据类型\",\"1071\":\"145@0\",\"1072\":\"145@1\",\"1073\":\"146\",\"1074\":\"146#块级作用域\",\"1075\":\"146#var\",\"1076\":\"146#let-和-const\",\"1077\":\"146#function\",\"1078\":\"146@0\",\"1079\":\"146@1\",\"1080\":\"147\",\"1081\":\"147@0\",\"1082\":\"147@1\",\"1083\":\"148\",\"1084\":\"148@0\",\"1085\":\"148@1\",\"1086\":\"149\",\"1087\":\"149#语法\",\"1088\":\"149@0\",\"1089\":\"149@1\",\"1090\":\"150\",\"1091\":\"150#逗号分隔\",\"1092\":\"150#嵌套数组\",\"1093\":\"150#可省略元素\",\"1094\":\"150#索引赋值\",\"1095\":\"150@0\",\"1096\":\"150@1\",\"1097\":\"151\",\"1098\":\"151#语法\",\"1099\":\"151#参数\",\"1100\":\"151#返回值\",\"1101\":\"151#说明\",\"1102\":\"151#示例\",\"1103\":\"151@0\",\"1104\":\"151@1\",\"1105\":\"152\",\"1106\":\"152#语法\",\"1107\":\"152#参数\",\"1108\":\"152#示例\",\"1109\":\"152#代码示例\",\"1110\":\"152#值为-undefined-的对象属性\",\"1111\":\"152#继承属性\",\"1112\":\"152@0\",\"1113\":\"152@1\",\"1114\":\"153\",\"1115\":\"153#检测类型\",\"1116\":\"153#模拟实现\",\"1117\":\"153@0\",\"1118\":\"153@1\",\"1119\":\"154\",\"1120\":\"154#语法\",\"1121\":\"154#参数\",\"1122\":\"154#返回值\",\"1123\":\"154#示例\",\"1124\":\"154#number\",\"1125\":\"154#string\",\"1126\":\"154#boolean\",\"1127\":\"154#symbol\",\"1128\":\"154#bigint\",\"1129\":\"154#undefined\",\"1130\":\"154#object\",\"1131\":\"154#function\",\"1132\":\"154#特殊的-null\",\"1133\":\"154@0\",\"1134\":\"154@1\",\"1135\":\"155\",\"1136\":\"155#作用\",\"1137\":\"155#替代-undefined\",\"1138\":\"155#客户端-url\",\"1139\":\"155#阻止默认事件\",\"1140\":\"155@0\",\"1141\":\"155@1\",\"1142\":\"156\",\"1143\":\"156#位运算符\",\"1144\":\"156#按位与\",\"1145\":\"156#按位或\",\"1146\":\"156#按位异或\",\"1147\":\"156#按位非\",\"1148\":\"156#左移\",\"1149\":\"156#右移\",\"1150\":\"156#无符号右移\",\"1151\":\"156#总结\",\"1152\":\"156#最佳实践\",\"1153\":\"156#取整\",\"1154\":\"156#值交换\",\"1155\":\"156#十进制转二进制\",\"1156\":\"156#颜色值转换\",\"1157\":\"156#判断正负\",\"1158\":\"156#判断符号是否相同\",\"1159\":\"156#判断奇偶\",\"1160\":\"156#判断索引是否存在\",\"1161\":\"156#标志位判断\",\"1162\":\"156@0\",\"1163\":\"156@1\",\"1164\":\"157\",\"1165\":\"157#语法\",\"1166\":\"157#示例\",\"1167\":\"157@0\",\"1168\":\"157@1\",\"1169\":\"158\",\"1170\":\"158@0\",\"1171\":\"158@1\",\"1172\":\"159\",\"1173\":\"159#语法\",\"1174\":\"159#函数调用\",\"1175\":\"159#数组字面量或字符串\",\"1176\":\"159#对象字面量\",\"1177\":\"159#应用\",\"1178\":\"159#函数中的应用\",\"1179\":\"159#函数的返回值\",\"1180\":\"159#数组中的应用\",\"1181\":\"159#数组的合并\",\"1182\":\"159#数组的拷贝\",\"1183\":\"159#与解构赋值结合\",\"1184\":\"159#字符串中的应用\",\"1185\":\"159#实现-iterator-接口的对象\",\"1186\":\"159#map-和-set-结构、generator-函数\",\"1187\":\"159@0\",\"1188\":\"159@1\",\"1189\":\"160\",\"1190\":\"160#前自增\",\"1191\":\"160#前自减\",\"1192\":\"160#后自增\",\"1193\":\"160#后自减\",\"1194\":\"160#异同对比\",\"1195\":\"160@0\",\"1196\":\"160@1\",\"1197\":\"161\",\"1198\":\"161@0\",\"1199\":\"161@1\",\"1200\":\"162\",\"1201\":\"162#关系运算符\",\"1202\":\"162#等值运算符\",\"1203\":\"162#抽象相等比较算法\",\"1204\":\"162#引用数据类型间比较\",\"1205\":\"162@0\",\"1206\":\"162@1\",\"1207\":\"163\",\"1208\":\"163#实践示例\",\"1209\":\"163#实现指数运算符\",\"1210\":\"163@0\",\"1211\":\"163@1\",\"1212\":\"164\",\"1213\":\"164#数组的解构赋值\",\"1214\":\"164#基本用法\",\"1215\":\"164#解构不成功\",\"1216\":\"164#不完全解构\",\"1217\":\"164#默认值\",\"1218\":\"164#对象的解构赋值\",\"1219\":\"164#字符串的解构赋值\",\"1220\":\"164#数值和布尔值的解构赋值\",\"1221\":\"164#函数参数的解构赋值\",\"1222\":\"164#圆括号问题\",\"1223\":\"164#不能使用圆括号的情况\",\"1224\":\"164#变量声明语句\",\"1225\":\"164#函数参数\",\"1226\":\"164#赋值语句的模式\",\"1227\":\"164#可以使用圆括号的情况\",\"1228\":\"164#用途\",\"1229\":\"164#交换变量的值\",\"1230\":\"164#从函数返回多个值\",\"1231\":\"164#函数参数的定义\",\"1232\":\"164#提取-json-数据\",\"1233\":\"164#函数参数的默认值\",\"1234\":\"164#遍历-map-结构\",\"1235\":\"164#加入模块的指定方法\",\"1236\":\"164@0\",\"1237\":\"164@1\",\"1238\":\"165\",\"1239\":\"165@0\",\"1240\":\"165@1\",\"1241\":\"166\",\"1242\":\"166#结合性\",\"1243\":\"166#汇总表\",\"1244\":\"166@0\",\"1245\":\"166@1\",\"1246\":\"167\",\"1247\":\"167#用法\",\"1248\":\"167#用于声明多个变量\",\"1249\":\"167#用于赋值\",\"1250\":\"167@0\",\"1251\":\"167@1\",\"1252\":\"168\",\"1253\":\"168#逻辑与\",\"1254\":\"168#逻辑或\",\"1255\":\"168#逻辑非\",\"1256\":\"168#逻辑空\",\"1257\":\"168@0\",\"1258\":\"168@1\",\"1259\":\"169\",\"1260\":\"169#栈数据结构\",\"1261\":\"169#堆数据结构\",\"1262\":\"169#队列数据结构\",\"1263\":\"169#变量对象与基础数据类型\",\"1264\":\"169#引用数据类型与堆内存\",\"1265\":\"169#数据拷贝\",\"1266\":\"169#基本数据类型\",\"1267\":\"169#引用数据类型\",\"1268\":\"169#总结\",\"1269\":\"169@0\",\"1270\":\"169@1\",\"1271\":\"170\",\"1272\":\"170#内存分配\",\"1273\":\"170#值的初始化\",\"1274\":\"170#函数调用分配\",\"1275\":\"170#存使用\",\"1276\":\"170#内存回收\",\"1277\":\"170@0\",\"1278\":\"170@1\",\"1279\":\"171\",\"1280\":\"171#原理\",\"1281\":\"171#引用计数法\",\"1282\":\"171#标记清除法\",\"1283\":\"171#堆栈溢出\",\"1284\":\"171#内存泄漏\",\"1285\":\"171#全局变量\",\"1286\":\"171#分离的-dom-引用\",\"1287\":\"171#闭包\",\"1288\":\"171#定时器\",\"1289\":\"171#控制台打印\",\"1290\":\"171@0\",\"1291\":\"171@1\",\"1292\":\"172\",\"1293\":\"172#length-属性\",\"1294\":\"172#name-属性\",\"1295\":\"172#es6-列入标准\",\"1296\":\"172#构造函数\",\"1297\":\"172@0\",\"1298\":\"172@1\",\"1299\":\"173\",\"1300\":\"173#apply\",\"1301\":\"173#语法\",\"1302\":\"173#参数\",\"1303\":\"173#示例\",\"1304\":\"173#call\",\"1305\":\"173#语法-1\",\"1306\":\"173#参数-1\",\"1307\":\"173#示例-1\",\"1308\":\"173#bind\",\"1309\":\"173#语法-2\",\"1310\":\"173#参数-2\",\"1311\":\"173#描述\",\"1312\":\"173#示例-2\",\"1313\":\"173@0\",\"1314\":\"173@1\",\"1315\":\"174\",\"1316\":\"174#取值函数\",\"1317\":\"174#语法\",\"1318\":\"174#描述\",\"1319\":\"174#示例\",\"1320\":\"174#存值函数\",\"1321\":\"174#语法-1\",\"1322\":\"174#描述-1\",\"1323\":\"174#示例-1\",\"1324\":\"174@0\",\"1325\":\"174@1\",\"1326\":\"175\",\"1327\":\"175#函数声明语句\",\"1328\":\"175#语法\",\"1329\":\"175#特点\",\"1330\":\"175#函数表达式\",\"1331\":\"175#语法-1\",\"1332\":\"175#匿名函数\",\"1333\":\"175#具名函数\",\"1334\":\"175#函数名称\",\"1335\":\"175#函数声明优先\",\"1336\":\"175@0\",\"1337\":\"175@1\",\"1338\":\"176\",\"1339\":\"176#基本用法\",\"1340\":\"176#异步函数的声明\",\"1341\":\"176#异步函数的语句\",\"1342\":\"176#异步语句返回值\",\"1343\":\"176#语法\",\"1344\":\"176#返回值类型\",\"1345\":\"176#返回值状态变化\",\"1346\":\"176#异步语句返回值-1\",\"1347\":\"176#异常处理\",\"1348\":\"176#捕捉异常\",\"1349\":\"176#操作中断\",\"1350\":\"176#实现原理\",\"1351\":\"176#最佳实践\",\"1352\":\"176#异步阻塞\",\"1353\":\"176#异步非阻塞\",\"1354\":\"176#异步并发\",\"1355\":\"176#未知数量的异步并发\",\"1356\":\"176#不等待结果的异步循环\",\"1357\":\"176#异步串行遍历\",\"1358\":\"176#异步并行遍历\",\"1359\":\"176@0\",\"1360\":\"176@1\",\"1361\":\"177\",\"1362\":\"177#赋值式写法\",\"1363\":\"177#箭头函数参数\",\"1364\":\"177#单个参数\",\"1365\":\"177#剩余参数\",\"1366\":\"177#默认参数\",\"1367\":\"177#解构赋值\",\"1368\":\"177#函数体\",\"1369\":\"177#单个表达式\",\"1370\":\"177#返回缺省值\",\"1371\":\"177#直接返回对象\",\"1372\":\"177#应用场景\",\"1373\":\"177#回调函数\",\"1374\":\"177#注意事项\",\"1375\":\"177#箭头函数中的-this\",\"1376\":\"177#嵌套的箭头函数\",\"1377\":\"177@0\",\"1378\":\"177@1\",\"1379\":\"178\",\"1380\":\"178#arguments\",\"1381\":\"178#同名形参\",\"1382\":\"178#参数数量\",\"1383\":\"178#同步\",\"1384\":\"178#内部属性\",\"1385\":\"178#callee\",\"1386\":\"178#caller\",\"1387\":\"178#参数传递\",\"1388\":\"178#基本类型值\",\"1389\":\"178#引用类型值\",\"1390\":\"178#函数重载\",\"1391\":\"178@0\",\"1392\":\"178@1\",\"1393\":\"179\",\"1394\":\"179#与参数对象的对比\",\"1395\":\"179#注意事项\",\"1396\":\"179@0\",\"1397\":\"179@1\",\"1398\":\"180\",\"1399\":\"180#基本用法\",\"1400\":\"180#默认声明\",\"1401\":\"180#参数命名冲突\",\"1402\":\"180#惰性求值\",\"1403\":\"180#结合解构赋值\",\"1404\":\"180#结合案例分析\",\"1405\":\"180#参数默认值的位置\",\"1406\":\"180#函数的长度属性\",\"1407\":\"180#参数作用域\",\"1408\":\"180#抛弃参数对象\",\"1409\":\"180@0\",\"1410\":\"180@1\",\"1411\":\"181\",\"1412\":\"181#实际应用\",\"1413\":\"181#实现偏函数\",\"1414\":\"181@0\",\"1415\":\"181@1\",\"1416\":\"182\",\"1417\":\"182#代码实现\",\"1418\":\"182#代码示例\",\"1419\":\"182#反柯里化\",\"1420\":\"182@0\",\"1421\":\"182@1\",\"1422\":\"183\",\"1423\":\"183#代码实现\",\"1424\":\"183#回调函数实现\",\"1425\":\"183#promise-实现\",\"1426\":\"183#generator-实现\",\"1427\":\"183#async-await-实现\",\"1428\":\"183#使用-node-sleep\",\"1429\":\"183@0\",\"1430\":\"183@1\",\"1431\":\"184\",\"1432\":\"184#目的\",\"1433\":\"184#代码实现\",\"1434\":\"184#应用实践\",\"1435\":\"184#原生实现应用\",\"1436\":\"184#react-应用\",\"1437\":\"184#应用场景\",\"1438\":\"184#页面滚动事件\",\"1439\":\"184@0\",\"1440\":\"184@1\",\"1441\":\"185\",\"1442\":\"185@0\",\"1443\":\"185@1\",\"1444\":\"186\",\"1445\":\"186#实现原理\",\"1446\":\"186#代码实现\",\"1447\":\"186#应用场景\",\"1448\":\"186#应用实践\",\"1449\":\"186#注册实时验证\",\"1450\":\"186@0\",\"1451\":\"186@1\",\"1452\":\"187\",\"1453\":\"187#函数特点\",\"1454\":\"187#不会立即执行\",\"1455\":\"187#是个闭包\",\"1456\":\"187#执行前类型判断\",\"1457\":\"187#this-的使用\",\"1458\":\"187#允许传递多个回调函数\",\"1459\":\"187#函数嵌套\",\"1460\":\"187#优点和使用场景\",\"1461\":\"187#优点\",\"1462\":\"187#使用场景\",\"1463\":\"187@0\",\"1464\":\"187@1\",\"1465\":\"188\",\"1466\":\"188#解决问题\",\"1467\":\"188#函数重写\",\"1468\":\"188#惰性载入\",\"1469\":\"188#在函数被调用时处理函数\",\"1470\":\"188#声明函数时指定适当的函数\",\"1471\":\"188@0\",\"1472\":\"188@1\",\"1473\":\"189\",\"1474\":\"189#特点\",\"1475\":\"189#缺点\",\"1476\":\"189#作用\",\"1477\":\"189#与普通函数对比\",\"1478\":\"189@0\",\"1479\":\"189@1\",\"1480\":\"190\",\"1481\":\"190#es5-中近类的结构\",\"1482\":\"190#es6-class-类\",\"1483\":\"190#类声明\",\"1484\":\"190#表现形式\",\"1485\":\"190#类和普通函数的共性\",\"1486\":\"190#函数存取器\",\"1487\":\"190#可计算成员名称\",\"1488\":\"190#生成器方法\",\"1489\":\"190#静态成员\",\"1490\":\"190#继承与派生类\",\"1491\":\"190#类方法遮蔽\",\"1492\":\"190#静态成员继承\",\"1493\":\"190#派生自表达式的类\",\"1494\":\"190@0\",\"1495\":\"190@1\",\"1496\":\"191\",\"1497\":\"191#实现方法\",\"1498\":\"191@0\",\"1499\":\"191@1\",\"1500\":\"192\",\"1501\":\"192#作为参数传递\",\"1502\":\"192#回调函数\",\"1503\":\"192#数组排序\",\"1504\":\"192#作为返回值输出\",\"1505\":\"192#aop-面向切面编程\",\"1506\":\"192#其他应用\",\"1507\":\"192@0\",\"1508\":\"192@1\",\"1509\":\"193\",\"1510\":\"193#调用母体\",\"1511\":\"193#重写现象\",\"1512\":\"193@0\",\"1513\":\"193@1\",\"1514\":\"194\",\"1515\":\"194#函数作为方法调用\",\"1516\":\"194#对象的公共方法提取\",\"1517\":\"194#隐式实参\",\"1518\":\"194#函数方法中的-this\",\"1519\":\"194@0\",\"1520\":\"194@1\",\"1521\":\"195\",\"1522\":\"195#关键字-new\",\"1523\":\"195#实参表达式\",\"1524\":\"195#省略圆括号\",\"1525\":\"195#调用上下文\",\"1526\":\"195#构造函数的返回语句\",\"1527\":\"195@0\",\"1528\":\"195@1\",\"1529\":\"196\",\"1530\":\"196@0\",\"1531\":\"196@1\",\"1532\":\"197\",\"1533\":\"197#浏览器环境\",\"1534\":\"197#node-环境\",\"1535\":\"197@0\",\"1536\":\"197@1\",\"1537\":\"198\",\"1538\":\"198#事件排队\",\"1539\":\"198#先进先出原则\",\"1540\":\"198#间歇调用定时器调用被废弃\",\"1541\":\"198#定时器无法保证准时执行回调函数\",\"1542\":\"198#间歇调用定时器的连续执行\",\"1543\":\"198#超时调用定时器按固定间隔触发周期性定时器\",\"1544\":\"198@0\",\"1545\":\"198@1\",\"1546\":\"199\",\"1547\":\"199#名词解释\",\"1548\":\"199#运行环境\",\"1549\":\"199#浏览器线程\",\"1550\":\"199#内核引擎\",\"1551\":\"199#单线程\",\"1552\":\"199#任务队列\",\"1553\":\"199@0\",\"1554\":\"199@1\",\"1555\":\"200\",\"1556\":\"200#可执行代码\",\"1557\":\"200#栈堆实现分析\",\"1558\":\"200@0\",\"1559\":\"200@1\",\"1560\":\"201\",\"1561\":\"201#全局执行上下文\",\"1562\":\"201#函数执行上下文\",\"1563\":\"201#执行过程\",\"1564\":\"201#进入执行上下文阶段的变量对象\",\"1565\":\"201#代码执行阶段的变量对象\",\"1566\":\"201#变量对象和活动对象\",\"1567\":\"201@0\",\"1568\":\"201@1\",\"1569\":\"202\",\"1570\":\"202#函数的创建\",\"1571\":\"202#函数的激活\",\"1572\":\"202#示例分析\",\"1573\":\"202@0\",\"1574\":\"202@1\",\"1575\":\"203\",\"1576\":\"203#调用位置\",\"1577\":\"203#绑定规则\",\"1578\":\"203#默认绑定\",\"1579\":\"203#隐式绑定\",\"1580\":\"203#显式绑定\",\"1581\":\"203#构造调用绑定\",\"1582\":\"203#优先级\",\"1583\":\"203#隐式绑定和显式绑定\",\"1584\":\"203#构造调用绑定和隐式绑定\",\"1585\":\"203#绑定例外\",\"1586\":\"203#忽略指向\",\"1587\":\"203#软绑定\",\"1588\":\"203#指向变更\",\"1589\":\"203#箭头函数\",\"1590\":\"203#应用场景总结\",\"1591\":\"203@0\",\"1592\":\"203@1\",\"1593\":\"204\",\"1594\":\"204#适用场景\",\"1595\":\"204#按需加载\",\"1596\":\"204#条件加载\",\"1597\":\"204#动态的模块路径\",\"1598\":\"204#注意事项\",\"1599\":\"204#解构赋值输出模块导入\",\"1600\":\"204#默认模块导入\",\"1601\":\"204#命名模块导入\",\"1602\":\"204#并发加载多个模块\",\"1603\":\"204#异步函数的模块导入\",\"1604\":\"204@0\",\"1605\":\"204@1\",\"1606\":\"205\",\"1607\":\"205#模块化趋势\",\"1608\":\"205#痛点\",\"1609\":\"205#优势\",\"1610\":\"205#模块化进化史\",\"1611\":\"205#全局模式\",\"1612\":\"205#单例模式\",\"1613\":\"205#iife-模式\",\"1614\":\"205#iife-模式增强\",\"1615\":\"205#模块化方案\",\"1616\":\"205#commonjs\",\"1617\":\"205#amd\",\"1618\":\"205#cmd\",\"1619\":\"205#es6-module\",\"1620\":\"205#严格模式\",\"1621\":\"205#模块化与组合化\",\"1622\":\"205@0\",\"1623\":\"205@1\",\"1624\":\"206\",\"1625\":\"206#导入方式\",\"1626\":\"206#命名导入\",\"1627\":\"206#命名空间导入\",\"1628\":\"206#默认导入\",\"1629\":\"206#空的导入\",\"1630\":\"206#特性规范\",\"1631\":\"206#只读性\",\"1632\":\"206#输入路径\",\"1633\":\"206#模块提升\",\"1634\":\"206#静态执行\",\"1635\":\"206#重复加载\",\"1636\":\"206#模块化隔离\",\"1637\":\"206@0\",\"1638\":\"206@1\",\"1639\":\"207\",\"1640\":\"207#模块整体转发\",\"1641\":\"207#模块部分接口转发\",\"1642\":\"207#模块部分重命名转发\",\"1643\":\"207#默认模块转发\",\"1644\":\"207#命名模块改默认模块\",\"1645\":\"207#默认模块改命名模块\",\"1646\":\"207#无对应写法场景\",\"1647\":\"207@0\",\"1648\":\"207@1\",\"1649\":\"208\",\"1650\":\"208#导出方式\",\"1651\":\"208#命名导出\",\"1652\":\"208#默认导出\",\"1653\":\"208#特性规范\",\"1654\":\"208#对应关系\",\"1655\":\"208#模块顶层输出\",\"1656\":\"208@0\",\"1657\":\"208@1\",\"1658\":\"209\",\"1659\":\"209@0\",\"1660\":\"209@1\",\"1661\":\"210\",\"1662\":\"210@0\",\"1663\":\"210@1\",\"1664\":\"211\",\"1665\":\"211#编译原理\",\"1666\":\"211#分词和词法分析\",\"1667\":\"211#解析和语法分析\",\"1668\":\"211#代码生成\",\"1669\":\"211#编译过程\",\"1670\":\"211#编译过程详解\",\"1671\":\"211@0\",\"1672\":\"211@1\",\"1673\":\"212\",\"1674\":\"212#词法作用域-静态作用域\",\"1675\":\"212#查找\",\"1676\":\"212#遮蔽\",\"1677\":\"212#动态作用域\",\"1678\":\"212@0\",\"1679\":\"212@1\",\"1680\":\"213\",\"1681\":\"213#隐藏内部实现\",\"1682\":\"213#规避命名冲突\",\"1683\":\"213#全局命名空间\",\"1684\":\"213#模块管理\",\"1685\":\"213#匿名和具名函数表达式\",\"1686\":\"213#立即执行函数表达式-iife\",\"1687\":\"213@0\",\"1688\":\"213@1\",\"1689\":\"214\",\"1690\":\"214#声明关键字\",\"1691\":\"214#var\",\"1692\":\"214#let\",\"1693\":\"214#const\",\"1694\":\"214#暂时性死区\",\"1695\":\"214#显式块级作用域\",\"1696\":\"214@0\",\"1697\":\"214@1\",\"1698\":\"215\",\"1699\":\"215#变量声明提升\",\"1700\":\"215#函数声明提升\",\"1701\":\"215#函数覆盖\",\"1702\":\"215#重复声明无效\",\"1703\":\"215#函数声明优先\",\"1704\":\"215#函数声明覆盖\",\"1705\":\"215@0\",\"1706\":\"215@1\",\"1707\":\"216\",\"1708\":\"216#定义\",\"1709\":\"216#执行过程分析\",\"1710\":\"216#应用场景\",\"1711\":\"216#优缺点\",\"1712\":\"216@0\",\"1713\":\"216@1\",\"1714\":\"217\",\"1715\":\"218\",\"1716\":\"219\",\"1717\":\"220\",\"1718\":\"221\",\"1719\":\"222\",\"1720\":\"223\",\"1721\":\"224\",\"1722\":\"225\",\"1723\":\"226\",\"1724\":\"227\",\"1725\":\"228\",\"1726\":\"229\",\"1727\":\"230\",\"1728\":\"231\",\"1729\":\"232\",\"1730\":\"233\",\"1731\":\"234\",\"1732\":\"235\",\"1733\":\"236\",\"1734\":\"237\",\"1735\":\"238\",\"1736\":\"239\",\"1737\":\"240\",\"1738\":\"241\",\"1739\":\"242\",\"1740\":\"243\",\"1741\":\"244\",\"1742\":\"245\",\"1743\":\"246\",\"1744\":\"247\",\"1745\":\"248\",\"1746\":\"249\",\"1747\":\"250\",\"1748\":\"251\",\"1749\":\"252\",\"1750\":\"253\",\"1751\":\"254\",\"1752\":\"255\",\"1753\":\"256\",\"1754\":\"257\",\"1755\":\"258\",\"1756\":\"259\",\"1757\":\"260\",\"1758\":\"261\",\"1759\":\"262\",\"1760\":\"263\",\"1761\":\"264\",\"1762\":\"265\",\"1763\":\"266\",\"1764\":\"267\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[1],\"2\":[3,17],\"3\":[4,10],\"4\":[3,9],\"5\":[3,6],\"6\":[3,12],\"7\":[4,15],\"8\":[null,null,1],\"9\":[null,null,1],\"10\":[1],\"11\":[1,12],\"12\":[2,16],\"13\":[2,25],\"14\":[2,41],\"15\":[2,96],\"16\":[2,50],\"17\":[1,28],\"18\":[1,31],\"19\":[2,24],\"20\":[null,null,1],\"21\":[null,null,1],\"22\":[1],\"23\":[1,27],\"24\":[1,46],\"25\":[5,23],\"26\":[1,17],\"27\":[1,17],\"28\":[1,29],\"29\":[1,22],\"30\":[1,26],\"31\":[1,12],\"32\":[null,null,1],\"33\":[null,null,1],\"34\":[1],\"35\":[1,44],\"36\":[2,43],\"37\":[1,31],\"38\":[1,51],\"39\":[2,57],\"40\":[1,31],\"41\":[null,null,1],\"42\":[null,null,1],\"43\":[1],\"44\":[1,22],\"45\":[1,41],\"46\":[1,25],\"47\":[3,25],\"48\":[1,57],\"49\":[1],\"50\":[1,22],\"51\":[1,41],\"52\":[1,8],\"53\":[1],\"54\":[1,18],\"55\":[1,25],\"56\":[1,19],\"57\":[1,3],\"58\":[2,26],\"59\":[2,91],\"60\":[1,21],\"61\":[1,21],\"62\":[2,15],\"63\":[3,19],\"64\":[3,6],\"65\":[3,23],\"66\":[3,6],\"67\":[3,5],\"68\":[null,null,1],\"69\":[null,null,1],\"70\":[1],\"71\":[1,34],\"72\":[2,4],\"73\":[2,4],\"74\":[2,15],\"75\":[2,35],\"76\":[2,10],\"77\":[2,19],\"78\":[1,4],\"79\":[1,19],\"80\":[1],\"81\":[2,65],\"82\":[2,36],\"83\":[2,39],\"84\":[2,19],\"85\":[2,32],\"86\":[2,18],\"87\":[2,27],\"88\":[2,13],\"89\":[2,19],\"90\":[2,13],\"91\":[2,29],\"92\":[2,25],\"93\":[2,25],\"94\":[1,21],\"95\":[null,null,1],\"96\":[null,null,1],\"97\":[1],\"98\":[1,9],\"99\":[2,16],\"100\":[2,29],\"101\":[2,19],\"102\":[2,35],\"103\":[2,10],\"104\":[2,35],\"105\":[2,31],\"106\":[2,15],\"107\":[1],\"108\":[1,43],\"109\":[1,11],\"110\":[1,59],\"111\":[1,7],\"112\":[null,null,1],\"113\":[null,null,1],\"114\":[2],\"115\":[3,35],\"116\":[3,28],\"117\":[1,25],\"118\":[1,21],\"119\":[1,8],\"120\":[3,69],\"121\":[3,37],\"122\":[2,10],\"123\":[null,null,1],\"124\":[null,null,1],\"125\":[3],\"126\":[3,34],\"127\":[2,8],\"128\":[1,12],\"129\":[1,24],\"130\":[1,55],\"131\":[6,51],\"132\":[1,12],\"133\":[null,null,1],\"134\":[null,null,1],\"135\":[3],\"136\":[3,17],\"137\":[null,null,1],\"138\":[null,null,1],\"139\":[2,43],\"140\":[null,null,1],\"141\":[null,null,1],\"142\":[2],\"143\":[3,87],\"144\":[1,41],\"145\":[null,null,1],\"146\":[null,null,1],\"147\":[2,16],\"148\":[2,29],\"149\":[2,3],\"150\":[2,34],\"151\":[2,8],\"152\":[2,67],\"153\":[2,78],\"154\":[2],\"155\":[2,20],\"156\":[2,22],\"157\":[2,21],\"158\":[2,24],\"159\":[null,null,1],\"160\":[null,null,1],\"161\":[1,25],\"162\":[null,null,1],\"163\":[null,null,2],\"164\":[1],\"165\":[1,12],\"166\":[1,8],\"167\":[1,13],\"168\":[1,8],\"169\":[1,11],\"170\":[1,6],\"171\":[1,10],\"172\":[null,null,1],\"173\":[null,null,1],\"174\":[4],\"175\":[2,18],\"176\":[2,22],\"177\":[2,15],\"178\":[1,14],\"179\":[null,null,1],\"180\":[null,null,1],\"181\":[3],\"182\":[null,null,1],\"183\":[null,null,1],\"184\":[1],\"185\":[1],\"186\":[2,37],\"187\":[2,22],\"188\":[1,3],\"189\":[1],\"190\":[1,13],\"191\":[1,10],\"192\":[1,6],\"193\":[1],\"194\":[1,18],\"195\":[1,14],\"196\":[1,6],\"197\":[1,15],\"198\":[1,15],\"199\":[1,11],\"200\":[1,7],\"201\":[1,3],\"202\":[1],\"203\":[1,8],\"204\":[1,7],\"205\":[1,59],\"206\":[1,18],\"207\":[1],\"208\":[1,26],\"209\":[1,11],\"210\":[1],\"211\":[1,9],\"212\":[1,19],\"213\":[1,16],\"214\":[1],\"215\":[1,199],\"216\":[1],\"217\":[1,24],\"218\":[4,5],\"219\":[1,2],\"220\":[1,37],\"221\":[1,4],\"222\":[1,6],\"223\":[1,11],\"224\":[1,4],\"225\":[1,5],\"226\":[null,null,1],\"227\":[null,null,1],\"228\":[1,14],\"229\":[1,70],\"230\":[1,39],\"231\":[null,null,1],\"232\":[null,null,1],\"233\":[1,10],\"234\":[1,20],\"235\":[1,41],\"236\":[2,12],\"237\":[2,18],\"238\":[2,15],\"239\":[2,30],\"240\":[1,6],\"241\":[1,4],\"242\":[1,24],\"243\":[1,8],\"244\":[1,13],\"245\":[1,93],\"246\":[1,44],\"247\":[1,12],\"248\":[1,8],\"249\":[1,34],\"250\":[1,33],\"251\":[1,34],\"252\":[1,29],\"253\":[1,61],\"254\":[null,null,1],\"255\":[null,null,1],\"256\":[1,11],\"257\":[2],\"258\":[2],\"259\":[2],\"260\":[1],\"261\":[1],\"262\":[1],\"263\":[1],\"264\":[1],\"265\":[2],\"266\":[2],\"267\":[null,null,1],\"268\":[null,null,2],\"269\":[1],\"270\":[2,13],\"271\":[2,6],\"272\":[1,16],\"273\":[2],\"274\":[1,30],\"275\":[1,32],\"276\":[1,29],\"277\":[2,30],\"278\":[null,null,1],\"279\":[null,null,2],\"280\":[1],\"281\":[null,null,1],\"282\":[null,null,2],\"283\":[1,3],\"284\":[null,null,1],\"285\":[null,null,2],\"286\":[3],\"287\":[1,10],\"288\":[2,41],\"289\":[2,32],\"290\":[2,28],\"291\":[1,9],\"292\":[2,23],\"293\":[2,19],\"294\":[2,22],\"295\":[null,null,1],\"296\":[null,null,2],\"297\":[1,19],\"298\":[1,41],\"299\":[1,32],\"300\":[1,10],\"301\":[1,87],\"302\":[1,3],\"303\":[1,67],\"304\":[1,127],\"305\":[1],\"306\":[1],\"307\":[1],\"308\":[1],\"309\":[1,23],\"310\":[1,23],\"311\":[1,16],\"312\":[1,10],\"313\":[3,38],\"314\":[null,null,1],\"315\":[null,null,1],\"316\":[1],\"317\":[2,34],\"318\":[3,65],\"319\":[null,null,1],\"320\":[null,null,1],\"321\":[1,15],\"322\":[null,null,2],\"323\":[null,null,1],\"324\":[2],\"325\":[2,46],\"326\":[2],\"327\":[null,null,2],\"328\":[null,null,1],\"329\":[2,172],\"330\":[null,null,2],\"331\":[null,null,1],\"332\":[2,129],\"333\":[null,null,2],\"334\":[null,null,1],\"335\":[2],\"336\":[1,17],\"337\":[1,13],\"338\":[null,null,2],\"339\":[null,null,1],\"340\":[2],\"341\":[4,40],\"342\":[2,12],\"343\":[2,38],\"344\":[2,24],\"345\":[3,16],\"346\":[2,18],\"347\":[4,22],\"348\":[4,31],\"349\":[4,35],\"350\":[4,29],\"351\":[4,22],\"352\":[4,51],\"353\":[2,11],\"354\":[2,26],\"355\":[2,23],\"356\":[5,7],\"357\":[2],\"358\":[2],\"359\":[2],\"360\":[null,null,2],\"361\":[null,null,1],\"362\":[2],\"363\":[2],\"364\":[2,18],\"365\":[2,6],\"366\":[2],\"367\":[3,15],\"368\":[3,15],\"369\":[3],\"370\":[1],\"371\":[4,34],\"372\":[3,17],\"373\":[1],\"374\":[3,26],\"375\":[3,19],\"376\":[2,7],\"377\":[3,23],\"378\":[4,12],\"379\":[1],\"380\":[3,40],\"381\":[3,48],\"382\":[1],\"383\":[3,43],\"384\":[2,7],\"385\":[4,9],\"386\":[null,null,2],\"387\":[null,null,1],\"388\":[5,66],\"389\":[null,null,2],\"390\":[null,null,1],\"391\":[2,3],\"392\":[2,94],\"393\":[2,73],\"394\":[2,91],\"395\":[null,null,2],\"396\":[null,null,1],\"397\":[6,30],\"398\":[null,null,2],\"399\":[null,null,1],\"400\":[6],\"401\":[6,34],\"402\":[3,81],\"403\":[4,42],\"404\":[null,null,2],\"405\":[null,null,1],\"406\":[2],\"407\":[3,7],\"408\":[2,71],\"409\":[null,null,2],\"410\":[null,null,1],\"411\":[2],\"412\":[2,19],\"413\":[2,5],\"414\":[null,null,2],\"415\":[null,null,1],\"416\":[2],\"417\":[4,33],\"418\":[4,13],\"419\":[null,null,1],\"420\":[null,null,2],\"421\":[2],\"422\":[4,18],\"423\":[4,15],\"424\":[2,10],\"425\":[2,15],\"426\":[null,null,1],\"427\":[null,null,2],\"428\":[2],\"429\":[2,39],\"430\":[2,74],\"431\":[2,11],\"432\":[2,4],\"433\":[null,null,1],\"434\":[null,null,2],\"435\":[2],\"436\":[2,19],\"437\":[2,21],\"438\":[2,36],\"439\":[2,36],\"440\":[null,null,1],\"441\":[null,null,2],\"442\":[4],\"443\":[1,5],\"444\":[1,5],\"445\":[1,7],\"446\":[null,null,1],\"447\":[null,null,2],\"448\":[2],\"449\":[1,6],\"450\":[1,16],\"451\":[null,null,1],\"452\":[null,null,2],\"453\":[2,16],\"454\":[2,10],\"455\":[1,7],\"456\":[1,5],\"457\":[1,71],\"458\":[2,53],\"459\":[2,3],\"460\":[3,21],\"461\":[1,9],\"462\":[null,null,1],\"463\":[null,null,2],\"464\":[2,167],\"465\":[null,null,1],\"466\":[null,null,2],\"467\":[2,57],\"468\":[null,null,2],\"469\":[null,null,3],\"470\":[2,77],\"471\":[null,null,2],\"472\":[null,null,3],\"473\":[2,48],\"474\":[null,null,2],\"475\":[null,null,3],\"476\":[2,68],\"477\":[null,null,2],\"478\":[null,null,2],\"479\":[2,55],\"480\":[null,null,2],\"481\":[null,null,3],\"482\":[2,78],\"483\":[null,null,2],\"484\":[null,null,2],\"485\":[2,62],\"486\":[null,null,2],\"487\":[null,null,3],\"488\":[2,113],\"489\":[null,null,2],\"490\":[null,null,2],\"491\":[2,63],\"492\":[null,null,2],\"493\":[null,null,3],\"494\":[2,59],\"495\":[null,null,2],\"496\":[null,null,2],\"497\":[2,69],\"498\":[null,null,2],\"499\":[null,null,3],\"500\":[2,69],\"501\":[null,null,2],\"502\":[null,null,2],\"503\":[2,53],\"504\":[null,null,2],\"505\":[null,null,2],\"506\":[2,54],\"507\":[null,null,2],\"508\":[null,null,3],\"509\":[2,125],\"510\":[null,null,2],\"511\":[null,null,2],\"512\":[2,40],\"513\":[null,null,2],\"514\":[null,null,2],\"515\":[2,53],\"516\":[null,null,2],\"517\":[null,null,2],\"518\":[2,35],\"519\":[null,null,2],\"520\":[null,null,3],\"521\":[2,38],\"522\":[null,null,2],\"523\":[null,null,3],\"524\":[2,50],\"525\":[null,null,2],\"526\":[null,null,3],\"527\":[1,21],\"528\":[1,37],\"529\":[1,26],\"530\":[1,47],\"531\":[1,45],\"532\":[1,37],\"533\":[1,21],\"534\":[1,27],\"535\":[null,null,1],\"536\":[null,null,1],\"537\":[1,7],\"538\":[1,44],\"539\":[1,62],\"540\":[1,93],\"541\":[1,9],\"542\":[null,null,1],\"543\":[null,null,1],\"544\":[1,25],\"545\":[1,6],\"546\":[1,30],\"547\":[1,41],\"548\":[2,66],\"549\":[1,7],\"550\":[1,11],\"551\":[1,31],\"552\":[1,18],\"553\":[null,null,1],\"554\":[null,null,1],\"555\":[1],\"556\":[1,17],\"557\":[1,35],\"558\":[1,20],\"559\":[1,24],\"560\":[1,32],\"561\":[1,14],\"562\":[1,13],\"563\":[1,23],\"564\":[1,38],\"565\":[1,43],\"566\":[null,null,1],\"567\":[null,null,1],\"568\":[1],\"569\":[1,52],\"570\":[1,48],\"571\":[1,45],\"572\":[1,63],\"573\":[null,null,1],\"574\":[null,null,1],\"575\":[1,40],\"576\":[1,95],\"577\":[1,25],\"578\":[1,57],\"579\":[1,27],\"580\":[1,23],\"581\":[1,38],\"582\":[null,null,1],\"583\":[null,null,1],\"584\":[1,39],\"585\":[1],\"586\":[2,37],\"587\":[2,31],\"588\":[null,null,1],\"589\":[null,null,1],\"590\":[1,49],\"591\":[1,14],\"592\":[1,61],\"593\":[2,16],\"594\":[null,null,1],\"595\":[null,null,1],\"596\":[1,10],\"597\":[1,22],\"598\":[1,3],\"599\":[1,69],\"600\":[1,15],\"601\":[1],\"602\":[1,18],\"603\":[1,61],\"604\":[1,30],\"605\":[1,11],\"606\":[1,23],\"607\":[1,34],\"608\":[null,null,1],\"609\":[null,null,1],\"610\":[1,9],\"611\":[1,8],\"612\":[1,19],\"613\":[2,36],\"614\":[1,14],\"615\":[1,32],\"616\":[null,null,1],\"617\":[null,null,1],\"618\":[1,6],\"619\":[1,52],\"620\":[1,11],\"621\":[1,38],\"622\":[1,45],\"623\":[1,46],\"624\":[1,76],\"625\":[1,79],\"626\":[null,null,1],\"627\":[null,null,1],\"628\":[1,13],\"629\":[1,25],\"630\":[1,17],\"631\":[1,11],\"632\":[1,45],\"633\":[null,null,1],\"634\":[null,null,1],\"635\":[1,52],\"636\":[1,27],\"637\":[1,8],\"638\":[null,null,1],\"639\":[null,null,1],\"640\":[1,59],\"641\":[1,3],\"642\":[null,null,1],\"643\":[null,null,1],\"644\":[1,30],\"645\":[1,22],\"646\":[1,31],\"647\":[1,23],\"648\":[1,47],\"649\":[1,3],\"650\":[1,17],\"651\":[1,14],\"652\":[3,13],\"653\":[1,49],\"654\":[null,null,1],\"655\":[null,null,1],\"656\":[1,44],\"657\":[null,null,1],\"658\":[null,null,1],\"659\":[1,85],\"660\":[null,null,1],\"661\":[null,null,1],\"662\":[1,78],\"663\":[1,7],\"664\":[1,31],\"665\":[null,null,1],\"666\":[null,null,1],\"667\":[1,6],\"668\":[1,40],\"669\":[1,28],\"670\":[1],\"671\":[1,14],\"672\":[1,16],\"673\":[1,14],\"674\":[null,null,1],\"675\":[null,null,1],\"676\":[1,6],\"677\":[1,7],\"678\":[1,26],\"679\":[1,12],\"680\":[null,null,1],\"681\":[null,null,1],\"682\":[1,4],\"683\":[1,18],\"684\":[1,32],\"685\":[null,null,1],\"686\":[null,null,1],\"687\":[1,8],\"688\":[1,28],\"689\":[1,28],\"690\":[null,null,1],\"691\":[null,null,1],\"692\":[1,9],\"693\":[1,15],\"694\":[1,23],\"695\":[1,27],\"696\":[null,null,1],\"697\":[null,null,1],\"698\":[1,8],\"699\":[1,8],\"700\":[1,8],\"701\":[1,30],\"702\":[null,null,1],\"703\":[null,null,1],\"704\":[1,4],\"705\":[1,5],\"706\":[1,26],\"707\":[null,null,1],\"708\":[null,null,1],\"709\":[1,4],\"710\":[1,9],\"711\":[1,15],\"712\":[1],\"713\":[1,13],\"714\":[4,24],\"715\":[4,23],\"716\":[1,40],\"717\":[null,null,1],\"718\":[null,null,1],\"719\":[1,7],\"720\":[1,7],\"721\":[1,13],\"722\":[null,null,1],\"723\":[null,null,1],\"724\":[1,11],\"725\":[1,8],\"726\":[1,20],\"727\":[null,null,1],\"728\":[null,null,1],\"729\":[1,10],\"730\":[1,23],\"731\":[1,14],\"732\":[1],\"733\":[1,16],\"734\":[1,27],\"735\":[1,20],\"736\":[2,15],\"737\":[2,33],\"738\":[null,null,1],\"739\":[null,null,1],\"740\":[1,7],\"741\":[1,9],\"742\":[1,17],\"743\":[null,null,1],\"744\":[null,null,1],\"745\":[1,7],\"746\":[1,17],\"747\":[1],\"748\":[1,13],\"749\":[1,16],\"750\":[null,null,1],\"751\":[null,null,1],\"752\":[1,8],\"753\":[1,13],\"754\":[1,11],\"755\":[1],\"756\":[1,14],\"757\":[1,12],\"758\":[null,null,1],\"759\":[null,null,1],\"760\":[1,4],\"761\":[1,9],\"762\":[1,42],\"763\":[1,11],\"764\":[null,null,1],\"765\":[null,null,1],\"766\":[1,4],\"767\":[1,7],\"768\":[1,12],\"769\":[1,20],\"770\":[null,null,1],\"771\":[null,null,1],\"772\":[1,4],\"773\":[1,6],\"774\":[1,12],\"775\":[1],\"776\":[1,26],\"777\":[null,null,1],\"778\":[null,null,1],\"779\":[1,5],\"780\":[1,8],\"781\":[1,15],\"782\":[null,null,1],\"783\":[null,null,1],\"784\":[1,4],\"785\":[1,6],\"786\":[1,6],\"787\":[1,28],\"788\":[null,null,1],\"789\":[null,null,1],\"790\":[1,6],\"791\":[1,18],\"792\":[1,4],\"793\":[1],\"794\":[1,14],\"795\":[1,14],\"796\":[1,23],\"797\":[null,null,1],\"798\":[null,null,1],\"799\":[1,15],\"800\":[1,30],\"801\":[1],\"802\":[1,7],\"803\":[1,56],\"804\":[1,8],\"805\":[1,19],\"806\":[1,16],\"807\":[1,36],\"808\":[null,null,1],\"809\":[null,null,1],\"810\":[1,4],\"811\":[1,6],\"812\":[1,15],\"813\":[1,21],\"814\":[null,null,1],\"815\":[null,null,1],\"816\":[1,7],\"817\":[1,11],\"818\":[1],\"819\":[1,10],\"820\":[1,24],\"821\":[null,null,1],\"822\":[null,null,1],\"823\":[1,7],\"824\":[1,6],\"825\":[1,27],\"826\":[null,null,1],\"827\":[null,null,1],\"828\":[1,10],\"829\":[1,21],\"830\":[1,6],\"831\":[null,null,1],\"832\":[null,null,1],\"833\":[1,5],\"834\":[1,3],\"835\":[1,6],\"836\":[1],\"837\":[1,8],\"838\":[1,27],\"839\":[null,null,1],\"840\":[null,null,1],\"841\":[1,10],\"842\":[1,5],\"843\":[1,14],\"844\":[null,null,1],\"845\":[null,null,1],\"846\":[1,9],\"847\":[1,2],\"848\":[1,52],\"849\":[1,10],\"850\":[null,null,1],\"851\":[null,null,1],\"852\":[1,11],\"853\":[1,17],\"854\":[1,10],\"855\":[null,null,1],\"856\":[null,null,1],\"857\":[1,7],\"858\":[1,23],\"859\":[3,35],\"860\":[1],\"861\":[1,39],\"862\":[null,null,1],\"863\":[null,null,1],\"864\":[1,11],\"865\":[1,6],\"866\":[null,null,1],\"867\":[null,null,1],\"868\":[1,10],\"869\":[1,17],\"870\":[1,20],\"871\":[null,null,1],\"872\":[null,null,1],\"873\":[1,16],\"874\":[1,16],\"875\":[1,20],\"876\":[null,null,1],\"877\":[null,null,1],\"878\":[1,14],\"879\":[1,7],\"880\":[1,33],\"881\":[1,32],\"882\":[null,null,1],\"883\":[null,null,1],\"884\":[1,10],\"885\":[1,10],\"886\":[1,19],\"887\":[1,37],\"888\":[null,null,1],\"889\":[null,null,1],\"890\":[1,12],\"891\":[1,22],\"892\":[1,12],\"893\":[3,45],\"894\":[1,15],\"895\":[null,null,1],\"896\":[null,null,1],\"897\":[1,14],\"898\":[1,21],\"899\":[1,21],\"900\":[null,null,1],\"901\":[null,null,1],\"902\":[1,8],\"903\":[1,23],\"904\":[1,12],\"905\":[1,17],\"906\":[null,null,1],\"907\":[null,null,1],\"908\":[1,7],\"909\":[1,16],\"910\":[1,18],\"911\":[null,null,1],\"912\":[null,null,1],\"913\":[1,54],\"914\":[1,29],\"915\":[null,null,1],\"916\":[null,null,1],\"917\":[1,69],\"918\":[1],\"919\":[1,24],\"920\":[1,10],\"921\":[1,5],\"922\":[1],\"923\":[1,40],\"924\":[1,27],\"925\":[1,18],\"926\":[1,37],\"927\":[1,23],\"928\":[1,63],\"929\":[1,60],\"930\":[1,37],\"931\":[null,null,1],\"932\":[null,null,1],\"933\":[1,7],\"934\":[1,31],\"935\":[1,44],\"936\":[3,52],\"937\":[1,9],\"938\":[1,9],\"939\":[null,null,1],\"940\":[null,null,1],\"941\":[1,17],\"942\":[1,12],\"943\":[1,52],\"944\":[1,28],\"945\":[1,14],\"946\":[1,71],\"947\":[1,16],\"948\":[1,49],\"949\":[1,19],\"950\":[1],\"951\":[1,83],\"952\":[1,28],\"953\":[1,45],\"954\":[2,21],\"955\":[1,57],\"956\":[null,null,1],\"957\":[null,null,1],\"958\":[2,5],\"959\":[1,3],\"960\":[1,20],\"961\":[1],\"962\":[1,18],\"963\":[2,11],\"964\":[null,null,1],\"965\":[null,null,1],\"966\":[2,6],\"967\":[1,3],\"968\":[1,6],\"969\":[1,36],\"970\":[1],\"971\":[1,26],\"972\":[null,null,1],\"973\":[null,null,1],\"974\":[3,13],\"975\":[1,5],\"976\":[1,18],\"977\":[1,12],\"978\":[null,null,1],\"979\":[null,null,1],\"980\":[3,5],\"981\":[1,6],\"982\":[1,13],\"983\":[1,44],\"984\":[1],\"985\":[1,8],\"986\":[1,30],\"987\":[null,null,1],\"988\":[null,null,1],\"989\":[3,15],\"990\":[1,6],\"991\":[1,7],\"992\":[1],\"993\":[2,20],\"994\":[2,12],\"995\":[2,14],\"996\":[2,18],\"997\":[2,13],\"998\":[3,12],\"999\":[3,31],\"1000\":[1,30],\"1001\":[1,25],\"1002\":[1,27],\"1003\":[1,26],\"1004\":[5,66],\"1005\":[null,null,1],\"1006\":[null,null,1],\"1007\":[2,5],\"1008\":[1,7],\"1009\":[2,31],\"1010\":[1,13],\"1011\":[1,17],\"1012\":[1,31],\"1013\":[1,16],\"1014\":[1,29],\"1015\":[null,null,1],\"1016\":[null,null,1],\"1017\":[2,25],\"1018\":[1,30],\"1019\":[1,11],\"1020\":[1,35],\"1021\":[null,null,1],\"1022\":[null,null,1],\"1023\":[2,10],\"1024\":[1,3],\"1025\":[1,7],\"1026\":[1],\"1027\":[1,32],\"1028\":[null,null,1],\"1029\":[null,null,1],\"1030\":[2,3],\"1031\":[1,3],\"1032\":[1],\"1033\":[1,30],\"1034\":[1,42],\"1035\":[1,28],\"1036\":[1,19],\"1037\":[null,null,1],\"1038\":[null,null,1],\"1039\":[2,7],\"1040\":[1,22],\"1041\":[1,21],\"1042\":[1,18],\"1043\":[null,null,1],\"1044\":[null,null,1],\"1045\":[2,11],\"1046\":[1,3],\"1047\":[1,17],\"1048\":[1,54],\"1049\":[null,null,1],\"1050\":[null,null,1],\"1051\":[3,15],\"1052\":[1,55],\"1053\":[1,43],\"1054\":[1,35],\"1055\":[1,19],\"1056\":[null,null,1],\"1057\":[null,null,1],\"1058\":[2,7],\"1059\":[1,9],\"1060\":[1,20],\"1061\":[null,null,1],\"1062\":[null,null,1],\"1063\":[1,6],\"1064\":[1],\"1065\":[1,71],\"1066\":[1,48],\"1067\":[1,50],\"1068\":[1,51],\"1069\":[1,40],\"1070\":[1,2],\"1071\":[null,null,1],\"1072\":[null,null,1],\"1073\":[1,9],\"1074\":[1,28],\"1075\":[1,24],\"1076\":[3,23],\"1077\":[1,15],\"1078\":[null,null,1],\"1079\":[null,null,1],\"1080\":[1,38],\"1081\":[null,null,1],\"1082\":[null,null,1],\"1083\":[1,44],\"1084\":[null,null,1],\"1085\":[null,null,1],\"1086\":[1,4],\"1087\":[1,50],\"1088\":[null,null,1],\"1089\":[null,null,1],\"1090\":[1,4],\"1091\":[1,15],\"1092\":[1,16],\"1093\":[1,21],\"1094\":[1,23],\"1095\":[null,null,1],\"1096\":[null,null,1],\"1097\":[1,5],\"1098\":[1,6],\"1099\":[1,7],\"1100\":[1,18],\"1101\":[1,44],\"1102\":[1,16],\"1103\":[null,null,1],\"1104\":[null,null,1],\"1105\":[1,3],\"1106\":[1,4],\"1107\":[1,13],\"1108\":[1],\"1109\":[1,51],\"1110\":[2,23],\"1111\":[1,6],\"1112\":[null,null,1],\"1113\":[null,null,1],\"1114\":[1,8],\"1115\":[1,38],\"1116\":[1,26],\"1117\":[null,null,1],\"1118\":[null,null,1],\"1119\":[1,4],\"1120\":[1,3],\"1121\":[1,6],\"1122\":[1,27],\"1123\":[1],\"1124\":[1,19],\"1125\":[1,10],\"1126\":[1,8],\"1127\":[1,7],\"1128\":[1,7],\"1129\":[1,6],\"1130\":[1,26],\"1131\":[1,10],\"1132\":[2,27],\"1133\":[null,null,1],\"1134\":[null,null,1],\"1135\":[1,15],\"1136\":[1],\"1137\":[2,21],\"1138\":[2,22],\"1139\":[1,16],\"1140\":[null,null,1],\"1141\":[null,null,1],\"1142\":[1,62],\"1143\":[1,5],\"1144\":[1,17],\"1145\":[1,15],\"1146\":[1,19],\"1147\":[1,40],\"1148\":[1,22],\"1149\":[1,24],\"1150\":[1,23],\"1151\":[1,38],\"1152\":[1],\"1153\":[1,14],\"1154\":[1,14],\"1155\":[1,11],\"1156\":[1,48],\"1157\":[1,10],\"1158\":[1,16],\"1159\":[1,17],\"1160\":[1,50],\"1161\":[1,51],\"1162\":[null,null,1],\"1163\":[null,null,1],\"1164\":[1,23],\"1165\":[1,21],\"1166\":[1,33],\"1167\":[null,null,1],\"1168\":[null,null,1],\"1169\":[1,24],\"1170\":[null,null,1],\"1171\":[null,null,1],\"1172\":[1,8],\"1173\":[1],\"1174\":[1,3],\"1175\":[1,5],\"1176\":[1,5],\"1177\":[1],\"1178\":[1,33],\"1179\":[1,18],\"1180\":[1],\"1181\":[1,19],\"1182\":[1,9],\"1183\":[1,30],\"1184\":[1,48],\"1185\":[3,50],\"1186\":[6,43],\"1187\":[null,null,1],\"1188\":[null,null,1],\"1189\":[1,6],\"1190\":[1,13],\"1191\":[1,12],\"1192\":[1,13],\"1193\":[1,12],\"1194\":[1,56],\"1195\":[null,null,1],\"1196\":[null,null,1],\"1197\":[1,78],\"1198\":[null,null,1],\"1199\":[null,null,1],\"1200\":[1,31],\"1201\":[1,25],\"1202\":[1,21],\"1203\":[1,76],\"1204\":[1,34],\"1205\":[null,null,1],\"1206\":[null,null,1],\"1207\":[1,50],\"1208\":[1,7],\"1209\":[1,10],\"1210\":[null,null,1],\"1211\":[null,null,1],\"1212\":[1,11],\"1213\":[1,21],\"1214\":[1,19],\"1215\":[1,9],\"1216\":[1,16],\"1217\":[1,49],\"1218\":[1,167],\"1219\":[1,20],\"1220\":[1,31],\"1221\":[1,47],\"1222\":[1,21],\"1223\":[1],\"1224\":[1,16],\"1225\":[1,9],\"1226\":[1,12],\"1227\":[1,10],\"1228\":[1],\"1229\":[1,13],\"1230\":[1,21],\"1231\":[1,12],\"1232\":[3,20],\"1233\":[1,26],\"1234\":[3,33],\"1235\":[1,11],\"1236\":[null,null,1],\"1237\":[null,null,1],\"1238\":[1,43],\"1239\":[null,null,1],\"1240\":[null,null,1],\"1241\":[1,3],\"1242\":[1,27],\"1243\":[1,111],\"1244\":[null,null,1],\"1245\":[null,null,1],\"1246\":[1,18],\"1247\":[1],\"1248\":[1,33],\"1249\":[1,14],\"1250\":[null,null,1],\"1251\":[null,null,1],\"1252\":[1,9],\"1253\":[1,82],\"1254\":[1,60],\"1255\":[1,30],\"1256\":[1,30],\"1257\":[null,null,1],\"1258\":[null,null,1],\"1259\":[1,13],\"1260\":[1,35],\"1261\":[1,18],\"1262\":[1,7],\"1263\":[1,26],\"1264\":[1,62],\"1265\":[1],\"1266\":[1,18],\"1267\":[1,19],\"1268\":[1,21],\"1269\":[null,null,1],\"1270\":[null,null,1],\"1271\":[1,32],\"1272\":[1],\"1273\":[1,32],\"1274\":[1,39],\"1275\":[1,4],\"1276\":[1,12],\"1277\":[null,null,1],\"1278\":[null,null,1],\"1279\":[1,52],\"1280\":[1,4],\"1281\":[1,52],\"1282\":[1,76],\"1283\":[1,4],\"1284\":[1,45],\"1285\":[1,48],\"1286\":[3,59],\"1287\":[1,44],\"1288\":[1,31],\"1289\":[1,9],\"1290\":[null,null,1],\"1291\":[null,null,1],\"1292\":[1],\"1293\":[2,22],\"1294\":[2,26],\"1295\":[2,23],\"1296\":[1,16],\"1297\":[null,null,1],\"1298\":[null,null,1],\"1299\":[1],\"1300\":[1,6],\"1301\":[1,5],\"1302\":[1,51],\"1303\":[1,15],\"1304\":[1,6],\"1305\":[1,7],\"1306\":[1,42],\"1307\":[1,18],\"1308\":[1,9],\"1309\":[1,6],\"1310\":[1,23],\"1311\":[1,27],\"1312\":[1,98],\"1313\":[null,null,1],\"1314\":[null,null,1],\"1315\":[1],\"1316\":[1,3],\"1317\":[1,10],\"1318\":[1,26],\"1319\":[1,54],\"1320\":[1,4],\"1321\":[1,15],\"1322\":[1,20],\"1323\":[1,14],\"1324\":[null,null,1],\"1325\":[null,null,1],\"1326\":[1,12],\"1327\":[1,10],\"1328\":[1,22],\"1329\":[1,54],\"1330\":[1,20],\"1331\":[1,9],\"1332\":[1,15],\"1333\":[1,17],\"1334\":[1,47],\"1335\":[1,25],\"1336\":[null,null,1],\"1337\":[null,null,1],\"1338\":[1,59],\"1339\":[1],\"1340\":[1,31],\"1341\":[1,12],\"1342\":[1,10],\"1343\":[1],\"1344\":[1,32],\"1345\":[1,40],\"1346\":[1,20],\"1347\":[1],\"1348\":[1,58],\"1349\":[1,51],\"1350\":[1,39],\"1351\":[1],\"1352\":[1,29],\"1353\":[1,42],\"1354\":[1,22],\"1355\":[1,25],\"1356\":[1,33],\"1357\":[1,28],\"1358\":[1,22],\"1359\":[null,null,1],\"1360\":[null,null,1],\"1361\":[1,11],\"1362\":[1,10],\"1363\":[1],\"1364\":[1,14],\"1365\":[1,15],\"1366\":[1,12],\"1367\":[1,22],\"1368\":[1],\"1369\":[1,10],\"1370\":[1,14],\"1371\":[1,8],\"1372\":[1],\"1373\":[1,20],\"1374\":[1,23],\"1375\":[2,163],\"1376\":[1,43],\"1377\":[null,null,1],\"1378\":[null,null,1],\"1379\":[1],\"1380\":[1,16],\"1381\":[1,24],\"1382\":[1,86],\"1383\":[1,29],\"1384\":[1],\"1385\":[1,51],\"1386\":[1,39],\"1387\":[1,6],\"1388\":[1,18],\"1389\":[1,21],\"1390\":[1,39],\"1391\":[null,null,1],\"1392\":[null,null,1],\"1393\":[1,65],\"1394\":[1,16],\"1395\":[1,23],\"1396\":[null,null,1],\"1397\":[null,null,1],\"1398\":[1,43],\"1399\":[1,21],\"1400\":[1,22],\"1401\":[1,21],\"1402\":[1,17],\"1403\":[1,58],\"1404\":[1,27],\"1405\":[1,31],\"1406\":[1,48],\"1407\":[1,126],\"1408\":[1,21],\"1409\":[null,null,1],\"1410\":[null,null,1],\"1411\":[1,58],\"1412\":[1,36],\"1413\":[1,35],\"1414\":[null,null,1],\"1415\":[null,null,1],\"1416\":[1,28],\"1417\":[1,54],\"1418\":[1,60],\"1419\":[1,37],\"1420\":[null,null,1],\"1421\":[null,null,1],\"1422\":[1,7],\"1423\":[1],\"1424\":[1,13],\"1425\":[2,34],\"1426\":[2,34],\"1427\":[3,43],\"1428\":[3,19],\"1429\":[null,null,1],\"1430\":[null,null,1],\"1431\":[1,27],\"1432\":[1,23],\"1433\":[1,41],\"1434\":[1],\"1435\":[1,20],\"1436\":[2,50],\"1437\":[1,17],\"1438\":[1,77],\"1439\":[null,null,1],\"1440\":[null,null,1],\"1441\":[1,32],\"1442\":[null,null,1],\"1443\":[null,null,1],\"1444\":[1,30],\"1445\":[1,13],\"1446\":[1,67],\"1447\":[1,11],\"1448\":[1],\"1449\":[1,68],\"1450\":[null,null,1],\"1451\":[null,null,1],\"1452\":[1,31],\"1453\":[1],\"1454\":[1,6],\"1455\":[1,3],\"1456\":[1,13],\"1457\":[2,33],\"1458\":[1,29],\"1459\":[1,9],\"1460\":[1],\"1461\":[1,6],\"1462\":[1,8],\"1463\":[null,null,1],\"1464\":[null,null,1],\"1465\":[1,8],\"1466\":[1,50],\"1467\":[1,20],\"1468\":[1,14],\"1469\":[1,34],\"1470\":[1,21],\"1471\":[null,null,1],\"1472\":[null,null,1],\"1473\":[1,28],\"1474\":[1,24],\"1475\":[1,4],\"1476\":[1,24],\"1477\":[1,36],\"1478\":[null,null,1],\"1479\":[null,null,1],\"1480\":[1],\"1481\":[2,20],\"1482\":[3,4],\"1483\":[1,60],\"1484\":[1,17],\"1485\":[1,26],\"1486\":[1,39],\"1487\":[1,19],\"1488\":[1,32],\"1489\":[1,27],\"1490\":[1,53],\"1491\":[1,35],\"1492\":[1,32],\"1493\":[1,11],\"1494\":[null,null,1],\"1495\":[null,null,1],\"1496\":[1,34],\"1497\":[1,33],\"1498\":[null,null,1],\"1499\":[null,null,1],\"1500\":[1,13],\"1501\":[1,5],\"1502\":[1,81],\"1503\":[1,25],\"1504\":[1,55],\"1505\":[2,70],\"1506\":[1,4],\"1507\":[null,null,1],\"1508\":[null,null,1],\"1509\":[1,22],\"1510\":[1,22],\"1511\":[1,14],\"1512\":[null,null,1],\"1513\":[null,null,1],\"1514\":[1,15],\"1515\":[1,15],\"1516\":[1,19],\"1517\":[1,18],\"1518\":[2,42],\"1519\":[null,null,1],\"1520\":[null,null,1],\"1521\":[1,16],\"1522\":[2,13],\"1523\":[1,15],\"1524\":[1,11],\"1525\":[1,22],\"1526\":[1,30],\"1527\":[null,null,1],\"1528\":[null,null,1],\"1529\":[1,30],\"1530\":[null,null,1],\"1531\":[null,null,1],\"1532\":[1,53],\"1533\":[1,68],\"1534\":[2,84],\"1535\":[null,null,1],\"1536\":[null,null,1],\"1537\":[1,20],\"1538\":[1,40],\"1539\":[1,13],\"1540\":[1,20],\"1541\":[1,28],\"1542\":[1,39],\"1543\":[1,44],\"1544\":[null,null,1],\"1545\":[null,null,1],\"1546\":[1],\"1547\":[1,70],\"1548\":[1,5],\"1549\":[1,40],\"1550\":[1,55],\"1551\":[1,45],\"1552\":[1,43],\"1553\":[null,null,1],\"1554\":[null,null,1],\"1555\":[1,23],\"1556\":[1,33],\"1557\":[1,68],\"1558\":[null,null,1],\"1559\":[null,null,1],\"1560\":[1,14],\"1561\":[1,64],\"1562\":[1,29],\"1563\":[1,5],\"1564\":[1,55],\"1565\":[1,32],\"1566\":[1,24],\"1567\":[null,null,1],\"1568\":[null,null,1],\"1569\":[1,20],\"1570\":[1,32],\"1571\":[1,19],\"1572\":[1,56],\"1573\":[null,null,1],\"1574\":[null,null,1],\"1575\":[2,7],\"1576\":[1,31],\"1577\":[1,13],\"1578\":[1,60],\"1579\":[1,112],\"1580\":[1,78],\"1581\":[1,81],\"1582\":[1,14],\"1583\":[1,17],\"1584\":[1,46],\"1585\":[1],\"1586\":[1,42],\"1587\":[1,43],\"1588\":[1,14],\"1589\":[1,74],\"1590\":[1,9],\"1591\":[null,null,1],\"1592\":[null,null,1],\"1593\":[1,99],\"1594\":[1],\"1595\":[1,22],\"1596\":[1,18],\"1597\":[1,10],\"1598\":[1],\"1599\":[1,22],\"1600\":[1,12],\"1601\":[1,13],\"1602\":[1,14],\"1603\":[1,19],\"1604\":[null,null,1],\"1605\":[null,null,1],\"1606\":[1,26],\"1607\":[1],\"1608\":[1,6],\"1609\":[1,6],\"1610\":[1],\"1611\":[1,43],\"1612\":[1,44],\"1613\":[2,73],\"1614\":[2,74],\"1615\":[1],\"1616\":[1,107],\"1617\":[1,60],\"1618\":[1,50],\"1619\":[2,43],\"1620\":[1,50],\"1621\":[1,141],\"1622\":[null,null,1],\"1623\":[null,null,1],\"1624\":[2,3],\"1625\":[1,13],\"1626\":[1,19],\"1627\":[1,16],\"1628\":[1,6],\"1629\":[1,6],\"1630\":[1],\"1631\":[1,31],\"1632\":[1,22],\"1633\":[1,18],\"1634\":[1,32],\"1635\":[1,25],\"1636\":[1,26],\"1637\":[null,null,1],\"1638\":[null,null,1],\"1639\":[2,7],\"1640\":[1,7],\"1641\":[1,15],\"1642\":[1,13],\"1643\":[1,5],\"1644\":[1,8],\"1645\":[1,7],\"1646\":[1,16],\"1647\":[null,null,1],\"1648\":[null,null,1],\"1649\":[2,3],\"1650\":[1,9],\"1651\":[1,28],\"1652\":[1,36],\"1653\":[1],\"1654\":[1,35],\"1655\":[1,20],\"1656\":[null,null,1],\"1657\":[null,null,1],\"1658\":[1,45],\"1659\":[null,null,1],\"1660\":[null,null,1],\"1661\":[1,51],\"1662\":[null,null,1],\"1663\":[null,null,1],\"1664\":[1],\"1665\":[1,14],\"1666\":[1,25],\"1667\":[1,15],\"1668\":[1,30],\"1669\":[1,13],\"1670\":[1,165],\"1671\":[null,null,1],\"1672\":[null,null,1],\"1673\":[1,38],\"1674\":[2,48],\"1675\":[1,37],\"1676\":[1,40],\"1677\":[1,53],\"1678\":[null,null,1],\"1679\":[null,null,1],\"1680\":[1,8],\"1681\":[1,73],\"1682\":[1,28],\"1683\":[1,20],\"1684\":[1,49],\"1685\":[1,55],\"1686\":[2,24],\"1687\":[null,null,1],\"1688\":[null,null,1],\"1689\":[1,13],\"1690\":[1],\"1691\":[1,47],\"1692\":[1,41],\"1693\":[1,55],\"1694\":[1,74],\"1695\":[1,54],\"1696\":[null,null,1],\"1697\":[null,null,1],\"1698\":[1,72],\"1699\":[1,19],\"1700\":[1,48],\"1701\":[1,18],\"1702\":[1,11],\"1703\":[1,8],\"1704\":[1,10],\"1705\":[null,null,1],\"1706\":[null,null,1],\"1707\":[1,30],\"1708\":[1,41],\"1709\":[1,132],\"1710\":[1,39],\"1711\":[1,13],\"1712\":[null,null,1],\"1713\":[null,null,1],\"1714\":[1,3],\"1715\":[1],\"1716\":[1],\"1717\":[1],\"1718\":[1],\"1719\":[1],\"1720\":[1],\"1721\":[1],\"1722\":[1],\"1723\":[1],\"1724\":[1],\"1725\":[1],\"1726\":[2],\"1727\":[1],\"1728\":[1],\"1729\":[1],\"1730\":[1],\"1731\":[2],\"1732\":[1],\"1733\":[1],\"1734\":[1],\"1735\":[1],\"1736\":[1],\"1737\":[2],\"1738\":[2],\"1739\":[1],\"1740\":[1],\"1741\":[1],\"1742\":[1],\"1743\":[1],\"1744\":[1],\"1745\":[1],\"1746\":[1],\"1747\":[1],\"1748\":[2],\"1749\":[2],\"1750\":[1],\"1751\":[1],\"1752\":[1],\"1753\":[1],\"1754\":[1],\"1755\":[1],\"1756\":[1],\"1757\":[1],\"1758\":[1],\"1759\":[1],\"1760\":[1],\"1761\":[1],\"1762\":[1],\"1763\":[1],\"1764\":[1]},\"averageFieldLength\":[1.3903876331223133,26.93089782539283,0.8160962449890713],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"CSS简述\"},\"2\":{\"h\":\"什么是 CSS？\",\"t\":[\"和 HTML 类似，CSS 也不是真正的编程语言，甚至不是标记语言。CSS 是一门样式表语言，这也就是说人们可以用它来选择性地为 HTML 元素添加样式。举例来说，以下 CSS 代码选择了所有的段落文字，并将它们设置为红色。\",\"p { color: red; }\"]},\"3\":{\"h\":\"“CSS 规则集”详解\",\"t\":[\"让我们来剖析一下红色段落文字的 CSS 代码，了解它是如何工作的：\",\"Alt\",\"整个结构称为 规则集（规则集通常简称规则），注意各个部分的名称：\"]},\"4\":{\"h\":\"选择器（Selector）\",\"t\":[\"HTML 元素的名称位于规则集开始。它选择了一个或多个需要添加样式的元素（在这个例子中就是 <p> 元素）。要给不同元素添加样式，只需要更改选择器。\"]},\"5\":{\"h\":\"声明（Declaration）\",\"t\":[\"一个单独的规则，如 color: red; 用来指定添加样式元素的属性。\"]},\"6\":{\"h\":\"属性（Properties）\",\"t\":[\"改变 HTML 元素样式的途径（本例中 color 就是 <p> 元素的属性）。CSS 中，由编写人员决定修改哪个属性以改变规则。\"]},\"7\":{\"h\":\"属性的值（Property value）\",\"t\":[\"在属性的右边，冒号后面即属性的值，它从指定属性的众多外观中选择一个值（我们除了 red 之外还有很多属性值可以用于 color ）。\",\"注意其他重要的语法：\",\"除了选择器部分，每个规则集都应该包含在成对的大括号里（{}）。\",\"在每个声明里要用冒号（:）将属性与属性值分隔开。\",\"在每个规则集里要用分号（;）将各个声明分隔开。\"]},\"8\":{\"c\":[\"前端技术\"]},\"9\":{\"c\":[\"CSS\"]},\"10\":{\"h\":\"选择符与优先级\"},\"11\":{\"h\":\"选择符\",\"t\":[\"选择符分为五类：\",\"元素选择符 Element Selectors\",\"关系选择符 Relationship Selectors\",\"属性选择符 Attribute Selectors\",\"伪类选择符 Pseudo-Classes Selectors\",\"伪元素选择符 Pseudo-Element Selectors\"]},\"12\":{\"h\":\"1. 元素选择符\",\"t\":[\"选择符\",\"选择符名称\",\"描述\",\"*\",\"通配选择符\",\"所有元素对象\",\"E\",\"类型选择符\",\"以文档语言对象类型作为选择符\",\"E#id\",\"ID 选择符\",\"以唯一标识符 ID 属性的 E 元素作为选择符\",\"E.class\",\"类选择符\",\"以 class 属性的 E 元素作为选择符\"]},\"13\":{\"h\":\"2. 关系选择符\",\"t\":[\"选择符\",\"选择符名称\",\"描述\",\"CSS3\",\"E F\",\"包含选择符\",\"选择所有被 E 元素包含的 F 元素（能命中所有后代元素）\",\"E>F\",\"子选择符\",\"选择所有作为 E 元素的子元素 F（只能命中子元素）\",\"E+F\",\"相邻选择符\",\"选择紧贴在 E 元素之后 F 元素\",\"E~F\",\"兄弟选择符\",\"选择 E 元素所有兄弟元素 F\",\"✅\"]},\"14\":{\"h\":\"3. 属性选择符\",\"t\":[\"选择符\",\"描述\",\"CSS3\",\"E[att]\",\"选择具有 att 属性的 E 元素。\",\"E[att='val']\",\"选择具有 att 属性且属性值等于 val 的 E 元素。\",\"E[att~='val']\",\"选择具有 att 属性且属性值为一用空格分隔的字词列表，其中一个等于 val 的 E 元素。\",\"E[att^='val']\",\"选择具有 att 属性且属性值为以 val 开头的字符串的 E 元素。\",\"✅\",\"E[att$='val']\",\"选择具有 att 属性且属性值为以 val 结尾的字符串的 E 元素。\",\"✅\",\"E[att*='val']\",\"选择具有 att 属性且属性值为包含 val 的字符串的 E 元素。\",\"✅\",\"E[att|='val']\",\"选择具有 att 属性且属性值为以 val 开头并用连接符 - 分隔的字符串的 E 元素，如果属性值仅为 val，也将被选择。\",\"css .div { /* 表示存在 class 属性并且以 title 开头的元素 */ [class^='title'] { margin-bottom: 8px; } } \"]},\"15\":{\"h\":\"4. 伪类选择符\",\"t\":[\"伪类就是一个选择处于特定状态的元素的选择器，比如某个 className 的第一个元素，某个被 hover 的元素等等。我们可以理解成一个特定的 CSS 类，但与普通的类不一样，它只有处于 DOM 树无法描述的状态下才能为元素添加样式，所以将其称为 伪类。\",\"选择符\",\"描述\",\"CSS3\",\"E:link\",\"设置超链接 <a> 在未被访问前的样式。\",\"E:visited\",\"设置超链接 <a> 在其链接地址已被访问过时的样式。\",\"E:hover\",\"设置元素在其鼠标悬停时的样式。\",\"E:active\",\"设置元素在被用户激活（在鼠标点击与释放之间发生的事件）时的样式。\",\"E:focus\",\"设置元素在成为输入焦点（该元素的 onfocus 事件发生）时的样式。\",\"E:lang(fr)\",\"匹配使用特殊语言的 E 元素。\",\"E:not(s)\",\"匹配不含有 s 选择符的元素 E。\",\"✅\",\"E:root\",\"匹配 E 元素在文档的根元素。\",\"✅\",\"E:first-child\",\"匹配父元素的第一个子元素 E。\",\"E:last-child\",\"匹配父元素的最后一个子元素 E。\",\"✅\",\"E:only-child\",\"匹配父元素仅有的一个子元素 E。\",\"✅\",\"E:nth-child(n)\",\"匹配父元素的第 n 个子元素 E。\",\"✅\",\"E:nth-last-child(n)\",\"匹配父元素的倒数第 n 个子元素 E。\",\"✅\",\"E:first-of-type\",\"匹配父元素下第一个类型为 E 的子元素。\",\"✅\",\"E:last-of-type\",\"匹配父元素下的所有 E 子元素中的倒数第一个。\",\"✅\",\"E:only-of-type\",\"匹配父元素的所有子元素中唯一的那个子元素 E。\",\"✅\",\"E:nth-of-type(n)\",\"匹配父元素的第 n 个子元素 E。\",\"✅\",\"E:nth-last-of-type(n)\",\"匹配父元素的倒数第 n 个子元素 E。\",\"✅\",\"E:empty\",\"匹配没有任何子元素（包括 Text 节点）的元素 E。\",\"✅\",\"E:checked\",\"匹配用户界面上处于选中状态的元素 E。\",\"✅\",\"E:enabled\",\"匹配用户界面上处于可用状态的元素 E。\",\"✅\",\"E:disabled\",\"匹配用户界面上处于禁用状态的元素 E。\",\"✅\",\"E:target\",\"匹配相关 URL 指向的 E 元素。\",\"✅\",\"/* li 最后一个元素不添加边框 */ li:not(:last-child) { border-bottom: 1px solid black; } /* 与第一个 li 相连兄弟 */ li:first-child ~ li { border-left: 1px solid #666; }\"]},\"16\":{\"h\":\"5. 伪元素选择符\",\"t\":[\"伪元素和伪类很像，但是伪元素类似于增添一个新的 DOM 节点到 DOM 树中，而不是改变元素的状态。注意了，这里是类似，而不是真的增加一个节点，这也是其被称为伪元素的原因（实质上，元素被创建在文档流外）。\",\"选择符\",\"描述\",\"CSS3\",\"E:first-letter / E::first-letter\",\"设置元素内的第一个字符的样式。\",\"E:first-first-line / E::first-line\",\"设置元素内的第一行的样式。\",\"E:before / E::before\",\"设置在元素前（依据对象树的逻辑结构）发生的内容。用来和 content 属性一起使用。\",\"E:after / E::after\",\"设置在元素后（依据对象树的逻辑结构）发生的内容。用来和 content 属性一起使用。\",\"E::placeholder\",\"设置元素文字占位符的样式。\",\"E::selection\",\"设置元素被选择时的颜色。\",\"[!tip] CSS3 将伪元素选择符（Pseudo-Element Selectors）前面的单个冒号（:）修改为双冒号（::）用以区别伪类选择符（Pseudo-Classes Selectors），但以前的写法仍然有效。\",\"浏览器通过优先级（也称为特殊性）来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。\"]},\"17\":{\"h\":\"优先级顺序\",\"t\":[\"选择符优先级：\",\"!important\",\"行内样式\",\"ID 选择符\",\"类选择符\",\"标签选择符 | 伪类选择符 | 属性选择符\",\"伪元素选择符\",\"通配选择符 | 关系选择符 | 否定伪类\",\"选择符\",\"权重值\",\"行内样式\",\"[1,0,0,0] A\",\"ID 选择符\",\"[0,1,0,0] B\",\"类选择符、伪类选择符和属性选择符\",\"[0,0,1,0] C\",\"标签选择符和伪类对象选择符\",\"[0,0,0,1] D\",\"通配符、关系选择符和否定选择符\",\"[0,0,0,0] E\",\"继承样式\",\"无权重值\"]},\"18\":{\"h\":\"权重值比较规则\",\"t\":[\"CSS 优先级是根据由每种选择符类型构成的级连字符串计算而成的，它不是一个对应相应匹配表达式的权重值；\",\"[1,0,0,0] > [0,99,99,99] 从左往右逐个等级比较，前一个等级相等才往后比较；\",\"无论是行内样式、内联样式表和外链样式表，都是按照这个规则来进行比较。而不是简单的 行内样式 > 内联样式表 > 外链样式表。之所以有这样的错觉，是因为确实行间样式为第一等的权重，所以它的权重是最高的。而内联样式可能一般写在了外链样式引用了之后，所以覆盖掉了之前的；\",\"当 CSS 选择器权重相同，则最后的声明的 CSS 选择器覆盖靠前的 CSS；\",\"相同 CSS 表达式，在 DOM 结构中的距离是不会对元素优先级计算产生影响的。\"]},\"19\":{\"h\":\"!important\",\"t\":[\"当在一个样式生命中使用 !import 规则时，此声明将覆盖任何其他声明。\",\"注意\",\"使用 !important 是一个坏习惯，应该尽量避免，因为这破坏了样式表中的固有的级联规则 使得调试找 BUG 变得更加困难了。当两条相互冲突的带有 !important 规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用。\",\"经验法则\",\"一定要优先考虑使用样式规则的优先级来解决问题而不是 !important\",\"只有在需要覆盖全站或外链 CSS 的特定页面中使用 !important\",\"永远不要再全站范围的 CSS 上使用 !import\",\"永远不要在你的插件中使用 !import\"]},\"20\":{\"c\":[\"前端技术\"]},\"21\":{\"c\":[\"CSS\"]},\"22\":{\"h\":\"取值与单位\"},\"23\":{\"h\":\"长度\",\"t\":[\"长度值适用于 水平 或 垂直 方向的尺寸。长度值表示为 <length>。长度值的格式是：\",\"number + 长度单位 = length\",\"说明：\",\"注意一定要有单位，除非这个值是 0。如果长度值是 0，单位可有可无；\",\"有些特性支持负的长度值。但是如果给一个不支持负长度值的特性设置一个负的值，那么这个声明会被忽略；\",\"长度单位可分为 相对长度单位 和 绝对长度单位。\"]},\"24\":{\"h\":\"相对长度单位\",\"t\":[\"相对长度单位又可以分为 文本相对长度单位 和 视口相对长度单位\",\"文本相对长度单位（Font-relative Length Units）\",\"长度单位\",\"说明\",\"版本\",\"em\",\"相对于当前对象内文本的字体尺寸。\",\"CSS1\",\"ex\",\"相对于字符 x 的高度。通常为字体高度的一半。\",\"CSS1\",\"ch\",\"相当于数字 0 的宽度。\",\"CSS3\",\"rem\",\"相对于根元素（即 <html> 元素）font-size 计算值的倍数\",\"CSS3\",\"视口相对长度单位（Viewport-relative Length Units）\",\"长度单位\",\"说明\",\"版本\",\"vw\",\"相对于视口的宽度。视口被均分为 100 单位的 vw\",\"CSS3\",\"vh\",\"相对于视口的高度。视口被均分为 100 单位的 vh\",\"CSS3\",\"vmax\",\"相对于视口的宽度或高度，总是相对于大的那个。视口的宽度或高度被均分为 100 单位的 vmax\",\"CSS3\",\"vmin\",\"相对于视口的宽度或高度，总是相对于小的那个。视口的宽度或高度被均分为 100 单位的 vmin\",\"CSS3\"]},\"25\":{\"h\":\"绝对长度单位（Absolute Length Units）\",\"t\":[\"长度单位\",\"说明\",\"版本\",\"px\",\"像素（Pixels）\",\"CSS1\",\"pt\",\"点（Points）\",\"CSS1\",\"pc\",\"派卡（Picas）\",\"CSS1\",\"cm\",\"厘米\",\"CSS1\",\"mm\",\"毫米\",\"CSS1\",\"q\",\"1/4 毫米\",\"CSS1\",\"in\",\"英寸（Inches）\",\"CSS1\"]},\"26\":{\"h\":\"角度\",\"t\":[\"角度单位\",\"说明\",\"版本\",\"deg\",\"度（Degrees）\",\"CSS3\",\"grad\",\"梯度（Gradians）\",\"CSS3\",\"rad\",\"弧度（Radians）\",\"CSS3\",\"turn\",\"转、圈（Turns）\",\"CSS3\"]},\"27\":{\"h\":\"时间\",\"t\":[\"<time> 表达时间单位。\",\"时间单位\",\"说明\",\"版本\",\"s\",\"秒\",\"CSS3\",\"ms\",\"浩渺\",\"CSS3\",\"注意：\",\"时间不允许有负值\",\"时间单位包括有：ms、s\",\"单位换算：1s = 1000ms\"]},\"28\":{\"h\":\"颜色\",\"t\":[\"名称\",\"说明\",\"版本\",\"<color>\",\"用于表示颜色的关键字或者数值规则\",\"CSS1/CSS3\",\"Color Name\",\"用颜色名称来指定颜色。包括基本颜色关键字、系统颜色、SVG 颜色关键字等。\",\"CSS1\",\"HEX\",\"十六进制记法。语法如 #rrggbb 或 #rgb\",\"CSS1\",\"RGB\",\"RGB 记法\",\"CSS1\",\"RGBA\",\"RGBA 记法\",\"CSS3\",\"HSL\",\"HSL 记法\",\"CSS3\",\"HSLA\",\"HSLA 记法\",\"CSS3\",\"transparent\",\"全透明\",\"CSS1/CSS3\",\"currentColor\",\"当前颜色\",\"CSS3\"]},\"29\":{\"h\":\"文本\",\"t\":[\"名称\",\"说明\",\"版本\",\"inherit\",\"该值使得属性能够继承祖先设置。\",\"CSS2.1\",\"initial\",\"属性初始值。\",\"CSS3\",\"unset\",\"擦除属性申明。\",\"CSS3\",\"<string>\",\"字符串（含转义字符串）。\",\"CSS2\",\"<url>\",\"在网页上提供一个资源地址。（图像、声频、视频或浏览器支持的其他任何资源）\",\"CSS2\",\"<identifier>\",\"使用用户自定义标识名作为组件取值。\",\"CSS2\"]},\"30\":{\"h\":\"图像\",\"t\":[\"名称\",\"说明\",\"版本\",\"<image>\",\"用来表示一个 2D 图像\",\"CSS1/CSS3\",\"image()\",\"用于指定图像或着图像替代\",\"CSS3\",\"image-set()\",\"根据用户设备的分辨率匹配合适的图像\",\"CSS3\",\"<gradient>\",\"使用简单的语法实现颜色渐变，以便 UA 在渲染页面自动生成图像\",\"CSS3\",\"linear-gradient()\",\"用线性渐变创建图像\",\"CSS3\",\"radial-gradient()\",\"用径向渐变创建图像\",\"CSS3\",\"repeating-linear-gradient()\",\"用重复的线形渐变创建图像\",\"CSS3\",\"repeating-radial-gradient()\",\"用重复的径向渐变创建图像\",\"CSS3\"]},\"31\":{\"h\":\"数字\",\"t\":[\"名称\",\"说明\",\"版本\",\"<number>\",\"浮点数\",\"CSS2\",\"<integer>\",\"整数\",\"CSS2\",\"<percentage>\",\"<number> 接 %\",\"CSS2\",\"百分比总是相对于另一个值才存在的。\"]},\"32\":{\"c\":[\"前端技术\"]},\"33\":{\"c\":[\"CSS\"]},\"34\":{\"h\":\"定位\"},\"35\":{\"h\":\"position\",\"t\":[\"position 用于指定一个元素在文档中的定位方式。\",\"属性值\",\"说明\",\"static\",\"默认值。没有定位，元素出现在正常的文档流中（忽略 top、bottom、left、right 和 z-index 声明）\",\"absolute\",\"生成绝对定位的元素，相对于 static 定位以外的第一个父元素 进行定位，如果父级不是，会一直往上到 body，脱离文档流\",\"fixed\",\"生成固定定位的元素，相对于 浏览器窗口 进行定位，脱离文档流。（老 IE 不支持）\",\"relative\",\"生成相对定位的元素，相对于其正常位置进行定位，不脱离文档流\",\"sticky\",\"粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。主要用于 scroll 事件的监听上\",\"unset\"]},\"36\":{\"h\":\"跟正常流有什么不同？\",\"t\":[\"无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：\",\"若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box （除 margin 和 border 外的区域）的最小矩形；\",\"否则，则由这个祖先元素的 padding box 构成。\",\"如果都找不到，则为 initial containing block。\",\"补充\",\"static（默认的）/ relative：简单说就是它的父元素的内容框（即去掉 padding 的部分）\",\"absolute: 向上找最近的定位为 absolute/relative 的元素\",\"fixed: 它的 containing block 一律为根元素（html/body），根元素也是 initial containing block\"]},\"37\":{\"h\":\"脱离文档流\",\"t\":[\"当把元素 position 属性设置为 absolute 或 fixed 的时候，会发生三件事：\",\"把该元素往 Z 轴方向移了一层，元素脱离了普通流，所以不再占据原来那层的空间，还会覆盖下层的元素；\",\"该元素将变为块级元素，相当于给该元素设置了 display: block（给一个内联元素，如 <span>，设置 absolute 之后发现它可以设置宽高了）；\",\"如果该元素是块级元素，元素的宽度由原来的 width: 100%（占据一行），变为了 auto。​\"]},\"38\":{\"h\":\"sticky\",\"t\":[\"position: sticky 的生效具有一定的条件限制：\",\"这个特定阈值指的是 top、right、bottom 或 left 之一，换言之，指定 top、right、bottom 或 left 四个阈 值其中之一，才可使粘性定位生效。否则其行为与相对定位相同\",\"并且 top 和 bottom 同时设置时，top 生效的优先级高；left 和 right 同时设置时，left 的优先级高。\",\"元素表现为 relative 还是 fixed 是根据元素是否达到设定了的阈值决定的\",\"设定为 position: sticky 元素的任意父节点的 overflow 属性必须是 visible，否则 position:sticky 不会生效。\",\"第四点需要特别解释一下：\",\"如果 position:sticky 元素的任意父节点定位设置为 overflow: hidden，则父容器无法进行滚动，所以 position: sticky 元素也不会有滚动然后固定的情况。\",\"如果 position:sticky 元素的任意父节点定位设置为 position: relative | absolute | fixed，则元素相对父元素进行定位，而不会相对 viewprot 定位。\",\"[!warning] 当不设置 position 属性的值或者设置了 position: static，top | right | bottom | left 不会生效。\"]},\"39\":{\"h\":\"z-index\",\"t\":[\"z-index 用户定义一个元素在文档中的层叠顺序，数值越大层级最大。\",\"使用相对性：z-index 值只决定 同一父元素中的同级子元素 的堆叠顺序。父元素的 z-index 值（如果有）为子元素定义了堆叠顺序（CSS 版堆叠「拼爹」）。\",\"向上追溯找不到含有 z-index 值的父元素的情况下，则可以视为自由的 z-index 元素，它可以与父元素的同级兄弟定位元素或其他自由的定位元素来比较 z-index 的值，决定其堆叠顺序。同级元素的 z-index 值如果相同，则堆叠顺序由元素在文档中的先后位置决定，后出现的会在上面。所以如果当你发现一个 z-index 值较大的元素被值较小的元素遮挡了，请先检查它们之间的 DOM 结点关系，多半是因为其父结点含有激活并设置了 z-index 值的 position 定位元素。\",\"[!warning]\",\"被使用的元素必须是定位元素，即元素 position 属性值必须为 absolute、relative 或 fixed等非 static 元素上\",\"父节点的层叠性影响着子节点的层叠性，也就是父节点 z-index 值很小，无论子节点的 z-index 值多大，其层级仍然很小\",\"如果没有 z-index 值，或者值相同，谁在 HTML 后面，谁的层叠行就更高\"]},\"40\":{\"h\":\"失效场景\",\"t\":[\"z-index失效情况\",\"解决方法\",\"父元素设置position: relative时，子元素的 z-index 失效\",\"父元素 position 改为 absolute 或 static\",\"元素没有设置 position 属性为非 static 属性\",\"设置该元素的 position 属性为 relative | absolute | fixed 中的一种\",\"元素在设置 z-index 的同时还设置了 float 浮动\",\"float 去除，改为 display：inline-block\"]},\"41\":{\"c\":[\"前端技术\"]},\"42\":{\"c\":[\"CSS\"]},\"43\":{\"h\":\"盒模型\"},\"44\":{\"h\":\"display\",\"t\":[\"属性值\",\"说明\",\"none\",\"隐藏元素\",\"inline\",\"（默认值）指定对象为内联元素，元素前后没有换行符\",\"block\",\"指定对象为块元素，元素前后会带有换行符\",\"inline-block\",\"指定对象为内联块元素\",\"list-item\",\"指定对象为列表项目\",\"table\",\"指定对象作为块元素级的表格，表格前后带有换行符\",\"flex\",\"弹性布局\",\"grid\",\"网格布局\"]},\"45\":{\"h\":\"行内元素与块级元素\",\"t\":[\"display 属性的 inline、block 和 inline-block 之间有什么区别？\",\"inline：元素 不会独占一行，设置 width、height 属性无效。但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；\",\"block：会独占一行，多个元素会另起一行，可以设置 width、height、margin 和 padding 属性；\",\"inline-block： 将对象设置为 inline 对象，但对象的内容作为 block 对象呈现，之后的内联对象会被排列在同一行内。\",\"对于行内元素和块级元素，其特点如下：\",\"行内元素\",\"块级元素\",\"宽高\",\"设置宽高无效\",\"可以设置宽高\",\"边距\",\"可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 margin 和 padding\",\"设置 margin 和 padding 都有效\",\"换行\",\"不会自动换行\",\"可以自动换行\",\"排列\",\"多个块状，默认排列从上到下\"]},\"46\":{\"h\":\"行内元素的空隙问题\",\"t\":[\"问题说明：给两个或两个以上的元素设置 display: inline-block 或者 display: inline，将会导致它们之间产生一个微小的空隙。\",\"原理分析：原因是浏览器会将元素当作字词去解释，从而给每个元素之间添加一个字符的空隙。\",\"下面的例子中，每个项目的右侧都有一个 8px 的空隙，但是使用 display: inline-block 而产生的小空隙将会使其变为 12px，这不是我们想要的效果。\",\"解决方法：通过给父元素设置 font-size: 0 可以简单地解决这个问题。\"]},\"47\":{\"h\":\"width 和 height\",\"t\":[\"相关属性：\",\"minWidth\",\"minHeight\",\"maxWidth\",\"maxHeight\",\"可取属性值：\",\"属性值\",\"说明\",\"auto\",\"无特定高度值，取决于其它属性值\",\"<length>\",\"用长度值来定义高度。不允许负值\",\"<percentag>\",\"用百分比来定义高度。不允许负值\",\"说明：对于 <img> 元素来说，若仅指定此属性，其 width 或 height 值将会根据图片源尺寸进行等比例缩放\"]},\"48\":{\"h\":\"宽高自适应\",\"t\":[\"块级元素的流体特性主要体现在水平方向上。\",\"width 默认值是 auto。它所表现的含义是：\",\"充分利用可用空间：例如 <div>、<p> 这些元素的宽度默认是 100% 于父级容器的，这种充分利用空间行为称为 fill-available\",\"收缩与包裹：典型代表就是浮动、绝对定位、inline-block 元素或 table 元素，称为 shrink-to-fit 收缩到合适，CSS3 中 fit-content 就是这种宽度的表现\",\"收缩到最小：这个最容易出现在 table-layout 为 auto 的表格中\",\"超出容器限制：除非有明确的 width 相关设置，否则上面 3 种情况尺寸都不会主动超过父级容器宽度，但是也存在一些特殊情况。例如，内容很长的连续的英文和数字，或者内联元素被设置了 white-space: nowrap\",\"除了盒子模型分为内在盒子和外在盒子，显示分内部显示和外部显示，同样地，尺寸也分 内部尺寸 和 外部尺寸。\"]},\"49\":{\"h\":\"外部尺寸与流体特性\"},\"50\":{\"h\":\"正常流宽度\",\"t\":[\"a { display: block; width: 100%; }\",\"<a> 标签元素 display 属性默认为 inline，因此设置 display: block 使其块状化绝对没有问题，但后面设置的 width: 100% 则会使其失去了流动性。\",\"所谓流动性并非看上去的宽度 100% 显示那么简单，而是一种 margin/border/padding/content 内容区域自动分配水平空间的机制。\"]},\"51\":{\"h\":\"格式化宽度\",\"t\":[\"格式化宽度仅在出现在 绝对定位模型 中，也就是出现在 position 属性值为 absolute 或 fixed 的元素中。在默认情况下，绝对定位元素的宽度表现是 包裹性，宽度由内部尺寸决定。\",\"而对于非替换元素，当 left/right 或 top/bottom 对立方位的属性值同时存在时，元素的宽度表现为 格式化宽度，其宽度大小相对于最近的具有定位特性（position 属性值不是 static）的祖先元素计算。\",\"示例：\",\"div { position: absolute; left: 20px; right: 20px; }\",\"假设该 <div> 元素最近的具有定位特性的祖先元素的宽度是 1000 像素，则这个 <div> 元素的宽度是 960（即 1000-20-20）像素。\"]},\"52\":{\"h\":\"内部尺寸与流体特性\",\"t\":[\"内部尺寸指元素的尺寸由内部的元素决定，而非由外部容器决定。通过判断元素内是否有内容，也就是宽度为 0 时，则该元素宽度为内部尺寸。\"]},\"53\":{\"h\":\"包裹性\"},\"54\":{\"h\":\"首选最小宽度\",\"t\":[\"首选最小宽度：指元素最适合的最小宽度。\",\"若外部容器宽度为 240 像素，内部元素宽度设为 0，inline-block 元素的宽度根据其内部的图文表现。\",\"东亚文字最小宽度为每个汉字的宽度\",\"西方最小宽度由特定的连续的英文字符单元决定。并非所有的英文字符都会组成连续单元，一般会终止于空格（普通空格）、短横线、问号以及其他非英文字符等。\"]},\"55\":{\"h\":\"margin\",\"t\":[\"margin 属性为给定元素设置所有四个（上下左右）方向的外边距属性。\",\"示例：\",\"/* 应用于所有边 */ margin: 1em; margin: -3px; /* 上边下边 | 左边右边 */ margin: 5% auto; /* 上边 | 左边右边 | 下边 */ margin: 1em auto 2em; /* 上边 | 右边 | 下边 | 左边 */ margin: 2px 1em 0 auto; /* 全局值 */ margin: inherit; margin: initial; margin: unset;\"]},\"56\":{\"h\":\"叠加上下文\",\"t\":[\"负边距 margin 为负值时元素会依参考线向外偏移。\",\"margin-left 和 margin-top 的参考线为文档流中左边元素和上面的元素（如无兄弟元素则为父元素的左内侧和上内侧）\",\"margin-right 和 margin-bottom 的参考线为元素本身的 border 右侧 和 border 下侧\",\"一般可以利用负边距来进行布局，但没有计算好的话就可能造成元素重叠。堆叠顺序由元素在文档中的先后位置决定，后出现的会在上面。\"]},\"57\":{\"h\":\"padding\",\"t\":[\"padding 用于设置元素所有四条边的内边距区域。\"]},\"58\":{\"h\":\"box-sizing\",\"t\":[\"box-sizing 用于定义文档如何计算一个元素的总宽度和总高度。\",\"在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。\",\"可取属性值：\",\"属性值\",\"说明\",\"content-box\",\"标准盒模型，对象实际宽度 = width + border + padding\",\"border-box\",\"怪异盒模型，对象实际宽度 = width\"]},\"59\":{\"h\":\"box-shadow\",\"t\":[\"box-shadow 用于定义元素的阴影。\",\"语法：\",\"box-shadow: none | <shadow> [, <shadow>]*; <shadow> = inset? && <length>{2,4} && <color>?\",\"第一个长度值定义元素的阴影水平偏移值。正值，阴影出现在元素 右侧；负值，则阴影出现在元素 左侧\",\"第二个长度值定义元素的阴影垂直偏移值。正值，阴影出现在元素 底部；负值，则阴影出现在元素 顶部\",\"第三个长度值定义元素的 阴影模糊值半径（如果提供了）。该值越大阴影边缘越模糊，若该值为 0，阴影边缘不出现模糊。不允许负值\",\"第四个长度值定义元素的 阴影外延值（如果提供了）。正值，阴影将 向四面扩展；负值，则阴影 向里收缩\",\"[!warning]\",\"box-shadow 可以设定多组阴影效果，每组参数值以逗号分隔。该属性可以对几乎所有元素的生成框产生阴影。如果元素同时设置了 border-radius，阴影也会有圆角效果。\",\"如果定义了多组阴影效果，它们的 z-ordering 和多个 text-shadow 规则相同，第一个阴影在最上面，以此类推\",\"示例：\",\"/* x 偏移量 | y 偏移量 | 阴影颜色 */ box-shadow: 60px -16px teal; /* x 偏移量 | y 偏移量 | 阴影模糊半径 | 阴影颜色 */ box-shadow: 10px 5px 5px black; /* x 偏移量 | y 偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */ box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2); /* 插页 (阴影向内) | x 偏移量 | y 偏移量 | 阴影颜色 */ box-shadow: inset 5em 1em gold; /* 任意数量的阴影，以逗号分隔 */ box-shadow: 3px 3px red, -1em 0 0.4em olive; /* 全局关键字 */ box-shadow: inherit; box-shadow: initial; box-shadow: unset;\",\"快速生成工具：\",\"Box-Shadow CSS Generator\",\"Box Shadow CSS Generator\",\"阴影示例模版\"]},\"60\":{\"h\":\"outline\",\"t\":[\"outline 为复合属性，用于设置或检索对象外的线条轮廓。\",\"语法：\",\"outline: <outline-width> || <outline-style> || <outline-color>;\",\"outline 不占据布局空间，不会影响元素的尺寸，绘制于元素内容周围\",\"outline 通常是矩形，也可能是非矩形\",\"outline 不允许像 boder 那样分拆为 border-top 或 border-right\"]},\"61\":{\"h\":\"border\",\"t\":[\"border 属性是一个用于设置各种单独的边界属性的简写属性\",\"语法：\",\"/* style */ border: solid; /* width | style */ border: 2px dotted; /* style | color */ border: outset #f33; /* width | style | color */ border: medium dashed green; /* Global values */ border: inherit; border: initial; border: unset;\"]},\"62\":{\"h\":\"border-image\",\"t\":[\"border-image 属性允许在元素的边框上绘制图像。这使得绘制复杂的外观组件更加简单，也不用在某些情况下使用九宫格了。\",\"使用 border-image 时，其将会替换掉 border-style 属性所设置的边框样式。\",\"border-image: image-source image-height image-width image-repeat;\"]},\"63\":{\"h\":\"border-image-slice\",\"t\":[\"border-image-slice 用于定义引用边框图片后的元素切割区域的边界。\",\"bordre-image-slice [<number> | <percentage>]{1,4} && fill?\",\"关键字 fill 的作用是：将 border-image-source 九宫格中间那一块切片作为 DOM 节点的背景。\"]},\"64\":{\"h\":\"border-image-source\",\"t\":[\"border-image-source 用于定义边框图片（border-image）的资源引用。\"]},\"65\":{\"h\":\"border-image-repeat\",\"t\":[\"border-image-repeat 用于定义图片如何填充边框。\",\"border-image-repeat: stretch | repeat | round | space;\",\"关键词\",\"说明\",\"stretch\",\"拉伸图片以填充边框，强调边框拉伸\",\"repeat\",\"平铺图片以填充边框，强调边框重复填充（建议使用此方式保持高清效果）\",\"round\",\"平铺图像。当不能整数次平铺时，根据情况放大或缩小图像\",\"space\",\"平铺图像。当不能整数次平铺时，会用空白间隙填充在图像周围（不会放大或缩小图像）\",\"只要记住，该属性主要是负责边框的缩放形式即可。\"]},\"66\":{\"h\":\"border-image-width\",\"t\":[\"border-image-width 用于定义边界图像 (border image) 的宽度。\"]},\"67\":{\"h\":\"border-image-outset\",\"t\":[\"border-image-outset 用于定义边框图片可超出边框的大小。\"]},\"68\":{\"c\":[\"前端技术\"]},\"69\":{\"c\":[\"CSS\"]},\"70\":{\"h\":\"文字\"},\"71\":{\"h\":\"字体\",\"t\":[\"font 为简写属性，用于定义元素的文本特性。\",\"语法：\",\"font: [ <font-style> || <font-varient> || <font-weight> || <font-stretch> ]? <font-size> [ <line-height> ]? <font-family>\",\"[!warning]\",\"使用 font 属性参数必须按照如上的排列书写，且 font-size 和 font-family 是不可忽略的。每个参数仅允许有一个值\",\"字体形态：\",\"serif（衬线字体）\",\"sans-serif（非衬线字体）\",\"monospace（等宽字体，例如代码）\",\"cursive（方正静蕾体）\",\"fantasy\"]},\"72\":{\"h\":\"font-family\",\"t\":[\"font-family 用于定义元素文本的字体名称序列。\"]},\"73\":{\"h\":\"font-size\",\"t\":[\"font-size 用于定义元素的字体大小。\"]},\"74\":{\"h\":\"font-style\",\"t\":[\"font-style 用于指定元素的文本是否为斜体。\",\"属性值\",\"说明\",\"normal\",\"指定文本字体样式为正常的字体\",\"italic\",\"指定文本字体样式为斜体。对于没有设计斜体的特殊字体，如果要使用斜体外观将应用 oblique\",\"oblique\",\"指定文本字体样式为倾斜的字体。人为的使文字倾斜，而不是去选取字体中的斜体字\"]},\"75\":{\"h\":\"font-weight\",\"t\":[\"font-weight 用于定义元素文本字体的粗细。\",\"属性值\",\"说明\",\"normal\",\"正常的字体。相当于数字值 400\",\"bold\",\"粗体。相当于数字值 700\",\"bolder\",\"定义比继承值更重的值\",\"lighter\",\"定义比继承值更轻的值\",\"数值\",\"用数字表示文本字体粗细。取值范围：100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\",\"[!warning]\",\"该属性是否有效由客户端系统安装的字体的特定字体变量映射决定，系统选择最近的匹配，也就是说，用户可能看不到不同值之间的差异（举个例子，有些字体可能没有设计所有的字重）\"]},\"76\":{\"h\":\"font-varient\",\"t\":[\"font-varient 用于定义元素的文本是否为小型的大写字母。\",\"属性值\",\"说明\",\"normal\",\"正常的字体\",\"small-caps\",\"小型的大些字母字体\"]},\"77\":{\"h\":\"font-stretch\",\"t\":[\"font-stretch 用于定义元素的文字是否横向拉伸变形。\",\"属性值\",\"说明\",\"normal\",\"正常文字宽度\",\"ultra-condensed\",\"比正常文字宽度窄 4 个基数\",\"extra-condensed\",\"比正常文字宽度窄 3 个基数\",\"condensed\",\"比正常文字宽度窄 2 个基数\",\"semi-condensed\",\"比正常文字宽度窄 1 个基数\",\"semi-expanded\",\"比正常文字宽度宽 1 个基数\",\"expanded\",\"比正常文字宽度宽 2 个基数\",\"extra-expanded\",\"比正常文字宽度宽 3 个基数\",\"ultra-expanded\",\"比正常文字宽度宽 4 个基数\"]},\"78\":{\"h\":\"多字体反馈机制\",\"t\":[\"指定多个字体，如果找不到会按照顺序使用其他字体，或者用同类字体。\"]},\"79\":{\"h\":\"自定义字体\",\"t\":[\"自定义字体\",\"@font-face { font-family: 'IF'; src: url('./IndieFlower.ttf'); } .custom-font { font-family: IF; }\",\"网络字体\",\"需要注意跨域问题\",\"iconfont\",\"先把只有一个平台才有的写到最前面\",\"引用远程字体有问题的话，要注意跨域问题\",\"阿里巴巴的图标库，自选 iconfont.cn\"]},\"80\":{\"h\":\"文本\"},\"81\":{\"h\":\"text-align\",\"t\":[\"用于定义元素内容的水平对齐方式。\",\"属性值\",\"说明\",\"left\",\"内容左对齐\",\"center\",\"内容居中对齐\",\"right\",\"内容右对齐\",\"justify\",\"内容两端对齐，但对于强制打断的行（被打断的这一行）及最后一行（包括仅有一行文本的情况，因为它既是第一行也是最后一行）不做处理\",\"start\",\"内容对齐开始边界\",\"end\",\"内容对齐结束边界\",\"match-parent\",\"这个值和 inherit 表现一致，只是该值继承的 start 或 end 关键字是针对父母的 direction 值并计算的，计算值可以是 left 和 right\",\"justify-all\",\"效果等同于 justify，不同的是最后一行也会两端对齐\",\"单行文本两端对齐\",\"首先，所有主流浏览器都支持 text-align 的 justify 属性值\",\"其次，在这个例子中每个 p 都只有一行（所以既是第一行也是最后一行），所以无法通过定义 text-align: justify 来实现两端对齐，因为 text-align: justify 不会处理块级内容文本的最后一行\",\"再次，好在有一个专门用来处理最后一行对齐的属性 text-align-last，可以通过定义 text-align-last: justify 来实现单行文本两端对齐\",\"综上所述，我们无法简单的通过使用 text-align 或者 text-align-last 来实现单行文本两端对齐。那么可以换个思路，想办法让它们变成多行文本，使用伪元素派生一行新的占位内容是个不错的选择，此时再实现两端对齐，只需要 text-align 就行了\"]},\"82\":{\"h\":\"vertical-align\",\"t\":[\"用于定义行内元素在行框内的垂直对齐方式\",\"属性值\",\"说明\",\"baseline\",\"把当前盒的基线与父级盒的基线对齐。如果该盒没有基线，就将底部外边距的边界和父级的基线对齐\",\"sub\",\"把当前盒的基线降低到合适的位置作为父级盒的下标（该值不影响该元素文本的字体大小）\",\"supr\",\"把当前盒的基线提升到合适的位置作为父级盒的上标（该值不影响该元素文本的字体大小）\",\"text-top\",\"把当前盒的 top 和父级的内容区的 top 对齐\",\"text-bottom\",\"把当前盒的 bottom 和父级的内容区的 bottom 对齐\",\"middle\",\"把当前盒的垂直中心和父级盒的基线加上父级的半 x-height 对齐\",\"top\",\"把当前盒的 top 与行盒的 top 对齐\",\"bottom\",\"把当前盒的 bottom 与行盒的 bottom 对齐\",\"<percentage>\",\"把当前盒提升（正值）或者降低（负值）这个距离，百分比相对 line-height 计算。当值为 0%时等同于 baseline\",\"<length>\",\"把当前盒提升（正值）或者降低（负值）这个距离。当值为 0 时等同于 baseline\"]},\"83\":{\"h\":\"text-decoration\",\"t\":[\"为简写属性，用于定义元素文本装饰\",\"语法：\",\"text-decoration: <text-decoration-line> | <text-decoration-style> | <text-decoration-color>\",\"对于 <text-decoration-line> 的可取属性值：\",\"属性值\",\"说明\",\"none\",\"文字无装饰\",\"underline\",\"文字的装饰是下划线\",\"overline\",\"文字的装饰是上划线\",\"line-through\",\"文字的装饰是贯穿线\",\"blink\",\"文字的装饰是闪烁\",\"对于 <text-decoration-style> 可取的属性值：\",\"属性值\",\"说明\",\"solid\",\"实线\",\"double\",\"双线\",\"dotted\",\"点状线条\",\"dashed\",\"虚线\",\"wavy\",\"波浪线\",\"CSS 文字装饰 text-decoration & text-emphasis\"]},\"84\":{\"h\":\"text-transform\",\"t\":[\"用于定义元素的文本如何转换大小写\",\"属性值\",\"说明\",\"none\",\"无转换\",\"capitalize\",\"将每个单词的第一个字母转换成大写\",\"uppercase\",\"将每个单词转换成大写\",\"lowercase\",\"将每个单词转换成小写\",\"full-width\",\"将所有字符转换成 fullwidth 形式。如果字符没有相应的 fullwidth 形式，将保留原样。这个值通常用于排版拉丁字符和数字等表意符号\"]},\"85\":{\"h\":\"text-justfy\",\"t\":[\"用于定义使用什么方式实现文本内容两端对齐\",\"属性值\",\"说明\",\"auto\",\"允许浏览器用户代理确定使用的两端对齐法则\",\"none\",\"禁止两端对齐\",\"inter-word\",\"通过增加字之间的空格对齐文本。该行为是对齐所有文本行最快的方法，它的两端对齐行为对段落的最后一行无效\",\"inter-ideograph\",\"为表意字文本提供完全两端对齐，增加或减少表意字和词间的空格\",\"inter-cluster\",\"调整文本无词间空格的行。这种模式的调整是用于优化亚洲语言文档的\",\"distribute\",\"通过增加或减少字或字母之间的空格对齐文本，适用于东亚文档，尤其是泰国\",\"kashida\",\"通过拉长选定点的字符调整文本。这种调整模式是特别为阿拉伯脚本语言提供的\",\"[!warning] 因为这个属性影响文本布局，所以 text-align 属性必须设置为 justify\"]},\"86\":{\"h\":\"text-indent\",\"t\":[\"用于定义块内文本内容的缩进\",\"属性值\",\"说明\",\"<length>\",\"用长度值指定文本的缩进。可以为负值\",\"<percentage>\",\"用百分比指定文本的缩进。可以为负值\",\"each-line\",\"定义缩进作用在块容器的第一行或者内部的每个强制换行的首行，软换行不受影响\",\"hanging\",\"反向所有被缩进作用的行\",\"[!warning]\",\"行内元素要使用该属性必须先定义该元素为块级或行内块级\",\"hanging 和 each-line 关键词紧随在缩进数值之后\"]},\"87\":{\"h\":\"text-overflow\",\"t\":[\"用于当块容器 overflow 为非 visible 时，定义内联内容溢出其块容器是否截断或者添加 ... 及自定义字符\",\"属性值\",\"说明\",\"clip\",\"当内联内容溢出块容器时，将溢出部分裁切掉\",\"ellipsis\",\"当内联内容溢出块容器时，将溢出部分替换为 ...\",\"[!warning] 要使得 text-overflow 属性生效，块容器必须显式定义 overflow 为非 visible 值，同时显式或者隐式地定义 width 为非 auto 值，white-space 为 nowrap 值\"]},\"88\":{\"h\":\"letter-spacing\",\"t\":[\"用于指定字符之间的额外间隙\",\"属性值\",\"说明\",\"none\",\"默认间隔，计算值为 0\",\"<length>\",\"用长度值指定字符间隔。可以为负值\",\"[!warning] 该属性可以将指定的额外间隔添加到每个字符之后，最后一个单词也会被添加\"]},\"89\":{\"h\":\"word-spacing\",\"t\":[\"用于指定单词之间的额外间隙\",\"属性值\",\"说明\",\"none\",\"默认间隔，计算值为 0\",\"<length>\",\"用长度值指定字符间隔。可以为负值\",\"<percentage>\",\"用百分比指定字符间隔。可以为负值\",\"[!warning]\",\"该属性可以将指定的额外间隙添加到每个单词之后，最后一个单词不添加，这意外着可以通过该属性控制单词间的间隙大小\",\"判断是否为单词的依据是单词间是否有单词分割符，比如：空格\"]},\"90\":{\"h\":\"word-wrap\",\"t\":[\"用于设置或检索当内容超过指定容器的边界时是否断行\",\"属性值\",\"说明\",\"normal\",\"允许内容顶开或溢出指定的容器边界\",\"break-word\",\"内容将在边界内换行，如果需要，单词内部允许断行它要求一个没有断行破发点的词必须保持为一个整体单位，如果当前行无法放下需要被打断的单词，为了保持完整性，会将整个单词放到下一行进行展示\"]},\"91\":{\"h\":\"word-break\",\"t\":[\"用于定义元素内容文本的字间与字符间的换行行为\",\"属性值\",\"说明\",\"normal\",\"默认的换行规则。依据各自语言的规则，允许在字间发生换行\",\"keep-all\",\"对于 CJK（中文，韩文，日文）文本不允许在字符内发生换行，Non-CJK 文本表现同 normal\",\"break-all\",\"对于 Non-CJK 文本允许在任意字符内发生换行。该值适合包含一些非亚洲文本的亚洲文本，比如使连续的英文字符断行 break-word 与 break-all 相同，不同的地方在于它要求一个没有断行破发点的词必须保持为一个整体单位。这与 word-wrap 的 break-word 值效果相同\"]},\"92\":{\"h\":\"white-space\",\"t\":[\"用于指定元素是否保留文本间的空格、换行；指定文本超过边界时是否换行\",\"属性值\",\"说明\",\"normal\",\"默认处理方式。会将序列的空格合并为一个，内部是否换行由换行规则决定\",\"pre\",\"原封不动的保留你输入时的状态，空格、换行都会保留，并且当文字超出边界时不换行。等同 <pre> 元素效果\",\"nowrap\",\"与 normal 值一致，不同的是会强制所有文本在同一行内显示\",\"pre-wrap\",\"与 pre 值一致，不同的是文字超出边界时将自动换行\",\"pre-line\",\"与 normal 值一致，但是会保留文本输入时的换行\"]},\"93\":{\"h\":\"line-height\",\"t\":[\"行高由 line-box 决定\",\"line-hight 会撑起 inline-box 的高度，并不会影响本身布局的高度，但是会影响外部元素（line-box）\",\"inline-box 组成 line-box，line-box 高度是由 inline-box 决定\",\"现象：\",\"一般做垂直居中用 line-height 做就行了\",\"默认情况是按照 base-line 对齐，如果要居中对齐就用 vertical-align: middle\",\"底线、顶线和文字的顶和文字的底是不一样的\"]},\"94\":{\"h\":\"图片间隙问题\",\"t\":[\"按照 inline 排版，如果按照 inline 排版的话，默认按照基线排版（base-line）\",\"基线和底线之间有距离的，如果 12px 字体那么缝隙可能就是 3px 解决方案：按照底线对齐，vertical-align: bottom 或者 display:block\"]},\"95\":{\"c\":[\"前端技术\"]},\"96\":{\"c\":[\"CSS\"]},\"97\":{\"h\":\"背景\"},\"98\":{\"h\":\"属性说明\",\"t\":[\"background\",\"语法：\",\"background: <background-color> <background-image> <background-repeat> <background-attachment> | <background-position>\"]},\"99\":{\"h\":\"background-color\",\"t\":[\"background-color 用于指定背景颜色。\",\"属性值\",\"说明\",\"<color>\",\"指定颜色\",\"transparent\",\"透明背景色\",\"使用示例：\",\"h1 { background-color: #f00; }\",\"[!warning] 在同一组背景定义中，如果背景颜色和背景图像都设置了，那么背景图像会覆盖在背景颜色之上\"]},\"100\":{\"h\":\"background-image\",\"t\":[\"属性值\",\"说明\",\"<uri>\",\"使用绝对或相对地址指或者创建渐变色来确定图像\",\"none\",\"无背景图\",\"使用示例：\",\"/* 绝对地址 */ .absolute-url { background-image: url('https://mrsingsing.com/images.jpg'); } /* 相对地址 */ .relative-url { background-image: url('./images.jpg'); } /* 渐变色 */ .gradient-color { background-image: linear-gradient(to right, #ffdde1, #ee9ca7); } /* 无背景图 */ p { background-image: none; }\"]},\"101\":{\"h\":\"background-origin\",\"t\":[\"background-origin 用于规定背景图片 background-image 属性的原点位置的背景相对区域。\",\"语法：\",\"background-origin: <box>;\",\"<box> 的取值如下：\",\"属性值\",\"说明\",\"border-box\",\"从 border 区域（含 border）开始显示背景图像\",\"padding-box\",\"从 padding 区域（含 padding）开始显示背景图像\",\"content-box\",\"从 content 区域开始显示背景图像\"]},\"102\":{\"h\":\"background-position\",\"t\":[\"语法：\",\"background-position: <position> [, <position>]; background-position: <background-position-x> <background-position-y>;\",\"属性值\",\"说明\",\"<percent>\",\"百分比\",\"<length>\",\"具体长度\",\"top\",\"用于指定当前项位于顶端边缘\",\"right\",\"用于指定当前项位于右端边缘\",\"bottom\",\"用于指定当前项位于底端边缘\",\"left\",\"用于指定当前项位于左端边缘\",\"center\",\"背景图片居中\",\"[!warning] 如果一个值是 top 或 bottom，那么另一个值不应该是 top 或 bottom 同理，如果一个值是 left 或 right，那么另一个值不应该是 left 或 right\",\"示例：\",\"此处将背景图片的大小 background-size 设置为 50px，方便观察背景图片设置对应 background-position 后的变化\"]},\"103\":{\"h\":\"background-repeat\",\"t\":[\"属性值\",\"说明\",\"repeat\",\"图像在水平和垂直方向上重复\",\"repeat-x\",\"图像在水平方向上重复\",\"repeat-y\",\"图像在垂直方向上重复\",\"no-repeat\",\"图像在水平和垂直方向上都不重复\"]},\"104\":{\"h\":\"background-size\",\"t\":[\"background-size 设置背景图片大小。图片可以保有其原有的尺寸，或者拉伸到新的尺寸，或者在保持其原有比例的同时缩放到元素的可用空间的尺寸。\",\"属性值：\",\"属性值\",\"说明\",\"<length>\",\"用长度值指定背景图像大小。不允许负值。\",\"<percentage>\",\"用百分比指定背景图像大小。不允许负值。\",\"auto\",\"背景图像的真实大小。\",\"cover\",\"将背景图像等比缩放到 完全覆盖 容器，背景图像有可能超出容器。我的理解就是 width 或 height 有任何一个属性如果没有覆盖到容器范围，就会放大，另一个也跟谁着等比例放大。可能会超过图片的范围。\",\"contain\",\"将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。我的理解就是，width 或 height，有任何一个属性超出了容器的范围，就会等比缩小，直到图片完全包含在容器内。\"]},\"105\":{\"h\":\"background-attachment\",\"t\":[\"属性值\",\"说明\",\"scroll\",\"背景相对于 元素本身 固定， 而不是随着它的内容滚动（对元素边框是有效的）。\",\"local\",\"背景相对于 元素的内容 固定。如果一个元素拥有滚动机制，背景将会随着元素的内容滚动， 并且背景的绘制区域和定位区域是相对于可滚动的区域而不是包含他们的边框。\",\"fixed\",\"背景相对于 视口 固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。\",\"代码示例：尝试滚动文字区域，查看不同背景的设置\",\"[!warning]\",\"相对于（浏览器）视口固定，需要滚动浏览器滚动条方可滚动\",\"由于示例设置了 background-position: center，所以第二种情况下，背景位于整个滚动区域的居中部位\"]},\"106\":{\"h\":\"background-clip\",\"t\":[\"background-clip 设置元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面。\",\"|属性值|说明| |:---|:---|:---| |border-box|百分比| |padding-box|具体长度| |content-box|用于指定当前项位于顶端边缘|\"]},\"107\":{\"h\":\"色彩模式\"},\"108\":{\"h\":\"RGB\",\"t\":[\"RGB 色彩空间：RGB 色彩空间又称 RGB 颜色模型或红绿蓝颜色空间，是一种加色模型，将红（Red）、绿（Green）、蓝（Blue）三原色的色光以不同的比例相加，以产生多种多样的色光。在 CSS 中表示方法譬如：rgb(255, 0, 0) 表示红色，rgb(255, 255, 255) 表示黑色。\",\"RGBA 色彩空间：在 RGB 的基础上增加了透明度。这是 CSS3 新增加的色彩模式，它的表示方法是，rgba(255, 255, 255, 0.5)，其中 alpha 的取值在 0~1 之间，0 为完全透明，1 为完全不透明。与 opacity 属性的区别是，opacity 能影响到其子元素透明度，RGBA 不会。\"]},\"109\":{\"h\":\"HEX\",\"t\":[\"HEX 色彩空间：又叫十六进制颜色模式，是用十六进制表示颜色的。形如 #000000 的格式，这是在 CSS 中经常使用的。\"]},\"110\":{\"h\":\"HSL\",\"t\":[\"HSL 色彩空间：HSL 和 HSV（也叫 HSB）是对 RGB 色彩空间中点的两种有关系的表示，它们尝试描述比 RGB 更准确的感知颜色联系，并仍保持在计算上简单。\",\"HSLA 色彩空间：HSLA 是在 HSL 的基础上增加了透明度。\",\"HSL \",\"H：Hue（色调）。0（或 360）表示红色，120 表示绿色，240 表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360\",\"S：Saturation（饱和度）。指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0-100% 的数值。\",\"L：Lightness（亮度）。取值为：0-100%，示例 background: hsl(0,100%,50%)\",\"V：Value（色调）\",\"B：Bridghtness（明度）\",\"/* RGB */ background-color: rgb(255, 0, 0); /* HEX */ background: #000000; /* RGBA */ background: rgb(255, 255, 255, 0.5); /* HSL */ background: hsl(10, 60%, 60%); /* HSLA */ background: hsl(10, 60%, 60%, 0.5);\"]},\"111\":{\"h\":\"渐变色\",\"t\":[\"指定多个背景：\",\".bg { background: <background1>, <background2>, ..., <backgroundN>; }\"]},\"112\":{\"c\":[\"前端技术\"]},\"113\":{\"c\":[\"CSS\"]},\"114\":{\"h\":\"1. HTML简述\"},\"115\":{\"h\":\"什么是 HTML?\",\"t\":[\"HTML：（HyperText Markup Language，超文本标记语言）是一种用来告知浏览器如何组织页面的标记语言。HTML 可复杂、可简单，一切取决于 web 开发者。HTML 由一系列的元素组成，这些元素可以用来包围或标记不同部分的内容，使其以某种方式呈现或者工作。两端的标签可以使内容变成超链接，以连接到另一个页面；使字体表现为斜体等。\",\"注意：HTML 标签不区分大小写。也就是说，输入标签时既可以使用大写字母也可以使用小写字母。例如，标签 <title> 可以写作 <title>、<TITLE>、<Title>、<TiTlE> 等，也都可以正常工作。不过，从一致性、可读性来说，最好仅使用小写字母。\"]},\"116\":{\"h\":\"剖析一个 HTML 元素\",\"t\":[\"<p>这是一段话</p>\",\"这个元素的主要部分有：\",\"开始标签（Opening tag）：包含元素的名称（本例为 p），被左、右角括号所包围。开头标签标志着元素开始或开始生效的地方。在这个示例中，它在段落文本的开始之前。\",\"内容（Content）：元素的内容，本例中就是段落的文本。\",\"结束标签（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这标志着该元素的结束。没有包含关闭标签是一个常见的初学者错误，它可能会产生奇特的结果。\",\"整个元素即指开始标签、内容、结束标签三部分组成的整体。\"]},\"117\":{\"h\":\"元素属性\",\"t\":[\"元素也可以拥有属性，属性看起来像这样：\",\"<p class=\\\"text\\\">这是一段话</p>\",\"属性包含元素的额外信息，这些信息不会出现在实际的内容中。在上述例子中，这个 class 属性是一个识别名称，以后为元素设置样式信息时更加方便。\",\"属性必须包含：\",\"一个空格，它在属性和元素名称之间。如果一个元素具有多个属性，则每个属性之间必须由空格分隔。\",\"属性名称，后面跟着一个等于号。\",\"一个属性值，由一对引号（\\\"\\\"）引起来。\"]},\"118\":{\"h\":\"布尔属性\",\"t\":[\"有时你会看到没有值的属性，这也是完全可以接受的。这些属性被称为布尔属性。布尔属性只能有一个值，这个值一般与属性名称相同。例如，考虑 disabled 属性，你可以将其分配给表单输入元素。用它来禁用表单输入元素，这样用户就不能输入了。被禁用的元素通常有一个灰色的外观。示例如下：\",\"<input type=\\\"text\\\" disabled=\\\"disabled\\\" /> <!-- 可以简写为--> <input type=\\\"text\\\" disabled />\"]},\"119\":{\"h\":\"关于属性的引号\",\"t\":[\"建议始终添加引号——这样可以避免很多问题，并且使代码更易读。''（单引号）和 \\\"\\\"（双引号）都能使用。\"]},\"120\":{\"h\":\"剖析 HTML 文档\",\"t\":[\"<!doctype html> <html lang=\\\"zh-CN\\\"> <head> <meta charset=\\\"utf-8\\\" /> <title>我的测试站点</title> </head> <body> <p>这是我的页面</p> </body> </html>\",\"<!DOCTYPE html>: 声明文档类型。文档类型是一个历史遗留问题，需要包含它才能使其他东西正常工作。现在，只需要知道 <!DOCTYPE html> 是最短的有效文档声明！\",\"<html>：这个元素包裹了页面中所有的内容，有时被称为根元素。\",\"<head>：这个元素是一个容器，它包含了所有你想包含在 HTML 页面中但不在 HTML 页面中显示的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述、CSS 样式、字符集声明等等。以后的章节中会学到更多相关的内容。\",\"<meta>：这个元素代表了不能由其他 HTML 元相关元素表示的元数据，比如 <base>、<link>、<script>、<style> 或 <title>。charset 属性将你的文档的字符集设置为 UTF-8，其中包括绝大多数人类书面语言的大多数字符。有了这个设置，页面现在可以处理它可能包含的任何文本内容。没有理由不对它进行设置，它可以帮助避免以后的一些问题。\",\"<title>：这个元素设置了页面的标题，也就是出现在该页面加载的浏览器标签中的内容。当页面被加入书签时，页面标题也被用来描述该页面。\",\"<body>：这个元素包含了你访问页面时所有显示在页面上的内容，包含文本、图片、视频、游戏、可播放音频轨道等等。\"]},\"121\":{\"h\":\"在 HTML 中包含特殊字符\",\"t\":[\"在 HTML 中，字符 <、>、\\\"、' 和 & 是特殊字符。想要在文本中显示这些特殊字符我们必须使用字符引用——表示字符的特殊编码，它们可以在那些情况下使用。每个字符引用以符号 & 开始，以分号（;）结束。\",\"原义字符\",\"等价字符引用\",\"半方大的空白\",\"&ensp;\",\"全方大的空白\",\"&emsp;\",\"不断行的空白格\",\"&nbsp;\",\"<\",\"&lt;\",\">\",\"&gt;\",\"\\\"\",\"&quot;\",\"'\",\"&apos;\",\"&\",\"&amp;\",\"在下面的实时输出中，你会看到第一段是错误的，因为浏览器会认为第二个 <p> 是开始一个新的段落！第二段是正确的，因为我们用字符引用来代替了角括号（< 和 > 符号）。\"]},\"122\":{\"h\":\"HTML 注释\",\"t\":[\"为了将一段 HTML 中的内容置为注释，你需要将其用特殊的记号 <!-- 和 --> 包裹起来，比如：\"]},\"123\":{\"c\":[\"前端技术\"]},\"124\":{\"c\":[\"HTML\"]},\"125\":{\"h\":\"2. HTML 元信息\"},\"126\":{\"h\":\"什么是 HTML 头部\",\"t\":[\"HTML 头部包含 HTML <head> 元素的内容，与 <body> 元素内容不同，页面在浏览器加载后它的内容不会在浏览器中显示，它的作用是保存页面的一些元数据。上述示例的头部非常简短：\",\"<head> <meta charset=\\\"utf-8\\\" /> <title>我的测试页面</title> </head>\",\"<title> 元素也可以为文档添加标题，但和 <h1> 元素并不相同。\",\"<h1> 元素在页面加载完毕时显示在页面中，通常只出现一次，用来标记页面内容的标题（故事名称、新闻摘要等等）。\",\"<title> 元素是一项元数据，用于表示整个 HTML 文档的标题（而不是文档内容）。\"]},\"127\":{\"h\":\"元数据： 元素\",\"t\":[\"元数据就是描述数据的数据，而 HTML 有一个“官方的”方式来为一个文档添加元数据—— <meta> 元素\"]},\"128\":{\"h\":\"指定文档中的字符编码\",\"t\":[\"<meta charset=\\\"utf-8\\\" />\",\"这个元素简单的指定了文档的字符编码——在这个文档中被允许使用的字符集。utf-8 是一个通用的字符集，它包含了任何人类语言中的大部分的字符，意味着该 web 页面可以显示任意的语言\"]},\"129\":{\"h\":\"添加作者和描述\",\"t\":[\"许多 <meta> 元素包含了 name 和 content 属性：\",\"name：指定了 meta 元素的类型；说明该元素包含了什么类型的信息。\",\"content：指定了实际的元数据内容。\",\"指定作者在某些情况下是很有用的：如果你需要联系页面的作者，问一些关于页面内容的问题。一些内容管理系统能够自动获取页面作者的信息，然后用于某些用途。\",\"指定一个包括与你的页面内容有关的关键词的描述是有用的，因为它有可能使你的页面在搜索引擎进行的相关搜索中出现得更多（这些行为在术语上被称为：搜索引擎优化 或 SEO）\"]},\"130\":{\"h\":\"在你的站点增加自定义图标\",\"t\":[\"为了进一步丰富你的网站设计，你可以在元数据中添加对自定义图标的引用，它们会在某些场景下显示。最常见的用例为 favicon（为“favorites icon”的缩写，在浏览器的“收藏夹”及“书签”列表中显示）。\",\"页面添加网页图标的方式有：\",\"将其保存在与网站的索引页面相同的目录中，以 .ico 格式保存（大多数浏览器支持更通用的格式，如 .gif 或 .png）\",\"将以下行添加到 HTML 的 <head> 块中以引用它：\",\"<link rel=\\\"icon\\\" href=\\\"favicon.ico\\\" type=\\\"image/x-icon\\\" />\",\"注意：如果你的网站使用了内容安全策略（Content Security Policy，CSP）来增加安全性，这个策略会应用在 favicon 图标上。如果你遇到了图标没有被加载的问题，你需要确认 Content-Security-Policy 响应头的 img-src 指令 (en-US) 没有阻止访问图标。\"]},\"131\":{\"h\":\"在 HTML 中应用 CSS 和 JavaScript\",\"t\":[\"<link>元素经常位于文档的头部，它有 2 个属性，rel=\\\"stylesheet\\\" 表明这是文档的样式表，而 href 包含了样式表文件的路径：\",\"<link rel=\\\"stylesheet\\\" href=\\\"my-css-file.css\\\" />\",\"<script>元素也应当放在文档的头部，并包含 src 属性来指向需要加载的 JavaScript 文件路径，同时最好加上 defer 以告诉浏览器在解析完成 HTML 后再加载 JavaScript。这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容。这样你就不会因为 JavaScript 试图访问页面上不存在的 HTML 元素而产生错误。实际上有很多方法来处理在你的页面上加载 JavaScript，但对于现代浏览器来说，这是最可靠的方法（对于其他方法，请阅读脚本加载策略）。\",\"<script src=\\\"my-js-file.js\\\" defer></script>\",\"注意：<script> 元素看起来像一个空元素，但它并不是，因此需要一个结束标记。还可以选择将脚本放入 <script> 元素中，而不是指向外部脚本文件。\"]},\"132\":{\"h\":\"为文档设定主语言\",\"t\":[\"通过添加 lang 属性到 HTML 开始的标签中来为站点设定语言.\",\"<html lang=\\\"zh-CN\\\"> … </html>\"]},\"133\":{\"c\":[\"前端技术\"]},\"134\":{\"c\":[\"HTML\"]},\"135\":{\"h\":\"3. HTML 常见元素\"},\"136\":{\"h\":\"div（内容划分元素）\",\"t\":[\"div 元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，在不使用CSS的情况下，其对内容或布局没有任何影响。\",\"作为一个“纯粹的”容器，<div> 元素在语义上不表示任何特定类型的内容。然而，其可以将内容分组，从而可以使用class或是id属性方便的定义内容的格式，也可以在一段文档中划分标记出使用另一种语言书写的内容\"]},\"137\":{\"c\":[\"前端技术\"]},\"138\":{\"c\":[\"HTML\"]},\"139\":{\"h\":\"1. Web标准\",\"t\":[\"Web标准是一系列由World Wide Web Consortium（W3C）制定的技术规范和指南，用于确保互联网上的网页和应用程序在不同的平台和设备上能够一致地工作和展示。这些标准旨在提高Web内容的可访问性、互操作性和可持续性。\",\"主要包含：\",\"结构标准（HTML）\",\"表现标准（CSS）\",\"行为标准（JS）\",\"W3C（World Wide Web Consortium）是一个国际性组织，由互联网技术领域的各种利益相关者组成，包括浏览器制造商、软件开发者、内容创建者以及网络服务提供商。其使命是制定和推广互联网的标准，以确保Web的长期发展和全球互通。\",\"Web标准和W3C的重要性在于：\",\"互操作性：通过采用Web标准，不同的浏览器、操作系统和设备能够正确地解析和显示Web内容，确保用户在不同平台上都能获得一致的体验。\",\"可访问性：Web标准促进创建无障碍的网页和应用程序，使残障人士、老年人和其他特殊需求用户能够更轻松地访问和使用Web内容。\",\"可维护性：采用Web标准可以使开发者更轻松地编写、更新和维护网页和应用程序，因为标准化的代码结构和样式规范使得代码更加清晰、可重用和易于维护。\",\"可扩展性：Web标准鼓励使用模块化和可扩展的技术，使得网页和应用程序能够适应不断变化的需求和新的技术发展。\"]},\"140\":{\"c\":[\"前端技术\"]},\"141\":{\"c\":[\"浏览器\"]},\"142\":{\"h\":\"2. 浏览器引擎\"},\"143\":{\"h\":\"渲染引擎（浏览器内核）\",\"t\":[\"主流浏览器内核：\",\"Trident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。\",\"Gecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。\",\"Presto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快 3 倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。\",\"Webkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trident，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit 前身是 KDE 小组的KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。\",\"Blink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是 KHTML 的分支一样。\"]},\"144\":{\"h\":\"JavaScript引擎\",\"t\":[\"JavaScript引擎本质是一个程序。只不过这个程序可以将 JS 代码编译为不同 CPU对应的汇编代码，此外，还负责执行代码、分配内存以及垃圾回收等\",\"常见JavaScript引擎：\",\"Mozilla的 SpiderMonkey 引擎\",\"Google 的 V8，在 Google Chrome 浏览器和较新的 Opera 浏览器中使用。这同时也是Node.js使用的引擎。\",\"JavaScriptCore (SquirrelFish/Nitro)，被用在了一些 WebKit 浏览器如 Apple Safari。\",\"Carakan，用在旧版本 Opera 中。\",\"Chakra 引擎，用在 Internet Explorer 中（尽管它实现的语言被正式地称作为“JScript”来避免商标问题）。\"]},\"145\":{\"c\":[\"前端技术\"]},\"146\":{\"c\":[\"浏览器\"]},\"147\":{\"h\":\"3. 浏览器的工作原理\",\"t\":[\"浏览器输入URL后发生了什么？\",\"主要包括以下几个基本步骤：\",\"浏览器的地址栏输入URL并按下回车\",\"浏览器查找当前URL是否存在缓存，并比较缓存是否过期\",\"DNS解析URL对应的IP\",\"根据IP建立TCP连接（三次握手）\",\"发送HTTP请求\",\"服务器处理请求\",\"返回HTTP响应\",\"浏览器接受HTTP响应\",\"关闭TCP连接（四次挥手）\",\"浏览器解析HTML\",\"浏览器布局渲染\"]},\"148\":{\"h\":\"1. 解析URL\",\"t\":[\"当在浏览器中输入URL后，浏览器首先对拿到的URL进行识别。判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作，并抽取出Host等信息。\",\"URL一般包括几大部分：\",\"Protocol：协议，譬如有http、https、ftp等\",\"Host：主机域名或IP地址\",\"Port：端口号，通常端口号不常见是因为大部分都是使用默认的端口，如HTTP默认端口80，HTTPS默认端口443\",\"Path：目录路径\",\"Query：即查询参数\",\"Fragment：即#后的hash值，一般用来定位到某个位置\"]},\"149\":{\"h\":\"2. 检查缓存\",\"t\":[\"根据下图的逻辑，判断是直接使用缓存内容还是重新向服务器请求资源。\"]},\"150\":{\"h\":\"3. DNS解析\",\"t\":[\"可以在浏览器中输入IP地址浏览网站，也可以输入域名查询网站，虽然得出的内容是一样的但是调用的过程不一样。输入IP地址是直接从主机上调用内容，输入域名是通过域名解析服务器指向对应的主机的IP地址，再从主机调用网站的内容。\",\"在进行DNS解析时，会经历以下步骤：\",\"浏览器缓存：浏览器会先检查是否在缓存中（浏览器会缓存之前拿到的DNS 2-30分钟时间），没有则调用系统库函数进行查询。\",\"操作系统缓存：操作系统也有自己的 DNS 缓存，但在这之前，会先检查域名是否存在于本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。\",\"路由器缓存：路由器也有自己的缓存。\",\"ISP DNS 缓存：ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。\",\"根域名服务器查询：在前面所有步骤都没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域\"]},\"151\":{\"h\":\"4. 建立TCP连接\",\"t\":[\"三次握手：客户端发送一个带有SYN标志的数据包给服务端，服务端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息，最后客户端再回传一个带ACK标志的数据包，代表握手结束，连接成功。\",\"三次握手\"]},\"152\":{\"h\":\"5 发送HTTP请求\",\"t\":[\"与服务器建立了连接后，就可以向服务器发起请求了\",\"TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：\",\"应用层：发送 HTTP 请求\",\"在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：\",\"请求报头（Request Header）：请求方法、目标地址、遵循的协议等等\",\"请求主体（其他参数）\",\"其中需要注意的点：\",\"浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法\",\"传输层：TCP 传输报文\",\"传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。\",\"在建立连接前，会先进行 TCP 三次握手。\",\"网络层：IP协议查询Mac地址\",\"将数据段打包，并加入源及目标的IP地址，并且负责寻找传输路线。\",\"判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。\",\"链路层：以太网协议\",\"以太网协议\",\"根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：\",\"标头：数据包的发送者、接受者、数据类型\",\"数据：数据包具体内容\"]},\"153\":{\"h\":\"6. 服务器处理请求\",\"t\":[\"服务器端收到请求后，由Web服务器（准确说应该是HTTP服务器）处理请求，诸如Apache、Ngnix、IIS等。Web服务器解析用户请求，知道了需要调度哪些资源文件，再通过相应的这些资源文件处理用户请求和参数，并调用数据库信息，最后将结果通过Web服务器返回给浏览器客户端。\",\"大致流程：\",\"HTTPD：最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。它会监听得到的请求，然后开启一个子进程去处理这个请求。\",\"处理请求：接受 TCP 报文后，会对连接进行处理，对HTTP协议进行解析（请求方法、域名、路径等），并且进行一些验证： - 验证是否配置虚拟主机 - 验证虚拟主机是否接受此方法 - 验证该用户可以使用该方法（根据 IP 地址、身份信息等）\",\"重定向：假如服务器配置了 HTTP 重定向，就会返回一个 301永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。\",\"URL 重写：然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js文件等，则会直接把这个文件返回。否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。\"]},\"154\":{\"h\":\"7. 返回HTTP响应\"},\"155\":{\"h\":\"8. 浏览器接受响应\",\"t\":[\"浏览器接收到来自服务器的响应资源后，会对资源进行分析。\",\"首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。\",\"如果响应资源进行了压缩（比如 gzip），还需要进行解压。\",\"然后，对响应资源做缓存。\",\"接下来，根据响应资源里的 MIME 类型去解析响应内容（比如 HTML、Image各有不同的解析方式）。\"]},\"156\":{\"h\":\"9. 关闭TCP连接\",\"t\":[\"完成一次 HTTP 请求后，服务器并不是马上断开与客户端的连接。在 HTTP/1.1 中，Connection: keep-alive 是默认启用的，表示持久连接，以便处理不久后到来的新请求，无需重新建立连接而增加慢启动开销，提高网络的吞吐能力。\",\"为了避免服务器与客户端双方的资源占用和损耗，当双方没有请求或响应传递时，任意一方都可以发起关闭请求。与创建TCP连接的3次握手类似，关闭TCP连接，需要4次握手。\"]},\"157\":{\"h\":\"10. 浏览器解析HTML\",\"t\":[\"准确地说，浏览器需要加载解析的不仅仅是HTML，还包括CSS、JS，以及还要加载图片、视频等其他媒体资源。\",\"浏览器通过解析HTML，生成DOM树，解析CSS，生成CSS规则树，然后通过DOM树和CSS规则树生成渲染树。渲染树与DOM树不同，渲染树中并没有head、display为none等不必显示的节点。\",\"要注意的是，浏览器的解析过程并非是串行进行的，比如在解析CSS的同时，可以继续加载解析HTML，但在解析执行JS脚本时，会停止解析后续HTML，这就会出现阻塞问题\"]},\"158\":{\"h\":\"11. 浏览器布局渲染\",\"t\":[\"根据渲染树布局，计算CSS样式，即每个节点在页面中的大小和位置等几何信息。HTML默认是流式布局的，CSS和JS会打破这种布局，改变DOM的外观样式以及大小和位置。这时就要提到两个重要概念：Repaint和Reflow。\",\"Repaint：屏幕的一部分重画，不影响整体布局，比如某个CSS的背景色变了，但元素的几何尺寸和位置不变。\",\"Reflow：意味着元件的几何尺寸变了，我们需要重新验证并计算渲染树，使渲染树的一部分或全部发生了变化。这就是Reflow，或是Layout。 所以我们应该尽量减少Repaint和Reflow，我想这也是为什么现在很少有用Table布局的原因之一。\",\"最后浏览器绘制各个节点，将页面展示给用户。\"]},\"159\":{\"c\":[\"前端技术\"]},\"160\":{\"c\":[\"浏览器\"]},\"161\":{\"h\":\"项目启动报错\",\"t\":[\"在启动vue项目时出现错误 error:0308010C:digital envelope routines::unsupported\",\"解决方式:\",\"在配置文件 package.json 中配置\",\"scripts:{ \\\"serve\\\": \\\"set NODE_OPTIONS=--openssl-legacy-provider && vue-cli-service serve\\\", \\\"build\\\": \\\"set NODE_OPTIONS=--openssl-legacy-provider && vue-cli-service build\\\", }\"]},\"162\":{\"c\":[\"前端技术\"]},\"163\":{\"c\":[\"Node.js\"]},\"164\":{\"h\":\"常用命令\"},\"165\":{\"h\":\"基础命令\",\"t\":[\"git init：初始化一个新的 Git 仓库。\",\"git clone：从远程仓库克隆项目。\",\"git add：将工作目录中的更改添加到暂存区。\",\"git commit：将暂存区的更改提交到本地仓库。\"]},\"166\":{\"h\":\"查看和比较\",\"t\":[\"git status：查看工作目录和暂存区的状态。\",\"git log：查看提交历史。\",\"git diff：查看工作目录和暂存区的文件差异。\"]},\"167\":{\"h\":\"分支管理\",\"t\":[\"git branch：列出本地分支，或创建新分支。\",\"git checkout：切换分支或还原文件。\",\"git merge：合并指定分支到当前分支。\",\"git pull：拉取远程分支并合并到当前分支。\",\"git push：将本地分支推送到远程仓库。\"]},\"168\":{\"h\":\"远程仓库\",\"t\":[\"git remote：管理远程仓库。\",\"git fetch：从远程仓库拉取变更但不合并。\",\"git pull：拉取远程仓库的变更并合并。\"]},\"169\":{\"h\":\"撤销和重置\",\"t\":[\"git revert：撤销指定的提交。\",\"git reset：重置当前分支的 HEAD，可用于回退提交、取消暂存等。\",\"git clean：移除未跟踪的文件。\"]},\"170\":{\"h\":\"标签和版本\",\"t\":[\"git tag：列出或创建标签。\",\"git describe：显示离当前提交最近的标签。\"]},\"171\":{\"h\":\"其他\",\"t\":[\"git config：配置 Git 属性。\",\"gitignore：配置忽略文件，告诉 Git 哪些文件不应纳入版本控制。\"]},\"172\":{\"c\":[\"开发工具\"]},\"173\":{\"c\":[\"git\"]},\"174\":{\"h\":\"rebase、reset、revert区别？\"},\"175\":{\"h\":\"1. rebase\",\"t\":[\"git rebase 用于将一个分支的提交移到另一个分支上，并重新应用这些提交。主要有两种用途：\",\"整理提交历史：将多个小的提交合并成一个更为清晰的提交历史，避免不必要的历史混乱。\",\"将本地提交与远程同步：在拉取远程更改之前，通过 rebase 将本地提交移动到远程提交的后面，使历史更为干净。\",\"# 从当前分支拉取最新的远程变更并应用到本地分支 git pull --rebase origin branch_name\"]},\"176\":{\"h\":\"2. reset\",\"t\":[\"git reset 用于移动 HEAD 指针和当前分支的引用，主要有三种模式：\",\"-soft：只移动 HEAD 指针，不改变工作目录和暂存区，保留更改。\",\"git reset --soft commit_hash\",\"-mixed（默认）：移动 HEAD 指针和暂存区，但不改变工作目录，将更改放回工作目录。\",\"git reset --mixed commit_hash\",\"-hard：移动 HEAD 指针、暂存区和工作目录，将所有更改丢弃。\",\"git reset --hard commit_hash\"]},\"177\":{\"h\":\"3. revert\",\"t\":[\"git revert 用于创建一个新的提交，用来撤销之前的提交。与 reset 不同，revert 不修改提交历史，而是创建新的提交来撤销之前的更改。\",\"git revert commit_hash\",\"在撤销多个提交时，可能会遇到冲突，需要手动解决冲突后再提交。\"]},\"178\":{\"h\":\"区别总结\",\"t\":[\"rebase 用于修改提交历史的顺序，将一系列提交重新应用到新的基底上。\",\"reset 用于移动 HEAD 指针，可以用来撤销提交、取消暂存区的更改或者彻底丢弃更改。\",\"revert 用于创建新的提交，撤销之前的提交，不改变历史。\"]},\"179\":{\"c\":[\"开发工具\"]},\"180\":{\"c\":[\"git\"]},\"181\":{\"h\":\"1. npm 常用命令\"},\"182\":{\"c\":[\"开发工具\"]},\"183\":{\"c\":[\"npm\"]},\"184\":{\"h\":\"Linux常用命令\"},\"185\":{\"h\":\"基础知识\"},\"186\":{\"h\":\"Linux 系统的文件结构\",\"t\":[\"/bin 二进制文件，系统常规命令 /boot 系统启动分区，系统启动时读取的文件 /dev 设备文件 /etc 大多数配置文件 /home 普通用户的家目录 /lib 32位函数库 /lib64 64位库 /media 手动临时挂载点 /mnt 手动临时挂载点 /opt 第三方软件安装位置 /proc 进程信息及硬件信息 /root 临时设备的默认挂载点 /sbin 系统管理命令 /srv 数据 /var 数据 /sys 内核相关信息 /tmp 临时文件 /usr 用户相关设定\"]},\"187\":{\"h\":\"Linux 命令行含义\",\"t\":[\"示例：root@app00:~# root //用户名，root为超级用户 @ //分隔符 app00 //主机名称 ~ //当前所在目录，默认用户目录为~，会随着目录切换而变化，例如：（root@app00:/bin# ，当前位置在bin目录下） # //表示当前用户是超级用户，普通用户为$，例如：（\\\"yao@app00:/root$\\\" ，表示使用用户\\\"yao\\\"访问/root文件夹）\"]},\"188\":{\"h\":\"命令组成\",\"t\":[\"命令 参数名 参数值\"]},\"189\":{\"h\":\"基础操作\"},\"190\":{\"h\":\"关闭系统\",\"t\":[\"// 立刻关机 shutdown -h now 或者 poweroff // 两分钟后关机 shutdown -h 2 // 立刻重启 shutdown -r now 或者 reboot // 两分钟后重启 shutdown -r 2\"]},\"191\":{\"h\":\"帮助命令\",\"t\":[\"ifconfig --help //查看 ifconfig 命令的用法 man shutdown //打开命令说明后，可按\\\"q\\\"键退出\"]},\"192\":{\"h\":\"切换用户\",\"t\":[\"su yao //切换为用户\\\"yao\\\",输入后回车需要输入该用户的密码 exit //退出当前用户\"]},\"193\":{\"h\":\"目录操作\"},\"194\":{\"h\":\"切换目录\",\"t\":[\"cd / //切换到根目录 cd /bin //切换到根目录下的bin目录 cd ../ //切换到上一级目录 或者使用命令：cd .. cd ~ //切换到home目录 cd - //切换到上次访问的目录 cd xx(文件夹名) //切换到本目录下的名为xx的文件目录，如果目录不存在报错 cd /xxx/xx/x //可以输入完整的路径，直接切换到目标目录，输入过程中可以使用tab键快速补全\"]},\"195\":{\"h\":\"查看目录\",\"t\":[\" ls //查看当前目录下的所有目录和文件 ls -a //查看当前目录下的所有目录和文件（包括隐藏的文件） ls -l //列表查看当前目录下的所有目录和文件（列表查看，显示更多信息），与命令\\\"ll\\\"效果一样 ls /bin //查看指定目录下的所有目录和文件\"]},\"196\":{\"h\":\"创建目录\",\"t\":[\" mkdir tools //在当前目录下创建一个名为tools的目录 mkdir /bin/tools //在指定目录下创建一个名为tools的目录\"]},\"197\":{\"h\":\"删除目录和文件\",\"t\":[\" rm 文件名 //删除当前目录下的文件 rm -f 文件名 //删除当前目录的的文件（不询问） rm -r 文件夹名 //递归删除当前目录下此名的目录 rm -rf 文件夹名 //递归删除当前目录下此名的目录（不询问） rm -rf * //将当前目录下的所有目录和文件全部删除 rm -rf /* //将根目录下的所有文件全部删除【慎用！相当于格式化系统】\"]},\"198\":{\"h\":\"修改目录\",\"t\":[\" mv 当前目录名 新目录名 //修改目录名，同样适用与文件操作 mv /usr/tmp/tool /opt //将/usr/tmp目录下的tool目录剪切到 /opt目录下面 mv -r /usr/tmp/tool /opt //递归剪切目录中所有文件和文件夹\"]},\"199\":{\"h\":\"拷贝目录\",\"t\":[\" cp /usr/tmp/tool /opt //将/usr/tmp目录下的tool目录复制到 /opt目录下面 cp -r /usr/tmp/tool /opt //递归剪复制目录中所有文件和文件夹\"]},\"200\":{\"h\":\"搜索目录\",\"t\":[\" find /bin -name 'a*' //查找/bin目录下的所有以a开头的文件或者目录\"]},\"201\":{\"h\":\"查看当前目录\",\"t\":[\" pwd //显示当前位置路径\"]},\"202\":{\"h\":\"文件操作\"},\"203\":{\"h\":\"新增\",\"t\":[\" touch a.txt //在当前目录下创建名为a的txt文件（文件不存在），如果文件存在，将文件时间属性修改为当前系统时间\"]},\"204\":{\"h\":\"删除\",\"t\":[\" rm 文件名 //删除当前目录下的文件 rm -f 文件名 //删除当前目录的的文件（不询问）\"]},\"205\":{\"h\":\"编辑\",\"t\":[\" vi 文件名 //打开需要编辑的文件 --进入后，操作界面有三种模式：命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode） 命令模式 -刚进入文件就是命令模式，通过方向键控制光标位置， -使用命令\\\"dd\\\"删除当前整行 -使用命令\\\"/字段\\\"进行查找 -按\\\"i\\\"在光标所在字符前开始插入 -按\\\"a\\\"在光标所在字符后开始插入 -按\\\"o\\\"在光标所在行的下面另起一新行插入 -按\\\"：\\\"进入底行模式 插入模式 -此时可以对文件内容进行编辑，左下角会显示 \\\"-- 插入 --\\\"\\\" -按\\\"ESC\\\"进入底行模式 底行模式 -退出编辑： :q -强制退出： :q! -保存并退出： :wq ## 操作步骤示例 ## 1.保存文件：按\\\"ESC\\\" -> 输入\\\":\\\" -> 输入\\\"wq\\\",回车 //保存并退出编辑 2.取消操作：按\\\"ESC\\\" -> 输入\\\":\\\" -> 输入\\\"q!\\\",回车 //撤销本次修改并退出编辑 ## 补充 ## vim +10 filename.txt //打开文件并跳到第10行 vim -R /etc/passwd //以只读模式打开文件\"]},\"206\":{\"h\":\"查看\",\"t\":[\" cat a.txt //查看文件最后一屏内容 less a.txt //PgUp向上翻页，PgDn向下翻页，\\\"q\\\"退出查看 more a.txt //显示百分比，回车查看下一行，空格查看下一页，\\\"q\\\"退出查看 tail -100 a.txt //查看文件的后100行，\\\"Ctrl+C\\\"退出查看\"]},\"207\":{\"h\":\"文件权限\"},\"208\":{\"h\":\"权限说明\",\"t\":[\" 文件权限简介：'r' 代表可读（4），'w' 代表可写（2），'x' 代表执行权限（1），括号内代表\\\"8421法\\\" ##文件权限信息示例：-rwxrw-r-- -第一位：'-'就代表是文件，'d'代表是文件夹 -第一组三位：拥有者的权限 -第二组三位：拥有者所在的组，组员的权限 -第三组三位：代表的是其他用户的权限\"]},\"209\":{\"h\":\"文件授权\",\"t\":[\" 普通授权 chmod +x a.txt 8421法 chmod 777 a.txt //1+2+4=7，\\\"7\\\"说明授予所有权限\"]},\"210\":{\"h\":\"打包与解压\"},\"211\":{\"h\":\"说明\",\"t\":[\" .zip、.rar //windows系统中压缩文件的扩展名 .tar //Linux中打包文件的扩展名 .gz //Linux中压缩文件的扩展名 .tar.gz //Linux中打包并压缩文件的扩展名\"]},\"212\":{\"h\":\"打包\",\"t\":[\" tar -zcvf 打包压缩后的文件名 要打包的文件 参数说明：z：调用gzip压缩命令进行压缩; c：打包文件; v：显示运行过程; f：指定文件名; 示例： tar -zcvf a.tar file1 file2,... //多个文件压缩打包\"]},\"213\":{\"h\":\"解压\",\"t\":[\" tar -zxvf a.tar //解包至当前目录 tar -zxvf a.tar -C /usr------ //指定解压的位置 unzip test.zip //解压*.zip文件 unzip -l test.zip //查看*.zip文件的内容\"]},\"214\":{\"h\":\"其他常用命令\"},\"215\":{\"h\":\"find\",\"t\":[\" find . -name \\\"*.c\\\" //将目前目录及其子目录下所有延伸档名是 c 的文件列出来 find . -type f //将目前目录其其下子目录中所有一般文件列出 find . -ctime -20 //将目前目录及其子目录下所有最近 20 天内更新过的文件列出 find /var/log -type f -mtime +7 -ok rm {} \\\\; //查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们 find . -type f -perm 644 -exec ls -l {} \\\\; //查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件 find / -type f -size 0 -exec ls -l {} \\\\; //为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径 whereis ls //将和ls文件相关的文件都查找出来 // 说明：which指令会在环境变量$PATH设置的目录里查找符合条件的文件。 which bash //查看指令\\\"bash\\\"的绝对路径 // 说明：sudo命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。需要输入自己账户密码。 // 使用权限：在 /etc/sudoers 中有出现的使用者 sudo -l //列出目前的权限 $ sudo -u yao vi ~www/index.html //以 yao 用户身份编辑 home 目录下www目录中的 index.html 文件 grep -i \\\"the\\\" demo_file //在文件中查找字符串(不区分大小写) grep -A 3 -i \\\"example\\\" demo_text //输出成功匹配的行，以及该行之后的三行 grep -r \\\"ramesh\\\" * //在一个文件夹中递归查询包含指定字符串的文件 // 说明：service命令用于运行System V init脚本，这些脚本一般位于/etc/init.d文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径 service ssh status //查看服务状态 service --status-all //查看所有服务状态 service ssh restart //重启服务 // 说明：这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况 free -g //以G为单位输出内存的使用量，-g为GB，-m为MB，-k为KB，-b为字节 free -t //查看所有内存的汇总 top //显示当前系统中占用资源最多的一些进程, shift+m 按照内存大小查看 // 说明：显示文件系统的磁盘使用情况 df -h //一种易看的显示 mount /dev/sdb1 /u01 //挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上 dev/sdb1 /u01 ext2 defaults 0 2 //添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载 // 说明：uname可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息 uname -a // 说明：安装插件命令 yum install httpd //使用yum安装apache yum update httpd //更新apache yum remove httpd //卸载/删除apache // 说明：插件安装命令 rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm //使用rpm文件安装apache rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm //使用rpm更新apache rpm -ev httpd //卸载/删除apache date -s \\\"01/31/2010 23:59:53\\\" ///设置系统时间 // 说明：使用wget从网上下载软件、音乐、视频 // 示例：wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz //下载文件并以指定的文件名保存文件 wget -O nagios.tar.gz http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz ftp IP/hostname //访问ftp服务器 mls *.html - //显示远程主机上文件列表 scp /opt/data.txt 192.168.1.101:/opt/ //将本地opt目录下的data文件发送到192.168.1.101服务器的opt目录下\"]},\"216\":{\"h\":\"系统管理\"},\"217\":{\"h\":\"防火墙操作\",\"t\":[\" service iptables status //查看iptables服务的状态 service iptables start //开启iptables服务 service iptables stop //停止iptables服务 service iptables restart //重启iptables服务 chkconfig iptables off //关闭iptables服务的开机自启动 chkconfig iptables on //开启iptables服务的开机自启动 ##centos7 防火墙操作 systemctl status firewalld.service //查看防火墙状态 systemctl stop firewalld.service //关闭运行的防火墙 systemctl disable firewalld.service //永久禁止防火墙服务\"]},\"218\":{\"h\":\"修改主机名（CentOS 7）\",\"t\":[\" hostnamectl set-hostname 主机名\"]},\"219\":{\"h\":\"查看网络\",\"t\":[\" ifconfig\"]},\"220\":{\"h\":\"修改IP\",\"t\":[\" 修改网络配置文件，文件地址：/etc/sysconfig/network-scripts/ifcfg-eth0 ------------------------------------------------ 主要修改以下配置： TYPE=Ethernet //网络类型 BOOTPROTO=static //静态IP DEVICE=ens00 //网卡名 IPADDR=192.168.1.100 //设置的IP NETMASK=255.255.255.0 //子网掩码 GATEWAY=192.168.1.1 //网关 DNS1=192.168.1.1 //DNS DNS2=8.8.8.8 //备用DNS ONBOOT=yes //系统启动时启动此设置 ------------------------------------------------- 修改保存以后使用命令重启网卡：service network restart\"]},\"221\":{\"h\":\"查看进程\",\"t\":[\" ps -ef //查看所有正在运行的进程\"]},\"222\":{\"h\":\"结束进程\",\"t\":[\" kill pid //杀死该pid的进程 kill -9 pid //强制杀死该进程\"]},\"223\":{\"h\":\"查看链接\",\"t\":[\" ping IP //查看与此IP地址的连接情况 netstat -an //查看当前系统端口 netstat -an | grep 8080 //查看指定端口\"]},\"224\":{\"h\":\"快速清屏\",\"t\":[\" ctrl+l //清屏，往上翻可以查看历史操作\"]},\"225\":{\"h\":\"远程主机\",\"t\":[\" ssh IP //远程主机，需要输入用户名和密码\"]},\"226\":{\"c\":[\"后端技术\"]},\"227\":{\"c\":[\"linux\"]},\"228\":{\"h\":\"面向对象编程\",\"t\":[\"面向对象程序设计（Object Oriented Programming）作为一种新方法，其本质是以建立模型体现出来的抽象思维过程和面向对象的方法。模型是用来反映现实世界中事物特征的。任何一个模型都不可能反映客观事物的一切具体特征，只能对事物特征和变化规律的一种抽象，且在它所涉及的范围内更普遍、更集中、更深刻地描述客体的特征。通过建立模型而达到的抽象是人们对客体认识的深化。\"]},\"229\":{\"h\":\"名词解释\",\"t\":[\"面向对象程序设计中的概念主要包括：对象（Object）、类（Class）、数据抽象、继承、动态绑定、数据封装（Encapsulation）、多态性、消息传递。通过这些概念面向对象的思想得到了具体的体现。\",\"对象：可以对其做事情的一些东西。一个对象有状态、行为和标识三种属性。\",\"类：一个共享相同结构和行为的对象的集合。 类定义了一件事物的抽象特点。通常来说，类定义了事物的属性和它可以做到的（它的行为）。举例来说，“狗”这个类会包含狗的一切基础特征，例如它的孕育、毛皮颜色和吠叫的能力。类可以为程序提供模版和结构。一个类的方法和属性被称为“成员”。\",\"封装：第一层意思：将数据和操作捆绑在一起，创造出一个新的类型的过程。第二层意思：将接口与实现分离的过程。\",\"继承：类与类之间的关系，在这种关系中，一个类共享了一个或多个其他类定义的结构和行为。继承描述了类之间的“是一种”关系。子类可以对基类的行为进行扩展、覆盖、重定义。\",\"组合：既是类与类之间的关系也是对象与对象之间的关系。在这种关系中一个对象或者类包含了其他的对象和类。组合描述了“有”关系。\",\"多态：类型理论中的一个概念，一个名称可以表示很多不同类的对象，这些类和一个共同超类有关。因此，这个名称表示的任何对象可以以不同的方式响应一些共同的操作集合。\",\"动态绑定：也称动态类型，指的是一个对象或者表达式的类型直到运行时才确定。通常由编译器插入特殊代码来实现。与之对立的是静态类型。\",\"静态绑定：也称静态类型，指的是一个对象或者表达式的类型在编译时确定。\",\"消息传递：指的是一个对象调用了另一个对象的方法（或者称为成员函数）。\",\"方法：也称为成员函数，是指对象上的操作，作为类声明的一部分来定义。方法定义了可以对一个对象执行那些操作。\"]},\"230\":{\"h\":\"不同语言间的对比\",\"t\":[\"Java\",\"JavaScript\",\"静态类型\",\"动态类型\",\"使用类，接口和枚举来定义类型\",\"使用函数和原型来定义类型\",\"在运行时类型无法改变\",\"类型可以在运行时变更\",\"需要给所有变量声明类型（强类型校验）\",\"声明变量时不需要指定类型（弱类型校验）\",\"构造器时特殊的方法\",\"构造器也是一个函数，与其他函数没有区别\",\"类和对象是不同的实体\",\"包括构造器，函数原型在内的一切都是对象\",\"支持静态方法和实例\",\"不直接支持静态方法和实例\",\"通过抽象类和接口支持抽象类型\",\"不直接支持抽象类型\",\"通过 private、package、protected、public 定义对象的作用域\",\"只支持 public 成员\",\"提供丰富的继承机制\",\"通过原型实现继承\",\"支持方法级的重写和重载机制\",\"不直接支持重写和重载\",\"提供丰富的反射特性\",\"具有一些反射特性\",\"提供包提供模块化支持\",\"没有直接的模块化支持\"]},\"231\":{\"c\":[\"前端技术\"]},\"232\":{\"c\":[\"JavaScript\"]},\"233\":{\"h\":\"词法语法\",\"t\":[\"ECMAScript 源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括标识符、控制符、行终止符、注释和空白符。\",\"同样地，ECMAScript 也定义了一些关键字、字面量以及行尾分号补全的规则\"]},\"234\":{\"h\":\"字符集\",\"t\":[\"JavaScript 程序使用 Unicode 字符集编写。Unicode 是 ASCII 和 Latin-1 的超集，并支持地球上几乎所有在使用的语言。ECMAScript3 要求 JavaScript 的实现必须支持 Unicode2.1 及后续版本，ECMAScript5 则要求支持 Unicode3 及后续版本。\"]},\"235\":{\"h\":\"区分大小写\",\"t\":[\"JavaScript 是区分大小写的语言，也就是说，关键字、变量、函数名和所有的标识符（Identifier）都必须采取一致的大小写的形式。但是需要注意的是，HTML 和 CSS 并不区分大小写（尽管 XHTML 区分大小写），也就是说如果我们在用 JavaScript 控制 HTML 属性的时候对 HTML 来说 id 和 ID 没区别，但是 JavaScript 有区别。\",\"🌰 代码示例：\",\"var abc = 1; var Abc = 2; var aBc = 3; var abC = 4; var ABC = 5; console.log(abc, Abc, aBc, abC, ABC); // 1 2 3 4 5\"]},\"236\":{\"h\":\"空格、换行符和格式控制符\",\"t\":[\"JavaScript 会忽略程序中 标识（Token）之间的空格。多数情况下，JavaScript 同样会忽略换行符。由于可以在代码中随意使用空格和换行，因此可以采用整齐、一致的缩进来形成统一的编码风格，从而提高代码的可读性。\"]},\"237\":{\"h\":\"空白字符 WhiteSpace\",\"t\":[\"\\\\u0009 水平制表符 <TAB> \\\\u000B 垂直制表符 <VT> \\\\u000C 换页符 <FF> \\\\u0020 空格符 <SP> \\\\u00A0 非中断空格符 <NBSP> \\\\uFEFF 字符序标记\"]},\"238\":{\"h\":\"行终止符 LineTerminator\",\"t\":[\"\\\\u000A 换行符 <LF> \\\\u000D 回车符 <CR> \\\\u2028 行分隔符 <LS> \\\\u2029 段落分割符 <PS>\",\"[!warning] 回车符加换行符在一起被解析成一个单行结束符\"]},\"239\":{\"h\":\"Unicode 转义序列\",\"t\":[\"在有些计算机硬件和软件里，无法显示或输入 Unicode 字符全集。为了兼容，JavaScript 定义了一种特殊序列，使用 6 个 ASCII 字符来代表任意 16 位 Unicode 内码。这些 Unicode 转义序列均以 \\\\u 为前缀，其后跟随 4 个十六进制数（使用数数字以及大写或小写的字母 A~F 表示），可以用于 JavaScript 直接量、正则表达式和标识符中（关键字除外）。\"]},\"240\":{\"h\":\"注释\",\"t\":[\"JavaScript 不会执行注释。\",\"我们可以添加注释来对 JavaScript 进行解释，或者提高代码的可读性。\"]},\"241\":{\"h\":\"单行注释\",\"t\":[\"单行注释以两个斜杠开头\",\"let a; // 变量a\"]},\"242\":{\"h\":\"多行注释\",\"t\":[\"多行注释又叫块级注释，以 /* 开头，以 */ 结尾\",\"/* 以下代码为 声明变量并 赋值 */ let a; a = 1;\",\"块级注释 /**/ 可以跨行书写，但不能嵌套，否则会报错。\",\"// Error /* 注释1 /* 注释1.1 */ */\",\"块级注释 /**/ 中的那些字符也可能出现在正则表达式字面量里，所以块级注释对于被注释的代码块来说是不安全的。\",\"/* var rm_a = /a*/.match(s); */\"]},\"243\":{\"h\":\"阻止执行\",\"t\":[\"注释可用于阻止其中一条代码行的执行（可用于调试）：\",\"// var a = 1; var a = 2;\"]},\"244\":{\"h\":\"行末注释\",\"t\":[\"在下面的例子中，我们把注释放到代码行的结尾处：\",\"var x = 5; // 声明 x 并把 5 赋值给它 var y = x + 2; // 声明 y 并把 x+2 赋值给它\"]},\"245\":{\"h\":\"直接量\",\"t\":[\"JavaScript 数据直接量：直接量（Literals），又名字面量，就是可以在程序中直接使用的数据。\",\"主要有以下几种直接量：\",\"空直接量\",\"null;\",\"布尔直接量\",\"true; false;\",\"数值直接量\",\"// 十进制 1234567890;\",\"[!warning] 十进制数值直接量可以以 0 开头，但是如果 0 以后的最高位比 8 小，数值将会被认为是八进制而不会报错\",\"// 二进制 0b10000000000000000000000000000000; // 2147483648\",\"二进制表示为开头是 0 后接大写或小写的 B（0b或者0B）。如果0b之后有除了 0 或 1 以外的数字，将会抛出错误。\",\"// 八进制 0o755; // 493\",\"进制表示为开头是 0 后接大写或小写的 O（0o 或 0O）。如果有不在 01234567 中的数字，将会抛出错误。\",\"// 十六进制 0xfffffffffffffffff; // 295147905179352830000\",\"十六进制表示为开头是 0 后接大写或小写的 X（0x或0X）。如果有不在 0123456789ABCDEF 中的数字，将会抛出错误。\",\"字符串直接量\",\"'foo'; 'bar'; // 十六进制转义序列 '\\\\xA9'; // \\\"©\\\" // Unicode转义序列 '\\\\u00A9'; // \\\"©\\\"\",\"对象直接量\",\"var o = { a: 'foo', b: 'bar', c: 42 }; // ES6中的简略表示方法 var a = 'foo', b = 'bar', c = 42; var o = { a, b, c }; // 不需要这样 var o = { a: a, b: b, c: c };\",\"数组直接量\",\"[1954, 1974, 1990, 2014];\",\"正则表达式直接量\",\"一个空的正则表达式直接量，必须有一个空的非捕获分组，以避免被当成是行注释符号。\",\"/ab+c/g /(?:)/\",\"模板字符串直接量\",\"`string text``string text line 1 string text line 2``string text ${expression} string text`;\"]},\"246\":{\"h\":\"标识符\",\"t\":[\"标识符，就是指变量、函数、属性的名字，或者函数的参数。标识符可以是按照下列格式规则组合起来的一或多个字符。\",\"第一个字符必须是一个字母、下划线（_）、或一个美元符号（$）\",\"其他字符可以是字母、下划线、美元符号或数字\",\"标识符中的字母也可以包含扩展的 ASCII 或 Unicode 字母字符，但我们不推荐这样做。\",\"按照惯例，ECMAScript 标识符采用驼峰大小写格式，也就是第一个字母小写，剩下的每个单词的首字母大写。\",\"const firstSecond = 123; const myCar = 'Toyota'; const doSomethingImportant = function () {};\",\"虽然没有谁强制要求必须采用这种格式，但为了与 ECMAScript 内置的函数和对象命名格式保持一致，可以将其当作一种最佳实践。\",\"[!warning] 不能把关键字、保留字、true、false 和 null 用作标识符。\"]},\"247\":{\"h\":\"关键字和保留字\",\"t\":[\"和其他任何编程语言一样，JavaScript 保留了一些标识符为自己所用。这些保留字不能用做普通的标识符。由于好多参考书的误导，貌似保留字和关键字是分开的，其实并不是，关键字只是保留字的一部分。\",\"保留字包括关键字、未来保留字、空字面量和布尔值字面量。\"]},\"248\":{\"h\":\"保留字\",\"t\":[\"键字 Keyword\",\"未来保留字 FutureReservedWord\",\"空字面量 NullLiteral\",\"布尔值字面量 BooleanLiteral\"]},\"249\":{\"h\":\"关键字\",\"t\":[\"以下关键字 ES6 规范中已实现\",\"break do instanceof typeof case else new var catch finally return void continue for switch while debugger function this with default if throw delete in try class extends const export import\"]},\"250\":{\"h\":\"未来保留字\",\"t\":[\"以上是 ECMAScript6 的保留字，但在 ECMAScript3 版本中的保留字并不一样，若希望代码能在基于 ECMAScript3 实现的解释器上运行的话，应该避免使用以下保留字作为标识符。\",\"abstract boolean byte char constdouble enum final float goto implements int interfacelong native package private protected public short static super throw transient volatile synchronized\"]},\"251\":{\"h\":\"预定义变量和函数\",\"t\":[\"此外，JavaScript 预定义了很多全局变量和函数，应该避免把它们的名字用做标识符名。\",\"String Number Boolean Array Date Function Math Object RegExp Error EvalError JSON Infinity NaN isNaN isFinite undefined arguments parseInt parseFloat eval decodeURI encodeURI decodeURIComponent encodeURIComponent RangeError ReferenceError TypeError URIError SyntaxError\"]},\"252\":{\"h\":\"分号\",\"t\":[\"JavaScript 使用分号 ; 将语句分隔开，这对增强代码的可读性和整洁性是非常重要的。\",\"有些地方可以省略分号，有些地方则不能省略分号。\",\"两条语句用两行书写，第一个分号可以省略\",\"a = 3 b = 4;\",\"两条语句用一行书写，第一个分号不能省略\",\"a = 3;b = 4;\",\"但 JavaScript 并不是在所有换行处都填补分号，只有在缺少了分号无法正确解析代码时，JavaScript 才会填补分号。换句话说，如果当前语句和随后的非空格字符不能当成一个整体来解析的话，JavaScript 就在当前语句行结束处填补分号。\",\"🌰 代码示例：\",\"var a a = 3 console.log(a)\",\"JavaScript 将其解析为:\",\"var a; a = 3; console.log(a);\"]},\"253\":{\"h\":\"自动分号补全\",\"t\":[\"JavaScript 并不是在所有换行处都填补分号，只有在缺少了分号就无法正确解析代码时，JavaScript 才会填补分号。换句话说，如果当前语句和随后的非空格字符不能当成一个整体来解析的话，JavaScript 就在当前语句行结束处填补分号。\",\"当出现一个不允许的行终止符或 } 时，会在其之前插入一个分号。 🌰 代码示例：\",\"{ 1 2 } 3 // 将会被 ASI 转换为 { 1 2 ;} 3;\",\"当捕获到标识符输入流的结尾，并且无法将单个输入流转换为一个完整的程序时，将在结尾插入一个分号。\",\"在下面这段中，由于在 b 和 ++ 之间出现了一个行终止符，所以 ++ 未被当成变量 b 的后置运算符。\",\"🌰 代码示例：\",\"a = b; ++c; // 将被ASI转换为 a = b; ++c;\",\"当语句中包含行终止符语法的时候（也就是语句后紧跟着换行），将会在行结尾插入一个分号。\",\"带 这里没有行终止符 规则的语句有：\",\"后置运算符（++ 和 --）\",\"`continue\",\"break\",\"return\",\"yield、yield*\",\"module\",\"return; a + b; // 将被 ASI 转换为 return; a + b; x; ++y; // 解析为 x; ++y; // 本意 x++; y;\",\"虽然分号不是必须的，但最好不要省略它，因为加上分号可以避免很多错误，代码行结尾处没有分号会导致压缩错误。加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了。\"]},\"254\":{\"c\":[\"前端技术\"]},\"255\":{\"c\":[\"JavaScript\"]},\"256\":{\"h\":\"巧用伪元素before和after制作绚丽效果\",\"t\":[\"CSS :before选择器 ：向选定的元素前插入内容。使用content 属性来指定要插入的内容。\",\"CSS :after选择器：向选定的元素之后插入内容。使用content 属性来指定要插入的内容。\",\"这两个伪元素会在真正页面元素之前和之后插入一个额外的元素，从技术角度上讲，它们与下面的HTML标记是等效的。\"]},\"257\":{\"h\":\"1. 伪类光圈\"},\"258\":{\"h\":\"2. 伪类括号效果\"},\"259\":{\"h\":\"3. 炫酷丝带效果\"},\"260\":{\"h\":\"双边丝带\"},\"261\":{\"h\":\"右边丝带\"},\"262\":{\"h\":\"箭头丝带\"},\"263\":{\"h\":\"多个箭头丝带\"},\"264\":{\"h\":\"悬挂标签\"},\"265\":{\"h\":\"4. 绚丽流动边框\"},\"266\":{\"h\":\"5. Tooltip提示\"},\"267\":{\"c\":[\"前端技术\"]},\"268\":{\"c\":[\"CSS\",\"代码片段\"]},\"269\":{\"h\":\"实现判断鼠标进入方向\"},\"270\":{\"h\":\"1. 纯css实现\",\"t\":[\"实现纯 CSS 判断鼠标进入方向，主要是先通过将 DIV 以对角线切割为 4 个部分，然后即可为这 4 个部分写入:hover 选择器执行不同方向的动画。\"]},\"271\":{\"h\":\"Clip-path\",\"t\":[\"使用 CSS3 的 clip-path 属性定向裁剪区域\"]},\"272\":{\"h\":\"Transform\",\"t\":[\"使用 CSS3 的 transfrom 属性，将 div 倾斜再旋转一定角度实现，需要同时用到 rotate 和 skew2 种 2D 变换。\"]},\"273\":{\"h\":\"2. JS实现\"},\"274\":{\"h\":\"判断方向算法\",\"t\":[\"JS 实现判断进入方向，依然是将 div 按对角线切割成 4 个三角形，然后通过判断鼠标事件中移入的点是否在三角形内来确定方向。这里涉及到了一个如何判断点在区域内的算法实现。\",\"/* 判断两点是否位于直线同一侧 * @param {Object} p - P点坐标 * @param {Object} o - O点坐标 * @param {Object} a - A点坐标(直线AB) * @param {Object} b - B点坐标(直线AB) * @return {Boolean} */ function isSameSide(p, o, a, b) { return ( ((p.x - a.x) * (b.y - a.y) - (p.y - a.y) * (b.x - a.x)) * ((o.x - a.x) * (b.y - a.y) - (o.y - a.y) * (b.x - a.x)) >= 0 ); }\"]},\"275\":{\"h\":\"移入方向判断\",\"t\":[\"如图，点 P 为鼠标事件移入获取到的点，当点 P 与点 O 在直线 AB 同一侧、点 P 与点 A 在直线 OB 同一侧、点 P 与点 B 在直线 AO 同一侧，即可判断出点 P 在三角形 AOB 内，即鼠标从上方进入。转换为代码即可写成:\",\"if (isSameSide(p,o,a,b) && isSameSide(p,a,o,b) && isSameSide(p,b,a,o)) { console.log('Slide From Top') }\"]},\"276\":{\"h\":\"移出方向判断\",\"t\":[\"同理，要判断移出方向，可以判断点 P 与点 O 不在直线 AB 同一侧、点 P 与点 A 是否在直线 OB 同一侧、点 P 与点 B 是否在直线 AO 同一侧，即可判断出鼠标从上方移出。转换为代码即可写成:\",\"if (!isSameSide(p,o,a,b) && isSameSide(p,a,o,b) && isSameSide(p,b,a,o)) { console.log('Slide Out Top') }\"]},\"277\":{\"h\":\"3. 总结\",\"t\":[\"使用纯 CSS 实现判断方向会有一个比较大的缺点，就是浏览器鼠标移动事件含有一定延迟，当鼠标速度很快的进入 div 时，有可能:hover 会延迟执行到后面的元素。 同时纯 CSS 方式只可判断移入方向，还未能实现可以同时判断移入和移出。需要在记录移入方向的同时，再记录移出方向目前想到的只可使用 JS 去辅助实现了。\",\"使用 JS 实现最主要是要运用到判断两点位于直线同侧的算法，这个算法只涉及四则运算，也比较简洁。获取DIV四个顶点和中心的坐标可以用 getBoundingClientRect() 来获取元素的 top,left,width,height 计算出来。\"]},\"278\":{\"c\":[\"前端技术\"]},\"279\":{\"c\":[\"CSS\",\"代码片段\"]},\"280\":{\"h\":\"登录界面\"},\"281\":{\"c\":[\"前端技术\"]},\"282\":{\"c\":[\"CSS\",\"代码片段\"]},\"283\":{\"h\":\"看板页面样式\",\"t\":[\"浅色看板\",\"深色看板\",\"管理看板\"]},\"284\":{\"c\":[\"前端技术\"]},\"285\":{\"c\":[\"CSS\",\"代码片段\"]},\"286\":{\"h\":\"1. 防抖&节流\"},\"287\":{\"h\":\"防抖\",\"t\":[\"使用场景：用于高频触发且有一定停顿的情况，单位时间内事件触发则等待时间会被重置，如：用户在短时间内多次点击登陆、搜索框根据输入的一部分值进行联想搜索(也可以使用节流)、短信验证码、resize等。\"]},\"288\":{\"h\":\"1. 前缘防抖\",\"t\":[\"// 前缘防抖（定时器版本），在一定时间间隔内的连续触发只执行首次 function debounceImmediateExecution(fn, delay){ let timer = null; return function (){ let args = [...arguments]; if(!timer){ // 首次触发或间隔 delay 时间后触发，立即执行 fn fn.apply(this, args); // 设置定时器 timer = setTimeout(function (){ timer = null; }, delay); }else{ // 在间隔时间内触发 // 取消旧的定时器 clearTimeout(timer); // 设置新的延时定时器 timer = setTimeout(function (){ timer = null; }, delay) } } }\",\"// 前缘防抖（时间戳版本，比使用定时器开销更低），在一定时间间隔内的连续触发只执行首次 function debounceImmediateExecutionPlus(fn, delay){ let last = Date.now(); let first = true; // 是否为首次执行 return function (){ let args = [...arguments]; if(first){ // 首次触发 fn.apply(this, args); last = Date.now(); first = false; }else{ // 后续触发 let now = Date.now(); if(now - last >= delay){ fn.apply(this, args); } last = now; } } }\"]},\"289\":{\"h\":\"2. 延迟防抖\",\"t\":[\"// 延迟防抖，在一定时间间隔内的连续触发只执行最后一次 function debounceDelayExecution(fn, delay){ let timer = null; return function (){ // 最后将这个闭包函数返回作为包装后的事件监听函数 clearTimeout(timer); // 取消旧的定时器 let _this = this; // this 指向监听的节点，此处不保存的话到了定时器回调函数中 this 就会变为 window let args = [...arguments]; // 事件监听函数的参数 // 重置定时器 timer = setTimeout(function (){ fn.apply(_this, args); }, delay) } } // 个人理解：延迟防抖最好用定时器实现，因为需要在满足某个条件后，让 fn 在经过 delay 时间后执行\"]},\"290\":{\"h\":\"3. 可选前缘或延迟防抖\",\"t\":[\"// 防抖完整版（相当于前缘防抖和延迟防抖都使用定时器实现时的结合），可选前缘防抖（默认）或者延迟防抖 function debounce(fn, delay = 500, immediate = true) { let timer = null return function () { const _this = this const args = [...arguments] if (timer) clearTimeout(timer) if (immediate) { let callNow = !timer timer = setTimeout(function () { timer = null }, delay) if (callNow) { fn.apply(_this, args) } } else { timer = setTimeout(function () { fn.apply(_this, args) }, delay) } } }\"]},\"291\":{\"h\":\"节流\",\"t\":[\"使用场景：用于需要执行多次且触发相对平滑的情况，单位时间内事件只能触发一次，如：scroll 事件、mouseover事件、播放事件等。\"]},\"292\":{\"h\":\"1. 前缘节流\",\"t\":[\"// 前缘节流，首次触发立即生效，后续需要间隔一段时间触发才生效 function throttleImmediateExecution(fn, delay){ let timer = null; // 使用定时器实现 return function (){ let _this = this; // 当前 this 保存，以免后续处理中 this 丢失 if(!timer){ fn.apply(_this, arguments); timer = setTimeout(function (){ timer = null; }, delay); } } }\"]},\"293\":{\"h\":\"2. 延迟节流\",\"t\":[\"// 延迟节流，首次及后续都需要间隔一段时间触发才生效 function throttleDelayExecution(fn, delay){ let last = Date.now(); // 使用时间戳实现 return function (){ let now = Date.now(); if(now - last >= delay){ fn.apply(this, arguments); last = now; } } }\"]},\"294\":{\"h\":\"3. 可选前缘或延迟节流\",\"t\":[\"// 可选前缘节流或延迟节流 function throttle(fn, delay, isImmediate = true){ // isImmediate?前缘节流:延迟节流 let last = Date.now(); return function (){ let now = Date.now(); if(isImmediate){ fn.apply(this, arguments); isImmediate = false; last = now; } if(now - last >= delay){ fn.apply(this, arguments); last = now; } } }\"]},\"295\":{\"c\":[\"前端技术\"]},\"296\":{\"c\":[\"JavaScript\",\"代码片段\"]},\"297\":{\"h\":\"传输层协议\",\"t\":[\"传输层（Transport Layer）的主要任务就是负责向两台主机进程之间的通信提供通用的 数据传输服务。应用进程利用该服务传送应用层报文。\",\"网络协议族中有两个具有代表性的传输层协议，分别是 TCP 和 UDP。\",\"传输控制协议 TCP：提供面向连接的，可靠的数据传输服务\",\"用户数据协议 UDP：提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）\"]},\"298\":{\"h\":\"TCP\",\"t\":[\"传输控制协议（Transmission Control Protocol，简称 TCP）是一种 面向连接（连接导向）的、可靠的、 基于 IP 协议的传输层协议。\",\"面向连接：每条 TCP 连接只能有两个端点（亦即点对点，不可广播、多播），每一条 TCP 连接只能是一对一\",\"可靠的传输服务：通过 TCP 连接传送的数据，无差错、不丢失、不重复、并且按序到达，丢包时通过重传机制进而增加时延实现可靠性\",\"全双工通信：TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据\",\"字节流：面向字节流，TCP 中的 流（Stream）指的是流入进程或从进程流出的字节序列\",\"流量缓冲：解决速度不匹配问题\"]},\"299\":{\"h\":\"数据包结构\",\"t\":[\"TCP 首部标志比特有 6 个：URG、ACK、PSH、RST、SYN、FIN\",\"控制位\",\"名称\",\"说明\",\"URG\",\"Urgent Flag\",\"紧急指针\",\"ACK\",\"Acknowledge Flag\",\"确认序号有效\",\"PSH\",\"Push Flag\",\"尽可能快地将数据送往接收进程\",\"RST\",\"Reset Flag\",\"可能需要重现创建建 TCP 连接\",\"SYN\",\"Synchronize\",\"同步序号来发起一个连接\",\"FIN\",\"Finish\",\"发送方完成发送任务，要求释放连接\",\"Seq\",\"Sequance number\",\"序列号\"]},\"300\":{\"h\":\"三次握手\",\"t\":[\"TCP 提供 面向连接 的通信传输。面向有连接是指在数据通信开始之前先做好两端之间的准备工作，也就是说无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。\",\"三次握手是指建立一个 TCP 连接时需要客户端和服务器端总共发送三个包以确认连接的建立。\"]},\"301\":{\"h\":\"握手的目标\",\"t\":[\"三次握手的目的：\",\"同步连接双方的 Sequence 序列号和确认号\",\"初始序列号 ISN（Initial Sequence Number）\",\"交换 TCP 窗口大小信息\",\"如 MSS、窗口比例因子、选择性确认、指定校验和算法\",\"在 Socket 编程中，这一过程由客户端执行 connect 来触发。\",\"三次握手流程图\",\"第一次握手：建立连接。客户端发送连接请求报文段，将标志比特位 SYN 置为 1，随机产生一个序列号码 Sequence Number 值为 X（由操作系统动态随机选取一个 32 位长的序列号），并将该数据包发送给服务端，客户端进入 SYN_SENT 状态，等待服务端确认。\",\"第二次握手：服务端收到 SYN 报文段。服务端收到数据包后需要对标志位 SYN 报文段进行确认，确认后设置确认号码 Acknowledgment Number 为 X+1（Sequence Number+1）；同时，自己还要发送 SYN 请求信息（以建立服务端对客户端的连接），将 SYN 设置为 1，设置 Sequence Number 值为 Y（由操作系统动态随机选取一个 32 位长的序列号），服务端将上述所有信息放到一个报文段（即 SYN+ACK 报文段）中，一并发送给客户端以确认建立连接请求，服务端进入 SYN_RCVD 状态。\",\"第三次握手：客户端收到服务端的 SYN+ACK 报文段。确认后，然后将 Acknowledgment Number 设置为 Y+1，向服务端发送 ACK 报文段，这个报文段发送完毕后，客户端和服务器端进入 ESTABLISHED 状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了。\",\"握手过程中传送的包里 不包含数据，只有三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP 连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。\"]},\"302\":{\"h\":\"握手报文\",\"t\":[\"SYN 报文\",\"SYN/ACK 报文\",\"ACK 报文\"]},\"303\":{\"h\":\"其他问题\",\"t\":[\"未连接队列\",\"在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的 SYN 包（syn=j）开设一个条目，该条目表明服务器已收到 SYN 包，并向客户端发出确认，正在等待客户端的确认包。这些条目所标识的连接在服务器处于 SYN_RECV 状态，当服务器收到客户端的确认包时，删除该条目，服务器进入 ESTABLISHED 状态。\",\"为什么建立 TCP 连接需要三次握手？\",\"主要是为了防止服务端开启无用的连接。\",\"因为我们知道网络传输是有延时的，因为终端间隔了非常远的距离，数据包通过光纤以及各种中间代理服务器进行传输，但是在服务端和客户端的传输过程中，往往由于网络传输的不稳定原因丢失了数据包，客户端一直没有收到服务端返回的数据包，客户端可能设置了超时时间关闭了连接创建，那么就会再发起新的请求。如果没有第三次握手，服务端是不知道客户端到底有没有接收到服务端返回给他的数据的，客户端也没有一个确认说要关闭还是要创建这个请求，服务端的端口就一直开着，等着客户端发送实际的请求数据，那么这个时候开销就浪费了，服务端不知道这个连接已经创建失败了，可能客户端已经创建别的连接去了。\",\"所以我们需要三次握手来确认这个过程，让服务端和客户端能及时察觉到网络原因导致的网络连接的关闭的问题，从而规避网络传输中因为延时导致导致的服务器开销问题。\",\"三次握手中的第一次握手可以携带数据吗？\",\"不可以，因为三次握手还没完成。\",\"第三次握手可以发送数据吗？为何？\",\"可以。因为能够发出第三次握手报文的主机，肯定接收到第二次（来自服务端）的握手报文。因为伪造 IP 的主机不会收到第二次报文。\",\"对方难道不可以将数据缓存下来，等握手成功后再提交给应用程序？\",\"这样会放大 SYN FLOOD 攻击。如果攻击者伪造了成千上万的握手报文，携带了 1K+ 字节的数据，而接收方会开辟大量的缓存来容纳这些巨大数据，内存会很容易耗尽，从而拒绝服务。\"]},\"304\":{\"h\":\"四次挥手\",\"t\":[\"四次挥手即终止 TCP 连接，就是指断开一个 TCP 连接时，需要客户端和服务端总共发送 4 个包以确认连接的断开。在 Socket 编程中，这一过程由客户端或服务端任一方执行 close 来触发。\",\"由于 TCP 连接是 全双工 的，因此，每个方向都必须要 单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个 FIN 来终止这一方向的连接，收到一个 FIN 只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个 TCP 连接上仍然能够发送数据，直到这一方向也发送了 FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭。\",\"四次挥手流程图\",\"第一次挥手：客户端设置 Sequence Number，发送一个 FIN 报文段，用于关闭客户端到服务器端的数据传送，客户端进入 FIN_WAIT_1 状态。意思是说「我客户端没有数据要发给你了」，但是如果你服务器端还有数据没有发送完成，则不必急着关闭连接，可以继续发送数据。\",\"第二次挥手：服务器端收到 FIN 报文段，回复 ACK 报文段，Acknowledgment Number 为 Sequence Number 加 1，告诉客户端，你的请求我收到了，我同意你的关闭请求。这个时候客户端就进入 FIN_WAIT_2 状态。\",\"第三次挥手：当服务器端确定数据已发送完成，则向客户端发送 FIN 报文段，告诉客户端，好了，我这边数据发完了，准备好关闭连接了。服务器端进入 LAST_ACK 状态。\",\"第四次挥手：客户端收到 FIN 报文段后，就知道可以关闭连接了，但是他还是不相信网络，怕服务器端不知道要关闭，所以发送 ACK 报文段回复服务端，然后进入 TIME_WAIT 状态，如果服务端端没有收到 ACK 则可以重传。服务器端收到 ACK 后，就知道可以断开连接了。客户端等待了 2MSL（通常是两分钟）后依然没有收到回复，则证明服务器端已正常关闭，那好，我客户端也可以关闭连接了。最终完成了四次握手。\",\"MSL（Maximum Segment Lifetime）报文最大生存时间。维持 2MSL 时长的 TIME-WAIT 状态，保证至少一次报文的往返时间内端口是不可复用。\",\"第一次挥手是服务端确认客户端需要断开连接\",\"第二次挥手是客户端确认服务器接收断开请求\",\"第三次挥手是客户端确认服务器数据发完，断开连接\",\"第四次挥手是服务端确认客户端断开连接，断开连接\",\"所以如果服务端的数据全部发送完，是没有第三次挥手，直接进入第四次挥手。\",\"为什么断开 TCP 连接需要四次挥手？\",\"由于 TCP 连接采取全双工的通信方式，因此每个方向都必须单独进行关闭，这个原则是当一方完成它的数据发送任务后就能发送一个 FIN 来终止这个方向的连接。收到一个 FIN 只意味着这一方向上没有数据流动，一个 TCP 连接在收到一个 FIN 后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。\",\"为什么基于 TCP 的程序往往都有个应用层的心跳检测机制？\",\"TCP 建立链接后，只是在两端的内核里面维持 TCP 信息，实际上并没有一个物理的连接通路，对端这个时候挂了，谁也不知道。\"]},\"305\":{\"h\":\"重传机制\"},\"306\":{\"h\":\"拥塞控制机制\"},\"307\":{\"h\":\"流量控制机制\"},\"308\":{\"h\":\"可靠传输机制\"},\"309\":{\"h\":\"UDP\",\"t\":[\"用户数据报协议（User Datagram Protocol，UDP），又称使用者资料包协定，是一个简单的面向数据包的传输层协议，正式规范为 RFC 768。\",\"在 TCP/IP 模型中，UDP 为网络层以上和应用层以下提供了一个简单的接口。UDP 只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以 UDP 有时候也被认为是不可靠的数据报协议）。UDP 在 IP 数据报的头部仅仅加入了复用和数据校验（字段）。\"]},\"310\":{\"h\":\"特点\",\"t\":[\"无需建立连接（减少延迟）\",\"尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态\",\"UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要短\",\"没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如直播，实时视频会议等）\",\"支持一对一、一对多、多对一和多对多的交互通信\"]},\"311\":{\"h\":\"实践\",\"t\":[\"基于 UDP 协议的有：\",\"域名系统（DNS）\",\"简单网络管理协议（SNMP）\",\"动态主机配置协议（DHCP）\",\"路由信息协议（RIP）\",\"自举协议（BOOTP）\",\"简单文件传输协议（TFTP）\"]},\"312\":{\"h\":\"数据通信形式\",\"t\":[\"单工数据传输只支持数据在一个方向上传输\",\"半双工数据传输允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信\",\"全双工数据通信允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力\"]},\"313\":{\"h\":\"TCP 与 UDP\",\"t\":[\"TCP\",\"UDP\",\"连接性\",\"面向连接\",\"无连接\",\"双工性\",\"全双工（1:1）\",\"n:m\",\"可靠性\",\"可靠（重传机制）\",\"可靠（丢包后数据丢失）\",\"有序性\",\"有序（通过 SYN 排序）\",\"无序\",\"有界性\",\"无，有沾包情况\",\"有消息边界，无沾包\",\"拥塞控制\",\"有\",\"无\",\"传输速度\",\"慢\",\"快\",\"量级\",\"低\",\"20-60 字节\",\"头部大小\",\"高\",\"8 字节\"]},\"314\":{\"c\":[\"前端技术\"]},\"315\":{\"c\":[\"计算机网络\"]},\"316\":{\"h\":\"计算机网络体系\"},\"317\":{\"h\":\"OSI 七层模型\",\"t\":[\"应用层 ：允许访问 OSI 环境的手段（应用协议数据单元 APDU）\",\"表示层 ：对数据进行翻译、加密和压缩（表示协议数据单元 PPDU）\",\"会话层 ：建立、管理和终止会话（会话协议数据单元 SPDU）\",\"传输层 ：提供端到端的可靠报文传递和错误恢复（段 Segment）\",\"网络层 ：负责数据包从源到宿的传递和网际互连（包 PackeT）\",\"数据链路层 ：将比特组装成帧和点到点的传递（帧 Frame）\",\"物理层 ：通过媒介传输比特,确定机械及电气规范（比特 Bit）\"]},\"318\":{\"h\":\"TCP/IP 概念层模型\",\"t\":[\"应用层（Application Layer）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等\",\"传输层（Transport Layer）的主要任务就是 负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。\",\"网络层 的任务就是选择合适的网间路由和交换结点，确保计算机通信的数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报 ，简称数据报。\",\"数据链路层（Data Link Layer）通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。 在两个相邻节点之间传送数据时，数据链路层将网络层接下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。\",\"在 物理层 上所传送的数据单位是比特。 物理层（physical layer）的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。 在互联网使用的各种协议中最重要和最著名的就是 TCP/IP 两个协议。\"]},\"319\":{\"c\":[\"前端技术\"]},\"320\":{\"c\":[\"计算机网络\"]},\"321\":{\"h\":\"关于Doctype\",\"t\":[\"Doctype是HTML5的文档声明，通过它可以告诉浏览器，使用哪一个HTML版本标准解析文档。在浏览器发展的过程中，HTML出现过很多版本，不同的版本之间格式书写上略有差异。如果没有事先告诉浏览器，那么浏览器就不知道文档解析标准是什么？此时，大部分浏览器将开启最大兼容模式来解析网页，我们一般称为怪异模式，这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的bug，所以文档声明是必须的。\"]},\"322\":{\"c\":[\"前端技术\",\"面经\"]},\"323\":{\"c\":[\"HTML\"]},\"324\":{\"h\":\"1. BFC和浮动清除\"},\"325\":{\"h\":\"1. 什么是BFC\",\"t\":[\"\\\"BFC容器\\\"通常是指\\\"块级格式化上下文容器\\\"（Block Formatting Context Container）。块级格式化上下文（BFC）是在CSS中用来管理和控制元素在页面上布局和排列的一种机制。BFC容器是一种具有特定规则的HTML元素或CSS属性，它们会创建一个独立的上下文，影响其内部元素的布局和排列方式。BFC容器是CSS布局中的一个重要概念，可以帮助开发人员更精确地控制元素的布局和排列\",\"BFC的作用：\",\"清除浮动：BFC容器可以用来清除浮动元素的影响，确保父元素包含浮动子元素的高度，从而避免出现高度塌陷问题。这是BFC最常见的应用之一，特别是在创建多列布局或类似网格的布局时非常有用。\",\"防止外边距重叠：在同一个BFC容器内的相邻块级元素的外边距不会发生重叠，这有助于更精确地控制元素之间的间距。这对于垂直外边距塌陷问题的解决非常有帮助。\",\"如何创建BFC：\",\"float: right || left; position: absolute || fixed; display: flex || inline-flex || inline-block || table-cell; overflow: hidden || auto || overly || scroll;\"]},\"326\":{\"h\":\"2.浮动和清除浮动\"},\"327\":{\"c\":[\"前端技术\",\"面经\"]},\"328\":{\"c\":[\"CSS\"]},\"329\":{\"h\":\"2. display属性有哪些值\",\"t\":[\"CSS display 属性设置元素是否被视为块或者内联元素以及用于子元素的布局，例如流式布局、网格布局或弹性布局。\",\"形式上，display 属性设置元素的内部和外部的显示类型。外部类型设置元素参与流式布局；内部类型设置子元素的布局。一些 display 值在它们自己的单独规范中完整定义；例如，在 CSS 弹性盒模型的规范中，定义了声明 display: flex 时会发生的细节。\",\"/* precomposed values */ display: block; display: inline; display: inline-block; display: flex; display: inline-flex; display: grid; display: inline-grid; display: flow-root; /* box generation */ display: none; display: contents; /* two-value syntax */ display: block flow; display: inline flow; display: inline flow-root; display: block flex; display: inline flex; display: block grid; display: inline grid; display: block flow-root; /* other values */ display: table; display: table-row; /* all table elements have an equivalent CSS display value */ display: list-item; /* Global values */ display: inherit; display: initial; display: revert; display: revert-layer; display: unset;\",\"关键值可以被分为六个种类：\",\"外部表现\",\"这些关键字规定元素的外部显示类型，实际上就是其在流式布局中的角色：\",\"block 该元素生成一个块级元素盒，在正常的流中，该元素之前和之后产生换行\",\"inline 该元素生成一个或多个内联元素盒，它们之前或者之后并不会产生换行。在正常的流中，如果有空间，下一个元素将会在同一行上。\",\"内部表现\",\"这些关键字规定了元素的内部显示类型，其定义了该内容布局时的格式上下文的类型（假设它是一个非替换元素）：\",\"float 该元素使用流式布局（块和内联布局）来排布它的内容。\",\"如果它的外部显示类型是 inline 或 run-in，并且它参与一个块或者内联格式上下文，那么它将生成一个内联盒子。否则它将生成一个块容器盒。\",\"根据其他属性的值（例如 position、float 或 overflow）以及它自身是否参与到块或者内联格式化上下文，它要么为它的内容建立新的区块格式化上下文（BFC），要么将其内容集成到其父元素的格式化上下文中。\",\"float-root 该元素生成一个块级元素盒，其会建立一个新的区块格式化上下文，定义格式化上下文的根元素。\",\"table 该元素的行为类似于 HTML 中的 <table> 元素。它定义了一个块级别的盒子。\",\"flex 该元素的行为类似块级元素并且根据弹性盒模型布局它的内容。\",\"grid 该元素的行为类似块级元素并且根据网格模型布局它的内容。\",\"ruby 该元素的行为类似内联元素并且根据 ruby 格式化模型布局它的内容。它的行为像关联的 HTML 的 <ruby> 元素。\",\"列表元素\",\"list-item 的单独值将导致元素的行为类似于一个列表元素。其可以与 list-style-type 和 list-style-position 一起使用。\",\"内部\",\"一些布局模型，例如 table 和 ruby 有一个复杂的内置结构，它们的子孙后代可以扮演几个不同的角色。本节定义的这些“内部”display 值，仅在特定的布局模式下有用。\",\"table-row-group 该元素的行为类似于 HTML 的 <tbody> 元素。\",\"table-footer-group 该元素的行为类似于 HTML 的 <tfoot> 元素。\",\"table-row-group 该元素的行为类似于 HTML 的 <tbody> 元素。\",\"table-row 该元素的行为类似于 HTML 的 <tr> 元素。\",\"table-cell 该元素的行为类似于 HTML 的 <td> 元素。\",\"table-row-group 该元素的行为类似于 HTML 的 <tbody> 元素。\",\"table-column-group 该元素的行为类似于 HTML 的 <colgroup> 元素。\",\"table-column 该元素的行为类似于 HTML 的 <col> 元素。\",\"table-caption 该元素的行为类似于 HTML 的 <caption> 元素。\",\"ruby-base 该元素的行为类似于 HTML 的 <rb> 元素。\",\"ruby-text 该元素的行为类似于 HTML 的 <rt> 元素。\",\"ruby-base-container 该元素是作为匿名盒子生成的。\",\"ruby-text-container 该元素的行为类似于 HTML 的 <rtc> 元素。\",\"盒\",\"这些关键词定义一个元素到底是否产生 display 盒\",\"contents 这些元素自身不会产生特定的盒子。它们被伪盒子（pseudo-box）和子盒子取代。请注意，CSS Display Level 3 规范中定义了 contents 值如何影响“异常元素”——这些元素不是纯粹由 CSS 盒模型概念呈现的（例如替换元素）。\",\"none 使元素不再显示，其对布局不会有影响（文档渲染得好像这个元素并不存在）。所有的后代元素也不会再显示。为了使元素占据一个它通常占据的空间，但实际上没有渲染任何东西，应该使用 visibility 属性。\",\"预组合\",\"CSS 2 为 display 属性使用单关键字的预组合的语法，对相同布局模式的块级和内联级变体需要单独的关键字。\",\"inline-block 该元素生成块级元素盒，如果它是一个单独的内联盒，它将和周围的内容一起流动（行为类似于替换元素）。 它等同于 inline flow-root\",\"inline-table inline-table 值在 HTML 中没有直接的映射。它行为类似于 HTML 的 <table> 元素，但实际是一个内联盒，而不是一个块级盒子。table 盒内部是一个块级上下文。\",\"它等同于 inline table\",\"inline-flex 元素的行为类似于内联元素并且它的内容根据弹性盒模型布局。\",\"它等同于 inline flex\",\"inline-grid 元素的行为类似于内联元素并且它的内容根据网格盒模型布局。\",\"它等同于 inline grid\"]},\"330\":{\"c\":[\"前端技术\",\"面经\"]},\"331\":{\"c\":[\"CSS\"]},\"332\":{\"h\":\"3. flex弹性布局\",\"t\":[\"Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 任何一个容器都可以指定为Flex布局。\",\"采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。\",\"容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\",\"项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\",\"容器的属性\",\"flex-direction 决定主轴的方向（即项目的排列方向）。\",\"flex-wrap 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\",\"flex-flow flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\",\".box { flex-flow: <flex-direction> <flex-wrap>; }\",\"justify-content justify-content属性定义了项目在主轴上的对齐方式。\",\"align-items align-items属性定义项目在交叉轴上如何对齐。\",\"align-content align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\",\"flex-start：与交叉轴的起点对齐。 flex-end：与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴。\",\"项目的属性\",\"order order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\",\"flex-grow flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\",\"flex-shrink flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 负值对该属性无效\",\"flex-basis flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\",\"flex flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\",\"align-self align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\"]},\"333\":{\"c\":[\"前端技术\",\"面经\"]},\"334\":{\"c\":[\"CSS\"]},\"335\":{\"h\":\"4. CSS选择器的权重和优先级\"},\"336\":{\"h\":\"选择器权重\",\"t\":[\"当多个样式规则应用于同一个元素时，浏览器需要决定哪个样式规则应该被优先应用。这就是选择器权重的概念\",\"ID选择器: 权重为100\",\"类选择器: 权重为10\",\"属性选择器: 权重为10\",\"伪类选择器: 权重为10\",\"标签选择器: 权重为1\",\"伪元素选择器: 权重为1\",\"兄弟选择器: 权重为0\",\"子选择器: 权重为0\",\"后代选择器: 权重为0\",\"通配符选择器: 权重为0\"]},\"337\":{\"h\":\"优先级规则\",\"t\":[\"!important具有最高优先级，将覆盖其他规则的样式。\",\"内联样式具有第二高的优先级，将覆盖外部和嵌入样式表中的所有选择器。\",\"ID选择器具有第三高的优先级，将覆盖类选择器、伪类选择器和属性选择器的样式。\",\"类选择器、伪类选择器和属性选择器具有中等优先级，将覆盖标签选择器和伪元素选择器的样式。\",\"标签选择器和伪元素选择器具有最低优先级，将被其他选择器的样式所覆盖。\"]},\"338\":{\"c\":[\"前端技术\",\"面经\"]},\"339\":{\"c\":[\"CSS\"]},\"340\":{\"h\":\"1. ES6的常用语法\"},\"341\":{\"h\":\"1. let 和 const\",\"t\":[\"var有变量提升，有初始化提升，值可变\",\"let有变量提升，没有初始化提升，值可变\",\"const有变量提升，没有初始化提升，值不可变，但如果是定义对象，则属性可变\",\"let 和 const 存在暂时性死区\",\"var name = '张三' function fn () { console.log(name) let name = 'zhang3' } fn() // Cannot access 'name' before initialization\",\"for循环\",\" for (var i = 0; i < 5; i++) { setTimeout(() => { console.log(i) // 5*5 }) } for (let i = 0; i < 5; i++) { setTimeout(() => { console.log(i) // 0,1,2,3,4 }) }\"]},\"342\":{\"h\":\"2. 函数默认参数\",\"t\":[\"function fn(name='张三',age=18){ console.log(name,age) } fn() fn('李四',25)\"]},\"343\":{\"h\":\"3. 扩展运算符\",\"t\":[\"可以对一层结构的数组和对象进行深拷贝，如果数组或对象中的元素是引用类型的元素，那么会产生浅拷贝\",\"let a = { name: '张三', list: [1, 2, 3], obj: { id: 1 } } let b = { ...a } b.obj.id = 2 console.log('a：', a, 'b：', b)\",\"在函数调用中将一个数组变为参数序列\",\"function sum(x, y, z) { return x + y + z; } const numbers = [1, 2, 3]; //不使用延展操作符 console.log(sum.apply(null, numbers)); //使用延展操作符 console.log(sum(...numbers)); // 6\",\"剩余参数\",\"function fn (name, ...params) { console.log(name) console.log(params) } fn ('张三', 1, 2) // 张三 [ 1, 2 ] fn ('张三', 1, 2, 3, 4, 5) // 张三 [ 1, 2, 3, 4, 5 ]\"]},\"344\":{\"h\":\"4. 模版字符串\",\"t\":[\"方便字符串插值\",\"const a = 5; const b = 10; console.log(`Fifteen is ${a + b} and not ${2 * a + b}.`); // \\\"Fifteen is 15 and // not 20.\\\"\",\"tips： 模板字面量直接将其表达式强制转换为字符串，而加法则会先强制转换为原语类型。\"]},\"345\":{\"h\":\"5. Object.keys\",\"t\":[\"可以用来获取对象的key的集合，进而可以获得对应key的value\",\"const obj = { name: '张三', age: 22, gender: '男' } const keys = Object.keys(obj) console.log(keys) // [ 'name', 'age', 'gender' ]\"]},\"346\":{\"h\":\"6. 箭头函数\",\"t\":[\"const fn = () => {} // 如果只有一个参数，可以省略括号 const fn = name => {} // 如果函数体里只有一句return const fn = name => { return 2 * name } // 可简写为 const fn = name => 2 * name // 如果返回的是对象 const fn = name => ({ name: name })\",\"普通函数和箭头函数的区别：\",\"箭头函数不可作为构造函数，不能使用new\",\"箭头函数没有自己的this\",\"箭头函数没有arguments对象\",\"箭头函数没有原型对象\"]},\"347\":{\"h\":\"7. Array.prototype.forEach\",\"t\":[\"遍历数组\",\"const eachArr = [1, 2, 3, 4, 5] // 三个参数：遍历项 索引 数组本身 // 配合箭头函数 eachArr.forEach((item, index, arr) => { console.log(item, index, arr) })\"]},\"348\":{\"h\":\"8. Array.prototype.map\",\"t\":[\"常用于返回一个处理过后的新数组\",\"const mapArr = [1, 2, 3, 4, 5] // 三个参数：遍历项 索引 数组本身 // 配合箭头函数，对每一个元素进行翻倍 const mapArr2 = mapArr.map((num, index, arr) => 2 * num) console.log(mapArr2) // [ 2, 4, 6, 8, 10 ]\",\" let a = ['1','2','3'].map(parseInt) console.log(a) // [1,NaN,NaN]\"]},\"349\":{\"h\":\"9. Array.prototype.filter\",\"t\":[\"过滤数组\",\"// 返回数组中的所有素数 const array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]; function isPrime(num) { for (let i = 2; num > i; i++) { if (num % i === 0) { return false; } } return num > 1; } console.log(array.filter(isPrime)); // [2, 3, 5, 7, 11, 13]\"]},\"350\":{\"h\":\"10. Array.prototype.some\",\"t\":[\"试数组中是否至少有一个元素通过了由提供的函数实现的测试。如果在数组中找到一个元素使得提供的函数返回 true，则返回 true；否则返回 false。它不会修改数组。\",\"const array = [1, 2, 3, 4, 5]; // Checks whether an element is even const even = (element) => element % 2 === 0; console.log(array.some(even)); // Expected output: true\"]},\"351\":{\"h\":\"11. Array.prototype.every\",\"t\":[\"测试一个数组内的所有元素是否都能通过指定函数的测试。它返回一个布尔值。\",\"const isBelowThreshold = (currentValue) => currentValue < 40; const array1 = [1, 30, 39, 29, 10, 13]; console.log(array1.every(isBelowThreshold)); // Expected output: true\"]},\"352\":{\"h\":\"12. Array.prototype.reduce\",\"t\":[\"对数组中的每个元素按序执行一个提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。\",\"第一次执行回调函数时，不存在“上一次的计算结果”。如果需要回调函数从数组索引为 0 的元素开始执行，则需要传递初始值。否则，数组索引为 0 的元素将被用作初始值，迭代器将从第二个元素开始执行（即从索引为 1 而不是 0 的位置开始）。\",\"const array1 = [1, 2, 3, 4]; // 0 + 1 + 2 + 3 + 4 const initialValue = 0; const sumWithInitial = array1.reduce( (accumulator, currentValue) => accumulator + currentValue, initialValue, ); console.log(sumWithInitial); // Expected output: 10\",\"// 统计数组元素出现次数 const names = ['张三', '李四', '王五', '张三', '李四', '张飞'] const countedNames = names.reduce((allNames, name) => { const currCount = allNames[name] ?? 0 return { ...allNames, [name]: currCount + 1 } }, {}) console.log(countedNames)\",\"空数组执行reduce如果不指定初始值会报错\"]},\"353\":{\"h\":\"13. 对象属性同名简写\",\"t\":[\"const name = '张三' const age = '22' // 属性同名可简写 const obj = { name, age } console.log(obj) // { name: '张三', age: '22' }\"]},\"354\":{\"h\":\"14. 解构赋值\",\"t\":[\"let obj = { name:'张三', age:22, doing:{ evening:'睡觉' } } const { name: myname, age } = obj const { doing: { evening } } = obj console.log(myname,age.evening) // 张三 22 睡觉\",\"const arr = [1, 2, 3] const [a, b, c] = arr console.log(a, b, c) // 1 2 3 // 默认赋值 const [a, b, c, d = 5] = arr console.log(a, b, c, d) // 1 2 3 5 // 乱序解构 const { 1: a, 0: b, 2: c } = arr console.log(a, b, c) // 2 1 3\"]},\"355\":{\"h\":\"15. find和findIndex\",\"t\":[\"find：找到返回被找元素，找不到返回 undefined\",\"findIndex：找到返回被找元素索引，找不到返回 -1\",\"const findArr = [ { name: '科比', no: '24' }, { name: '罗斯', no: '1' }, { name: '利拉德', no: '0' } ] const kobe = findArr.find(({ name }) => name === '科比') const kobeIndex = findArr.findIndex(({ name }) => name === '科比') console.log(kobe) // { name: '科比', no: '24' } console.log(kobeIndex) // 0\"]},\"356\":{\"h\":\"16. for of 和 for in\",\"t\":[\"for in ：遍历方法，可遍历对象和数组\",\"for of ：遍历方法，只能遍历数组，不能遍历非iterable对象\"]},\"357\":{\"h\":\"17. Set和Map\"},\"358\":{\"h\":\"18. Promise\"},\"359\":{\"h\":\"19. class\"},\"360\":{\"c\":[\"前端技术\",\"面经\"]},\"361\":{\"c\":[\"JavaScript\"]},\"362\":{\"h\":\"2. ES6以上常用语法\"},\"363\":{\"h\":\"1. ES7\"},\"364\":{\"h\":\"1. includes\",\"t\":[\"传入元素，如果数组中能找到此元素，则返回true，否则返回false\",\"跟indexOF有区别\",\"const arr = [1, 2, NaN] console.log(arr.indexOf(NaN)) // -1 indexOf找不到NaN console.log(arr.includes(NaN)) // true includes能找到NaN\"]},\"365\":{\"h\":\"2. 求幂运算\",\"t\":[\"const num = 3 ** 2 // 9\"]},\"366\":{\"h\":\"2. ES8\"},\"367\":{\"h\":\"1. Object.values\",\"t\":[\"可以用来获取对象的value的集合\",\"const obj = { name: '张三', age: 22, gender: '男' } const values = Object.values(obj) console.log(values) // [ '张三', 22, '男' ]\"]},\"368\":{\"h\":\"2. Object.entries\",\"t\":[\"用来获取对象的键值对集合\",\"const obj = { name: '张三', age: 22, gender: '男' } const entries = Object.entries(obj) console.log(entries) // [ [ 'name', '张三' ], [ 'age', 22 ], [ 'gender', '男' ] ]\"]},\"369\":{\"h\":\"3. async/await\"},\"370\":{\"h\":\"ES9\"},\"371\":{\"h\":\"1. for await of\",\"t\":[\"function fn (time) { return new Promise((resolve, reject) => { setTimeout(() => { resolve(`${time}毫秒后我成功啦！！！`) }, time) }) } async function asyncFn () { const arr = [fn(3000), fn(1000), fn(1000), fn(2000), fn(500)] for await (let x of arr) { console.log(x) } } asyncFn() 3000毫秒后我成功啦！！！ 1000毫秒后我成功啦！！！ 1000毫秒后我成功啦！！！ 2000毫秒后我成功啦！！！ 500毫秒后我成功啦！！！\"]},\"372\":{\"h\":\"2. Promise.finally\",\"t\":[\"无论失败或者成功状态，都会执行这个函数\",\"new Promise((resolve, reject) => { resolve('成功喽') }).then( res => { console.log(res) }, err => { console.log(err) } ).finally(() => { console.log('我是finally') }) new Promise((resolve, reject) => { reject('失败喽') }).then( res => { console.log(res) }, err => { console.log(err) } ).finally(() => { console.log('我是finally') })\"]},\"373\":{\"h\":\"ES10\"},\"374\":{\"h\":\"1. Array.flat\",\"t\":[\"// 二维数组变一维数组 const arr = [1, 2, 3, [4, 5, 6]] console.log(arr.flat()) // [ 1, 2, 3, 4, 5, 6 ] // 传递一个参数表示降维的次数 const arr = [1, 2, 3, [4, 5, 6, [7, 8, 9]]] console.log(arr.flat(2)) // [1, 2, 3, 4, 5, 6, 7, 8, 9] // 如果传的是一个无限大的数字，那么就实现了多维数组(无论几维)降为一维数组 const arr = [1, 2, 3, [4, 5, 6, [7, 8, 9, [10, 11, 12]]]] console.log(arr.flat(Infinity)) // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\"]},\"375\":{\"h\":\"2. Array.flatMap\",\"t\":[\"就是flat + map\",\"let arr = [\\\"科比 詹姆斯 安东尼\\\", \\\"利拉德 罗斯 麦科勒姆\\\"]; console.log(arr.flatMap(x => x.split(\\\" \\\"))); // [ '科比', '詹姆斯', '安东尼', '利拉德', '罗斯', '麦科勒姆' ]\"]},\"376\":{\"h\":\"3. BigInt\",\"t\":[\"BigInt是ES10新加的一种JavaScript数据类型，用来表示表示大于 2^53 - 1 的整数，2^53 - 1是ES10之前，JavaScript所能表示最大的数字\"]},\"377\":{\"h\":\"4. Object.fromEntries\",\"t\":[\"把键值对数组转为对象\",\"const arr = [ ['name', '张三'], ['age', 22], ['gender', '男'] ] console.log(Object.fromEntries(arr)) // { name: '张三', age: 22, gender: '男' }\",\"把Map转为对象\",\"const map = new Map() map.set('name', '张三') map.set('age', 22) map.set('gender', '男') console.log(map) // Map(3) { 'name' => '张三', 'age' => 22, 'gender' => '男' } const obj = Object.fromEntries(map) console.log(obj) // { name: '张三', age: 22, gender: '男' }\"]},\"378\":{\"h\":\"5. String.trimStart && String.trimEnd\",\"t\":[\"trimStart和trimEnd用来单独去除字符串的首和尾的空格\",\"const str = ' 张三 ' // 去除首部空格 console.log(str.trimStart()) // '张三 ' // 去除尾部空格 console.log(str.trimEnd()) // ' 张三'\"]},\"379\":{\"h\":\"ES11\"},\"380\":{\"h\":\"1. Promise.allSettled\",\"t\":[\"接收一个Promise数组，数组中如有非Promise项，则此项当做成功\",\"把每一个Promise的结果，集合成数组，返回\",\"function fn(time, isResolve) { return new Promise((resolve, reject) => { setTimeout(() => { isResolve ? resolve(`${time}毫秒后我成功啦！！！`) : reject(`${time}毫秒后我失败啦！！！`) }, time) }) } Promise.allSettled([fn(2000, true), fn(3000), fn(1000)]).then(res => { console.log(res) // 3秒后输出 [ { status: 'fulfilled', value: '2000毫秒后我成功啦！！！' }, { status: 'rejected', reason: '3000毫秒后我失败啦！！！' }, { status: 'rejected', reason: '1000毫秒后我失败啦！！！' } ] })\"]},\"381\":{\"h\":\"2. ?. 和 ??\",\"t\":[\"?.，中文名为可选链\",\"比如我们需要一个变量，是数组且有长度，才做某些操作\",\"const list = null // do something if (list && list.length) { // do something } // 使用可选链 const list = null // do something if (list?.length) { // do something }\",\"比如有一个对象，我要取一个可能不存在的值，甚至我们都不确定obj是否存在\",\"const obj = { cat: { name: '哈哈' } } const dog = obj && obj.dog && obj.dog.name // undefined // 可选链 const obj = { cat: { name: '哈哈' } } const dog = obj?.dog?.name // undefined\",\"比如有一个数组，我不确定它存不存在，存在的话就取索引为1的值\",\"const arr = null // do something const item = arr && arr[1] // 可选链 const arr = null // do something const item = arr?.[1]\",\"比如有一个函数，我们不确定它存不存在，存在的话就执行它\",\"const fn = null // do something const res = fn && fn() // 可选链 const fn = null // do something const res = fn?.()\",\"??，中文名为空位合并运算符\",\"??和||最大的区别是，在??这，只有undefined和null才算假值\",\"const a = 0 ?? '是' // 0 const b = '' ?? '是' // '' const c = false ?? '是' // false const d = undefined ?? '是' // 是 const e = null ?? '是' // 是\"]},\"382\":{\"h\":\"ES12\"},\"383\":{\"h\":\"1. Promise.any\",\"t\":[\"接收一个Promise数组，数组中如有非Promise项，则此项当做成功\",\"如果有一个Promise成功，则返回这个成功结果\",\"如果所有Promise都失败，则报错\",\"// 当有成功的时候，返回最快那个成功 function fn(time, isResolve) { return new Promise((resolve, reject) => { setTimeout(() => { isResolve ? resolve(`${time}毫秒后我成功啦！！！`) : reject(`${time}毫秒后我失败啦！！！`) }, time) }) } Promise.any([fn(2000, true), fn(3000), fn(1000, true)]).then(res => { console.log(res) // 1秒后 输出 1000毫秒后我成功啦 }, err => { console.log(err) }) // 当全都失败时 function fn(time, isResolve) { return new Promise((resolve, reject) => { setTimeout(() => { isResolve ? resolve(`${time}毫秒后我成功啦！！！`) : reject(`${time}毫秒后我失败啦！！！`) }, time) }) } Promise.any([fn(2000), fn(3000), fn(1000)]).then(res => { console.log(res) }, err => { console.log(err) // 3秒后 报错 all Error })\"]},\"384\":{\"h\":\"2. 数字分隔符\",\"t\":[\"const num = 1000000000 // 使用数字分隔符 const num = 1_000_000_000\"]},\"385\":{\"h\":\"3. ||= 和 &&=\",\"t\":[\"或等于(||=) a ||= b 等同于 a || (a = b); 且等于(&&=) a &&= b 等同于 a && (a = b);\"]},\"386\":{\"c\":[\"前端技术\",\"面经\"]},\"387\":{\"c\":[\"JavaScript\"]},\"388\":{\"h\":\"3. for...in 和 for...of的区别\",\"t\":[\"for in遍历的是数组的索引（index），而for of遍历的是数组元素值（value）\",\"for in更适合遍历对象，当然也可以遍历数组，但是会存在一些问题：\",\"index索引为字符串型数字，不能直接进行几何运算\",\"var arr = [1,2,3] for (let index in arr) { let res = index + 1 console.log(res) } //01 11 21\",\"遍历顺序有可能不是按照实际数组的内部顺序\",\"使用for in会遍历数组所有的可枚举属性，包括原型，如果不想遍历原型方法和属性的话，可以在循环内部判断一下，使用hasOwnProperty()方法可以判断某属性是不是该对象的实例属性\",\"var arr = [1,2,3] Array.prototype.a = 123 for (let index in arr) { let res = arr[index] console.log(res) } //1 2 3 123 for(let index in arr) { if(arr.hasOwnProperty(index)){ let res = arr[index] console.log(res) } } // 1 2 3\",\"for of遍历的是数组元素值，而且for of遍历的只是数组内的元素，不包括原型属性和索引\",\"var arr = [1,2,3] arr.a = 123 Array.prototype.a = 123 for (let value of arr) { console.log(value) } //1 2 3\",\"for of适用遍历数/数组对象/字符串/map/set等拥有迭代器对象（iterator）的集合，但是不能遍历对象，因为没有迭代器对象，但如果想遍历对象的属性，你可以用for in循环（这也是它的本职工作）或用内建的Object.keys()方法\",\"var myObject={ a:1, b:2, c:3 } for (var key of Object.keys(myObject)) { console.log(key + \\\": \\\" + myObject[key]); } //a:1 b:2 c:3\"]},\"389\":{\"c\":[\"前端技术\",\"面经\"]},\"390\":{\"c\":[\"JavaScript\"]},\"391\":{\"h\":\"4. 改变this指向的方法有哪些\",\"t\":[\"call、bind、apply方法\"]},\"392\":{\"h\":\"1. call\",\"t\":[\"使用方法\",\"function person(a,b,c){ console.log(this); console.log(this.name,this.age) } person(); // 1.直接调用，this指向window // 打印 window // 打印 undefined,undefined const obj = {name:\\\"owl\\\",age:18} person.call(obj) // 2.传入指定的this值 // 打印 {name: 'owl', age: 18} // owl 18 function person(a,b,c){ console.log(a,b,c) console.log(this); console.log(this.name,this.age) } person.call(obj,1,2,3) // 3.给person函数传入指定的this值和实参值 // 打印 1 2 3 // {name: 'owl', age: 18} // owl 18\",\"如何实现call方法\",\"Function.prototype.myCall = function (obj) { if (typeof this !== \\\"function\\\") { throw new Error( \\\"Function.prototype.myCall - what is trying to be bound is not callable\\\" ); } const ctx = obj || window; // 1.定义一个ctx变量获取传入的对象obj，如果没有则取window ctx.func = this; // 2.在ctx对象上新增一个属性func，并且给他赋值为this // this就是调用myCall函数的函数,在本例中就是person()方法 const args = Array.from(arguments).slice(1); // 3.处理传入的参数，第一个参数为对象obj， // 所以从第二个开始参数截取 const result = arguments.length > 1 ? ctx.func(...args) : ctx.func(); // 4. 如果传入参数，我们就把实参带入到func函数中执行，如果没有，则直接执行。 delete ctx.func; // 5. 执行完函数以后，记得删除掉这个“中间变量”属性 ctx return result; // 6. 返回result };\",\"在上面的代码中，func其实就是person函数，ctx则是我们传入要指定this指向的对象，也就是 {name: 'owl', age: 18}。 那么我们在第四步使用ctx.func()或者ctx.func(...args)调用func()时是不是就满足了上篇文章中的调用对象的函数方法时，被调用函数中的this永远指向这个对象。 所以自然而然就实现了我们手动改变this指向的目的。\",\" var obj = { name: \\\"owllai\\\", }; function testCall(a, b, c) { console.log(this.name, a, b, c); } testCall.myCall(obj,1,2,3)\"]},\"393\":{\"h\":\"2. apply\",\"t\":[\"apply和call的唯一区别就在于，接收的第二个参数为类数组。\",\"除此之外，和call几乎一模一样，所以我们在使用和实现自定义apply方法的代码里只需要修改对应的部分就行了。\",\"使用方法\",\" function person(a,b,c){ console.log(this); console.log(this.name,this.age) } person(); // 1.直接调用，this指向window // 打印 window // 打印 undefined,undefined const obj = {name:\\\"owl\\\",age:18} person.apply(obj) // 2.传入指定的this值 // 打印 {name: 'owl', age: 18} // owl 18 function person(a,b,c){ console.log(a,b,c) console.log(this); console.log(this.name,this.age) } person.apply(obj,[1,2,3]) // 3.给person函数传入指定的this值和实参值(类数组对象) // 打印 1 2 3 // {name: 'owl', age: 18} // owl 18\",\"实现方法\",\" Function.prototype.myApply = function (obj) { if (typeof this !== \\\"function\\\") { throw new Error( \\\"Function.prototype.myApply - what is trying to be bound is not callable\\\" ); } const ctx = obj || window; // 1.定义一个ctx变量获取传入的对象obj，如果没有则取window ctx.func = this; // 2.在ctx对象上新增一个属性func，并且给他赋值为this // this就是调用myApply函数的函数,在本例中就是person()方法 const args = arguments[1]; // 3.处理传入的参数，第一个参数为对象obj， // 第二个参数为数组实参 const result = arguments[1] ? ctx.func(...arguments[1]) : ctx.func(); //第四步： 调用方法，获得结果。 delete ctx.func; return result; };\"]},\"394\":{\"h\":\"3. bind\",\"t\":[\"使用方法\",\" function person(a, b, c) { console.log(this); console.log(this.name, this.age); } const obj = { name: \\\"owl\\\", age: 18 }; let newPerson = person.bind(obj); console.log(newPerson); // ƒ person(a, b, c) { // console.log(this); // console.log(this.name, this.age); // } newPerson(); // {name: 'owl', age: 18} // owl 18 function person(a, b, c) { console.log(a,b,c) console.log(this); console.log(this.name, this.age); } let newPersonWithArgs = person.bind(obj,1,2,3) ; newPersonWithArgs(); // 1 2 3 // {name: 'owl', age: 18} // owl 18\",\"实现方式\",\" Function.prototype.myBind = function (obj) { if (typeof this !== \\\"function\\\") { throw new Error( \\\"Function.prototype.bind - what is trying to be bound is not callable\\\" ); } var self = this; // 这个this代表调用myBind方法的函数，在本例中也就是person函数 var args = Array.prototype.slice.call(arguments, 1); var fn = function () { var newArgs = Array.prototype.slice.call(arguments); return self.apply( //如果没有进行判断,永远写死obj作为apply的第一个参数,那么如果对fn这个返回函数进行new时,这个fn函数的this指向永远是外部传过来的obj //这样是不正确的,如果作为new关键字使用这个fn函数,this指向必须是指向new出来的实例对象 //怎么判断是不是用new关键字来调用呢? // 我们可以用 instanceof 来判断返回函数的原型是否在实例的原型链上 // 如果返回函数是被new了,那这个返回函数的实例对象的this就指向了person函数 this instanceof fn ? this : obj, args.concat(newArgs) ); }; // 创建一个空函数 var tmpFn = function () {}; // 修改返回函数的 prototype 为绑定函数的 prototype，实例就可以继承绑定函数的原型中的值 // 可以直接使用 fn.prototype = this.prototype (this代表fn) // fn.prototype = this.prototype; // 也就是让返回函数的原型对象和person函数的原型对象映射 // 至于为什么使用一个空函数 tmpFn 作为中介，把 fn.prototype 赋值为空对象的实例（原型式继承）， // 这是因为直接 fn.prototype = this.prototype 有一个缺点，修改 fn.prototype 的时候，也会直接修改 this.prototype ； // tmpFn空函数的原型指向绑定函数的原型 tmpFn.prototype = this.prototype; //(this代表person函数) // 空对象的实例赋值给 fn.prototype fn.prototype = new tmpFn(); return fn; };\"]},\"395\":{\"c\":[\"前端技术\",\"面经\"]},\"396\":{\"c\":[\"JavaScript\"]},\"397\":{\"h\":\"5. 在本地实现一个聊天室，多个tab页相互通信，不能用websocket，有哪些方法？\",\"t\":[\"使用LocalStorage或SessionStorage：这两个Web存储API可在浏览器的不同标签页之间共享数据。当一个标签页发送消息时，将消息存储在LocalStorage或SessionStorage中。其他标签页可以监听该存储区的变化，并读取最新的消息内容来实现通信效果。\",\"使用Broadcast Channel API：Broadcast Channel API 可以在浏览器的不同上下文（包括不同的标签页）之间进行双向通信。当一个标签页发送消息到广播频道时，其他标签页可以通过监听相同的广播频道来接收和响应消息。\",\"使用SharedWorker：SharedWorker 是一种在多个浏览器上下文之间共享脚本执行的机制，它可以在不同的标签页之间进行通信。可以创建一个SharedWorker，然后在各个标签页中连接到该SharedWorker，使它们能够共享数据和通信。\",\"以上方法都可以实现在本地多个标签页之间进行通信，但需要根据具体需求和项目情况选择适合的解决方案。需要注意的是，这些方法只适用于本地通信，无法实现跨网络的实时通信效果，若需要实现更复杂的聊天室功能，WebSocket仍是更常用的选择。\"]},\"398\":{\"c\":[\"前端技术\",\"面经\"]},\"399\":{\"c\":[\"JavaScript\"]},\"400\":{\"h\":\"1. Vue2.0 和 Vue3.0 响应式原理区别\"},\"401\":{\"h\":\"1. Vue2.0 和 Vue3.0的原理\",\"t\":[\"Vue2.0实现MVVM(双向数据绑定)的原理是通过 Object.defineProperty 来劫持各个属性的setter、getter，在数据变动时发布消息给订阅者，触发相应的监听回调。Vue 3.0实现响应式基于ES6的Proxy。两者的差异如下：\",\"Vue2.0\",\"基于Object.defineProperty，不具备监听数组的能力，需要重新定义数组的原型来达到响应式。\",\"Object.defineProperty 无法检测到对象属性的添加和删除 。\",\"由于Vue会在初始化实例时对属性执行getter/setter转化，所有属性必须在data对象上存在才能让Vue将它转换为响应式。\",\"深度监听需要一次性递归，对性能影响比较大。\",\"Vue3.0\",\"基于Proxy和Reflect，可以原生监听数组，可以监听对象属性的添加和删除。\",\"不需要一次性遍历data的属性，可以显著提高性能。\",\"因为Proxy是ES6新增的属性，有些浏览器还不支持,只能兼容到IE11。\"]},\"402\":{\"h\":\"2. Vue2.0响应式实现\",\"t\":[\"由于Object.defineProperty 无法监听数组，所以数组类型实现响应式，需要处理。 判断如果是数组类型，就重写数组的原型方法('push','pop','shift'等方法)\",\" // 重新定义数组原型，Object.defineProperty不具备监听数组的方法 const oldArrayProperty = Array.prototype; const arrProto = Object.create(oldArrayProperty); [\\\"push\\\",\\\"pop\\\",\\\"shift\\\",\\\"unshift\\\",\\\"splice\\\"].forEach( methodName => (arrProto[methodName] = function() { updateView(); oldArrayProperty[methodName].call(this, ...arguments); }) )\",\"将传入的data属性进行深度监听，判断是对象还是数组。\",\" function observer(target){ if(typeof target !== 'object' || target === null){ return target } // 如果是数组类型,重写数组原型的方法(\\\"push\\\",\\\"pop\\\",\\\"shift\\\",\\\"unshift\\\",\\\"splice\\\") if(Array.isArray(target)){ target.__proto__ == arrProto; } // 如果是对象，遍历对象所有的属性，并使用Object.defineProperty把这些属性全部转为getter/setter for(let key in target){ defineReactive(target,key,target[key]) } }\",\"核心API Object.defineProperty，将传入属性转为getter/setter\",\"function defineReactive(target, key, value){ // 如果对象有更多的层级，再次调用observer监听方法，实现深层次的监听。 observer(value); Object.defineProperty(target, key, { get(){ return value; }, set(newValue){ // 设置值的时候也需要深度监听 observer(value); if(newValue !== value){ value = newValue; // 数据驱动视图，如果数据改变，就调用视图更新的方法。对应到Vue中是执行VDOM updateView(); } } }) }\",\"数据更新会触发视图更新，这是MVVM的绑定原理，这就会涉及到Vue的template编译为render函数，在执行Virtual Dom， Diff算法等内容。\",\" function updateView(){ console.log('视图更新') }\"]},\"403\":{\"h\":\"3. Vue3.0 响应式的实现\",\"t\":[\"Vue3.0 基于Proxy来做数据大劫持代理，可以原生支持到数组的响应式，不需要重写数组的原型，还可以直接支持新增和删除属性， 比Vue2.x的Object.defineProperty更加的清晰。\",\" const proxyData = new Proxy(data, { get(target,key,receive){ // 只处理本身(非原型)的属性 const ownKeys = Reflect.ownKeys(target) if(ownKeys.includes(key)){ console.log('get',key) // 监听 } const result = Reflect.get(target,key,receive) return result }, set(target, key, val, reveive){ // 重复的数据，不处理 const oldVal = target[key] if(val == oldVal){ return true } const result = Reflect.set(target, key, val,reveive) return result }, // 删除属性 deleteProperty(target, key){ const result = Reflect.deleteProperty(target,key) return result } })\"]},\"404\":{\"c\":[\"前端技术\",\"面经\"]},\"405\":{\"c\":[\"Vue\"]},\"406\":{\"h\":\"2. Proxy相关\"},\"407\":{\"h\":\"1. Proxy能够监听到对象中的对象的引用吗？\",\"t\":[\"Proxy默认只代理一层对象的属性\",\"想代理多层的解决办法是：在返回的时候，判断是否是一个对象，如果是对象的话，再次用Proxy代理，返回代理对象\"]},\"408\":{\"h\":\"2. 如何让proxy去监听基本数据类型\",\"t\":[\"Proxy无法直接监听基本数据类型（如字符串、数字、布尔值等），因为它们是不可变的。Proxy只能在对象级别上进行操作，而不是基本数据类型。\",\"当我们尝试使用Proxy包装基本数据类型时，会得到一个TypeError错误，因为基本数据类型不具有属性和方法：\",\"const value = 'Hello'; const handler = { set(target, property, value) { console.log(`Setting property '${property}' to '${value}'`); target[property] = value; return true; } }; const proxyValue = new Proxy(value, handler); // TypeError: Cannot create proxy with a non-object as target\",\"如果要监听基本数据类型的更改，最好使用其他方式，例如通过触发事件或调用回调函数来通知更改。可以创建一个自定义的数据包装器，将基本数据类型包装在对象中，并在该对象上实现监听逻辑。或者直接给对象属性赋值基本类型，然后给对象添加Proxy以监听其属性的更改。\",\"示例：\",\"function ValueWrapper(value) { this.value = value; this.onChange = null; } ValueWrapper.prototype.setValue = function (newValue) { this.value = newValue; if (typeof this.onChange === 'function') { this.onChange(this.value); } } const wrapper = new ValueWrapper('Hello'); wrapper.onChange = newValue => { console.log(`Value changed: ${newValue}`); } wrapper.setValue('Hi'); // 输出：Value changed：Hi // 给对象添加Proxy以监听其属性的更改 const obj= { value: 'Hello' } const handler = { set(target, property, value) { console.log(`Setting property '${property}' to '${value}'`); target[property] = value; return true; } }; const proxyObj = new Proxy(obj, handler); proxyObj.value = 'Hi'; // 输出：Setting property 'value' to 'Hi'\"]},\"409\":{\"c\":[\"前端技术\",\"面经\"]},\"410\":{\"c\":[\"Vue\"]},\"411\":{\"h\":\"3. vuex相关\"},\"412\":{\"h\":\"1. vuex的概念\",\"t\":[\"vuex是一个专为 Vue.js 应用程序开发的状态管理模式， 采用集中式存储管理应用的所有组件的状态，解决多组件数据通信。(简单来说就是管理数据的,相当于一个仓库,里面存放着各种需要共享的数据,所有组件都可以拿到里面的数据)\",\"vuex解决的问题：\",\"多个组件依赖于同一状态时，对于多层嵌套的组件的传参将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。\",\"来自不同组件的行为需要变更同一状态。以往采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。\"]},\"413\":{\"h\":\"2. vuex的5个核心属性\",\"t\":[\"state、getters、mutations、actions、modules\"]},\"414\":{\"c\":[\"前端技术\",\"面经\"]},\"415\":{\"c\":[\"Vue\"]},\"416\":{\"h\":\"1. XSS和CSRF\"},\"417\":{\"h\":\"1. XSS（跨站脚本攻击）\",\"t\":[\"XSS 攻击指的是跨站脚本攻击，是一种 代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\",\"避免方式：\",\"服务端拼接后返回 HTML 是一种避免 XSS 攻击的常见方法，也就是 SSR（Server-Side Rendering，服务端渲染），这种方式可以在服务端进行输入过滤和转义，从而避免恶意脚本的注入用服务端拼接后返回（不使用服务端渲染）\",\"对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。\",\"对用户输入的地方和变量都需要仔细检查长度和对 ”<”,”>”,”;”,”’” 等字符做过滤\"]},\"418\":{\"h\":\"2. CSRF（跨站请求伪造）\",\"t\":[\"CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\",\"避免方式：\",\"添加验证码验证\",\"使用 token 验证\",\"限制 cookie 不能作为被第三方使用\",\"进行同源检测\"]},\"419\":{\"c\":[\"前端技术\"]},\"420\":{\"c\":[\"浏览器\",\"面经\"]},\"421\":{\"h\":\"2. 进程和线程\"},\"422\":{\"h\":\"1. 进程（Process）\",\"t\":[\"进程是计算机中正在运行的程序的实例，一个进程就是一个程序运行实例。它拥有独立的内存空间、代码和数据，并且由操作系统负责调度和管理。每个进程在执行时都会分配独立的内存空间，不同进程之间的内存是隔离的，一个进程的错误不会直接影响其他进程。 进程之间通过进程间通信（IPC）机制来交换数据和进行通信，常见的IPC方式包括管道、消息队列、共享内存等。进程的切换开销较大，因为需要保存和恢复进程的完整状态，涉及到内存保护和虚拟内存的切换。\"]},\"423\":{\"h\":\"2. 线程（Thread）\",\"t\":[\"线程是进程的子任务，一个进程可以包含多个线程。它们共享相同的代码和数据，但拥有独立的执行栈和寄存器集合。多个线程可以在同一进程内并发执行，共享进程的资源，如内存空间、打开的文件等。线程间的通信和数据交换比进程间的通信更加方便，因为它们共享相同的地址空间。线程的切换开销较小，因为线程共享进程的地址空间，切换时不需要切换内存页表，速度较快。\"]},\"424\":{\"h\":\"3. 区别\",\"t\":[\"进程和线程都可以实现并发执行，但进程是独立的执行实体，而线程是依赖于进程的。\",\"进程之间资源相互隔离，线程共享所属进程的资源。\",\"创建和销毁线程的开销较小，而创建和销毁进程的开销较大。\",\"多线程程序的编程复杂度通常比单线程程序高，但多线程可以更好地利用多核处理器来提高程序的执行效率。\"]},\"425\":{\"h\":\"4. 浏览器有哪些进程\",\"t\":[\"主进程：负责处理用户输入、渲染页面等主要任务。\",\"渲染进程：渲染进程负责解析HTML、CSS和JavaScript，并将网页渲染成可视化内容。\",\"GPU进程：负责处理浏览器中的GPU加速任务。\",\"网络线程：网络进程负责处理浏览器中的网络请求和响应，包括下载网页和资源等。\",\"插件进程：负责浏览器插件运行。\"]},\"426\":{\"c\":[\"前端技术\"]},\"427\":{\"c\":[\"浏览器\",\"面经\"]},\"428\":{\"h\":\"3. 协商缓存和强缓存\"},\"429\":{\"h\":\"1. 强缓存\",\"t\":[\"使用强缓存策略时，如果缓存资源有效，浏览器会从本地读取缓存资源并返回200，不必再向服务器发起请求。强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。\",\"Expires 指定资源的过期时间。在过期时间以内，改资源可以被缓存使用，不需要向浏览器发送请求。这个时间依赖于服务器时间，会存在服务器时间和客户端时间不一致。\",\"Cache-Control属性：\",\"private 仅浏览器可以缓存\",\"public 浏览器和代理服务器都可以缓存\",\"max-age=xxx 过期时间，单位为秒\",\"no-cache 不进行强缓存，但会有协商缓存\",\"no-store 不强缓存，也不协商缓存\",\"注意：当两种方式一起使用时，Cache-Control 的优先级要高于 Expires。\"]},\"430\":{\"h\":\"2. 协商缓存\",\"t\":[\"如果设置强缓存，无需发起请求，直接使用缓存内容。如果没有命中强缓存，设置了协商缓存，也不需要发起请求，使用缓存。\",\"命中协商缓存条件：\",\"Cache-Control: no-cache\",\"max-age 时间过期\",\"在使用协商缓存时，会先向服务器发送一个请求，如果资源没有发生修改，则请求返回304状态，让浏览器使用本地缓存。如果资源发生修改，则返回修改后的内容\",\"在 requestheaders 中的 Etag 属性和 Last-Modified 属性，来进行设置。其中，ETage 优先于 Last-Modified。\",\"Etag文件改动：\",\"服务器在返回资源的时候，在头信息中添加 Etag 属性，这个属性是资源的唯一标识符。当资源改变，这个值也会改变。下次请求资源时，会在请求头中添加 If-None-Match 属性，为上一次请求的资源的 Etag 值。服务端会通过这个属性和资源最后一次修改时间进行对比，以此来判断资源是否修改。这种方式比 Last-Modified 更加准确。\",\"Last-Modified 上次修改时间：\",\"服务器通过在响应头上添加 Last-Modified 属性，来指出资源最后一次修改时间。当浏览器发起请求时，会在请求头上添加一个 IF-Modified-Since 属性，值为上一次资源请求的 Last-Modified 的值。服务器会通过这个属性和最后修改时间来进行比较，以此来判断资源是否修改。如果没有资源修改，返回304状态，使用本地缓存。如果资源修改，就返回最新资源，200状态。 这种方式有个缺点，Last-Modified 标记的时间只能精确到1秒，如果文件在1秒内修改，但是 Last-Modified 却没有改变，这样会造成缓存命中的不准确。\"]},\"431\":{\"h\":\"3. 区别\",\"t\":[\"强缓存优先级高于协商缓存\",\"协商缓存不论命中与否都会发送一次请求\",\"强缓存返回 200 ，协商缓存命中返回 304\",\"Ctrl+F5 会强制刷新会跳过所有缓存，而F5刷新跳过强缓存，但是会检查协商缓存。\"]},\"432\":{\"h\":\"4. 为什么需要浏览器缓存\",\"t\":[\"减少了服务器的负担，提高了网站的性能\",\"加快了客户端网页的加载速度\",\"减少了多余网络数据传输\"]},\"433\":{\"c\":[\"前端技术\"]},\"434\":{\"c\":[\"浏览器\",\"面经\"]},\"435\":{\"h\":\"4. 浏览器渲染\"},\"436\":{\"h\":\"1. 常见浏览器所用内核\",\"t\":[\"IE浏览器内核，Trident 内核，也是俗称的IE内核\",\"Chrome 浏览器内核，以前是 Webkit 内核，现在是 Blink 内核\",\"Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核\",\"Safari 浏览器内核：Webkit 内核\",\"360浏览器、猎豹浏览器内核：IE + Chrome 双内核\"]},\"437\":{\"h\":\"2. 浏览器的渲染过程\",\"t\":[\"解析文档，生成 DOM 树\",\"解析 CSS ，根据 CSS 规则生成 CSSOM 规则树\",\"在 CSSOM 树和 DOM 树生成完后，合并 DOM 、 CSSOM 树构建渲染树\",\"渲染树构建完成后，开始计算元素大小和位置【回流发生在这个阶段】\",\"根据计算好的位置信息将内容渲染到屏幕上【重绘发生在这个阶段】\"]},\"438\":{\"h\":\"3. 浏览器渲染优化\",\"t\":[\"优化 javaScript ，JavaScript 会阻塞 HTML 的解析，改变 JavaScrip 加载方式。\",\"将 JavaScript 放到 body 最后面\",\"尽量使用异步加载JS资源，这样不会阻塞 DOM 解析，如 defer 、 async\",\"优化 CSS 加载\",\"CSS 样式少，使用内嵌样式\",\"导入外部样式使用 link ，而不是 @import ，因为它会阻塞渲染。\",\"减少回流重绘\",\"避免频繁操作样式\",\"避免频繁操作 DOM\",\"复杂动画使用定位脱离文当流\",\"使用 transform 替代动画\"]},\"439\":{\"h\":\"4. 回流与重绘\",\"t\":[\"回流：当DOM变化影响了元素，比如元素的尺寸、布局、显示隐藏等改变了，需要重写构建。每个页面至少需要一次回流，就是在页面第一次加载的时候，这个时候一定会发生回流。\",\"重绘：当一个元素的外观发生变化，但是没有改变布局，重新渲染元素的外观。比如 background-color 、 color\",\"如何避免回流重绘：\",\"避免使用 table 布局\",\"尽可能在 DOM 树的最末端改变 class\",\"不要频繁的操作元素的样式\",\"避免设置多层内联样式\",\"开启 GPU 加速\",\"使用 absolute 或者 fixed ，脱离标准文档流\",\"注意：回流必将引起重绘，而重绘不一定会引起回流\"]},\"440\":{\"c\":[\"前端技术\"]},\"441\":{\"c\":[\"浏览器\",\"面经\"]},\"442\":{\"h\":\"5. Cookie、LocalStorage、SessionStorage\"},\"443\":{\"h\":\"Cookie\",\"t\":[\"大小只有4kb\",\"跨域不能共享\",\"不安全，容易被劫持\",\"只存在请求头中\"]},\"444\":{\"h\":\"SessionStorage\",\"t\":[\"存储在内存中，体积相对较大\",\"页面关闭，数据会消失\",\"相对Cookie安全\"]},\"445\":{\"h\":\"LocalStorage\",\"t\":[\"体积大，可以存储更多内容。\",\"生命周期长，除非手动删除，不然会一直存在\",\"存储在硬盘中，不会像Cookie一样被请求携带\"]},\"446\":{\"c\":[\"前端技术\"]},\"447\":{\"c\":[\"浏览器\",\"面经\"]},\"448\":{\"h\":\"6. 跨域问题\"},\"449\":{\"h\":\"同源策略\",\"t\":[\"跨域问题其实就是浏览器的同源策略造成的。 同源指的是：协议、端口号、域名必须一致。\"]},\"450\":{\"h\":\"如何解决跨域问题\",\"t\":[\"CORS：服务器开启跨域资源共享\",\"JSONP：利用 <script> 标签不存在跨域限制，只支持 GET 请求，且不安全。\",\"nginx 代理跨域\",\"nodejs 中间件代理跨域，通过node开启一个代理服务器。\"]},\"451\":{\"c\":[\"前端技术\"]},\"452\":{\"c\":[\"浏览器\",\"面经\"]},\"453\":{\"h\":\"7. 事件流\",\"t\":[\"事件流分为三个阶段：捕获阶段、目标阶段、冒泡阶段。\",\"过程如下：\",\"捕获阶段 ：事件从最外层的节点，也就是文档对象开始，逐级向下传播，直到事件的目标节点上。\",\"目标阶段：事件到达目标节点，触发目标节点上的事件处理函数。\",\"冒泡阶段：事件从目标节点开始，逐级向上传播，直到到达最外层节点（文档对象）\"]},\"454\":{\"h\":\"事件冒泡和捕获的区别？\",\"t\":[\"事件冒泡和事件捕获是两种不同的事件传播方式，默认是冒泡，它们的区别在于传播方向不同：\",\"事件冒泡是从自下而上，从子元素冒泡到父元素，执行父元素上的事件处理。\",\"事件捕获是事件从文档的根元素开始，逐级向下传播到较为具体的元素（即从父元素到子元素）。\"]},\"455\":{\"h\":\"如何阻止事件冒泡\",\"t\":[\"普通浏览器：event.stopPropagation()\",\"IE浏览器：event.cancelBubble = true\"]},\"456\":{\"h\":\"对事件委托的理解\",\"t\":[\"利用浏览器事件冒泡机制。事件在冒泡的过程中会传到父节点，并且父节点可以通过事件对象获取到目标节点，可以吧子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件\"]},\"457\":{\"h\":\"对浏览器事件循环的理解\",\"t\":[\"事件循环是一种机制，它会不断的轮询任务队列，并将队列中的任务依此执行。\",\"JavaScript 的任务分为两种同步和异步：\",\"同步任务：在主线程上排队执行的任务，只有一个任务执行完毕，才能执行下一个任务，\",\"异步任务：不进入主线程，而是放在任务队列中，若有多个异步任务则需要在任务队列中排队等待，任务队列类似于缓冲区，任务下一步会被移到执行栈然后主线程执行调用栈的任务。\",\"因为js是单线程，在执行代码的时候将所有函数压入执行栈中。同步任务会按照后进先出的原则依次执行。遇到异步任务时，将其放入任务队列中。当前执行栈里事件执行完毕后，就会从任务队列中取出对应异步任务的回调函数放入执行栈中继续执行。\",\"宏观任务(MacroTask|Task)、微观任务(MicorTask)：\",\"宏任务：script全部代码、setTimeout、setInterval、I/O、UI渲染\",\"微任务：Promise.then、Process.nexTick(Node独有)、MutationObserver\",\"任务队列中的任务分为宏任务和微任务，当执行栈清空后，会先检查任务队列中是否有微任务，如果有就按照先进先出的原则，压入执行栈中执行。微任务中产生了新的微任务不会推迟到下一个循环中，而是在当前循环中继续执行。 当执行这一轮的微任务完毕后，开启下一轮循环，执行任务队列中的宏任务。\",\"注意：一次 Eventloop 循环会处理一个宏任务和所有这次循环中产生的微任务。\",\"执行顺序\",\"执行宏任务中的同步代码，遇到宏任务或微任务，分别放入对应的任务队列，等待执行。\",\"当所有同步任务执行完毕后，执行栈为空，首先执行微任务队列中的任务\",\"微任务执行完毕后，检查这次执行中是否产生新的微任务，如果存在，重复执行步骤，直到微任务执行完毕。\",\"开始下一轮 Event Loop ，执行宏任务中的代码\"]},\"458\":{\"h\":\"Node.js的事件循环\",\"t\":[\"Node事件循环分为6个阶段，每进入一个阶段，都会去对应的回调队列中取出函数执行。\",\"Timers 阶段：执行timer（setTimeout、setInterval）的回调，由poll阶段控制；\",\"I/O callbacks 阶段：系统调用相关的回调\",\"idle prepare 阶段：Nodejs内部执行，可以忽略\",\"poll 阶段：轮询。在该阶段如果没有timer的话，会出现一下情况：\",\"poll队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制；\",\"poll队列对空，会出现以下两种情况：\",\"如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调；\",\"如果没有 setImmediate 回调需要执行，就会等待回调被天加到队列中，然后立即执行。\",\"如果设置里有timer，并且 poll 队列为空，就会判断是否有 timer 超时，如果有就回到 timers 阶段执行回调。\",\"check 阶段：执行 setImmediate 回调\",\"colse callbacks 阶段：执行一些关闭回调，比如socket.on('close', ...)等。\"]},\"459\":{\"h\":\"process.nextTick\",\"t\":[\"它会在轮询的各个阶段结束时，进入到下一个阶段之前立即执行。\"]},\"460\":{\"h\":\"setImmediate 和 setTimeout\",\"t\":[\"setTimeout(() => { console.log('setTimeout') }, 0) setImmediate(() => { console.log('setImmediate') })\",\"这种情况下，定时器的执行顺序是随机的。\",\"如果把这两个函数放入一个 I/O 循环内调用，setImmediate 总是被优先调用\",\"const fs = require('fs') fs.readFile(__filename, () => { setTimeout(() => { console.log('timeout'); }, 0) setImmediate(() => { console.log('immediate') }) }) // immediate // timeout\"]},\"461\":{\"h\":\"Node和浏览器事件循环机制的区别\",\"t\":[\"浏览器事件循环会在宏任务结束后，检查微任务。而Node的微任务是在两个阶段之间执行。\",\"浏览器的 process.nextTick 和其他微任务优先级一样，而node中要高于其他优先级。\"]},\"462\":{\"c\":[\"前端技术\"]},\"463\":{\"c\":[\"浏览器\",\"面经\"]},\"464\":{\"h\":\"8. 输入URL到显示页面的全过程\",\"t\":[\"在浏览器地址栏输入URL\",\"浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤 \",\"如果资源未缓存，发起新请求\",\"如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。\",\"检验新鲜通常有两个HTTP头进行控制 Expires 和 Cache-Control： \",\"HTTP1.0提供 Expires，值为⼀个绝对时间表示缓存新鲜日期\",\"HTTP1.1增加了 Cache-Control: max-age=time，值为以秒为单位的最⼤新鲜时间\",\"浏览器解析URL获取协议，主机，端口，path\",\"浏览器组装⼀个HTTP（GET）请求报文\",\"浏览器获取主机 ip 地址，过程如下： \",\"浏览器缓存\",\"本机缓存\",\"hosts文件\",\"路由器缓存\",\"ISP DNS缓存\",\"DNS递归查询（可能存在负载均衡导致每次IP不⼀样）\",\"打开⼀个 socket 与目标IP地址，端口建立TCP链接（三次握手）\",\"TCP链接建立后发送HTTP请求\",\"服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序\",\"服务器检查HTTP请求头是否包含缓存验证信息，如果验证缓存新鲜，返回304等对应状态码\",\"处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作\",\"服务器将响应报文通过TCP连接发送回浏览器\",\"浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手\",\"浏览器检查响应状态码：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同\",\"如果资源可缓存，进行缓存\",\"对响应进行解码（例如gzip压缩）\",\"根据资源类型决定如何处理（假设资源为HTML文档）,解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严 格的先后顺序，以下分别解释：\",\"构建DOM树：\",\"Tokenizing：根据HTML规范将字符流解析为标记\",\"Lexing：词法分析将标记转换为对象并定义属性和规则\",\"DOM construction：根据HTML标记关系将对象组成DOM树\",\"解析过程中遇到图片、样式表、js文件，启动下载\",\"构建CSSOM树：\",\"Tokenizing：字符流转换为标记流\",\"Node：根据标记创建节点\",\"CSSOM：节点创建CSSOM树\",\"根据DOM树和CSSOM树构建渲染树 :\",\"从DOM树的根节点遍历所有可见节点，不可见节点包括： \",\"script , meta 这样本身 不可见的标签。\",\"被css隐藏的节点，如 display: none\",\"对每⼀个可见节点，找到恰当的CSSOM规则并应用\",\"发布可视节点的内容和计算样式\",\"js解析如下：\",\"浏览器创建 Document 对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时 document.readystate 为 loading\",\"HTML解析器遇到没有 async 和 defer 的 script 时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用 document.write() 把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作 script 和他们之前的文档内容\",\"当解析器遇到设置了 async 属性的 script 时，开始下载脚本并继续解析文档。脚本会在它 下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用 document.write()，它们可以访问自己 script 和之前的文档元素\",\"当文档完成解析，document.readState 变成 interactive\",\"所有defer脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用 document.write()\",\"浏览器在 Document 对象上触发 DOMContentLoaded 事件\",\"此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入 并且所有异步脚本完成载入和执行，document.readState变为complete，window触发 load事件\",\"显示页面（HTML解析过程中会逐步显示页面）\"]},\"465\":{\"c\":[\"前端技术\"]},\"466\":{\"c\":[\"浏览器\",\"面经\"]},\"467\":{\"h\":\"1. 无重复字符的最长子串\",\"t\":[\"题目：给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。\",\"示例 1:\",\"输入: s = \\\"abcabcbb\\\"\",\"输出: 3\",\"解释: 因为无重复字符的最长子串是 \\\"abc\\\"，所以其长度为 3。\",\"示例 2:\",\"输入: s = \\\"bbbbb\\\" 输出: 1\",\"解释: 因为无重复字符的最长子串是 \\\"b\\\"，所以其长度为 1。\",\"示例 3:\",\"输入: s = \\\"pwwkew\\\"\",\"输出: 3\",\"解释: 因为无重复字符的最长子串是 \\\"wke\\\"，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，\\\"pwke\\\" 是一个子序列，不是子串。\",\"解答：\",\"/** * @param {string} s * @return {number} */ var lengthOfLongestSubstring = function (s) { let l = 0 let res = 0 let map = new Map() for (let r = 0; r < s.length; r++) { if (map.has(s[r]) && map.get(s[r]) >= l) { l = map.get(s[r]) + 1 } res = Math.max(res, r - l + 1) map.set(s[r], r) } return res }\"]},\"468\":{\"c\":[\"前端技术\",\"面经\"]},\"469\":{\"c\":[\"算法\",\"双指针\",\"哈希\"]},\"470\":{\"h\":\"10. 路径总和\",\"t\":[\"题目：给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。\",\"叶子节点 是指没有子节点的节点。\",\"示例1：\",\"示例1\",\"输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\",\"输出：true\",\"解释：等于目标和的根节点到叶节点路径如上图所示。\",\"示例 2：\",\"示例2\",\"输入：root = [1,2,3], targetSum = 5\",\"输出：false\",\"解释：树中存在两条根节点到叶子节点的路径： (1 --> 2): 和为 3 (1 --> 3): 和为 4 不存在 sum = 5 的根节点到叶子节点的路径。\",\"示例 3：\",\"输入：root = [], targetSum = 0\",\"输出：false\",\"解释：由于树是空的，所以不存在根节点到叶子节点的路径。\",\"/** * Definition for a binary tree node. * function TreeNode(val, left, right) { * this.val = (val===undefined ? 0 : val) * this.left = (left===undefined ? null : left) * this.right = (right===undefined ? null : right) * } */ /** * @param {TreeNode} root * @param {number} targetSum * @return {boolean} */ const hasPathSum = (root, sum) => { if (root == null) { // 遍历到null节点 return false; } if (root.left == null && root.right == null) { // 遍历到叶子节点 return sum - root.val == 0; // 如果满足这个就返回true。否则返回false } // 不是上面的情况，则拆成两个子树的问题，其中一个true了就行 return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val); }\"]},\"471\":{\"c\":[\"前端技术\",\"面经\"]},\"472\":{\"c\":[\"算法\",\"递归\",\"DFS\"]},\"473\":{\"h\":\"11. 反转链表\",\"t\":[\"题目：给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。\",\"示例1：\",\"示例1\",\"输入：head = [1,2,3,4,5]\",\"输出：[5,4,3,2,1]\",\"示例2：\",\"示例2\",\"输入：head = [1,2]\",\"输出：[2,1]\",\"示例 3：\",\"输入：head = []\",\"输出：[]\",\"方法一：双指针\",\"/** * Definition for singly-linked list. * function ListNode(val, next) { * this.val = (val===undefined ? 0 : val) * this.next = (next===undefined ? null : next) * } */ /** * @param {ListNode} head * @return {ListNode} */ var reverseList = function (head) { if (!head || !head.next) return head; let temp = null, pre = null, cur = head; while (cur) { temp = cur.next; cur.next = pre; pre = cur; cur = temp; } return pre; };\",\"方法二：递归\",\"/** * Definition for singly-linked list. * function ListNode(val, next) { * this.val = (val===undefined ? 0 : val) * this.next = (next===undefined ? null : next) * } */ /** * @param {ListNode} head * @return {ListNode} */ var reverse = function (pre, head) { if (!head) return pre; const temp = head.next; head.next = pre; pre = head return reverse(pre, temp); } var reverseList = function (head) { return reverse(null, head); };\"]},\"474\":{\"c\":[\"前端技术\",\"面经\"]},\"475\":{\"c\":[\"算法\",\"链表\",\"递归\"]},\"476\":{\"h\":\"12. 三数之和\",\"t\":[\"题目：给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请你返回所有和为 0 且不重复的三元组。\",\"注意：答案中不可以包含重复的三元组。\",\"示例 1：\",\"输入：nums = [-1,0,1,2,-1,-4]\",\"输出：[[-1,-1,2],[-1,0,1]]\",\"解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。\",\"示例 2：\",\"输入：nums = [0,1,1]\",\"输出：[]\",\"解释：唯一可能的三元组和不为 0 。\",\"示例 3：\",\"输入：nums = [0,0,0]\",\"输出：[[0,0,0]]\",\"解释：唯一可能的三元组和为 0 。\",\"/** * @param {number[]} nums * @return {number[][]} */ var threeSum = function (nums) { let ans = []; const len = nums.length; if (nums == null || len < 3) return ans; nums.sort((a, b) => a - b); // 排序 for (let i = 0; i < len; i++) { if (nums[i] > 0) break; // 如果当前数字大于0，则三数之和一定大于0，所以结束循环 if (i > 0 && nums[i] == nums[i - 1]) continue; // 去重 let L = i + 1; let R = len - 1; while (L < R) { const sum = nums[i] + nums[L] + nums[R]; if (sum == 0) { ans.push([nums[i], nums[L], nums[R]]); while (L < R && nums[L] == nums[L + 1]) L++; // 去重 while (L < R && nums[R] == nums[R - 1]) R--; // 去重 L++; R--; } else if (sum < 0) L++; else if (sum > 0) R--; } } return ans; };\"]},\"477\":{\"c\":[\"前端技术\",\"面经\"]},\"478\":{\"c\":[\"算法\",\"双指针\"]},\"479\":{\"h\":\"13. 二叉树的层序遍历\",\"t\":[\"题目：给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。\",\"示例1：\",\"示例1\",\"输入：root = [3,9,20,null,null,15,7]\",\"输出：[[3],[9,20],[15,7]]\",\"示例 2：\",\"输入：root = [1]\",\"输出：[[1]]\",\"示例 3：\",\"输入：root = []\",\"输出：[]\",\"/** * Definition for a binary tree node. * function TreeNode(val, left, right) { * this.val = (val===undefined ? 0 : val) * this.left = (left===undefined ? null : left) * this.right = (right===undefined ? null : right) * } */ /** * @param {TreeNode} root * @return {number[][]} */ var levelOrder = function (root) { let res = [], q = [] if (!root) return res q.push(root) while (q.length) { const curlevelength = q.length res.push([]) for (let i = 0; i < curlevelength; i++) { let node = q.shift() res[res.length - 1].push(node.val) if (node.left) q.push(node.left) if (node.right) q.push(node.right) } } return res };\"]},\"480\":{\"c\":[\"前端技术\",\"面经\"]},\"481\":{\"c\":[\"算法\",\"二叉树\",\"BFS\"]},\"482\":{\"h\":\"14. 数组中的第K个最大元素\",\"t\":[\"题目：给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。\",\"请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。\",\"你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。\",\"示例 1:\",\"输入: [3,2,1,5,6,4], k = 2\",\"输出: 5\",\"示例 2:\",\"输入: [3,2,3,1,2,4,5,5,6], k = 4\",\"输出: 4\",\"方法一：\",\"let findKthLargest = function (nums, k) { nums.sort((a, b) => b - a).slice(0, k); return nums[k - 1] };\",\"方法二：\",\"let findKthLargest = function (nums, k) { // 从 nums 中取出前 k 个数，构建一个小顶堆 let heap = [,], i = 0 while (i < k) { heap.push(nums[i++]) } buildHeap(heap, k) // 从 k 位开始遍历数组 for (let i = k; i < nums.length; i++) { if (heap[1] < nums[i]) { // 替换并堆化 heap[1] = nums[i] heapify(heap, k, 1) } } // 返回堆顶元素 return heap[1] }; // 原地建堆，从后往前，自上而下式建小顶堆 let buildHeap = (arr, k) => { if (k === 1) return // 从最后一个非叶子节点开始，自上而下式堆化 for (let i = Math.floor(k / 2); i >= 1; i--) { heapify(arr, k, i) } } // 堆化 let heapify = (arr, k, i) => { // 自上而下式堆化 while (true) { let minIndex = i if (2 * i <= k && arr[2 * i] < arr[i]) { minIndex = 2 * i } if (2 * i + 1 <= k && arr[2 * i + 1] < arr[minIndex]) { minIndex = 2 * i + 1 } if (minIndex !== i) { swap(arr, i, minIndex) i = minIndex } else { break } } } // 交换 let swap = (arr, i, j) => { let temp = arr[i] arr[i] = arr[j] arr[j] = temp }\"]},\"483\":{\"c\":[\"前端技术\",\"面经\"]},\"484\":{\"c\":[\"算法\",\"排序\"]},\"485\":{\"h\":\"15. 买卖股票的最佳时机\",\"t\":[\"题目：给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。\",\"示例 1：\",\"输入：[7,1,5,3,6,4]\",\"输出：5\",\"解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\",\"示例 2：\",\"输入：prices = [7,6,4,3,1]\",\"输出：0\",\"解释：在这种情况下, 没有交易完成, 所以最大利润为 0。\",\"/** * @param {number[]} prices * @return {number} */ var maxProfit = function (prices) { if (prices.length === 0) return 0 let min = prices[0], res = 0 for (p of prices) { min = Math.min(min, p) res = Math.max(res, p - min) } return res };\"]},\"486\":{\"c\":[\"前端技术\",\"面经\"]},\"487\":{\"c\":[\"算法\",\"贪心\",\"动态规划\"]},\"488\":{\"h\":\"16. 数组排序\",\"t\":[\"题目：给你一个整数数组 nums，请你将该数组升序排列。\",\"示例 1：\",\"输入：nums = [5,2,3,1]\",\"输出：[1,2,3,5]\",\"示例 2：\",\"输入：nums = [5,1,1,2,0,0]\",\"输出：[0,0,1,1,2,5]\",\"方法一：sort\",\"var sortArray = function (nums) { nums.sort((x, y) => x - y) return nums };\",\"方法二：冒泡排序\",\"var sortArray = function (nums) { for (let i = 0; i < nums.length - 1; i++) { for (let j = i + 1; j < nums.length; j++) { if (nums[i] > nums[j]) { [nums[i], nums[j]] = [nums[j], nums[i]] } } } return nums };\",\"方法三：选择排序\",\"var sortArray = function (nums) { for (let i = 0; i < nums.length - 1; i++) { let minIndex = i for (let j = i + 1; j < nums.length; j++) { if (nums[minIndex] > nums[j]) { minIndex = j } } [nums[i], nums[minIndex]] = [nums[minIndex], nums[i]] } return nums };\",\"方法四：快速排序\",\"var sortArray = function (nums) { if(nums.length<=1) return nums let middleIndex = Math.floor(nums.length / 2); //获取基准数据的下标 let middleItem = nums.splice(middleIndex,1)[0]; //截取基准数据 let leftArr = []; let rightArr = []; for (let k = 0; k < nums.length; k++) { if (nums[k] > middleItem) { rightArr.push(nums[k]); }else{ leftArr.push(nums[k]); } } return quickFun(leftArr).concat(middleItem,quickFun(rightArr)) //将左边数组，基准数据和右边数组进行拼接成一个完整的数组 };\",\"方法五：插入排序\",\"var sortArray = function (nums) { let pre = 0, cur = 0 for (let i = 1; i < nums.length; i++) { pre = i - 1 // 进行基准数据赋值 cur = nums[i] // 获取当前进行对比的剩余数量值 while (pre >= 0 && nums[pre] > cur) { nums[pre + 1] = nums[pre] pre-- } nums[pre + 1] = cur } return nums };\",\"方法六：计数排序\",\"/** * @param {number[]} nums * @return {number[]} */ var sortArray = function (nums) { countingSort(nums); return nums; }; function countingSort(nums) { const n = nums.length; let min = nums[0]; let max = nums[0]; for (const num of nums) { if (num < min) { min = num; } if (num > max) { max = num; } } const range = max - min + 1; const counting = new Array(range).fill(0); for (const num of nums) { counting[num - min]++; } counting[0]--; for (let i = 1; i < range; i++) { counting[i] += counting[i - 1]; } const ans = new Array(n); for (let i = n - 1; i >= 0; i--) { ans[counting[nums[i] - min]] = nums[i]; counting[nums[i] - min]--; } for (let i = 0; i < n; i++) { nums[i] = ans[i]; } }\",\"方法七：希儿排序\",\"/** * @param {number[]} nums * @return {number[]} */ var sortArray = function (nums) { let temp, len = nums.length, gap = 1; // 默认增量 // 动态初始化增量 while (gap < len / 3) { gap = gap * 3 + 1; } // 缩小每一趟的增量，直至增量为 1。增量序列的个数，决定了序列要进行排序的次数。 for (; gap > 0; gap = Math.floor(gap / 3)) { // 根据对应的增量，将待排序列分割成若干长度的子序列，分别对各子序列进行直接插入排序。 for (let i = gap; i < len; i++) { temp = nums[i]; let j = i - gap; // 比较大小，交换数据进行排序 for (; j >= 0 && nums[j] > temp; j -= gap) { nums[j + gap] = nums[j]; } nums[j + gap] = temp; } } return nums; };\",\"方法八：堆排序\",\"var sortArray = function (nums) { buildMaxHeap(nums); for (let i = nums.length - 1; i > 0; i--) { [nums[i], nums[0]] = [nums[0], nums[i]]; maxHeapify(nums, 0, i); } return nums; }; function buildMaxHeap(nums) { const n = nums.length; for (let i = n >> 1; i >= 0; i--) { maxHeapify(nums, i, n); } } function maxHeapify(nums, index, heapSize) { let largest = index; let l = index * 2 + 1; let r = l + 1; if (l < heapSize && nums[l] > nums[largest]) { largest = l; } if (r < heapSize && nums[r] > nums[largest]) { largest = r; } if (largest !== index) { [nums[largest], nums[index]] = [nums[index], nums[largest]]; maxHeapify(nums, largest, heapSize); } }\"]},\"489\":{\"c\":[\"前端技术\",\"面经\"]},\"490\":{\"c\":[\"算法\",\"排序\"]},\"491\":{\"h\":\"17. 环形链表\",\"t\":[\"题目：给你一个链表的头节点 head ，判断链表中是否有环。\",\"如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。\",\"如果链表中存在环 ，则返回 true 。 否则，返回 false 。\",\"示例 1：\",\"示例1\",\"输入：head = [3,2,0,-4], pos = 1\",\"输出：true\",\"解释：链表中有一个环，其尾部连接到第二个节点。\",\"示例 2：\",\"示例2\",\"输入：head = [1,2], pos = 0\",\"输出：true\",\"解释：链表中有一个环，其尾部连接到第一个节点。\",\"示例 3：\",\"示例3\",\"输入：head = [1], pos = -1\",\"输出：false\",\"解释：链表中没有环。\",\"/** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @return {boolean} */ var hasCycle = function (head) { if (head === null) return false let slow = head, fast = head.next while (fast && fast.next) { if (slow.next === fast.next.next) return true slow = slow.next fast = fast.next.next } return false };\"]},\"492\":{\"c\":[\"前端技术\",\"面经\"]},\"493\":{\"c\":[\"算法\",\"双指针\",\"哈希\"]},\"494\":{\"h\":\"18. 最长回文子串\",\"t\":[\"题目：给你一个字符串 s，找到 s 中最长的回文子串。\",\"如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。\",\"示例 1：\",\"输入：s = \\\"babad\\\"\",\"输出：\\\"bab\\\"\",\"解释：\\\"aba\\\" 同样是符合题意的答案。\",\"示例 2：\",\"输入：s = \\\"cbbd\\\"\",\"输出：\\\"bb\\\"\",\"/** * @param {string} s * @return {string} */ var longestPalindrome = function (s) { if (s.length < 2) { return s } let res = '' for (let i = 0; i < s.length; i++) { // 回文子串长度是奇数 helper(i, i) // 回文子串长度是偶数 helper(i, i + 1) } function helper(m, n) { while (m >= 0 && n < s.length && s[m] == s[n]) { m-- n++ } // 注意此处m,n的值循环完后 是恰好不满足循环条件的时刻 // 此时m到n的距离为n-m+1，但是mn两个边界不能取 所以应该取m+1到n-1的区间 长度是n-m-1 if (n - m - 1 > res.length) { // slice也要取[m+1,n-1]这个区间 res = s.slice(m + 1, n) } } return res };\"]},\"495\":{\"c\":[\"前端技术\",\"面经\"]},\"496\":{\"c\":[\"算法\",\"动态规划\"]},\"497\":{\"h\":\"19. 求根节点到叶节点数字之和\",\"t\":[\"题目：你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。每条从根节点到叶节点的路径都代表一个数字，计算从根节点到叶节点生成的 所有数字之和 。\",\"示例 1：\",\"示例1\",\"输入：root = [1,2,3]\",\"输出：25\",\"解释： 从根到叶子节点路径 1->2 代表数字 12 从根到叶子节点路径 1->3 代表数字 13 因此，数字总和 = 12 + 13 = 25\",\"示例 2：\",\"示例2\",\"输入：root = [4,9,0,5,1]\",\"输出：1026\",\"解释： 从根到叶子节点路径 4->9->5 代表数字 495 从根到叶子节点路径 4->9->1 代表数字 491 从根到叶子节点路径 4->0 代表数字 40 因此，数字总和 = 495 + 491 + 40 = 1026\",\"/** * Definition for a binary tree node. * function TreeNode(val, left, right) { * this.val = (val===undefined ? 0 : val) * this.left = (left===undefined ? null : left) * this.right = (right===undefined ? null : right) * } */ /** * @param {TreeNode} root * @return {number} */ const sumNumbers = (root) => { const helper = (root, cur) => { if (root == null) { return 0; } cur = 10 * cur + root.val; if (root.left == null && root.right == null) { return cur; } return helper(root.left, cur) + helper(root.right, cur); }; return helper(root, 0); };\"]},\"498\":{\"c\":[\"前端技术\",\"面经\"]},\"499\":{\"c\":[\"算法\",\"DFS\",\"BFS\"]},\"500\":{\"h\":\"2. 合并两个有序数组\",\"t\":[\"题目：给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。\",\"示例 1：\",\"输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\",\"输出：[1,2,2,3,5,6]\",\"解释：需要合并 [1,2,3] 和 [2,5,6] 。 合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。\",\"示例 2：\",\"输入：nums1 = [1], m = 1, nums2 = [], n = 0\",\"输出：[1]\",\"解释：需要合并 [1] 和 [] 。 合并结果是 [1] 。\",\"示例 3：\",\"输入：nums1 = [0], m = 0, nums2 = [1], n = 1\",\"输出：[1]\",\"解释：需要合并的数组是 [] 和 [1] 。 合并结果是 [1] 。\",\"注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。\",\"解答：\",\"/** * @param {number[]} nums1 * @param {number} m * @param {number[]} nums2 * @param {number} n * @return {void} Do not return anything, modify nums1 in-place instead. */ var merge = function (nums1, m, nums2, n) { let p1 = m - 1, p2 = n - 1 let tail = m + n - 1 var cur while (p1 >= 0 || p2 >= 0) { if (p1 === -1) { cur = nums2[p2--] } else if (p2 === -1) { cur = nums1[p1--] } else if (nums1[p1] > nums2[p2]) { cur = nums1[p1--] } else { cur = nums2[p2--] } nums1[tail--] = cur } };\"]},\"501\":{\"c\":[\"前端技术\",\"面经\"]},\"502\":{\"c\":[\"算法\",\"双指针\"]},\"503\":{\"h\":\"20. 二分查找\",\"t\":[\"题目：给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\",\"示例 1:\",\"输入: nums = [-1,0,3,5,9,12], target = 9\",\"输出: 4\",\"解释: 9 出现在 nums 中并且下标为 4\",\"示例 2:\",\"输入: nums = [-1,0,3,5,9,12], target = 2\",\"输出: -1\",\"解释: 2 不存在 nums 中因此返回 -1\",\"/** * @param {number[]} nums * @param {number} target * @return {number} */ var search = function (nums, target) { let left = 0, right = nums.length - 1; while (left <= right) { const mid = Math.floor((right - left) / 2) + left; const num = nums[mid]; if (num === target) { return mid; } else if (num > target) { right = mid - 1; } else { left = mid + 1; } } return -1; };\"]},\"504\":{\"c\":[\"前端技术\",\"面经\"]},\"505\":{\"c\":[\"算法\",\"递归\"]},\"506\":{\"h\":\"3. 字符串相加\",\"t\":[\"题目：给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和并同样以字符串形式返回。\",\"注意：你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。\",\"示例 1：\",\"输入：num1 = \\\"11\\\", num2 = \\\"123\\\"\",\"输出：\\\"134\\\"\",\"示例 2：\",\"输入：num1 = \\\"456\\\", num2 = \\\"77\\\"\",\"输出：\\\"533\\\"\",\"示例 3：\",\"输入：num1 = \\\"0\\\", num2 = \\\"0\\\"\",\"输出：\\\"0\\\"\",\"解答:\",\"/** * @param {string} num1 * @param {string} num2 * @return {string} */ var addStrings = function (num1, num2) { let i = num1.length - 1, j = num2.length - 1, add = 0 const ans = [] while (i >= 0 || j >= 0 || add != 0) { const x = i >= 0 ? num1.charAt(i) - '0' : 0 const y = j >= 0 ? num2.charAt(j) - '0' : 0 const res = x + y + add ans.push(res % 10) add = Math.floor(res / 10) i -= 1 j -= 1 } return ans.reverse().join('') };\"]},\"507\":{\"c\":[\"前端技术\",\"面经\"]},\"508\":{\"c\":[\"算法\",\"双指针\",\"模拟\"]},\"509\":{\"h\":\"4. 比较版本号\",\"t\":[\"题目：给你两个版本号 version1 和 version2 ，请你比较它们。\",\"版本号由一个或多个修订号组成，各修订号由一个 '.' 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。\",\"比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 忽略任何前导零后的整数值 。也就是说，修订号 1 和修订号 001 相等 。如果版本号没有指定某个下标处的修订号，则该修订号视为 0 。例如，版本 1.0 小于版本 1.1 ，因为它们下标为 0 的修订号相同，而下标为 1 的修订号分别为 0 和 1 ，0 < 1 。\",\"返回规则如下：\",\"如果 version1 > version2 返回 1，\",\"如果 version1 < version2 返回 -1，\",\"除此之外返回 0。\",\"示例 1：\",\"输入：version1 = \\\"1.01\\\", version2 = \\\"1.001\\\"\",\"输出：0\",\"解释：忽略前导零，\\\"01\\\" 和 \\\"001\\\" 都表示相同的整数 \\\"1\\\"\",\"示例 2：\",\"输入：version1 = \\\"1.0\\\", version2 = \\\"1.0.0\\\"\",\"输出：0\",\"解释：version1 没有指定下标为 2 的修订号，即视为 \\\"0\\\"\",\"示例 3：\",\"输入：version1 = \\\"0.1\\\", version2 = \\\"1.1\\\"\",\"输出：-1\",\"解释：version1 中下标为 0 的修订号是 \\\"0\\\"，version2 中下标为 0 的修订号是 \\\"1\\\" 。0 < 1，所以 version1 < version2\",\"方法一：字符串分割\",\"我们可以将版本号按照点号分割成修订号，然后从左到右比较两个版本号的相同下标的修订号。在比较修订号时，需要将字符串转换成整数进行比较。注意根据题目要求，如果版本号不存在某个下标处的修订号，则该修订号视为 000。\",\"时间复杂度：O(n+m)（或O(max(n+m))，这是等价的），其中 n 是字符串version1的长度，m 是字符串 version2 的长度。\",\"空间复杂度：O(n+m)，我们需要 O(n+m) 的空间存储分割后的修订号列表。\",\"var compareVersion = function (version1, version2) { const v1 = version1.split('.') const v2 = version2.split('.') for (let i = 0; i < v1.length || i < v2.length; ++i) { let x = 0, y = 0 if (i < v1.length) { x = parseInt(v1[i]) } if (i < v2.length) { y = parseInt(v2[i]) } if (x > y) { return 1 } if (x < y) { return -1 } } return 0 };\",\"方法二：双指针\",\"方法一需要存储分割后的修订号，为了优化空间复杂度，我们可以在分割版本号的同时解析出修订号进行比较。\",\"时间复杂度：O(n+m)，其中 n 是字符串version1的长度，m 是字符串 version2 的长度。\",\"空间复杂度：O(1)，我们只需要常数的空间保存若干变量。\",\"var compareVersion = function(version1, version2) { const n = version1.length, m = version2.length; let i = 0, j = 0; while (i < n || j < m) { let x = 0; for (; i < n && version1[i] !== '.'; ++i) { x = x * 10 + version1[i].charCodeAt() - '0'.charCodeAt(); } ++i; // 跳过点号 let y = 0; for (; j < m && version2.charAt(j) !== '.'; ++j) { y = y * 10 + version2[j].charCodeAt() - '0'.charCodeAt(); } ++j; // 跳过点号 if (x !== y) { return x > y ? 1 : -1; } } return 0; };\"]},\"510\":{\"c\":[\"前端技术\",\"面经\"]},\"511\":{\"c\":[\"算法\",\"字符串\"]},\"512\":{\"h\":\"5. 有效的括号\",\"t\":[\"题目：给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。\",\"有效字符串需满足：\",\"左括号必须用相同类型的右括号闭合。\",\"左括号必须以正确的顺序闭合。\",\"每个右括号都有一个对应的相同类型的左括号。\",\"示例 1：\",\"输入：s = \\\"()\\\"\",\"输出：true\",\"示例 2：\",\"输入：s = \\\"()[]{}\\\"\",\"输出：true\",\"示例 3：\",\"输入：s = \\\"(]\\\"\",\"输出：false\",\"var isValid = function (s) { s = s.split(''); let sl = s.length; if (sl % 2) return false; let map = new Map([[')', '('], [']', '['], ['}', '{']]); let stack = []; for (let i of s) { if (map.get(i)) { if (stack[stack.length - 1] !== map.get(i)){ return false; }else { stack.pop(); } } else { stack.push(i); } } return !stack.length; };\"]},\"513\":{\"c\":[\"前端技术\",\"面经\"]},\"514\":{\"c\":[\"算法\",\"栈\"]},\"515\":{\"h\":\"6. 两数之和\",\"t\":[\"题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。\",\"你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\",\"你可以按任意顺序返回答案。\",\"示例 1：\",\"输入：nums = [2,7,11,15], target = 9\",\"输出：[0,1]\",\"解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\",\"示例 2：\",\"输入：nums = [3,2,4], target = 6\",\"输出：[1,2]\",\"示例 3：\",\"输入：nums = [3,3], target = 6\",\"输出：[0,1]\",\"var twoSum = function (nums, target) { let map = new Map() for (let i = 0; i < nums.length; i++) { if (map.has(target - nums[i])) { return [map.get(target - nums[i]), i] } else { map.set(nums[i], i) } } };\"]},\"516\":{\"c\":[\"前端技术\",\"面经\"]},\"517\":{\"c\":[\"算法\",\"哈希\"]},\"518\":{\"h\":\"7. 爬楼梯\",\"t\":[\"题目：假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\",\"示例 1：\",\"输入：n = 2\",\"输出：2\",\"解释：有两种方法可以爬到楼顶。\",\"1 阶 + 1 阶\",\"2 阶\",\"示例 2：\",\"输入：n = 3\",\"输出：3\",\"解释：有三种方法可以爬到楼顶。\",\"1 阶 + 1 阶 + 1 阶\",\"1 阶 + 2 阶\",\"2 阶 + 1 阶\",\"var climbStairs = function(n) { let p = 0, q = 0, r = 1; for (let i = 1; i <= n; ++i) { p = q; q = r; r = p + q; } return r; };\"]},\"519\":{\"c\":[\"前端技术\",\"面经\"]},\"520\":{\"c\":[\"算法\",\"递归\",\"动态规划\"]},\"521\":{\"h\":\"8. 全排列\",\"t\":[\"题目：给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。\",\"var permute = function(nums) { const res = [], path = []; backtracking(nums, nums.length, []); return res; function backtracking(n, k, used) { if(path.length === k) { res.push(Array.from(path)); return; } for (let i = 0; i < k; i++ ) { if(used[i]) continue; path.push(n[i]); used[i] = true; // 同支 backtracking(n, k, used); path.pop(); used[i] = false; } } };\"]},\"522\":{\"c\":[\"前端技术\",\"面经\"]},\"523\":{\"c\":[\"算法\",\"回溯\",\"递归\"]},\"524\":{\"h\":\"9. 最大子数组和\",\"t\":[\"题目：给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\",\"子数组 是数组中的一个连续部分。\",\"示例 1：\",\"输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\",\"输出：6\",\"解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\",\"示例 2：\",\"输入：nums = [1]\",\"输出：1\",\"示例 3：\",\"输入：nums = [5,4,-1,7,8]\",\"输出：23\",\"方法一：动态规划\",\"时间复杂度：O(n)，其中 n 为 nums 数组的长度。我们只需要遍历一遍数组即可求得答案。\",\"空间复杂度：O(1)。我们只需要常数空间存放若干变量。\",\"var maxSubArray = function(nums) { let pre = 0, maxAns = nums[0]; nums.forEach((x) => { pre = Math.max(pre + x, x); maxAns = Math.max(maxAns, pre); }); return maxAns; };\"]},\"525\":{\"c\":[\"前端技术\",\"面经\"]},\"526\":{\"c\":[\"算法\",\"贪心\",\"动态规划\"]},\"527\":{\"h\":\"对象属性描述符\",\"t\":[\"ECMA-262 第五版在定义只有内部才能使用的特性（Attribute）时，描述了属性（Property）的各种特征。这些特性是为了实现 JavaScript 引擎而存在的，因此在 JavaScript 中不能直接访问它们。为了表示特征是内部值，该规范把它们放在了两对儿方括号 [[]]中。\",\"对象属性描述符的类型分为两种：数据属性 和 访问器属性。\"]},\"528\":{\"h\":\"数据属性\",\"t\":[\"数据属性（Data Property）包含一个数据值的位置，在这个位置可以读取和写入值。数据属性共有 4 个特性。\",\"数据属性\",\"说明\",\"默认值\",\"[[Configurable]]\",\"可配置性决定是否可以使用 delete 删除 Properties，以及是否可以修改 Descriptor 的特性\",\"true\",\"[[Enumberable]]\",\"可枚举性决定属性是否出现在对象的 Properties 枚举中，比如是否可以通过 for-in 循环遍历该 Properties\",\"true\",\"[[Writable]]\",\"可写性决定是否可以修改 Properties 的值\",\"true\",\"[[Value]]\",\"属性值包含这个 Property 的数据值，读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置\",\"undefined\"]},\"529\":{\"h\":\"可写性\",\"t\":[\"可写性（Writable）决定是否可以修改属性的值，默认值为 true。\",\"let foo = { a: 1 }; foo.a = 2; console.log(foo.a); // 2\",\"设置 writable: false 后，赋值语句会静默失效。\",\"let foo = { a: 1 }; Object.defineProperty(foo, 'a', { writable: false, }); foo.a = 2; console.log(foo.a); // 1\",\"设置 writable:false 后，通过 Object.defineProperty() 方法改变属性 value 的值不会受影响，因为这也意味着重置 writable 的属性值为 true。\",\"let foo = { a: 1 }; Object.defineProperty(foo, 'a', { writable: false, }); console.log(foo.a); // 1 Object.defineProperty(foo, 'a', { value: 2, }); console.log(foo.a); // 2\"]},\"530\":{\"h\":\"可配置性\",\"t\":[\"可配置性（ Configurable）决定是否可以使用 delete 删除属性，以及是否可以修改属性描述符的特性，默认值为 true。\",\"设置 configurable: false 后，无法使用 delete 删除属性。\",\"let foo = { a: 1 }; Object.defineProperty(foo, 'a', { configurable: false, }); delete foo.a; // false console.log(foo.a); // 1\",\"一般地，设置 configurable: false 后，将无法再使用 Object.defineProperty() 方法来修改属性描述符。\",\"let foo = { a: 1 }; Object.defineProperty(foo, 'a', { configurable: false, }); Object.defineProperty(foo, 'a', { configurable: true, }); // Uncaught TypeError: Cannot redefine property: a\",\"有一个例外，设置 configurable: false 后，只允许 writable 的状态从 true 变为 false。\",\"let foo = { a: 1 }; Object.defineProperty(foo, 'a', { configurable: false, writable: true, }); foo.a = 2; console.log(foo.a); // 2 Object.defineProperty(foo, 'a', { writable: false, }); // 由于 writable:false 生效，对象 foo 的 bar 属性无法修改值 // 所以 `foo.bar=3` 的赋值语句静默失败 foo.a = 3; console.log(foo.a); // 2\"]},\"531\":{\"h\":\"可枚举性\",\"t\":[\"可枚举性（Enumerable）决定属性是否出现在对象的属性枚举中。具体来说，能够通过 for-in 循环、Object.keys 方法、JSON.stringify 等方法获取到的属性为可枚举属性。\",\"除此之外，可以使用 Object.propertyIsEnumerable 方法判断对象的 Property 是否可枚举。\",\"用户定义的普通属性默认是可枚举的，而原生继承的属性默认是不可枚举的。\",\"🌰 代码示例：\",\"由于原生继承的属性默认不可枚举，所以只取得自定义的属性 bar: 1。\",\"let foo = { a: 1 }; for (let item in foo) { console.log(foo[item]); // 1 }\",\"由于 enumerable 被设置为 false，在 for-in 循环中 a 属性无法被枚举出来。\",\"let foo = { a: 1 }; Object.defineProperty(foo, 'a', { enumerable: false }); for (let item in foo) { console.log(foo[item]); // undefined }\"]},\"532\":{\"h\":\"访问器属性\",\"t\":[\"访问器属性不包含数据值，它们包含两个方法分别是 getter 和 setter 函数（非必需）。\",\"在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值\",\"在写入访问器属性时，会调用 setter 函数并传入新值，这个函数负责决定如何处理数据\",\"访问器属性\",\"说明\",\"默认值\",\"[[Configurable]]\",\"同数据属性中的 [[Configurable]]\",\"true\",\"[[Enumberable]]\",\"同数据属性中的 [[Enumberable]]\",\"true\",\"[[Getter]]\",\"在读取属性时调用的函数\",\"undefined\",\"[[Setter]]\",\"在写入属性时调用的函数\",\"undefined\",\"和数据属性不同，访问器属性不具可写性（Writable）。\",\"如果属性同时具有 getter 和 setter 方法，那么它是一个读 / 写属性。\",\"如果它只有 getter 方法，那么它是一个只读属性。\",\"如果它只有 setter 方法，那么它是一个只写属性。读取只写属性总是返回 undefined。\"]},\"533\":{\"h\":\"Getter\",\"t\":[\"[[Getter]] 是一个隐藏函数，在获取属性值时调用。\",\"给只设置 get 方法，没有设置 set 方法的对象赋值会静默失败，在严格模式下会报错。\",\"const foo = { get a() { return 2; }, }; console.log(foo.a); // 2 // Invalid foo.a = 3; console.log(foo.a); // 2\"]},\"534\":{\"h\":\"Setter\",\"t\":[\"[[Setter]] 也是一个隐藏函数，在设置属性值时调用，默认值是 undefined。\",\"只设置 set 方法，而不设置 get 方法，则对象属性值为 undefined。\",\"let foo = { set a(val) { return 2; }, }; foo.a = 1; console.log(foo.a); // undefined\",\"一般地，set 和 get 方法需要成对出现的。\",\"const foo = { get a() { return this._a; }, set a(val) { this._a = val * 2; }, }; foo.a = 1; console.log(foo.a); // 2\"]},\"535\":{\"c\":[\"前端技术\"]},\"536\":{\"c\":[\"JavaScript\"]},\"537\":{\"h\":\"对象状态\",\"t\":[\"JavaScript 对象具有扩展、密封以及冻结三大特征。\",\"这些特征有相对应的方法：\",\"扩展特性\",\"密封特性\",\"冻结特性\"]},\"538\":{\"h\":\"扩展特性\",\"t\":[\"默认情况下，对象是可扩展的，可扩展的对象能够添加新的属性，对象的原型对象也可以被更改。\",\"const foo = {}; foo.a = 1; foo.__proto__ = null; console.log(foo); // { a: 1 }\",\"使用 Object.isExtensible 可以检测指定对象是否可扩展。\",\"const foo = {}; console.log(Object.isExtensible(foo)); // true\",\"使用 Object.preventExtensions 方法可以标记一个对象为不可扩展（Non-Extensible）。\",\"不可扩展的对象具有以下特征：\",\"不能添加新的属性\",\"不能变更原型对象\",\"对象属性仍能删除，仍可为该对象原型添加属性。\",\"const foo = { a: 1 }; Object.preventExtensions(foo); // 添加或删除属性均为静默失败不抛出错误 // 严格模式下会抛出错误 foo.b = 1; delete foo.a; console.log(foo); // {}\",\"使用 Object.defineProperty 为不可扩展对象添加属性会抛出异常。\",\"const foo = { a: 1}; Object.preventExtensions(foo); Object.defineProperty(foo, 'a', { value: 2 }) console.log(foo.a); // 2 Object.defineProperty(foo, 'b', { value: 1 }) // Uncaught TypeError: Cannot define property a, object is not extensible\"]},\"539\":{\"h\":\"密封特性\",\"t\":[\"密封对象具有以下特性：\",\"密封对象不可扩展 \",\"不能添加新的属性\",\"不能设置原型对象\",\"所有已有属性变为不可配置 configurable: false\",\"意味着已有属性不可删除\",\"数据属性不能被重新定义\",\"所有已有属性仍可以被修改 writable: true\",\"密封对象无法添加新属性，也无法删除已有属性。\",\"const foo = Object.seal({ a: 1 }); // 无法删除属性 delete foo.a; // 也无法添加新属性 foo.b = 1; console.log(foo.a); // 1 console.log(foo.b); // undefined\",\"尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性，结果会静默失败或抛出 TypeError。\",\"// 无法将数据属性重新定义为访问器属性 Object.defineProperty(foo, 'c', { get: function(){ return 'c' } }); // Uncaught TypeError: Cannot define property b, object is not extensible Object.defineProperty(foo, 'd', { value: 1 }) // Uncaught TypeError: Cannot define property c, object is not extensible\",\"对象密封前已有属性在密封后仍可以被修改。\",\"Object.defineProperty(foo, 'a', { value: 2 }); console.log(foo.a); // 2\",\"使用方法 Object.seal 可将对象变为密封状态。\",\"如果把一个空对象变得不可扩展，则它同时也会变成个密封对象\",\"如果该对象不是空对象，则它不会变成密封对象，因为密封对象的所有自身属性必须是不可配置的\",\"如果把对象所有自身属性变为不可配置，则这个对象是密封对象\",\"const foo = Object.seal({}); console.log(Object.isSealed(foo)); // true\",\"使用 Object.isSealed 可以检测指定对象是否已密封。\",\"const foo = {}; const bar = Object.seal({}); console.log(Object.isSealed(foo)); // false console.log(Object.isSealed(bar)); // true\"]},\"540\":{\"h\":\"冻结特性\",\"t\":[\"冻结对象具有以下特征：\",\"冻结对象不可扩展 \",\"不能添加新的属性\",\"不能设置原型对象\",\"所有已有属性变为不可配置 configurable: false\",\"意味着已有属性不可删除\",\"数据属性不能被重新定义\",\"访问器属性也不能被重新定义，但由于是函数调用，给人的错觉是还是可以修改这个属性\",\"不能修改已有属性值 writable: false\",\"这也意味着，冻结对象永远不可变。\",\"冻结对象不能添加新的属性。\",\"const foo = Object.freeze({ a: 1 }) foo.b = 1 console.log(foo.b); // undefined Object.defineProperty(foo, 'c', { value: 1 }); // Uncaught TypeError: Cannot define property c, object is not extensible\",\"冻结对象不能设置原型对象。下面两个语句都会抛出 TypeError 错误。\",\"const foo = Object.freeze({ a: 1 }); Object.setPrototypeOf(foo, { x: 20 }); // Uncaught TypeError: #<Object> is not extensible foo.__proto__ = { x: 20 }; // Uncaught TypeError: #<Object> is not extensible\",\"如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象。\",\"const foo = { bar: {} }; Object.freeze(foo); foo.bar.a = 1; console.log(foo.bar.a); // 1\",\"数组作为一种对象，被冻结，其元素不能被修改。没有数组元素可以被添加或移除。\",\"const foo = [0]; Object.freeze(foo); a[0] = 1; a.push(2); console.log(a); // [0]\",\"使用 Object.isFrozen 可以检测指定对象是否已冻结。\",\"const foo = Object.freeze({}) console.log(Object.isFrozen(foo)); // true\",\"倘若一个对象的属性是一个对象，那么对这个外部对象进行冻结，内部对象的属性是依旧可以改变的，这就叫浅冻结，若把外部对象冻结的同时把其所有内部对象甚至是内部的内部无限延伸的对象属性也冻结了，这就叫深冻结。\",\"// 深冻结函数. function deepFreeze(o) { // 取回定义在obj上的属性名 const propNames = Object.getOwnPropertyNames(o); // 在冻结自身之前冻结属性 propNames.forEach(function(name) { const prop = o[name]; // 如果 prop 是个对象，冻结它 if (typeof prop == 'object' && prop !== null) { deepFreeze(prop); } }); // 冻结自身(no-op if already frozen) return Object.freeze(o); } const foo = { bar: {} }; deepFreeze(foo); foo.bar.a = 1; console.log(foo.bar.a); // undefined\"]},\"541\":{\"h\":\"总结\",\"t\":[\"添加新属性\",\"删除已有属性\",\"配置数据属性\",\"已有属性可写\",\"扩展特性\",\"❎\",\"✅\",\"✅\",\"✅\",\"密封特性\",\"❎\",\"❎\",\"❎\",\"✅\",\"冻结特性\",\"❎\",\"❎\",\"❎\",\"❎\"]},\"542\":{\"c\":[\"前端技术\"]},\"543\":{\"c\":[\"JavaScript\"]},\"544\":{\"h\":\"对象类型\",\"t\":[\"JavaScript 的基本数据类型包括 Undefined、Null、Boolean、String、Number 和 Object，以及 ES6 新增的 Symbol 类型。\",\"对象和其他基本类型值不同的是，对象是一种复合值：它可以将多个原始值或者其他对象聚合在一起，可通过键名访问这些值。\",\"对象也可看作是 属性的无序集合，每个属性都是一个键值对。属性名是 String 类型或 Symbol 类型，因此我们可以把对象看成是从字符串到值的映射。\"]},\"545\":{\"h\":\"对象创建\",\"t\":[\"创建对象的方法：\",\"对象字面量\",\"构造函数\",\"Object.create()\"]},\"546\":{\"h\":\"对象字面量\",\"t\":[\"JavaScript 提供了叫做字面量的快捷方式，用于创建大多数原生对象值。使用字面量只是隐藏了与使用 new 操作符相同的基本过程，于是也可以叫做语法糖。\",\"对象字面量是由若干键值对组成的映射表，键值对中间用冒号分隔，整个映射表用花括号括起来。\",\"不同属性之间用逗号分隔，属性名可以是任意 String 类型或 Symbol 类型值，属性值可以是任意类型表达式，表达式的值是属性值。\",\"const uzi = { name : 'uzi', age : 22, 5 : true }\",\"对象键名字符化：使用对象字面量的方法来定义对象，属性名会自动转换成字符串。\",\"const uzi = { 'name' : 'uzi', 'age' : 22, '5' : true, }\"]},\"547\":{\"h\":\"构造函数\",\"t\":[\"使用 new 操作符调用 Object 构造函数来初始化一个新创建的对象。new 实现过程\",\"let uzi = new Object(); uzi.name = 'Uzi'; uzi.age = 22;\",\"参数为对象\",\"如果该参数是一个对象，则直接返回这个对象。\",\"参数为对象：\",\"let foo = { a: 1 } let bar = new Object(foo) console.log(foo === bar) // true\",\"参数为函数（对象）：\",\"let foo = function(){} let bar = new Object(foo) console.log(foo === bar) // true\",\"参数为原始类型\",\"如果参数是一个原始类型的值，则返回该值对应的包装对象。\",\"console.log(new Object('foo')) // String {0: \\\"f\\\", 1: \\\"o\\\", 2: \\\"o\\\", length: 3, [[PrimitiveValue]]: \\\"foo\\\"} console.log(new Object(1)) // Number {[[PrimitiveValue]]: 1} console.log(new Object(true)) // Boolean {[[PrimitiveValue]]: true}\"]},\"548\":{\"h\":\"Object.create\",\"t\":[\"Object.create() 方法用于创建指定对象为原型对象的新对象。\",\"📖 语法\",\"Object.create(proto, properties)\",\"参数\",\"说明\",\"类型\",\"proto\",\"新创建对象指向的原型对象\",\"object\",\"properties\",\"可选参数。添加到新创建对象的可枚举属性（即自身定义的属性，而不是原型链上的枚举属性\",\"object\",\"const object = Object.create({ x:1, y:1 }) // object 继承了属性 x 和 y console.log(object.x); // 1\",\"可以通过传入参数 null 来创建一个没有原型的新对象，但通过这种方式创建的对象不会继承任何东西，甚至不包括基础方法，比如 toString 和 valueOf。\",\"继承对象：\",\"const foo = {} console.log(Number(foo)); // NaN\",\"不继承任何属性和方法：\",\"const bar = Object.create(null); // bar 不继承任何属性和方法 console.log(Number(bar)); // Uncaught TypeError: Cannot convert object to primitive value\",\"如果想创建一个普通的空对象（比如通过 {} 或 new Object() 创建的对象），需要传入 Object.prototype。\",\"// Example1 const foo = {}; console.log(Number(foo)) // NaN // Example2 const bar = Object.create(Object.prototype); // bar 和 {} 和 new Object()一样 console.log( Number(bar) ); // NaN\",\"Object.create() 方法的第二个参数是属性描述符。\",\"const obj = Object.create({ z:3 }, { x:{ value:1, writable: false, enumerable:true, configurable:true }, y:{ value:2, writable: false, enumerable:true, configurable:true } }) console.log(obj.x, obj.y, obj.z); // 1 2 3\"]},\"549\":{\"h\":\"对象组成\",\"t\":[\"对象是属性的无序集合，由 键名 和 属性值 组成。\"]},\"550\":{\"h\":\"键名\",\"t\":[\"对象的所有键名都是字符串，所以加不加引号都可以，如果不是字符串也会自动转换成字符串。\",\"const foo = { name: 'bar', 123: 'car'}\"]},\"551\":{\"h\":\"属性值\",\"t\":[\"属性值可以是任何类型的表达式，最终表达式的结果就是属性值的结果。\",\"如果属性值为函数，则通常把这个属性称为 方法。\",\"const foo = { run: function (x) { return 2 * x; } } foo.run(1); // 2\",\"由于对象的方法就是函数，因此也有 name 属性。方法的 name 属性返回紧跟在 function 关键字后面的函数名。如果是匿名函数，ES5 环境会返回 undefined，ES6 环境会返回方法名。\",\"const foo = { mth1: function f() {}, mth2: function () {} } foo.mth1.name; // \\\"f\\\" foo.mth2.name; // ES5： undefined foo.mth2.name; // ES6： \\\"mth2\\\"\"]},\"552\":{\"h\":\"引用对象\",\"t\":[\"如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。\",\"let foo = {}; let bar = foo; foo.a = 1; console.log(bar.a); // 1 bar.b = 2; console.log(foo.b); // 2\",\"如果取消某一个变量对于原对象的引用，不会影响到另一个变量。\",\"let foo = {}; let bar = foo; foo = 1; console.log(bar); // {}\"]},\"553\":{\"c\":[\"前端技术\"]},\"554\":{\"c\":[\"JavaScript\"]},\"555\":{\"h\":\"属性操作\"},\"556\":{\"h\":\"属性查询\",\"t\":[\"属性查询在表达式层面也成为 属性访问器。\",\"属性查询一般有两种方法：\",\"点运算符\",\"方括号运算符\",\"键名可以是中文，因为中文相当于字符，与英文字符同样对待，因此可以写成 person.白 或 person['白']。\",\"const person = { 白: 1, }; console.log(person.白); // 1 console.log(person['白']); // 1\"]},\"557\":{\"h\":\"点运算符\",\"t\":[\"点运算符是很多面向对象语句的通用写法，由于其比较简单，所以较方括号运算符相比，更常用。\",\"由于 JavaScript 是弱类型语言，在任何对象中都可以创建任意数量的属性。但当通过点运算符 . 访问对象的属性时，属性名用一个标识符来表示，标识符要符合 变量命名规则。标识符必须直接出现在 JavaScript 程序中，它们不是数据类型，因此程序无法修改它们。\",\"const foo = { a: 1, 1: 2 }; console.log(foo.a); // 1 // 由于变量不可以以数字开头，所以o.1报错 console.log(o.1); // Uncaught SyntaxError: missing ) after argument list\"]},\"558\":{\"h\":\"方括号运算符\",\"t\":[\"当通过方括号运算符 [] 来访问对象的属性时，属性名通过字符串来表示。字符串是 JavaScript 的数据类型，在程序运行中可以修改和创建它们。\",\"使用方括号运算符有两个优点：\",\"可以通过变量来访问属性\",\"属性名称可以为 JavaScript 无效标识符\",\"方括号中的值若是非字符串类型会使用 String() 隐式转换成字符串再输出。如果是字符串类型，若有引号则原值输出，否则会被识别为变量，若变量未定义，则报错。\"]},\"559\":{\"h\":\"可计算属性名\",\"t\":[\"在方括号运算符内部可以使用表达式。\",\"const a = 1; const foo = { 3: 'abc', }; foo[a + 2]; // 'abc'\",\"但如果要在对象字面量内部对属性名使用表达式，则需要使用 ES6 的可计算属性名。\",\"const a = 1; const foo = { a + 3: 'abc' }; // Uncaught SyntaxError: Unexpected token +\",\"ES6 增加了可计算属性名，可以在文字中使用 [] 包裹一个表达式来当作属性名。\",\"const a = 1; const foo = { [a + 3]: 'bar', }; foo[4]; // 'bar'\"]},\"560\":{\"h\":\"属性查询错误\",\"t\":[\"查询一个不存在的属性不会报错，而是返回 undefined。\",\"const foo = {}; console.log(foo.a); // undefined\",\"如果对象不存在，试图查询这个不存在的对象的属性会报错。\",\"console.log(foo.a); // Uncaught ReferenceError: person is not defined\",\"可以利用这一点，来检查一个全局变量是否被声明。\",\"检查变量是否被声明\",\"if (a) {...}; // Uncaught ReferenceError: a is not defined\",\"所有全局变量都是 Window 对象的属性。window.a 的含义就是读取 Window 对象的 a 属性，如果该属性不存在，就返回 undefined，并不会报错。\",\"if (window.a) {...}\"]},\"561\":{\"h\":\"属性设置\",\"t\":[\"属性设置又称为属性赋值，与属性查询相同，具有 点运算符 和 方括号运算符 这两种方法。\",\"🌰 代码示例：点运算符\",\"foo.p = 'bar';\",\"🌰 代码示例：方括号运算符\",\"foo['p'] = 'bar';\"]},\"562\":{\"h\":\"赋值检测\",\"t\":[\"在给对象设置属性之前，一般要先检测对象是否存在。\",\"// Bad const len = undefined; if (book) { if (book.subtitle) { len = book.subtitle.length; } } // Good const len = book && book.subtitle && book.subtitle.length;\"]},\"563\":{\"h\":\"原始类型\",\"t\":[\"由于 String、Number 和 Boolean 等数据类型的值有对应的包装对象，所以给它们设置属性不会报错。\",\"'foo'.a = 1; // 1 (1).a = 1; // 1 true.a = 1; // 1\",\"而 null 和 undefined 不是对象，给它们设置属性会报错。\",\"null.a = 1; // Uncaught TypeError: Cannot set property 'a' of null undefined.a = 1; // Uncaught TypeError: Cannot set property 'a' of undefined\"]},\"564\":{\"h\":\"属性删除\",\"t\":[\"使用 delete 运算符可以删除对象属性（包括数组元素）。\",\"const foo = { a: 1 }; console.log(foo.a); // 1 console.log('a' in foo); // true // delete object attribute console.log(delete foo.a); // true console.log(foo.a); // undefined console.log('a' in foo); // false\",\"给对象属性设置 null 或 undefined，并没有删除该属性\",\"使用 delete 删除数组元素时，不会改变数组长度 delete 运算符只能删除自有属性，不能删除继承属性\",\"要删除继承属性必须从定义这个属性的原型对象上删除它，而且这会影响到所有继承自这个原型的对象\",\"delete 操作符的返回值是个布尔值 true 或 false\",\"当使用 delete 操作符删除对象属性或数组元素删除成功时，返回 true\",\"当使用 delete 操作符删除不存在的属性或非左值时，返回 true\",\"当使用 delete 操作符删除变量时，返回 false，严格模式下会抛出 ReferenceError 错误\",\"当使用 delete 操作符删除不可配置的属性时，返回 false，严格模式下会抛出 TypeError 错误\"]},\"565\":{\"h\":\"属性继承\",\"t\":[\"每个 JavaScript 对象都和另一个对象相关联。\\\"另一个对象\\\"就是我们熟知的原型，每一个对象都从原型继承属性。\",\"所有通过对象直接量创建的对象都具有同一个原型对象，并可以通过 Object.prototype 获得对原型对象的引用。\",\"const foo = {}; console.log(foo.__proto__ === Object.prototype); // true Object.prototype 的原型对象是 null，所以它不继承任何属性。 console.log(Object.prototype.__proto__ === null); // true\",\"对象本身具有的属性叫 自有属性（Own Property），从原型对象继承而来的属性叫 继承属性。\",\"判断方法\",\"in：in 操作符可以判断属性在不在该对象上，但无法区别自有还是继承属性。\",\"for-in：通过 for-in 循环可以遍历出该对象中所有可枚举属性。\",\"hasOwnProperty：通过 hasOwnProperty() 方法可以确定该属性是自有属性还是继承属性。\",\"Object.keys：Object.keys() 方法返回所有可枚举的自有属性。\",\"Object.getOwnPropertyNames：Object.getOwnPropertyNames() 方法返回所有自有属性（包括不可枚举的属性）。\"]},\"566\":{\"c\":[\"前端技术\"]},\"567\":{\"c\":[\"JavaScript\"]},\"568\":{\"h\":\"其他模式\"},\"569\":{\"h\":\"组合使用构造函数模式和原型模式\",\"t\":[\"构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。\",\"结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。另外，这种混成模式还支持向构造函数传递参数，可谓是集两种模式之长。\",\"// 构造函数 function Person(name, age, job){ this.name = name; this.age = age; this.job = job; this.friends = ['Amy', 'Ben']; } // 原型模式 Person.prototype = { constructor: Person, sayName: function(){ console.log(this.name); } } const uzi = new Person('Uzi', 22, 'Software Engineer'); const tom = new Person('Tom', 25, 'Doctor'); uzi.friends.push('Peter'); console.log(uzi.friends); // 'Amy,Ben,Peter' console.log(tom.friends); // 'Amy,Ben' console.log(uzi.friends == tom.friends); // false console.log(uzi.sayName == tom.sayName); // true\",\"在这个例子中，实例属性都是在构造函数中定义的，而由所有实例共享的属性 constructor 和方法 sayName() 则是在原型中定义的。而修改了 uzi.friends（向其中添加一个新字符串），并不会影响到 tom.friends，因为它们分别引用了不同的数组。\"]},\"570\":{\"h\":\"动态原型模式\",\"t\":[\"动态原型模式将所有信息都封装在构造函数中，而通过构造函数中初始化原型（仅第一个对象实例化时初始化原型），这个可以通过判断该方法是否有效而选择是否需要初始化原型。\",\"function Person(name, age, job) { // 属性 this.name = name; this.age = age; this.job = job; // 方法（动态插入原型方法） if (typeof this.sayName != 'function'){ Person.prototype.sayName = function(){ console.log(`I'm ${this.name}`); } } } const uzi = new Person('Uzi', 2, 'E-Sports Player'); uzi.sayName(); // 'I'm Uzi'\",\"这里只在 sayName() 方法不存在的情况下，才会将它添加到原型中。这段代码只会在初次调用构造函数时才会执行。此后，原型已经完成初始化，不需要再做什么修改了。不过要记住，这里对原型所做的修改，能够立即在所有实例中得到反映。\",\"使用动态原型模式时，不能使用对象字面量重写原型。如果在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系。\"]},\"571\":{\"h\":\"寄生构造函数模式\",\"t\":[\"寄生构造函数模式的基本思想是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象；但从表面上看，这个函数又很像是典型的构造函数。\",\"function Person(name, age, job){ let obj = new Object(); obj.name = name; obj.age = age; obj.job = job; obj.sayName = function(){ console.log(`I'm ${this.name}`); }; return obj; } let uzi = new Person('Uzi', 22, 'E-Sports Player'); uzi.sayName(); // I'm Uzi\",\"在构造函数的末尾添加一个 return 语句，可以重写调用构造函数时返回的值。\",\"关于寄生构造函数模式，有一点需要说明：首先，返回的对象与构造函数或者与构造函数的原型属性之间没有关系。也就是说，构造函数返回的对象与构造函数外部创建的对象没有什么不同。为此，不能依赖 instanceof 操作符来确定对象类型。\"]},\"572\":{\"h\":\"稳妥构造函数模式\",\"t\":[\"稳妥对象，指的是没有公共属性，而且其方法不引用 this 的对象。稳妥对象最适合在一些安全的环境中（这些环境中会禁止使用 this 和 new），或者在防止数据被其他应用程序改动时使用。稳妥构造函数遵循与寄生构造函数类似的模式，但有两点不同：一是新创建对象的实例方法不引用 this；二是不使用 new 操作符调用构造函数。\",\"function Person(name, age, job) { // 创建要返回的对象 const obj = new Object(); // 可以在这里定义私有变量和函数 // 添加方法 obj.sayName = function() { console.log(name); }; // 返回对象 return obj; }\",\"注意，在以这种模式创建的对象中，除了使用 sayName() 方法之外，没有其他办法访问 name 的值。可以像下面使用稳妥 Person 构造函数。\",\"let uzi = Person('Uzi', 22, 'E-Sports Player'); uzi.sayName(); // 'Uzi'\",\"这样，变量 uzi 中保存的是一个稳妥对象，而除了调用 sayName() 方法外，没有别的方式可以访问其数据成员。即使有其他代码会给这个对象添加方法或数据成员，但也不可能有别的办法访问传入到构造函数中的原始数据。稳妥构造函数模式提供的这种安全性，使得它非常适合在某些安全执行环境下使用。\",\"与寄生构造函数模式类似，使用稳妥构造函数模式创建的对象与构造函数之间也没有什么关系，因此 instanceof 操作符对这种对象也没有意义。\"]},\"573\":{\"c\":[\"前端技术\"]},\"574\":{\"c\":[\"JavaScript\"]},\"575\":{\"h\":\"原型模式\",\"t\":[\"我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由 特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。\",\"function Person(){} Person.prototype.name = 'Uzi'; Person.prototype.age = 22; Person.prototype.job = 'E-Sports Player'; Person.prototype.sayName = function(){ console.log(this.name); } const person1 = new Person(); person1.sayName(); // 'Uzi' const person2 = new Person(); person2.sayName(); // 'Uzi' // 共用公用方法 console.log(person1.sayName == person2.sayName); // true\",\"与构造函数不同，新对象的这些属性和方法是由所有实例共享的。\"]},\"576\":{\"h\":\"理解原型对象\",\"t\":[\"无论什么时候，只要创建一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constructor（构造函数）属性，这个属性是一个指向 prototype 属性所在函数的指针。\",\"创建了自定义的构造函数之后，其原型对象默认只会取得 constructor 属性；至于其他方法，则都是从 Object 继承而来的。当调用构造函数创建一个新的实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。ECMAScript 5 中管这个指针叫做 [[Prototype]]。虽然在脚本中没有标准的方式访问 [[Prototype]]，但 Firefox、Safari 和 Chrome 在每个对象上都支持一个属性 __proto__；而在其他实现中，这个属性对脚本则是完全不可见的。不过，要明确的真正重要的一点就是，这个连接存在于实例与构造函数的原型之间，而不是存在于实例与构造函数之间。\",\"原型最初只包含 constructor 属性，而该属性也是共享的，因此可以通过对象实例访问。\",\"虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。如果我们在实例中添加了一个属性，而该属性与实例原型中的一个属性同名，那我们就在实例中创建该属性，该属性将会屏蔽原型中的属性。\",\"function Person(){} Person.prototype.name = 'Nicholas'; Person.prototype.age = 29; Person.prototype.job = 'Software Engineer'; Person.prototype.sayName = function(){ console.log(this.name); }; const person1 = new Person(); const person2 = new Person(); person1.name = 'Greg'; console.log(person1.name); // 'Greg' // from instance console.log(person2.name); // 'Nicholas' // from prototype\",\"两个实例访问 name 属性的过程：\",\"当为对象实例添加一个属性时，这个属性就会 屏蔽 原型对象中保存的同名属性。换句话说，添加这个属性只会阻止我们访问原型中的那个属性值，但不会修改那个属性。即使这个属性设置为 null，也只会在实例中设置这个属性，而不会恢复其指向原型的连接。不过，使用 delete 操作符则可以完全删除实例属性，从而让我们能够重新访问原型中的属性。\",\"ECMAScript5 的 Object.getOwnPropertyDescriptor() 方法只能用于实例属性，要取得原型属性的描述符，必须直接在原型对象上调用 Object.getOwnPropertyDescriptor() 方法。\"]},\"577\":{\"h\":\"原型与实例属性检测\",\"t\":[\"有两种方式使用 in 操作符：单独使用和在 for-in 循环中使用。在单独使用时，in 操作符会在通过对象能够访问给定属性时返回 true，无论该属性存在于实例中还是原型中。\",\"同时使用 hasOwnProperty() 方法和 in 操作符，就可以确定该属性到底是存在于对象中，还是存在于原型中。\",\"由于 in 操作符只要通过对象能够访问到属性就返回 true，hasOwnProperty() 只在属性存在于实例中时才返回 true，因此只要 in 操作符返回 true 而 hasOwnProperty() 返回 false，就可以确定属性是原型中的属性。\"]},\"578\":{\"h\":\"更简单的原型语法\",\"t\":[\"前面的例子中每添加一个属性和方法就要输入一遍 Person.prototype，为减少不必要的输入，也为了从视觉上更好地封装原型的功能，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象。\",\"function Person(){} Person.prototype = { name: 'Nicholas', age: 29, job: 'Software Engineer', sayName: function (){ console.log(this.name); } }\",\"前面介绍过，没创建一个函数，就会同时创建它的原型对象，这个对象自动获得构造函数。而这里的语法，这里相当于重写了实例的原型对象，相应地原型对象中的构造函数 constructor 亦被覆盖，不再指向 Person 函数。此时，尽管 instanceof 操作符还能返回正确的结果，但通过 constructor 已经无法确定对象的类型了。\",\"当然，我们可以手动为它设置回适当的值。但是，以这种方式重设 constructor 属性回导致它的 [[Enumerable]] 特性被设置为 true。默认情况下，原生的 constructor 属性是不可枚举的。\",\"function Person(){} Person.prototype = { constructor: Person, name: 'Nicholas', age: 29, job: 'Software Engineer', sayName: function (){ console.log(this.name); } }\",\"重设构造函数，只适用于 ECMAScript5 兼容的浏览器。\",\"Object.defineProperty(Person, 'constructor', { enumerable: false, value: Person })\"]},\"579\":{\"h\":\"原型的动态性\",\"t\":[\"由于在原型中查找值的过程是一次搜索，因此我们对原型对象所做的任何修改都能够立即从实例上反映出来，即使是先创建了实例后修改原型也照样如此。\",\"实例与原型之间的关系是松散的，\",\"function Person(){} const friend = new Person(); Person.prototype = { constructor: Person, name: 'Nicholas', age: 29, job: 'Software Engineer', sayName: function (){ console.log(this.name); } }; friend.sayName(); // error\",\"重写原型对象切断了现有原型与任何之前已经存在的对象实例之间的联系，它们引用的仍然是最初的原型。\"]},\"580\":{\"h\":\"原型对象的原型\",\"t\":[\"原型模式的重要性不仅体现在创建自定义类型方面，就连所有原生的引用类型，都是采用这种模式创建的。所有原生引用类型（Object、Array、String 等等）都在其构造函数的原型上定义了方法。\",\"通过原生对象的原型，不仅可以取得所有默认方法的引用，而且也可以定义新方法。可以像修改自定义对象的原型一样修改原生对象的原型，因此可以随时添加方法。\",\"尽管可以这样做，但我们不推荐在产品化的程序中修改原生对象的原型。如果因某个实现中缺少某个方法，就在原生对象的原型中添加这个方法，那么当在另一个支持该方法的实现中运行代码时，就可能会导致命名冲突。而且，这样做也可能会意外地重写原生方法。\"]},\"581\":{\"h\":\"原型对象的问题\",\"t\":[\"原型模式省略了为构造函数传递初始参数的环节，结果所有实例在默认情况下都将取得相同的属性值。\",\"原型中的所有属性是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性倒也说得过去，毕竟，通过在实例上添加一个同名属性，可以隐藏原型中的对应属性。然而，对于包含引用类型值的属性来说，问题就比较突出了。\",\"function Person(){} Person.prototype = { name: 'Nicholas', age: 29, job: 'Software Engineer', friends: ['Shelby', 'Court'], sayName: function (){ console.log(this.name); } } const person1 = new Person(); const person2 = new Person(); person1.friends.push('Van'); console.log(person1.friends); // 'Shelby,Court,Van' console.log(person2.friends); // 'Shelby,COurt,Van' console.log(person1.friends == person2.friends); // true\"]},\"582\":{\"c\":[\"前端技术\"]},\"583\":{\"c\":[\"JavaScript\"]},\"584\":{\"h\":\"工厂模式\",\"t\":[\"工厂模式 是用来创建对象的一种最常用的设计模式。工厂模式不暴露创建对象的具体逻辑，而是将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂。工厂模式常见于大型项目，例如 jQuery 的 $ 对象，我们创建选择器对象之所以没有 new selector 就是因为 $() 已经是一个工厂方法，其他例子例如 React.createElement()、Vue.component() 都是工厂模式的实现。\",\"工厂模式根据抽象程度的不同可以分为三种：\",\"简单工厂：通过第三方的类完成松耦合的任务\",\"复杂工厂：通过把实例化的任务交给子类来完成的，用以到达松耦合的目的\",\"超级工厂：通过 eval() 来完成智能工厂\",\"工厂的目的：在于判断接口最终用哪个类实例化（故与接口密不可分）。\",\"使用工厂最终达到的效果是：多态，和类与类之间的松耦合。\"]},\"585\":{\"h\":\"应用场景\"},\"586\":{\"h\":\"ES5 实现工厂模式\",\"t\":[\"function createPerson(name, age, job) { let person = new Object(); person.name = name; person.age = age; person.job = job; person.sayNam = function () { console.log(`I'm ${name}`); }; return person; } const person1 = createPerson('Ben', 21, 'student'); const person2 = createPerson('Gray', 25, 'Doctor');\",\"函数 createPerson() 能够根据接受的参数来构建一个包含所有必要信息的 Person 对象。可以无数次调用这个函数，而每次它都会返回一个包含三个属性一个方法的对象。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。\"]},\"587\":{\"h\":\"ES6 实现工厂模式\",\"t\":[\"class User { constructor(name, auth) { this.name = name; this.auth = auth; } } class UserFactory { static createUser(name, auth) { //工厂内部封装了创建对象的逻辑: //权限为 admin 时，auth=1；权限为 user 时，auth 为 2 //使用者在外部创建对象时,不需要知道各个权限对应哪个字段, 不需要知道赋权的逻辑，只需要知道创建了一个管理员和用户 if (auth === 'admin') return new User(name, 1); if (auth === 'user') return new User(name, 2); } } const admin = UserFactory.createUser('cxk', 'admin'); const user = UserFactory.createUser('xz', 'user');\"]},\"588\":{\"c\":[\"前端技术\"]},\"589\":{\"c\":[\"JavaScript\"]},\"590\":{\"h\":\"构造函数模式\",\"t\":[\"ECMAScript 中的构造函数可用来创建特定类型的对象。像 Object 和 Array 这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\",\"function Person(name, age, job){ this.name = name; this.age = age; this.job = job; this.sayName = function(){ console.log(this.name); } } const person1 = new Person('Ben', 21, 'student'); const person2 = new Person('Gray', 25, 'Doctor');\",\"构造函数模式与工厂模式实现过程的区别：\",\"没有显式地创建对象\",\"直接将属性和方法赋给了 this 对象\",\"没有 return 语句\",\"按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。这个做法借鉴自其他 OO 语言，主要是为了区别于 ECMAScript 中的其他函数。因为构造函数本身也是函数，只不过可以用来创建对象而已。\"]},\"591\":{\"h\":\"将构造函数当作函数\",\"t\":[\"构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数毕竟也是函数，不存在定义构造函数的特殊语法。任何函数，只要同 new 操作符来调用，那它就可以作为构造函数；而任何函数，如果不同过 new 操作符来调用，那它跟普通函数也不会有什么两样。\"]},\"592\":{\"h\":\"构造函数的问题\",\"t\":[\"使用构造函数，每个方法都要在每个实例上重新创建一遍。不要忘了，ECMAScript 中的函数就是对象，因此每定义一个函数，也就是实例化一个对象。\",\"虽然两个实例中都拥有同名的方法函数，但是两个函数不是同一个 Function 的实例。\",\"function Person(name, age, job){ this.name = name; this.age = age; this.job = job; this.sayName = new Function('console.log(this.name)'); // 与声明函数在逻辑上是等价的 }\",\"从这个角度上来看构造函数，更容易明白每个实例都包含一个不同的 Function 实例的本质。说明白些，以这种方式创建函数，会导致不同的作用域链和标识符解析，但创建 Function 新实例的机制仍然是相同的。因此，不同实例上的同名函数是不相等的。\",\"console.log(person1.sayName == person2.sayName); // false\",\"然而，创建两个完全同样任务的 Function 实例的确没有必要，况且有 this 对象在，根本不用再执行代码前就把函数绑定到特定对象上面。把函数定义转移到构造函数外部来解决重复创建函数实例的问题。\",\"function Person(name, age, job) { this.name = name; this.age = age; this.job = job; this.sayName = sayName; } function sayName(){ console.log(this.name); } const person1 = new Person('Ben', 21, 'student'); const person2 = new Person('Gray', 25, 'Doctor');\",\"在全局作用域中定义的函数实际上只能被某个对象调用，这让全局作用域有点名不副实。而更让人无法接受的是：如果对象需要定义很多方法，那么就要定义很多歌全局函数，于是我们这个自定义的引用类型就丝毫没有封装性可言了。而这些问题可以通过 原型模式 来解决。\"]},\"593\":{\"h\":\"ES6 模块实现\",\"t\":[\"底层实现原理与 ES5 一样，只是语法更简洁。\",\"class Person { constructor(name, age, job) { this.name = name; this.age = name; this.job = job; } sayName() { console.log(this.name); } }\"]},\"594\":{\"c\":[\"前端技术\"]},\"595\":{\"c\":[\"JavaScript\"]},\"596\":{\"h\":\"类的基本语法\",\"t\":[\"ECMAScript 6 中的 Class（类）概念，实际上可以把它看作 ECMAScript 5 对象原型写法的语法糖。\"]},\"597\":{\"h\":\"基本写法\",\"t\":[\"利用 ES5 实现对象原型：\",\"function Point(x, y) { this.x = x; this.y = y; } Point.prototype.toString = function () { return '(' + this.x + ',' + this.y + ')'; }; var p = new Point(1, 2);\",\"利用 ES6 实现对象原型：\",\"class Point { constructor(x, y) { this.x = x; this.y = y; } toString() { return '(' + this.x + ',' + this.y + ')'; } }\"]},\"598\":{\"h\":\"表现形式\",\"t\":[\"类有两种表现形式：声明式和表达式。\"]},\"599\":{\"h\":\"类的声明式\",\"t\":[\"与 ES5 相同的是，类也是通过 new 关键字创建对象实例。\",\"与 ES5 不同的是，在 ES6 中，我们将原型的实现写在了类中，但本质上还是一样的，都是需要新建一个类名，然后实现构造函数，再实现原型方法。\",\"class Foo(){ // 构造函数 constructor(name = 'Tom'){ this.name = name } // 定义一个方法并且赋值给构造函数的原型 sayName(){ console.log(this.name) } } const foo = new Foo() foo.sayName() // 'Tom'\",\"类声明和函数声明的区别和特点：\",\"函数声明可以被提升，类声明不能提升（与 let 声明类似）\",\"类声明中的代码自动强行运行在 严格模式 下\",\"只能通过 new 关键字来声明类，声明类会调用类的构造函数\",\"每个类都有一个 [[construct]] 的方法，该方法就是构造函数\",\"类的所有方法都定义在类的 prototype 属性上\",\"类中的方法无需添加 function 关键字，只需直接添加到类中\",\"方法间不需要添加逗号（,），加了会报错\",\"类中的所有方法都是 不可枚举的（Non-Enumerable），而自定义类型中，可以通过 Object.definedProperty() 手工指定不可枚举属性\",\"在类的实例上调用方法，实质上就是调用原型上的方法\",\"不能在类中修改类名\",\"name 属性总是返回紧跟 class 的关键字后的类名\",\"this 的指向默认指向 类的实例\"]},\"600\":{\"h\":\"类的表达式\",\"t\":[\"// 表达式 // 这个类的名称为 Baz2 而不是 Baz1 // Baz1 只有在类内部代码可用 指代当前类 const Baz2 = class Baz1 { constructor() {} getClassName() { return Baz1.name; } };\"]},\"601\":{\"h\":\"类的组成\"},\"602\":{\"h\":\"构造函数\",\"t\":[\"构造函数（constructor 方法）是类的默认方法，通过 new 关键字生成对象实例时，自动调用该方法。若没有显式定义，一个空的构造函数会被默认添加。\",\"[!warning] 类必须使用 new 关键字调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用 new 关键字也能执行。\"]},\"603\":{\"h\":\"实例对象\",\"t\":[\"与 ES5 一样，实例的属性除非显式定义在其本身（即定义在 this 对象上），否则都是定义在 原型对象 上（即定义在 class 上）。\",\"class Point { constructor(x, y) { this.x = x; this.y = y; } toString() { return `(${this.x}, ${this.y})`; } } const point = new Point(2, 3); // 实例化类后，挂载在 this 上的属性会在挂载到实例对象上 point.toString(); // (2, 3) point.hasOwnProperty('x'); // true point.hasOwnProperty('y'); // true // 而挂载在类上的方法则挂载在原型链上 point.hasOwnProperty('toString'); // false point.__proto__.hasOwnProperty('toString'); // true\",\"变量 x 和 y 都是实例对象 point 自身的属性（因为定义在 this 变量上）\",\"而 toString 是原型对象的属性（因为定义在 Point 类上）\",\"与 ES5 一样，类的所有实例共享一个原型对象。这也意味着，可以通过实例的 __proto__ 属性为类添加方法。\",\"__proto__ 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 JavaScript 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。 生产环境中，我们可以使用 Object.getPrototypeOf 方法来获取实例对象的原型，然后再来为原型添加方法/属性。\"]},\"604\":{\"h\":\"访问器属性\",\"t\":[\"与 ES5 一样，在类的内部也可以使用 get 和 set 关键字，对某个属性设置 存值函数 和 取值函数，拦截该属性的存取行为。\",\"尽管应该在类的构造函数中创建自己的属性，但是类也支持直接在原型上定义访问器属性。\",\"class Student () { constructor () { // ... } get run () { return 'get' } set run (value) { console.log(`set: ${value}`) } } let inst = new Student() Student.run = 'abc' // set: abc Student.run // get\"]},\"605\":{\"h\":\"属性表达式\",\"t\":[\"类的属性名，可以采用表达式。\",\"const methodName = 'getArea' class Square(){ constructor(length){ // ... } [methodName](){ // ... } }\"]},\"606\":{\"h\":\"生成器方法\",\"t\":[\"如果某个方法之前加上星号（*），就表示该方法是一个生成器方法（Generator 函数）。\",\"class Foo { constructor(...args) { this.args = args; } *[Symbol.iterator]() { for (let arg of this.args) { yield arg; } } } for (let x of new Foo('hello', 'world')) { console.log(x); } // hello // world\"]},\"607\":{\"h\":\"运行环境的指向\",\"t\":[\"类的方法内部如果含有 this，它默认指向 类的实例。\",\"但是，如果将类方法内部的方法提取出来单独使用，this 会指向该方法 运行时所在的环境，因为找不到相对应的方法而导致报错。\",\"因此，需要 在构造函数中绑定this ，这样就不会找不到相对应的方法。\",\"class Student { constructor() { this.sayName = this.sayName.bind(this); } }\",\"另一种解决方法是使用 箭头函数。\",\"class Car { constructor() { this.sayName = (name = 'BOT') => { this.sayName(`My name is ${name}`); }; } }\",\"还有一种解决方法是使用 Proxy ，获取方法的时候，自动绑定 this。\"]},\"608\":{\"c\":[\"前端技术\"]},\"609\":{\"c\":[\"JavaScript\"]},\"610\":{\"h\":\"私有成员\",\"t\":[\"私有方法和私有属性，指只能在类的内部访问而外部不能访问的方法和属性。\",\"这是常见需求，有利于代码的封装，但 ES6 不提供，只能通过变通方法模拟实现。\"]},\"611\":{\"h\":\"私有方法\",\"t\":[\"暂时的解决方案（并未真正解决，外部仍可访问）：\",\"命名区别\",\"私有方法移出模块\",\"命名为 Symbol 值\"]},\"612\":{\"h\":\"命名区别\",\"t\":[\"class Utils { // 公有方法 foo(baz) { this._bar(baz); } // 私有方法 _bar(baz) { return (this.snaf = baz); } // ... }\",\"上面代码中，_bar 方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。\"]},\"613\":{\"h\":\"Symbol 值命名\",\"t\":[\"利用 Symbol 值的唯一性，将私有方法的名字命名为一个 Symbol 值。\",\"const bar = Symbol('bar'); const snaf = Symbol('snaf'); export default class myClass { // 公有方法 foo(baz) { this[bar](baz); } // 私有方法 [bar](parm) { return (this[snaf] = baz); } }\",\"上面代码中，bar 和 snaf 都是 Symbol 值，导致第三方无法获取到它们，因此达到了私有方法和私有属性的效果。但是也不是绝对不行，使用 Reflect.ownKeys()依然可以拿到它们。\",\"const instance = new Foo(); Reflect.ownKeys(Foo.prototype); // ['constructor', 'foo', Symbol(bar)]\"]},\"614\":{\"h\":\"引用外部方法\",\"t\":[\"将私有方法移出模块，因为模块内部的所有方法都是对外可见的。\",\"class Utils { foo(baz) { bar.call(this, baz); } } function bar(baz) { return (this.snaf = baz); }\"]},\"615\":{\"h\":\"私有属性\",\"t\":[\"详细介绍参考 私有属性的提案\",\"私有属性是实例中的属性，不会出现在原型上，且只能在类的构造函数或方法中创建。建议在构造函数中创建所有私有属性，从而只通过一处就可以控制所有的私有属性。\",\"class Student { constructor() { this.state = { visible: true, }; } }\",\"目前，有一项提案，为 class 加了私有属性。方法是属性名之前，使用 # 表示。\",\"class Point { #x; constructor (x = 0) { #x = !x } get x () { return #x } set x (value) { #x = !value } }\",\"这种写法不仅可以写私有属性，还可以用来写私有方法。\"]},\"616\":{\"c\":[\"前端技术\"]},\"617\":{\"c\":[\"JavaScript\"]},\"618\":{\"h\":\"类的继承\",\"t\":[\"继承，是子类继承父类的特征和行为，使得子类对象具有父类的实例域和方法。 继承是面向对象编程中，不可或缺的一部分。\"]},\"619\":{\"h\":\"使用方法\",\"t\":[\"与 ES5 通过修改原型链实现继承不同，类通过 extends 关键字实现继承，继承父类的所有属性和方法。\",\"class Parent {} class Child extends Parent { constructor() { super(); } }\",\"[!warning] 子类必须在构造函数中调用 super 方法，否则新建实例会报错。这是因为子类自身的 this 指向，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用 super 方法，子类就无法得到 this 指向。\",\"如果子类没有定义构造函数，这个方法会被默认添加。也就是说，不管有没有显式定义，任何一个子类都有构造函数。\",\"另一个需要注意的是，在子类的构造函数中，只有调用 super 之后，才可以使用 this 关键字，否则会报错。\",\"这是因为子类实例的构建，基于父类实例，只有 super 方法才能调用父类实例。\",\"class Parent { constructor(x, y) { this.x = x; this.y = y; } } class Child extends Parent { constructor(x, y, age) { this.age = age; // ReferenceError 引用错误 // 错误原因：在调用 super 前调用 this super(x, y); // 正确 this.age = age; } }\"]},\"620\":{\"h\":\"访问父类\",\"t\":[\"通过 Object.getPrototypeOf() 方法可以用来从子类上获取父类。\",\"Object.getPrototypeOf(Child) === Parent;\",\"因此，可以通过此方法判断，一个类是否继承了另一个类。\"]},\"621\":{\"h\":\"super\",\"t\":[\"super 关键字，既可当作函数使用，也可以当作对象使用。\",\"当 super 作为函数调用时，代表父类的构造函数。\",\"ES6 要求，子类的构造函数继承父类时必须执行一次 super 函数。而且，super() 函数仅能在构造函数中执行，否则会报错。\",\"class Parent {} class Child extends Parent { constructor() { super(); } }\",\"虽 super 代表了父类 Parent 的 构造函数，但是返回的是子类 Child 的实例，即 super 内部的 this 指的是 Child，因此 super() 在这里相当于：\",\"Parent.prototype.constructor.call(this);\",\"当 super 作为对象时：\",\"在普通方法中，指向父类的原型对象\",\"在静态方法中，指向父类\"]},\"622\":{\"h\":\"普通方法\",\"t\":[\"在普通方法中，super 指向父类的原型对象。\",\"class Parent { console() { return 'Hello world!'; } } class Child extends Parent { constructor() { super(); const result = super.console(); console.log(result); // Hello world! } }\",\"上面代码中，子类 Child 当中的 super.console()，就是将 super 当作一个对象使用。这时，super 在普通方法之中，指向 Parent.prototype，所以 super.console() 就相当于 Parent.prototype.console()。\",\"[!warning] ES6 规定，在子类普通方法中通过 super 调用父类的方法时，方法内部的 this 指向当前的子类实例。\",\"🌰 示例：\",\"class Parent { constructor() { this.x = 1; } print() { console.log(this.x); } } class Child extends Parent { constructor() { super(); this.x = 2; } console() { super.print(); // print 方法执行时 this 实际指向的是子类实例 } } const child = new Child(); child.console(); // 2\"]},\"623\":{\"h\":\"静态方法\",\"t\":[\"在子类的静态方法中通过 super 调用父类的静态方法时，方法内部的 this 指向的是 当前的子类，而不是子类的实例。\",\"class Parent { constructor() { this.x = 1; } static console() { console.log(this.x); } } class Child extends Parent { constructor() { super(); this.x = 2; } static print() { super.console(); } } Child.x = 3; Child.print(); // 3\",\"[!warning] 使用 super 的时候，必须显式指定是作为函数，还是作为对象调用，否则会报错。\",\"class Parent {} class Child extends Parent { constructor() { super(); console.log(super); // 报错 } }\",\"在子类调用父类方法 this 指向总结：\",\"super 作为对象时 \",\"在子类的 普通方法\",\"super 指向 父类的原型对象Parent.prototype\",\"通过 super 调用父类的方法时，方法内部的 this 指向当前的 子类实例\",\"在子类的 静态方法\",\"super 指向 父类，而不是父类的原型对象\",\"通过 super 调用父类的方法时，方法内部的 this 指向当前 子类，而不是子类的实例\"]},\"624\":{\"h\":\"类的原型对象\",\"t\":[\"大多数浏览器的 ES5 实现之中，每一个对象都有 __proto__ 属性，指向对应的构造函数的 prototype 属性。\",\"Class 作为构造函数的语法糖，同时有 prototype 属性和 __proto__ 属性，因此同时存在两条继承链。\",\"子类的 __proto__ 属性，表示 构造函数的继承，总是指向 父类。\",\"子类的 prototype 属性的 __proto__ 属性，表示 方法的继承，总是指向 父类的 prototype 属性。\",\"class Parent {} class Child extends Parent {} console.log(Child.__proto__ === Parent); // true console.log(Child.prototype.__proto__ === Parent.prototype); // true\",\"类的继承是按照下面的模式实现的：\",\"class Parent {} class Child {} // 1. Child 子类的实例对象继承 Parent 父类的实例对象 Object.setPropertyOf(Child.prototype, Parent.prototype); // 2. Child 子类继承 Parent 父类的静态属性 Object.setPropertyOf(Child, Parent); const child = new Child();\",\"Object.setPrototypeOf 方法的底层实现\",\"上述实现等价于：\",\"Object.setPropertyOf(Child.prototype, Parent.prototype); // 等价于 Child.prototype.__proto__ = Parent.prototype; Object.setPropertyOf(Child, Parent); // 等价于 Child.__proto__ = Parent;\",\"这两条继承链，可以这样理解：\",\"作为一个对象，子类的隐式原型对象（__proto__ 属性）是父类（Parent）\",\"作为一个构造函数，子类的显式原型对象（prototype 属性）是父类的显式原型对象（prototype 属性）的实例\",\"子类继承内置对象\",\"class Child extends Object {} // 相当于 console.log(Child.__proto__ === Object); // true console.log(Child.prototype.__proto__ === Object.prototype); // true\",\"这种情况下，Child 其实就是构造函数 Object 的拷贝，Child 的实例（对象）就是 Object 的实例（对象）。\",\"不存在继承关系\",\"class Parent {} Parent.__proto__ === Function.prototype; // true Parent.prototype.__proto__ === Object.prototype; // true\",\"这种情况下，Parent 作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承 Function.prototype。\",\"但是，Parent 实例化后返回一个空对象（即 Object 实例），所以 Parent.prototype.__proto__ 指向构造函数（Object）的 prototype 属性。\"]},\"625\":{\"h\":\"内置对象的继承\",\"t\":[\"内置对象（又称原生构造函数）是指内置的构造函数，通常用来生成数据结构。\",\"过去，原生构造函数是无法继承的，比如，不能自己定义一个 Array 的子类。之所以这样，是因为子类无法获得原生构造函数的内部属性，通过 Array.apply() 或者分配给原型对象都不行。原生构造函数会忽略 apply 方法传入的 this，也就是说，原生构造函数 this 无法绑定，导致拿不到内部属性。\",\"而在 ES6 中允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象 this ，然后再用子类的构造函数修饰 this，使得父类的所有行为都可以继承。下面是一个继承 Array 的例子。\",\"class SubArray extends Array { constructor(...args) { super(...args); } } var arr = new SubArray(); arr[0] = 12; console.log(arr.length); // 1 arr.length = 0; console.log(arr[0]); // undefined\",\"上面的例子说明，extends 关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。\",\"[!warning] 继承 Object 的子类，有一个行为差异。\",\"class SubObject extends Object { constructor() { super(...arguments); } } const obj = new SubObject({ attr: true }); obj.attr === true; // false\",\"上述代码中，SubObject 继承了 Object ，但是无法通过 super 方法向父类 Object 传参。这是因为 ES6 改变了 Object 构造函数的行为，一旦发现 Object 方法不是通过 new Object() 这种形式调用，ES6 规定 Object 构造函数会忽略参数。\"]},\"626\":{\"c\":[\"前端技术\"]},\"627\":{\"c\":[\"JavaScript\"]},\"628\":{\"h\":\"静态成员\",\"t\":[\"类的静态成员包括 静态方法 和 静态属性。\",\"静态方法定义在类的内部（不是定义在实例对象 this 上）\",\"静态属性通过对象的属性访问器定义（新提案提供了关键字 static 用于定义）\"]},\"629\":{\"h\":\"静态方法\",\"t\":[\"类相当于实例的原型，所有在类中定义的方法，都会被实例继承。\",\"如果在一个方法前，加上 static 关键字，就表示该方法不会被实例继承，而是需要直接通过类来调用，这就称为 静态方法。\",\"class Foo { static sayHi() { return 'Hello'; } } Foo.sayHi(); // 'Hello' const foo = new Foo(); foo.sayHi(); // TypeError: foo.sayHi is not a function\"]},\"630\":{\"h\":\"动态作用域\",\"t\":[\"[!warning] 如果静态方法包含 this 关键字，这个 this 指的是类，而不是实例。\",\"class Foo { static bar() { this.baz(); } static baz() { console.log('Hello'); } baz() { console.log('World!'); } } Foo.bar(); // 'Hello'\"]},\"631\":{\"h\":\"子类继承\",\"t\":[\"父类的静态方法，可以被子类继承。\",\"class Foo { static sayHi() { return 'Hello'; } } class Bar extends Foo {} Bar.sayHi(); // 'Hello'\"]},\"632\":{\"h\":\"静态属性\",\"t\":[\"由于在 ES6 中明文规定，类内部只有静态方法，没有静态属性。因此，类的静态属性无法直接在类内部直接定义。\",\"// 以下写法无效 class Foo { // 写法一 prop: 2; // 写法二 static prop: 2; }\",\"目前有一个静态属性提案，对实例属性和静态属性都规定了新的写法。\",\"过去，需要在类的构造函数中定义实例属性。\",\"现在，类的实例属性可以用等式，写入类的定义之中。这种写法比以前更清晰。\",\"// Old class Foo { constructor() { this.state = { visible: true, }; } } // New class Bar { state = { visible: true, }; constructor() { console.log(this.state.visible); // true } }\",\"为了可读性的目的，对于那些在构造函数中已经定义的实例属性，新写法允许直接在类中列出。\",\"类的静态属性只需在上述的实例属性写法前加上 static 关键字即可。\",\"class MyClass { static state = { visible: true, }; constructor() { console.log(MyClass.state.visible); // true } }\",\"新写法是显式声明（declarative），而非赋值处理，语义更好。\"]},\"633\":{\"c\":[\"前端技术\"]},\"634\":{\"c\":[\"JavaScript\"]},\"635\":{\"h\":\"借用构造函数\",\"t\":[\"借用构造函数（Constructor Stealing），即在子类型构造函数的内部调用父类构造函数以实现对父类构造函数属性的继承。\",\"🌰 示例：\",\"function Parent() { this.attr = { eye: 'blue', hair: 'black', skin: 'white', }; this.sayName = function () { console.log('Name'); }; } function Child() { Parent.call(this); this.sayHi = function () { console.log('Hello world!'); }; } let boy = new Child(); boy.attr.age = 3; console.log(boy.attr); // { eye: 'blue', hair: 'black', skin: 'white', age: 3} let girl = new Child(); console.log(girl.attr); // { eye: 'blue', hair: 'black', skin: 'white'}\",\"在构造函数 Child 内通过 call 方法（或 apply 方法也可以），使得 Parent 的构造函数能在 Child 构造函数的环境下调用。\",\"如此一来，子类构造函数 Child 上执行父类构造函数 Parent 中定义的所有对象初始化代码。\",\"Child 的每个实例都会具有自己的继承与父类构造函数的属性的副本。\",\"[!warning] 函数只不过是在特定环境中执行代码的对象，因此通过使用 apply 和 call 方法也可以在新创建的对象上执行构造函数。\"]},\"636\":{\"h\":\"传递参数\",\"t\":[\"相对于原型链而言，借用构造函数有一个很大的优势，即 可以在子类型构造函数中向父类型构造函数传递参数。\",\"function Parent(name) { this.name = name; } function Child() { //继承了 Parent，同时还传递了参数 Parent.call(this, 'Uzi'); //实例属性 this.age = 18; } const child = new Child(); console.log(child.name); // 'Uzi' console.log(child.age); // 18\",\"通过往父类型构造函数传递参数，能自定义需要继承的属性 为了确保子构造函数自身定义的属性或方法不被父构造函数生成的属性重写，可以在调用父类型构造函数后，再添加子类型构造函数中定义的属性\"]},\"637\":{\"h\":\"缺陷\",\"t\":[\"只能继承父类 实例对象 的属性和方法，不能继承 原型对象 的属性和方法\",\"无法实现复用，每个子类都有父类实例函数的副本，影响性能\"]},\"638\":{\"c\":[\"前端技术\"]},\"639\":{\"c\":[\"JavaScript\"]},\"640\":{\"h\":\"原型式继承\",\"t\":[\"原型式继承是借助原型基于已有的对象创建新对象，同时还不必因此创建自定义类型。\",\"🌰 示例：\",\"function Person(friendship) { function Creator() {} Creator.prototype = friendship; return new Creator(); }\",\"在函数内部，先创建 临时性的构造函数，然后将传入的对象作为这个 构造函数的原型，最后返回这个临时构造函数的一个实例。从本质上，该函数对传入的对象执行了一次 浅拷贝。\",\"// 作为另一个对象的基础 const friendship = { name: 'unamed', friends: ['Amy', 'Ben', 'Tom'], }; // 返回新实例对象，该实例对象原型为 Person let uzi = Person(friendship); uzi.name = 'Uzi'; uzi.friends.push('Peter'); let kat = Person(friendship); kat.name = 'Kat'; kat.friends.push('Sid'); // 原型中的基本类型属性和引用类型属性被两个实例对象共享 console.log(uzi.friends); // [\\\"Amy\\\", \\\"Ben\\\", \\\"Tom\\\", \\\"Peter\\\", \\\"Sid\\\"]\",\"原型式继承需要有一个对象可以作为另一个对象的基础。如果有这么一个对象的话，可以把它传递给实例生成函数，然后再根据具体需求对得到的对象加以修改即可。\",\"ECMAScript 5 通过新增 Object.create() 方法规范化了原型式继承。这个方法接收两个参数：一个用作新对象原型的对象和一个为新对象定义额外属性的对象（可选）。\",\"实际上就是将 Person 构造函数替换成 Object.create\",\"const friendship = { name: 'unamed', friends: ['Amy', 'Ben', 'Tom'], }; let uzi = Object.create(friendship); uzi.name = 'Uzi'; uzi.friends.push('Peter'); let kat = Object.create(friendship); kat.name = 'Kat'; kat.friends.push('Sid'); console.log(uzi.__proto__.friends); // [\\\"Amy\\\", \\\"Ben\\\", \\\"Tom\\\", \\\"Peter\\\", \\\"Sid\\\"] console.log(kat.__proto__.friends); // [\\\"Amy\\\", \\\"Ben\\\", \\\"Tom\\\", \\\"Peter\\\", \\\"Sid\\\"]\"]},\"641\":{\"h\":\"模式缺陷\",\"t\":[\"引用类型值的属性始终都会共享相应的值，多个实例对象对引用类型的操作会被篡改。\"]},\"642\":{\"c\":[\"前端技术\"]},\"643\":{\"c\":[\"JavaScript\"]},\"644\":{\"h\":\"原型链\",\"t\":[\"ECMAScript 中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。\",\"搞懂原型对象和原型链其实就是搞懂 prototype、__proto__ 和 constructor 之间的相互关系。\",\"我们通过示例并附加图例阐述这种复杂的相互关系。\",\"图例\",\"红色箭头表示 __proto__ 属性指向\",\"绿色箭头表示 prototype 属性指向\",\"棕色箭头表示本身具有的 constructor 属性\",\"蓝色方块表示对象\",\"浅绿方块表示函数\",\"在 JavaScript 中，这三者之间依附在不同的引用对象类型上。\",\"对象：__proto__ 和 constructor 是对象独有的。\",\"函数：prototype 是函数独有的。但是函数也是对象，所以函数也有 __proto__ 和 constructor。\"]},\"645\":{\"h\":\"显式原型\",\"t\":[\"显式原型对象 prototype 由函数所独有，它是从一个函数指向另一个对象。它的含义是函数的原型对象，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象。由此可知：foo.__proto__ === Foo.prototype，它们两个完全一样。\",\"那 prototype 属性作用又是什么呢？它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数的实例化对象们都可以找到公用的属性和方法。\",\"任何函数在创建的时候，其实会默认同时创建该函数的 prototype 对象。\"]},\"646\":{\"h\":\"隐式原型\",\"t\":[\"在 JavaScript 中的对象中都有一个 __proto__ 属性，从上图可以看出一个对象指向另一个对象，即指向相对应的对象的原型对象。这个原型对象称为隐式原型对象。\",\"隐式原型对象的作用在于，当访问一个对象的属性或方法时，如果该对象内部不存在这个属性，那么就会从它的 __proto__ 属性所指向的（原型）对象中寻找（原型也是对象，也有它自己的原型），如果原型对象中也找不到，就会继续在该原型对象的原型对象中找，以此类推，直到找到属性或方法为止，或者查找到顶层原型对象 null，就结束查找，返回 undefined。\",\"整个查找过程中，从当前对象出发沿着原型对象（__proto__）构成的链条查找相关属性和方法直到结束，这些相互关联的对象组成的链条就是原型链。\"]},\"647\":{\"h\":\"构造函数\",\"t\":[\"属性 constructor 也是对象才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数（本身拥有或继承而来，继承而来的要结合 __proto__ 属性查看会更清楚点），从上图中可以看出 Function 这个对象比较特殊，它的构造函数就是它自己（因为 Function 可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由 Function 构造函数得来，所以 constructor 属性的终点就是 Function 这个函数。\"]},\"648\":{\"h\":\"原型对象\",\"t\":[\"原型对象即为当前实例对象的父对象\",\"显式原型对象\",\"隐式原型对象\",\"属性 prototype\",\"属性 __proto__\",\"函数独有\",\"对象独有（函数也是对象，因此函数也有该属性）\",\"定义函数时被自动赋值，值默认为 {}\",\"在创建实例对象时被自动添加，并赋值为构造函数的 prototype 值\",\"用于实现基于原型的继承与属性的共享\",\"构成原型链，同样用于实现基于原型的继承\",\"🌰 代码示例：访问原型链中的原型对象\",\"const Foo = function () {}; const foo = new Foo(); // 构造函数 Foo {} 是函数 foo 的原型对象 console.log(foo.__proto__); // 构造函数 Object {} 是函数 Function 的原型对象 console.log(foo.__proto__.__proto__); // 原型链顶层 console.log(foo.__proto__.__proto__.__proto__); // null\",\"原型链中查找属性方法和访问原型链中的原型对象的区别\",\"在原型链中查找属性或方法，如果没有查找到相关属性或方法，返回的是 undefined，表示原型链中没有该属性或方法。\",\"而通过访问原型链中的原型对象，到达原型链终点，即 Object.prototype 的值为 null。\"]},\"649\":{\"h\":\"原型对象的指向\",\"t\":[\"__proto__ 的指向取决于对象创建时的实现方式。\"]},\"650\":{\"h\":\"字面量方式\",\"t\":[\"当通过字面量方式创建对象时，它的原型就是 Object.prototype。\",\"虽然我们无法直接访问内置属性 __proto__，但我们可以通过 Object.getPrototypeOf() 或对象的属性 __proto__ 获取对象的原型。\",\"const foo = {}; console.log(foo.__proto__ === Object.prototype); // true console.log(Object.getPrototypeOf(foo) === Object.prototype); // true\"]},\"651\":{\"h\":\"构造器方式\",\"t\":[\"const Foo = function () {}; const foo = new Foo(); console.log(foo.__proto__ === Foo.prototype); // true console.log(Object.getPrototypeOf(foo) === Foo.prototype); // true\"]},\"652\":{\"h\":\"Object.create 方式\",\"t\":[\"通过 Object.create() 方式创建的对象会以传入的对象参数为对象的原型。\",\"const foo = {}; const bar = Object.create(foo); console.log(bar.__proto__ === foo);\"]},\"653\":{\"h\":\"原型对象与实例\",\"t\":[\"通过 instanceof 操作符可以确定原型与实例的关系。\",\"// 假设 instanceof 操作符左边是 L 右边是 R L instanceof R // instanceof 运算时 通过判断 L 的原型链是否存在 R.prototype L.__proto__.__proto__... === R.prototype\",\"[!warning] instanceof 操作符会递归查找 L 的原型链，即 L.__proto__.__proto__.__proto__... 直到找到了或者到达顶层为止。\",\"构造器 Function 的构造器是它自身：\",\"Function.constructor === Function; // true\",\"构造器 Object 的构造器是 Function（因此可得所有构造器的 constructor 都指向 Function）\",\"Object.constructor === Function; // true\",\"构造器 Function 的 [[Prototype]] 是一个特殊的匿名函数\",\"console.log(Function.__proto__); // function(){}\",\"这个特殊的匿名函数的 [[Prototype]] 指向 Object 的 prototype 原型。\",\"Function.__proto__.__proto__ === Object.prototype; // true\",\"Object 的 [[Prototype]] 指向 Function 的 prototype 也就是上述的特殊的匿名函数\",\"Object.__proto__ === Function.prototype; // true Function.prototype === Function.__proto__; // true\",\"内置对象 Function 和 Object 的关系：\",\"Function instanceof Object; // true Object instanceof Function; // true\",\"其他标准内置对象的字面量原型链关系：\",\"console.log(true.__prto__.__proto__ === Object.prototype); console.log((123).__proto__.__proto__ === Object.prototype); console.log('String'.__proto__.__proto__ === Object.prototype); console.log([].__proto__.__proto__ === Object.prototype); console.log({}.__proto__ === Object.prototype);\",\"总结：\",\"所有的构造器的 constructor 都指向 Function\",\"Function 的 prototype 指向一个特殊匿名函数，而这个特殊匿名函数的 __proto__ 指向 Object.prototype\"]},\"654\":{\"c\":[\"前端技术\"]},\"655\":{\"c\":[\"JavaScript\"]},\"656\":{\"h\":\"寄生式继承\",\"t\":[\"寄生式继承（Parasitic Inheritance）：创建一个仅用于封装继承过程的函数，在函数内部以某种方式增强对象\",\"function creator(origin) { // 以 origin 为原型对象创建一个新对象 let clone = Object.create(origin); // 以某种方式来增强这个对象 clone.sayHi = function () { console.log('Hello world!'); }; // 返回这个对象 return clone; } let friendship = { name: 'Uzi', friends: ['Amy', 'Ben', 'Tom'], }; // 具有实例的原型person的所有属性和方法，也有自己的方法 let uzi = creator(friendship); uzi.sayHi(); // Hello world!\",\"在主要考虑对象而 不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式。前面示范继承模式时使用的 Object 函数不是必需的，任何能够返回新对象的函数都适用于此模式。\",\"[!warning] 使用寄生式继承来为对象添加函数，会由于不能做到函数复用而降低效率；这一点与借用构造函数模式类似。\"]},\"657\":{\"c\":[\"前端技术\"]},\"658\":{\"c\":[\"JavaScript\"]},\"659\":{\"h\":\"寄生组合式继承\",\"t\":[\"寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。\",\"其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。 本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。\",\"🌰 示例：\",\"function inherit(child, parent) { // 创建对象 let prototype = Object.create(parent.prototype); // 增强对象 prototype.constructor = child; // 指定对象 child.prototype = prototype; }\",\"这个示例中的函数实现了寄生组合式继承的最简单形式。这个函数接收两个参数：子类型构造函数 和 超类型构造函数。\",\"第一步是创建超类型原型的一个副本\",\"第二步是为创建的副本添加 constructor 属性，从而弥补因重写原型而失去的默认的 constructor 属性\",\"最后一步，将新创建的对象（即副本）赋值给子类型的原型\",\"function inherit(children, parent) { // 创建对象 let prototype = Object.create(parent.prototype); // 增强对象 prototype.constructor = children; // 指定对象 children.prototype = prototype; } function Parent(name) { this.name = name; this.num = [0, 1, 2]; } Parent.prototype.sayName = function() { alert(this.name); }; function Child(name, age) { Parent.call(this, name); this.age = age; } inherit(Child, Parent); Child.prototype.sayAge = function() { console.log(this.age); };\",\"解决两次调用的方法是使用寄生组合式继承。\",\"寄生组合式继承与组合继承相似，都是通过借用构造函数来继承不可共享的属性，通过原型链的混成形式来继承方法和可共享的属性。只不过把原型继承的形式变成了寄生式继承。\",\"使用寄生组合式继承可以不必为了指定子类型的原型而调用父类型的构造函数，从而寄生式继承只继承了父类型的原型属性，而父类型的实例属性是通过借用构造函数的方式来得到的。\",\"下方中会对寄生继承进行详细说明：\",\"function Parent(name) { this.name = name; this.num = [0, 1, 2]; } Parent.prototype.sayName = function() { return this.name; }; function Child(name, age) { Parent.call(this, name); this.age = age; } Child.prototype = Object.create(Parent.prototype); Child.prototype.constructor = Child; // The first instance const boy = new Child('Jothan', 22); boy.num.push(3); console.log(boy.num); // [0, 1, 2, 3] boy.sayName(); // 'Jothan' // The second instance const girl = new Child('Kat', 18); console.log(girl.num); // [0, 1, 2] girl.sayName(); // 'Kat'\",\"这个例子的高效率体现在它只调用了一次 Parent 构造函数，并且因此避免了在 Child.prototype 上面创建不必要的、多余的属性。与此同时，原型链还保持不变。\"]},\"660\":{\"c\":[\"前端技术\"]},\"661\":{\"c\":[\"JavaScript\"]},\"662\":{\"h\":\"组合继承\",\"t\":[\"组合继承（Combination Inheritance）（也叫伪经典继承），指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。\",\"其背后的思路是使用原型链实现对原型对象的属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。\",\"🌰 示例：\",\"function Parent(name) { this.name = name; this.attr = { eye: 'blue', hair: 'black', skin: 'white', }; } Parent.prototype.sayName = function() { console.log(this.name); }; function Child(name, age) { // 第二次调用 Parent() // Child.prototype 又得到了 name 和 attr 两个属性 // 并对上次得到的属性值进行了覆盖 Parent.call(this, name); this.age = age; } // 第一次调用 Parent() // 使得子类实例的原型对象指向父类实例对象 // Child.prototype 得到了 name 和 attr 两个属性 Child.prototype = new Parent(); Child.prototype.constructor = Child; Child.prototype.sayAge = function() { console.log(this.age); }; // 第一个实例对象 let uzi = new Child('Uzi', 3); uzi.attr.height = 80; console.log(uzi.attr); // { eye: 'blue', hair: 'black', skin: 'white', height: 80 } uzi.sayName(); // 'Uzi' uzi.sayAge(); // 3 // 第二个实例对象 let kat = new Child('Kat', 1); console.log(kat.colors); // { eye: 'blue', hair: 'black', skin: 'white' } kat.sayName(); // 'Kat' kat.sayAge(); // 1\",\"实现步骤分解：\",\"父类构造函数定义自身属性（Parent 构造函数定义了 name 和 attr）\",\"父类原型上定义方法（Parent 的原型定义了一个方法 sayName）\",\"子类构造函数调用父类构造函数，传入参数，继承父类构造函数中的属性，随后子类构造函数又自定义自身的属性（Child 构造函数在调用 Parent 构造函数时传入了 name 参数，紧接着又定义了它自己的属性 height。）\",\"子类构造函数的原型指向父类构造函数生成的实例（将 Parent 的实例赋值给 Child 的原型）\",\"在子类构造函数的原型上定义方法（在 Child 的原型上定义了方法 sayAge）\",\"这样一来，就可以让两个不同的子类实例对象既分别拥有自己属性，又可以使用相同的方法\"]},\"663\":{\"h\":\"缺陷\",\"t\":[\"无论什么情况下，都会调用两次父类构造函数：第一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。子类型对象最终会包含父类型对象的全部实例属性，但不得不在调用子类型构造函数时重写这些属性。\"]},\"664\":{\"h\":\"组合继承优化\",\"t\":[\"组合继承优化示例一：\",\"// Before Child.prototype = new Parent(); // After Child.prototype = Parent.prototype;\",\"这种优化方式的缺点是，子类实例对象的构造函数无法区分是子类构造函数还是父类构造函数。\",\"📌 完美写法：寄生组合式继承\",\"组合继承优化示例二：通过中间对象，继承父类原型对象，实现子类与父类的隔离\",\"function Parent() { this.name = 'Parent'; this.num = [0, 1, 2]; } function Child() { Parent.call(this); thi.type = 'Child'; } Child.prototype = Object.create(Parent.prototype); Child.prototype.constructor = Child;\"]},\"665\":{\"c\":[\"前端技术\"]},\"666\":{\"c\":[\"JavaScript\"]},\"667\":{\"h\":\"filter\",\"t\":[\"Array.prototype.filter() 方法创建一个新数组，其包含通过所提供函数实现的测试的所有元素。\"]},\"668\":{\"h\":\"语法\",\"t\":[\"语法：\",\"arr.filter( callback = function (currentValue, index, arr) {} [, thisArg ] )\",\"类型声明：\",\"interface Array<T> { filter<S extends T>( predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any ): S[]; filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[]; }\",\"参数说明：\",\"参数\",\"说明\",\"类型\",\"callback\",\"用于判定数组成员的回调函数\",\"function\",\"thisArg\",\"执行回调函数的 this 值\",\"callback 函数的参数：\",\"currentValue：当前数组中处理的元素\",\"index：数组中正处理的当前元素的索引\",\"array：被调用的数组\",\"返回值：\",\"返回一个新的通过测试的成员的集合的数组。\"]},\"669\":{\"h\":\"方法说明\",\"t\":[\"该方法为数组中的每个成员调用一次回调函数，并利用所有使得回调函数返回 true 或 等价于 true 的值的成员创建一个新数组。回调函数只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引不会被调用。那些没有通过回调函数测试的元素会被跳过，不会被包含在新数组中。\",\"如果提供 thisArg 参数，则它会被作为回调函数被调用时的 this 值。否则，回调函数的 this 值在非严格模式下将是全局对象，严格模式下为 undefined。\",\"遍历的元素范围在第一次调用回调函数之前就已经确定了。在调用该方法之后被添加到数组中的元素不会被 遍历到。如果已经存在的元素被改变了，则他们传入回调函数的值是遍历到它们那一刻的值。被删除或从来未被赋值的元素不会被遍历到。\"]},\"670\":{\"h\":\"代码示例\"},\"671\":{\"h\":\"基本用法\",\"t\":[\"const isBigEnough = (value) => value >= (10)[(12, 5, 8, 130, 44)].filter(isBigEnough); // false\"]},\"672\":{\"h\":\"排除偶数保留奇数\",\"t\":[\"let arr = [1, 2, 3, 5, 6, 9, 10]; arr.filter((value) => value % 2 !== 0); // [1, 3, 5, 9]\"]},\"673\":{\"h\":\"清除数组空字符\",\"t\":[\"let arr = ['A', '', 'B', null, undefined, 'c', ' ']; arr.filter((value) => value && value.trim()); // ['A', 'B', 'C']\"]},\"674\":{\"c\":[\"前端技术\"]},\"675\":{\"c\":[\"JavaScript\"]},\"676\":{\"h\":\"assign\",\"t\":[\"Object.assign() 方法用于将所有可枚举自有 Property 的值从一个或多个源对象拷贝到目标对象。\"]},\"677\":{\"h\":\"语法\",\"t\":[\"Object.assign(target, ...sources); // target 目标对象 // sources 源对象 // 返回目标对象\"]},\"678\":{\"h\":\"方法说明\",\"t\":[\"如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。\",\"Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。\",\"该方法使用源对象的 [[Get]] 和目标对象的 [[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含 getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用 Object.getOwnPropertyDescriptor 和 Object.defineProperty 。\"]},\"679\":{\"h\":\"代码示例\",\"t\":[\"const obj1 = { a: 1 }; const obj2 = Object.assign({}, obj1); console.log(obj2); // Output: { a: 1 }\"]},\"680\":{\"c\":[\"前端技术\"]},\"681\":{\"c\":[\"JavaScript\"]},\"682\":{\"h\":\"create\",\"t\":[\"Object.create() 方法用于创建指定对象为原型对象的新对象。\"]},\"683\":{\"h\":\"语法\",\"t\":[\"Object.create(o [, properties]); // o 新创建对象指向的原型对象 // properties 可选参数,添加到新创建对象的可枚举属性（即自身定义的属性，而不是原型链上的枚举属性）\",\"[!warning]\",\"如果 properties 参数不是 null 或对象，则抛出一个 TypeError 异常\",\"返回指定原型对象和可枚举属性的新对象\"]},\"684\":{\"h\":\"代码示例\",\"t\":[\"类式继承\",\"// Shape = Super Class function Shape() { this.x = 0 this.y = 0 } // Super Class Methods Shape.prototype.move = function () { this.x += x this.y += y console.log('Shap moved') } // Retangle - Sub Class function Retangle() { Shape.all(this) // call super constructor } // 子类继承父类 Retangle.prototype = Object.create(Shape.prototype) Retangle.prototype.constructor = Retangle const rect = new Retangle() console.log(rect instanceof Retangle) // true console.log(rect instanceof Shape) // true\"]},\"685\":{\"c\":[\"前端技术\"]},\"686\":{\"c\":[\"JavaScript\"]},\"687\":{\"h\":\"defineProperties\",\"t\":[\"Object.defineProperties() 方法用于为一个对象定义 Properties 或修改已有的 Properties 的 Attributes。\"]},\"688\":{\"h\":\"语法\",\"t\":[\"Object.defineProperties(o, properties) // o 添加或修改 properties 的目标对象 // properties 要定义其可枚举属性或修改的属性描述符的对象\",\"Attributes 值说明：\",\"Attributes\",\"说明\",\"默认值\",\"configurable\",\"对象的可配置性\",\"false\",\"enumerable\",\"对象的可枚举性\",\"false\",\"writable\",\"对象的可写性\",\"false\",\"value\",\"对象的属性值\",\"undefined\",\"get\",\"对象的读取访问器属性\",\"undefined\",\"set\",\"对象的写入访问器属性\",\"undefined\",\"返回值：\",\"返回变更后的对象。\"]},\"689\":{\"h\":\"代码示例\",\"t\":[\"const abc = { a: 1, b: 2, c: 3 } Object.defineProperties(abc, { a: { value: 'One', writable: false, enumerable: false, configurable: false, }, e: { value: 4, }, f: { value: 5, }, }) console.log(abc) // { // b: \\\"Two\\\", // c: 3, // a: \\\"One\\\", // d: \\\"Three\\\", // e: 4, // f: 5, // } abc.a = 10 console.log(abc.a) // 'One'\"]},\"690\":{\"c\":[\"前端技术\"]},\"691\":{\"c\":[\"JavaScript\"]},\"692\":{\"h\":\"defineProperty\",\"t\":[\"Object.defineProperty() 方法用于为一个对象定义一个自有 Property 和/或修改已有 Property 的 Attributes。\"]},\"693\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.defineProperty(o, p, attributes); // o 定义或修改 Property 的目标对象 // p 需要定义的 Property 键名字符串 // attributes 被定义或修改的 Attributes 对象 // 返回变更后的对象\"]},\"694\":{\"h\":\"示例\",\"t\":[\"const foo = {}; Object.defineProperty(foo, 'a', { value: 100, writable: true, enumerable: true, configurable: true }) console.log(foo); // { a: 100 } const bar; // 添加属性和存取描述符 Object.defineProperty(foo, 'b', { get: function(){ return foo }, set: function(newValue){ bar = newValue }, enumerable: true, configurable: true, }) foo.b = 99; console.log(foo.b); // 99\"]},\"695\":{\"h\":\"对象属性劫持\",\"t\":[\"遍历劫持对象的所有属性\",\"const data = { a: 'a', b: 'b', c: 'c', }; // 遍历对象，对其属性值进行劫持 Object.keys(data).forEach(function (key) { Object.defineProperty(data, key, { enumerable: true, configurable: true, get: function () { console.log('GET'); }, set: function (value) { // 当属性值发生变化时我们可以进行额外操作 console.log('SET'); }, }); });\"]},\"696\":{\"c\":[\"前端技术\"]},\"697\":{\"c\":[\"JavaScript\"]},\"698\":{\"h\":\"entries\",\"t\":[\"⭐️ ES2017(ES8)新特性\",\"Object.entries() 方法用于枚举指定对象并返回以键值对组成的数组为元素的二维数组。\"]},\"699\":{\"h\":\"语法\",\"t\":[\"Object.entries(obj) // obj 用于枚举的对象 // 返回值 给定对象自身可枚举 Property 的键值对数组\"]},\"700\":{\"h\":\"方法说明\",\"t\":[\"给定对象自身可枚举属性的键值对数组，其排列与使用 for-in 循环遍历该对象时返回的顺序一致，区别在于 for-in 循环也枚举原型链中的属性。\"]},\"701\":{\"h\":\"代码示例\",\"t\":[\"const a = { foo: 1, bar: 2 } Object.entries(a) // [['foo', 1], ['bar', 2]] Object.entries('foo') // [ ['0', 'f'], ['1', 'o'], ['2', 'o'] ] const obj = { a: 5, b: 7, c: 9 } for (const [key, value] of Object.entries(obj)) { console.log(`${key} ${value}`) // \\\"a 5\\\", \\\"b 7\\\", \\\"c 9\\\" } Object.entries(obj).forEach(([key, value]) => { console.log(`${key} ${value}`) // \\\"a 5\\\", \\\"b 7\\\", \\\"c 9\\\" })\"]},\"702\":{\"c\":[\"前端技术\"]},\"703\":{\"c\":[\"JavaScript\"]},\"704\":{\"h\":\"freeze\",\"t\":[\"Object.freeze() 方法用于冻结一个对象。\"]},\"705\":{\"h\":\"语法\",\"t\":[\"Object.freeze(o) // o 将被冻结的对象 // 返回被冻结的对象\"]},\"706\":{\"h\":\"方法说明\",\"t\":[\"一个被冻结的对象再也不能被修改。\",\"冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。\",\"数据属性的值不可更改，访问器属性（有 getter 和 setter）也同样（但由于是函数调用，给人的错觉是还是可以修改这个属性）。\",\"如果一个属性的值是个对象，则这个对象中的属性是可以修改的，除非它也是个冻结对象。\",\"数组作为一种对象，被冻结，其元素不能被修改。没有数组元素可以被添加或移除。\"]},\"707\":{\"c\":[\"前端技术\"]},\"708\":{\"c\":[\"JavaScript\"]},\"709\":{\"h\":\"fromEntries\",\"t\":[\"Object.fromEntries() 方法把键值对列表转换为一个对象。\"]},\"710\":{\"h\":\"语法\",\"t\":[\"Object.fromEntries(entries) // entries 可实现可迭代协议的可迭代对象（例如 Array、Map 等） // 返回一个由该迭代对象条目提供对应属性的新对象\"]},\"711\":{\"h\":\"方法说明\",\"t\":[\"Object.fromEntries() 方法接收一个键值对的列表参数，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现 @@iterator 方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。\",\"Object.fromEntries() 执行与 Object.entries() 互逆的操作。\"]},\"712\":{\"h\":\"代码示例\"},\"713\":{\"h\":\"基本用法\",\"t\":[\"const obj = { x: 42, y: 50 } const entries = Object.entries(obj) // -> [['x', 42], ['y', 50]]; const result = Object.fromEntries(entries) // -> { x: 42, y: 50 }\"]},\"714\":{\"h\":\"转换 Map 为 Object\",\"t\":[\"const map1 = new Map([ ['big', 'small'], [1, 0], ]) const geek = Object.fromEntries(map1) console.log(geek) // Output: { 1: 0, big: \\\"small\\\" } const map2 = new Map([ ['Geek1', 'Intern'], ['stipend', 'Works basis'], ]) const geek1 = Object.fromEntries(map2) console.log(geek1) // Output: { Geek1: \\\"Intern\\\", sitipend: \\\"Works basis\\\" }\"]},\"715\":{\"h\":\"转换 Array 为 Object\",\"t\":[\"const arr1 = [ ['big', 'small'], [1, 0], ['a', 'z'], ] const geek = Object.fromEntries(arr1) console.log(geek) // Output: { 1: 0, big: \\\"small\\\", a: \\\"z\\\" } const arr2 = [ ['Geek1', 'Intern'], ['stipend', 'Works basis'], ] const geek1 = Object.fromEntries(arr2) // Output: { Geek1: \\\"Intern\\\", stipend: \\\"Works basis\\\" }\"]},\"716\":{\"h\":\"其他转换\",\"t\":[\"const params = 'type=Get_the Value&geekno=34&paid=10' const searchParams = new URLSearchParams(params) console.log(Object.fromEntries(searchParams)) // Output: { type: \\\"Get_ Value\\\", geekno: \\\"34\\\", paid: \\\"10\\\" } const object1 = { val1: 112, val2: 345, val3: 76 } const object2 = Object.fromEntries( Object.entries(object1).map(([key, val]) => [key, val * 3]) ) console.log(object2) // Output: { val1: 336, val2: 1035, val3: 228 }\"]},\"717\":{\"c\":[\"前端技术\"]},\"718\":{\"c\":[\"JavaScript\"]},\"719\":{\"h\":\"getOwnPropertyDescriptor\",\"t\":[\"Object.getOwnPropertyDescriptor() 方法可以获取对象自有 Property 的某个 Attributes。\"]},\"720\":{\"h\":\"语法\",\"t\":[\"Object.getOwnPropertyDescriptor(o, property) // o 需要查找的目标对象 // property 目标对象的 Property\"]},\"721\":{\"h\":\"代码示例\",\"t\":[\"const foo = { a: 1 } Object.getOwnPropertyDescriptor(foo, 'a') // { // value: 1, // writable: true, // enumerable: true, // configurable: true, // }\"]},\"722\":{\"c\":[\"前端技术\"]},\"723\":{\"c\":[\"JavaScript\"]},\"724\":{\"h\":\"getOwnPropertyDescriptors\",\"t\":[\"⭐️ ES2017(ES8)新特性\",\"Object.getOwnPropertyDescriptors() 方法用于获取一个对象的所有自身 Property 的 Attributes。\"]},\"725\":{\"h\":\"语法\",\"t\":[\"Object.getOwnPropertyDescriptors(obj) // obj 用于获取 Property 的 Attributes 的对象\"]},\"726\":{\"h\":\"代码示例\",\"t\":[\"const a = { name: 'Ben', get age() { return '18' }, } Object.getOwnPropertyDescriptors(a) // { // age: { // configurable: true, // enumerable: true, // get: function age() { // return '18' // }, // set:undefined, // }, // name:{ // configurable:true, // enumerable:true, // value:\\\"Ben\\\", // writable:true // } // }\"]},\"727\":{\"c\":[\"前端技术\"]},\"728\":{\"c\":[\"JavaScript\"]},\"729\":{\"h\":\"getOwnPropertyNames\",\"t\":[\"Object.getOwnPropertyNames() 方法用于获取指定对象的所有自身 Property 的键名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。\"]},\"730\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.getOwnPropertyNames(o);\",\"类型声明：\",\"interface ObjectConstructor { getOwnPropertyName(o: any): string[]; }\",\"参数说明：\",\"参数\",\"说明\",\"类型\",\"o\",\"用于获取 Property 键名的目标对象\",\"object\",\"返回值：\",\"返回 Properties 键名组成的数组。\"]},\"731\":{\"h\":\"方法说明\",\"t\":[\"如果只需要获取可枚举属性，可以使用 Object.keys 或用 for-in 语句（还会获取到原型链上的可枚举属性，不过可以使用 Object.prototype.hasOwnProperty 方法过滤）。\"]},\"732\":{\"h\":\"代码示例\"},\"733\":{\"h\":\"数组\",\"t\":[\"const foo = ['a', 'b', 'c']; console.log(Object.getOwnPropertyNames(foo).sort()); // ['0', '1', '2', 'length']\"]},\"734\":{\"h\":\"类数组\",\"t\":[\"// 类数组对象 const foo = { 0: 'a', 1: 'b', 2: 'c' }; console.log(Object.getOwnPropertyNames(foo).sort()); // ['0', '1', '2'] // 使用 Array.forEach 输出属性名和属性值 Object.getOwnPropertyNames(foo).forEach(function (val, idx, array) { console.log(`${val}:${foo[val]}`); }); // 0:a // 1:b // 2:c\"]},\"735\":{\"h\":\"不可枚举属性\",\"t\":[\"// 不可枚举属性 const foo = Object.create( {}, { getBar: { value: function () { return this.bar; }, enumerable: false, }, } ); foo.bar = 1; console.log(Object.getOwnPropertyNames(foo).sort()); // ['foo', 'getBar']\"]},\"736\":{\"h\":\"仅获取自有 Property\",\"t\":[\"function SuperClass() {} SuperClass.prototype.inheritedMethod = function () {}; function SubClass() { this.prop = 5; this.method = function () {}; } SubClass.prototype = new SuperClass(); SubClass.prototype.prototypeMethod = function () {}; Object.getOwnPropertyNames(new SubClass()); // ['prop', 'method']\"]},\"737\":{\"h\":\"只获取不可枚举 Property\",\"t\":[\"使用 Array.prototype.filter 方法，从所有的 Property 键名数组（使用 Object.getOwnPropertyNames 方法获取）中去除可枚举的属性（使用 Object.keys 方法获取），剩余的属性便是不可枚举的属性。\",\"const enum_and_nonenum = Object.getOwnPropertyNames(target); const enum_only = Object.keys(target); const nonenum_only = enum_and_nonenum.filter(function (key) { const indexInEnum = enum_only.indexOf(key); if (indexInEnum === -1) { return true; } else { return false; } });\"]},\"738\":{\"c\":[\"前端技术\"]},\"739\":{\"c\":[\"JavaScript\"]},\"740\":{\"h\":\"getOwnPropertySymbols\",\"t\":[\"Object.getOwnPropertySymbols() 方法用于获取一个给定对象自身的所有 Symbol Property 的数组。\"]},\"741\":{\"h\":\"语法\",\"t\":[\"Object.getOwnPropertySymbols(o) // o 用于获取 Symbol Property 键名的目标对象 // 返回目标对象 Symbol 组成的数组\"]},\"742\":{\"h\":\"代码示例\",\"t\":[\"const foo = {} const a = Symbol('a') const b = Symbol('b') foo[a] = 'localSymbol' foo[b] = 'globalSymbol' const bar = Object.getOwnPropertySymbols(foo) console.log(bar.length) // 2 console.log(bar) // [Symbol(a), Symbol(b)] console.log(bar[0]) // Symbol(a)\"]},\"743\":{\"c\":[\"前端技术\"]},\"744\":{\"c\":[\"JavaScript\"]},\"745\":{\"h\":\"getPrototypeOf\",\"t\":[\"Object.getPrototypeOf() 方法用于获取指定对象的原型（内部 [[Prototype]] 属性的值）。\"]},\"746\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.getPrototypeOf(o);\",\"类型声明：\",\"interface ObjectConstructor { getPrototypeOf(o: any): any; }\",\"参数说明：\",\"参数\",\"说明\",\"类型\",\"o\",\"目标对象\",\"object\",\"返回值：\",\"返回目标对象的原型对象。\"]},\"747\":{\"h\":\"代码示例\"},\"748\":{\"h\":\"基本示例\",\"t\":[\"const proto = {}; const foo = Object.create(proto); Object.getPrototypeOf(foo) === proto; // true const reg = /a/; Object.getPrototypeOf(reg) === Regexp.prototype; // true\"]},\"749\":{\"h\":\"标准内置对象\",\"t\":[\"const foo = new Object(); Object.getPropertyOf(Object); // f () { [native code] } Object.getPropertyOf(Function); // f () { [native code] } Object.getPropertyOf(Object) === Function.prototype; // true const bar = new Object(); Object.prototype === Object.getPrototypeOf(bar); // true Obejct.prototype === Object.getPrototypeOf({}); // true\"]},\"750\":{\"c\":[\"前端技术\"]},\"751\":{\"c\":[\"JavaScript\"]},\"752\":{\"h\":\"hasOwnProperty\",\"t\":[\"Object.prototype.hasOwnProperty 方法用于检测指定对象自有 Properties 中是否具有指定的 Property。\"]},\"753\":{\"h\":\"语法\",\"t\":[\"语法：\",\"obj.hasOwnProperty(v); // v 需要检测的 Property 字符串名称或者 Symbol // 返回该对象是否含有指定 `Property` 的 `Boolean` 值\"]},\"754\":{\"h\":\"方法说明\",\"t\":[\"所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。\",\"这个方法可以用来检测一个对象是否含有特定的自身属性；和 in 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。\"]},\"755\":{\"h\":\"代码示例\"},\"756\":{\"h\":\"基本用法\",\"t\":[\"const foo = new Object(); foo.a = 'exist'; function change() { foo.b = foo.a; delete foo.a; } foo.hasOwnProperty('a'); // true change(); foo.hasOwnProperty('b'); // false\"]},\"757\":{\"h\":\"自有属性与继承属性\",\"t\":[\"const foo = new Object(); foo.a = 'Hello world!'; foo.hasOwnProperty('a'); // true foo.hasOwnProperty('toString'); // false foo.hasOwnProperty('hasOwnProperty'); // false\"]},\"758\":{\"c\":[\"前端技术\"]},\"759\":{\"c\":[\"JavaScript\"]},\"760\":{\"h\":\"is\",\"t\":[\"Object.is() 方法用于判断两个值是否是相同的值。\"]},\"761\":{\"h\":\"语法\",\"t\":[\"Object.is(value1, value2) // value1 比较值 1 any // value2 比较值 2 any // 返回判断表达式的结果\"]},\"762\":{\"h\":\"方法说明\",\"t\":[\"判断下列任何一项成立，则两个值相同：\",\"两个值均为 undefined\",\"两个值均为 null\",\"两个值都是 true 或 false\",\"两个值是由相同个数的字符按照相同顺序组成的字符串\",\"两个值指向同一个对象\",\"两个值都是数字并且 \",\"都是正零 +0\",\"都是负零 -0\",\"都是 NaN\",\"都是除零和 NaN 外的其他同一个数字\",\"这种相等性判断逻辑和传统的 == 运算不同，== 运算符会对它两边的操作数做隐式类型转换，然后才进行相等性比较，（所以才会有类似 \\\"\\\" == false == true 的现象），但 Object.is 不会做这种类型转换。\",\"这与 === 运算符的判定方式也不一样。=== 运算符（和 == 运算符）将数字值 -0 和 +0 视为相等，并认为 Number.NaN 不等于 NaN。\"]},\"763\":{\"h\":\"代码示例\",\"t\":[\"Object.is(undefined, undefined) // true Object.is(null, null) // true Object.is(true, true) // true Object.is(100, 100) // true Object.is('foo', 'bar') // false Object.is([], []) // false Object.is(0, -0) // false Object.is(-0, -0) // true Object.is(NaN, 0 / 0) // true\"]},\"764\":{\"c\":[\"前端技术\"]},\"765\":{\"c\":[\"JavaScript\"]},\"766\":{\"h\":\"isExtensible\",\"t\":[\"Object.isExtensible() 方法用于检测指定对象是否可扩展。\"]},\"767\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.isExtensible(o); // o 指定用于检测的对象 // 返回 Boolean类型的值表示用于检测的对象是否可扩展\"]},\"768\":{\"h\":\"方法说明\",\"t\":[\"默认情况下，对象是可扩展的：即可以为他们添加新的属性。\",\"Object.preventExtensions、Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展（non-extensible）。\"]},\"769\":{\"h\":\"代码示例\",\"t\":[\"let foo = { a: 1, }; console.log(Object.isExtensible(foo)); // true foo.b = 2; console.log(foo); // {a: 1, b: 2} console.log(Object.preventExtensions(foo)); // { a: 1, b: 2} // 由于对象 foo 禁止扩展，所以该赋值语句静默失败 foo.c = 3; console.log(Object.isExtensible(foo)); // false console.log(foo); // { a: 1, b: 2}\"]},\"770\":{\"c\":[\"前端技术\"]},\"771\":{\"c\":[\"JavaScript\"]},\"772\":{\"h\":\"isFrozen\",\"t\":[\"Object.isFrozen() 方法用来检测指定对象是否已被冻结。\"]},\"773\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.isFrozen(o); // o 指定用于检测的对象 // 返回Boolean类型的值表示用于检测的对象是否被冻结\"]},\"774\":{\"h\":\"方法说明\",\"t\":[\"被冻结的对象不可扩展，所有 Property 均不可配置，且所有数据属性（即没有 getter 或 setter 组件的访问器的属性 ）都是不可写的。\"]},\"775\":{\"h\":\"代码\"},\"776\":{\"h\":\"基本用法\",\"t\":[\"let foo = { a: 1, b: 2, }; console.log(Object.isFrozen(foo)); // false console.log(Object.freeze(foo)); // {a: 1, b: 2} console.log(Object.isFrozen(foo)); // true foo.a = 3; console.log(foo); // { a: 1, b: 2 }\",\"Object.freeze 方法实际上会在现有对象上调用 Object.seal() 方法，并把所有现有属性的 writable 描述符置为 false。\",\"let foo = { a: 1, }; // { value: 1, writable: true, enumerable: true, configurable: true } console.log(Object.getOwnPropertyDescriptor(foo, 'a')); console.log(Object.freeze(foo)); // { a: 1 } // { value: 1, writable: false, enumerable: true, configurable: false } console.log(Object.getOwnPropertyDescriptor(foo, 'a'));\"]},\"777\":{\"c\":[\"前端技术\"]},\"778\":{\"c\":[\"JavaScript\"]},\"779\":{\"h\":\"isPrototypeOf\",\"t\":[\"Object.prototype.isPrototypeOf() 方法用于测试指定对象是否存在于目标对象的原型链上。\"]},\"780\":{\"h\":\"语法\",\"t\":[\"obj.isPrototypeOf(V) // V 目标对象（在该对象原型链上搜寻） // 返回指定对象是否位于目标对象原型链上的 Boolean 类型值\"]},\"781\":{\"h\":\"代码示例\",\"t\":[\"function Foo() {} function Bar() {} function Baz() {} Bar.prototype = Object.create(Foo.prototype) Baz.prototype = Object.create(Bar.prototype) const baz = new Baz() console.log(Baz.prototype.isPrototypeOf(baz)) // true console.log(Bar.prototype.isPrototypeOf(baz)) // true console.log(Foo.prototype.isPrototypeOf(baz)) // true console.log(Object.prototype.isPrototypeOf(baz)) // true\"]},\"782\":{\"c\":[\"前端技术\"]},\"783\":{\"c\":[\"JavaScript\"]},\"784\":{\"h\":\"isSealed\",\"t\":[\"Object.isSealed() 方法用于检测指定对象是否已被密封。\"]},\"785\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.isSealed(o); // o 指定用于检测的对象 // 返回Boolean类型的值表示用于检测的对象是否可扩展\"]},\"786\":{\"h\":\"方法说明\",\"t\":[\"密封对象不可扩展，自身 · 不可配置并且不可删除（但不一定是不可写）对象。\"]},\"787\":{\"h\":\"代码示例\",\"t\":[\"let foo = { a: 1, b: 2 }; console.log(Object.isSealed(foo)); // false console.log(Object.seal(foo)); // { a: 1, b: 2 } console.log(Object.isSealed(foo)); // true console.log(delete foo.b); // false foo.c = 3; console.log(foo); // { a: 1, b: 2 }\",\"这个方法实际上会在现有对象上调用 Object.preventExtensions() 方法，并把所有现有属性的 configurable 描述符置为 false。\",\"let foo = { a: 1, b: 2 }; console.log(Object.getOwnPropertyDescriptor(foo, 'a')); // { value: 1, writable: true, enumerable: true, configurable: true } console.log(Object.seal(foo)); // {a: 1, b: 2} console.log(Object.getOwnPropertyDescriptor(foo, 'a')); // { value: 1, writable: true, enumerable: true, configurable: false }\"]},\"788\":{\"c\":[\"前端技术\"]},\"789\":{\"c\":[\"JavaScript\"]},\"790\":{\"h\":\"keys\",\"t\":[\"Object.keys() 方法用于获取指定对象自身可枚举 Property 组成的键名数组。\"]},\"791\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.keys(o);\",\"类型声明：\",\"interface ObjectConstructor { keys(o: {}): string[]; }\",\"参数说明：\",\"参数\",\"说明\",\"类型\",\"o\",\"指定对象\",\"object\",\"返回对象所有可枚举 Property 的键名组成的数组。\"]},\"792\":{\"h\":\"方法说明\",\"t\":[\"获取到的数组中键名顺序与使用 for 系列循环语句获取到的键名顺序一致。\"]},\"793\":{\"h\":\"代码示例\"},\"794\":{\"h\":\"数组\",\"t\":[\"const foo = ['a', 'b', 'c']; console.log(Object.keys(foo)); // console: ['0', '1', '2']\"]},\"795\":{\"h\":\"类数组\",\"t\":[\"const foo = { 0: 'a', 1: 'b', 2: 'c' }; console.log(Object.keys(foo)); // console: ['0', '1', '2']\"]},\"796\":{\"h\":\"不可枚举属性\",\"t\":[\"// getBar is a property which isn't enumerable const foo = Object.create( {}, { getBar: { value: function () { return this.bar; }, }, } ); foo.bar = 1; console.log(Object.keys(foo)); // ['bar']\"]},\"797\":{\"c\":[\"前端技术\"]},\"798\":{\"c\":[\"JavaScript\"]},\"799\":{\"h\":\"Object\",\"t\":[\"JavaScript 中的 Object 对象，是 JavaScript 中所有对象的基类，也就是说 JavaScript 中的所有对象都是由 Object 对象衍生的。Object 对象主要用于将任意数据封装成对象形式。\",\"对象也可看做是属性的无序集合，每个属性都是一个名值对。属性名是字符串，因此我们可以把对象看成是从字符串到值的映射。\"]},\"800\":{\"h\":\"语法\",\"t\":[\"构造函数\",\"new Object([value]);\",\"对象类型转换函数\",\"Object([value]);\",\"Object() 将会根据参数 value 的数据类型，返回对应类型的对象：\",\"如果 value 为原始数据类型 Boolean、Number、String，则返回对应类型的对象，例如：Boolean 对象、Number对象、String 对象。\",\"如果 value 本身为对象，则不对其作任何更改，返回其本身。\",\"如果省略了 value 参数，或 value 为 null、undefined，则返回自身无任何属性的 Object 对象。\",\"Object() 的返回一个与给定值对应类型的对象。该对象包装了给定的参数。\"]},\"801\":{\"h\":\"构造函数\"},\"802\":{\"h\":\"属性\",\"t\":[\"Object.length：值为 1\",\"Object.prototype：表示 Object 的原型对象\"]},\"803\":{\"h\":\"方法\",\"t\":[\"Object.is：比较两个值是否相同\",\"Object.assign：通过拷贝一个或多个对象的可枚举 Property 来创建一个新的对象\",\"Object.create：使用指定的原型对象和 Property 创建一个新对象\",\"Object.keys：获取指定对象的自身可枚举 Property 键名组成的数组集合\",\"Object.values：返回一个给定对象自己的所有可枚举 Properties 值的数组集合\",\"Object.entries：获取指定对象可枚举 Properties 的键值对组成的二维数组\",\"Object.defineProperties：为指定对象定义多个 Property 并分别指定它们的 Descriptors\",\"Object.defineProperty：为指定对象定义单个 Property 并指定该 Property 的 Descriptors\",\"Object.getOwnPropertyNames：获取指定对象某个自有 Property 的键名数组集合（包括不可枚举属性但不包括 Symbol 值作为名称的属性）\",\"Object.getOwnPropertySymbols：获取指定对象某个自有 Property 键名为 Symbol 类型的数组集合\",\"Object.getOwnPropertyDescriptor：获取指定对象某个自有 Property 的 Descriptors\",\"Object.getOwnPropertyDescriptors：获取指定对象 Properties 的 Descriptors\",\"Object.isExtensible：判断指定对象是否处于可扩展状态\",\"Object.isFrozen：判断指定对象是否处于冻结状态\",\"Object.isSealed：判断指定对象是否处于密封状态\",\"Object.preventExtensions：标识指定对象为不可扩展状态\",\"Object.freeze：标识指定对象为冻结状态\",\"Object.seal：标识指定对象为密封状态\",\"Object.getPrototypeOf：获取指定对象的原型对象\",\"Object.setPrototypeOf：设置指定对象的原型对象\"]},\"804\":{\"h\":\"原型对象\",\"t\":[\"JavaScript 中的所有对象都来自 Object，所有对象从 Object.prototype 继承方法和属性，尽管它们可能被覆盖。\"]},\"805\":{\"h\":\"属性\",\"t\":[\"Object.prototype.constructor：返回创建实例对象的 Object 构造函数的引用。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。该值为只读的原始类型，如 1、true、'test'\",\"Object.prototype.proto：指向当对象被实例化的时候，用作原型的对象\",\"Object.prototype.__noSuchMethod：当未定义的对象成员被调用作方法的时候，允许定义并执行的函数\"]},\"806\":{\"h\":\"方法\",\"t\":[\"Object.prototype.hasOwnProperty：用于指示对象自身属性中是否具有指定的属性，而且此属性非原型链继承的\",\"Object.prototype.isPrototypeOf：用于测试一个对象是否存在于另一个对象的原型链上\",\"Object.prototype.propertyIsEnumerable：用于测试一个对象是否存在于另一个对象的原型链上\",\"Object.prototype.toSource：用于表示源代码的字符串\",\"Object.prototype.toLocaleString：用于派生对象为了特定语言环境的目的而重载使用\",\"Object.prototype.toString：返回一个表示该对象的字符串\",\"Object.prototype.valueOf：返回指定对象的原始值\"]},\"807\":{\"h\":\"示例\",\"t\":[\"如果参数为原始数据类型，则返回对应类型的对象。\",\"const a = new Object(true); console.log(a); // Boolean {true} var b = new Object(8); console.log(b); // Number {8} var c = new Object('string'); console.log(c); // String {\\\"string\\\"}\",\"如果参数自身就是对象（typeof 该参数返回 \\\"object\\\" 或 \\\"function\\\"），则不对其作任何更改，返回其本身。\",\"var a = new Object(Boolean()); console.log(a); // Boolean{false} var b = new Object(Number()); console.log(b); // Number{0} var c = new Object(String()); console.log(c); // String{\\\"\\\", length: 0}\",\"如果 未指定参数，或参数为 null 或 undefined，则返回一个空对象。\",\"var a = new Object(); console.log(a); // {} var b = new Object(undefined); console.log(b); // {} var c = new Object(null); console.log(c); // {}\"]},\"808\":{\"c\":[\"前端技术\"]},\"809\":{\"c\":[\"JavaScript\"]},\"810\":{\"h\":\"preventExtensions\",\"t\":[\"Object.preventExtensions() 方法用于令指定对象无法再添加新的属性。\"]},\"811\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.preventExtensions(o); // o 将标记为不可扩展的对象 // 返回处理后的对象\"]},\"812\":{\"h\":\"方法说明\",\"t\":[\"如果一个对象可以添加新的属性，则这个对象是可扩展的。\",\"Object.preventExtensions 能将对象标记为不可扩展，因此它将永远不会具有超出它被标记为不可扩展的 Properties。\",\"[!warning] 一般来说，不可扩展对象的属性可能仍然可被删除。\",\"该方法仅阻止添加自身的属性。但属性仍然可以添加到对象原型。\",\"一旦使其不可扩展，就无法再对象进行扩展。\"]},\"813\":{\"h\":\"代码示例\",\"t\":[\"字面量方式创建的对象默认是可扩展的。\",\"const foo = {}; Object.isExtensible(foo); // true\",\"但是可以改变。\",\"Object.preventExtensions(foo); Object.isExtensible(foo); // false\",\"使用 Object.defineProperty 方法为一个可扩展的对象添加新属性会抛出异常。\",\"const nonExtensible = { removalbe: true }; Object.preventExtensions(nonExtensible); Object.defineProperty(nonExtensible, 'new', { value: 5678 }); // throw TypeError Exception\"]},\"814\":{\"c\":[\"前端技术\"]},\"815\":{\"c\":[\"JavaScript\"]},\"816\":{\"h\":\"propertyIsEnumerable\",\"t\":[\"Object.prototype.propertyIsEnumerable() 方法用于检测指定 Property 是否可枚举。\"]},\"817\":{\"h\":\"语法\",\"t\":[\"语法：\",\"obj.propertyIsEnumerable(V); // V 需要检测的 Property 键名字符串 // 返回表示指定 Property 键名是否可枚举的 Boolean 类型值\"]},\"818\":{\"h\":\"代码示例\"},\"819\":{\"h\":\"基本用法\",\"t\":[\"const foo = {}; const bar = []; foo.a = 'is enumerable'; bar[0] = 'is enumerable'; foo.propertyIsEnumerable('a'); // true bar.propertyIsEnumerable(0); // true\"]},\"820\":{\"h\":\"自有属性与继承属性\",\"t\":[\"原型链上 的 Properties 不被 propertyIsEnumerable 考虑。\",\"const a = []; a.propertyIsEnumerable('constructor'); function b() { this.property = 'b'; } b.prototype.firstMethod = function () {}; function c() { this.method = function method() { return 'c'; }; } c.prototype = new b(); c.prototype.constructor = c; const d = new c(); d.arbitraryProperty = 'd'; d.propertyIsEnumerable('arbitraryProperty'); // true d.propertyIsEnumerable('method'); // true d.propertyIsEnumerable('property'); // false d.property = 'd'; d.propertyIsEnumerable('property'); // true\"]},\"821\":{\"c\":[\"前端技术\"]},\"822\":{\"c\":[\"JavaScript\"]},\"823\":{\"h\":\"seal\",\"t\":[\"Object.seal 方法用于标识指定对象为不可扩展，且所有现有 Property 均不可配置。\"]},\"824\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.seal(o); // o 将要被密封的对象 // 返回处理后的对象\"]},\"825\":{\"h\":\"代码示例\",\"t\":[\"Object.seal 处理后的对象将不可扩展。\",\"同时，现有的所有 Property 也不可配置（也就是不能修改 configurable、enumerable、writable）。\",\"const foo = { a: 1, b: 2 }; console.log(Object.getOwnPropertyDescriptors(foo)); // { // a: { configurable: true, enumerable: true, writable: true } // b: { configurable: true, enumerable: true, writable: true } // } Object.seal(foo); foo.c = 3; console.log(foo); // { a: 1, b: 2} console.log(Object.isExtensible(foo)); // false console.log(Object.getOwnPropertyDescriptors(foo)); // { // a: { configurable: false, enumerable: true, writable: true } // b: { configurable: false, enumerable: true, writable: true } // } console.log(Object.isSealed(foo)); // true\"]},\"826\":{\"c\":[\"前端技术\"]},\"827\":{\"c\":[\"JavaScript\"]},\"828\":{\"h\":\"setPrototypeOf\",\"t\":[\"Object.setPrototypeOf() 方法用于设置一个指定的对象的原型 ( 即，内部 [[Prototype]] 属性）到另一个对象或 null。\"]},\"829\":{\"h\":\"语法\",\"t\":[\"语法：\",\"Object.setPrototypeOf(o, proto);\",\"类型声明：\",\"interface ObjectConstructor { setPrototypeOf(o: any, proto: object | null): any; }\",\"参数说明：\",\"参数\",\"说明\",\"类型\",\"o\",\"要设置其原型的对象\",\"object\",\"proto\",\"原型对象\",\"object\",\"返回值：\",\"返回设置原型后的对象。\"]},\"830\":{\"h\":\"代码示例\",\"t\":[\"if (!Object.setPrototypeOf) { Object.setPrototypeOf = function () {}; }\"]},\"831\":{\"c\":[\"前端技术\"]},\"832\":{\"c\":[\"JavaScript\"]},\"833\":{\"h\":\"toString\",\"t\":[\"Object.prototype.toString() 方法用于表示指定对象的字符串。\"]},\"834\":{\"h\":\"语法\",\"t\":[\"obj.toString() // 返回表示该对象的字符串\"]},\"835\":{\"h\":\"方法说明\",\"t\":[\"所有经过标准内置对象创建的值均能通过 toString() 方法获取 String 类型值。\"]},\"836\":{\"h\":\"代码示例\"},\"837\":{\"h\":\"基本用法\",\"t\":[\"const foo = new Object() foo.toString() // [object Object]\"]},\"838\":{\"h\":\"检测对象类型\",\"t\":[\"需要使用 Function.prototype.call() 和 Function.prototype.apply() 的形式调用，输入需要检测的对象作为第一参数。\",\"const toString = Object.prototype.toString() toString.call(new Date()) // [object Date] toString.call(new String()) // [object String] toString.call(Math) // [object Math] // Since JavaScript 1.8.5 toString.call(undefined) // [object Undefined] toString.call(null) // [object Null]\"]},\"839\":{\"c\":[\"前端技术\"]},\"840\":{\"c\":[\"JavaScript\"]},\"841\":{\"h\":\"values\",\"t\":[\"⭐️ ES2017(ES8)新特性\",\"Object.values() 方法用于指定对象自身的所有可枚举 Property 值的数组。\"]},\"842\":{\"h\":\"语法\",\"t\":[\"Object.values(obj) // obj 指定对象 // 返回的数组中键值的顺序与使用循环语句获取的键值组合一致\"]},\"843\":{\"h\":\"代码示例\",\"t\":[\"const obj = { a: '1', b: '2', c: '3', } console.log(Object.values(obj)) // ['1', '2', '3']\"]},\"844\":{\"c\":[\"前端技术\"]},\"845\":{\"c\":[\"JavaScript\"]},\"846\":{\"h\":\"globalThis\",\"t\":[\"全局属性 globalThis 包含全局的 this 值，类似于全局对象（global object）。\"]},\"847\":{\"h\":\"语法\",\"t\":[\"globalThis;\"]},\"848\":{\"h\":\"说明\",\"t\":[\"在以前，从不同的 JavaScript 环境中获取全局对象需要不同的语句。在 Web 中，可以通过 window、self 或者 frames 取到全局对象，但是在 Web Workers 中，只有 self 可以。在 Node.js 中，它们都无法获取，必须使用 global。\",\"在松散模式下，可以在函数中返回 this 来获取全局对象，但是在严格模式和模块环境下，this 会返回 undefined。你也可以使用 Function('return this')()，但那些禁用 eval() 的环境，如在浏览器中的 CSP，不允许这样使用 Function。\",\"globalThis 提供了一个标准的方式来获取不同环境下的全局 this 对象（也就是全局对象自身）。不像 window 或者 self 这些属性，它确保可以在有无窗口的各种环境下正常工作。所以，你可以安心的使用 globalThis，不必担心它的运行环境。为便于记忆，你只需要记住，全局作用域中的 this 就是 globalThis\"]},\"849\":{\"h\":\"示例\",\"t\":[\"判断当前环境是否有 setTimeout 方法\",\"if (typeof globalThis.setTimeout !== \\\"function\\\") { // 此环境中没有 setTimeout 方法！ }\"]},\"850\":{\"c\":[\"前端技术\"]},\"851\":{\"c\":[\"JavaScript\"]},\"852\":{\"h\":\"Infinity\",\"t\":[\"全局属性 Infinity 是一个数值，表示无穷大。\",\"Infinity 属性的属性特性\",\"属性特性\",\"布尔值\",\"writable\",\"false\",\"enumerable\",\"false\",\"configurable\",\"false\"]},\"853\":{\"h\":\"说明\",\"t\":[\"Infinity 是全局对象的一个属性，即它是一个全局变量。\",\"Infinity 的初始值是 Number.POSITIVE_INFINITY。\",\"Infinity 大于任何值。该值和数学意义上的无穷大很像，例如任何正值乘以 Infinity 为 Infinity ，任何数值（除了 Infinity 和 -Infinity）除以 Infinity 为 0。\"]},\"854\":{\"h\":\"示例\",\"t\":[\"console.log(Infinity); // Infinity console.log(Infinity + 1); // Infinity console.log(Math.pow(10, 1000)); // Infinity console.log(Math.log(0)); // Infinity console.log(1 / Infinity); // 0\"]},\"855\":{\"c\":[\"前端技术\"]},\"856\":{\"c\":[\"JavaScript\"]},\"857\":{\"h\":\"NaN\",\"t\":[\"全局属性 NaN 的值表示不是一个数字（Not-A-Number）。\"]},\"858\":{\"h\":\"说明\",\"t\":[\"NaN 是一个全局对象的属性。\",\"NaN 属性的初始值就是 NaN，和 Number.NaN 的值一样。\",\"编码中很少直接使用到 NaN。通常都是在计算失败时，作为 Math 的某个方法的返回值出现的（例如：Math.sqrt(-1)）或者尝试将一个字符串解析成数字但失败了的时候（例如：parseInt('blabla')）。\",\"返回 NaN 的情况总结：\",\"无穷大除以无穷大\",\"给任意负数做开方运算\",\"算术运算符与不是数字或无法转换为数字的操作数一起使用\",\"字符串解析为数字\"]},\"859\":{\"h\":\"静默逃逸的 NaN 值\",\"t\":[\"NaN 通过数学运算进行传播，因此通常在计算结束时测试 NaN 一次就足以检测错误条件。NaN 被静默转义的唯一情况是使用指数为 0 求幂时，它立即返回 1 而不测试基数的值。\",\"NaN ** 0 === 1; // true\",\"[!warning] 一些数组方法不能找到 NaN，而另一些可以。也就是说，查找索引的（indexOf()、lastIndexOf()）不能找到 NaN，而查找值的（includes()）可以\",\"const arr = [2, 4, NaN, 12]; arr.indexOf(NaN); // -1 arr.includes(NaN); // true // 接受正确定义的断言的方法总是能够找到 NaN arr.findIndex((n) => Number.isNaN(n)); // 2\"]},\"860\":{\"h\":\"示例\"},\"861\":{\"h\":\"值校验\",\"t\":[\"不可使用等号运算符来判断一个值是否为 NaN。必须采用 Number.isNaN() 或 isNaN()函数进行判断。\",\"在执行自比较中，NaN 是唯一与自身不全等的值。\",\"NaN === NaN; // false Number.NaN === NaN; // false isNaN(NaN); // true; isNaN(Number.NaN); // true; function valueIsNaN(v) { return v !== v; } valueIsNaN(1); // false valueIsNaN(NaN); // true valueIsNaN(Number.NaN); // true\",\"使用 isNaN() 前先检查一下这个值是否是数字类型，即可避免隐式类型转换的问题。\",\"function detectIsNaN(value) { return typeof value === \\\"number\\\" && isNaN(value); }\",\"更推荐使用 Number.isNaN() 如果输入不是数字类型，则返回 false。它是全局 isNaN() 函数更健壮的版本。\",\"function typeOfNaN(x) { if (Number.isNaN(x)) { return \\\"Number NaN\\\"; } if (isNaN(x)) { return \\\"NaN\\\"; } } console.log(typeOfNaN(\\\"100F\\\")); // Expected output: \\\"NaN\\\" console.log(typeOfNaN(NaN)); // Expected output: \\\"Number NaN\\\"\"]},\"862\":{\"c\":[\"前端技术\"]},\"863\":{\"c\":[\"JavaScript\"]},\"864\":{\"h\":\"undefined\",\"t\":[\"undefined 属性是一个特殊值。如果已声明了一个变量但还未进行初始化，则其值为 undefined。\",\"该属性为 Global 对象的一个只读属性(准确地说，是一个常量)。所有主流浏览器均支持该属性。\"]},\"865\":{\"h\":\"说明\",\"t\":[\"如果一个变量未被初始化赋值，则其值为 undefined。如果一个函数没有返回值，则其返回值默认为 undefined。\"]},\"866\":{\"c\":[\"前端技术\"]},\"867\":{\"c\":[\"JavaScript\"]},\"868\":{\"h\":\"decodeURI\",\"t\":[\"decodeURI() 函数用于对已编码的统一资源标识符(URI)进行解码，并返回其非编码形式。\",\"该函数属于 Global 对象，所有主流浏览器均支持该函数。\"]},\"869\":{\"h\":\"语法\",\"t\":[\"decodeURI(encodedURIString); // encodedURIString 已编码的 `URI` 字符串\",\"decodeURI() 函数的返回值是 string 类型，返回一个已经解码的 URI。\",\"将已编码 URI 中所有能识别的转义序列转换成原字符，但不能解码那些不会被 encodeURI 编码的内容（例如 #）。\"]},\"870\":{\"h\":\"示例\",\"t\":[\"let a = \\\"Hello JavaScript!\\\"; let b = encodeURI(a); console.log(b); // return '%E4%BD%A0%E5%A5%BDJavascript!' let c = decodeURI(b); // return '你好Javascript!'\"]},\"871\":{\"c\":[\"前端技术\"]},\"872\":{\"c\":[\"JavaScript\"]},\"873\":{\"h\":\"decodeURIComponent\",\"t\":[\"decodeURIComponent() 函数用于对统一资源标识符(URI)的一个已编码的组件进行解码，并返回其非编码形式。\",\"该函数属于 Global 对象，所有主流浏览器均支持该函数。\",\"所谓的 URI 组件，就是 URI 的一部分，尤其是 URI 的参数部分。\"]},\"874\":{\"h\":\"语法\",\"t\":[\"decodeURIComponent(encodedURIString); // encodedURIString 已编码的 URI 字符串\",\"如果参数 encodedURIString 无效，将引发 URIError 错误。\",\"decodeURIComponent() 函数的返回值是 String 类型，返回一个已经解码的 URI 组件。\"]},\"875\":{\"h\":\"示例\",\"t\":[\"var a = 'Hello JavaScript'; var b = encodeURIComponent(a); console.log(b); // return '%E4%BD%A0%E5%A5%BDJavascript' var c = decodeURIComponent(b); console.log(c); // return '你好Javascript'\"]},\"876\":{\"c\":[\"前端技术\"]},\"877\":{\"c\":[\"JavaScript\"]},\"878\":{\"h\":\"encodeURI\",\"t\":[\"encodeURI() 函数可把 URI 字符串采用 UTF-8 编码格式转化成 escape 格式的字符串。\",\"该函数属于 Global 对象，所有主流浏览器均支持该函数。\"]},\"879\":{\"h\":\"语法\",\"t\":[\"encodeURI(URIString); // URIString 需要编码的 URI 字符串\",\"该方法返回一个已经编码的 URI 字符串。\"]},\"880\":{\"h\":\"说明\",\"t\":[\"如果要对使用 encodeURI() 函数编码的 URI 字符串进行解码，请使用 decodeURI() 函数。\",\"encodeURI() 函数不编码字符有 82 个 !、#、$、'、(、)、*、+、,、-、.、/、:、;、=、?、@、_、~、0-9、a-z、A-Z 。\",\"如果你只是想编码一个带有特殊字符（比如中文）的 URI，这个 URI 用作请求地址，请使用本函数。\",\"如果你想把 URI 当作请求参数传递，那么你可以使用 encodeURIComponent() 函数。encodeURIComponent() 函数会编码所有的字符。\"]},\"881\":{\"h\":\"示例\",\"t\":[\"// 原URI var ftpUri = 'ftp://192.168.0.100/共享文件夹'; // 编码URI var encodedFtpUri = encodeURI(ftpUri); console.log(encodedFtpUri); // ftp://192.168.0.100/%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9 // 解码URI var decodedFtpUri = decodeURI(encodedFtpUri); console.log(decodedFtpUri); // ftp://192.168.0.100/共享文件夹\"]},\"882\":{\"c\":[\"前端技术\"]},\"883\":{\"c\":[\"JavaScript\"]},\"884\":{\"h\":\"encodeURIComponent\",\"t\":[\"encodeURIComponent() 函数用于对统一资源标识符（URI）的有效组件进行编码，并返回编码后的字符串。\",\"该函数属于 Global 对象，所有主流浏览器均支持该函数。\"]},\"885\":{\"h\":\"语法\",\"t\":[\"encodeURIComponent(URIString); // URIString 需要编码的 URI 组件字符串\",\"encodeURIComponent() 函数的返回值是 string 类型，返回一个编码后的 URI 组件字符串。\"]},\"886\":{\"h\":\"说明\",\"t\":[\"如果要对使用 encodeURIComponent() 函数编码后的 URI 组件字符串进行解码，请使用 decodeURIComponent() 函数。 encodeURIComponent() 函数会编码所有的字符。如果你想把 URI 当作请求参数传递，那么你可以使用本函数。如果你只是想编码一个带有特殊字符（比如中文）的 URI，这个 URI 用作请求地址，请使用 encodeURI 函数。\"]},\"887\":{\"h\":\"示例\",\"t\":[\"// 原 URI 组件 var origin = 'ftp://192.168.0.100/共享文件夹'; // 编码 URI 组件 var encodedUri = encodeURIComponent(origin); document.writeln(encodedUri); // ftp%3A%2F%2F192.168.0.100%2F%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9 // 解码 URI 组件 var decodedUri = decodeURIComponent(encodedUri); document.writeln(decodedUri); // ftp://192.168.0.100/共享文件夹\"]},\"888\":{\"c\":[\"前端技术\"]},\"889\":{\"c\":[\"JavaScript\"]},\"890\":{\"h\":\"eval\",\"t\":[\"eval() 函数用于计算并执行以字符串表示的 JavaScript 代码。eval() 函数使 JavaScript 可以动态执行 JavaScript 源代码。\",\"eval() 函数属于 Global 对象，所有主流浏览器均支持该函数。\"]},\"891\":{\"h\":\"语法\",\"t\":[\"eval(code);\",\"[!warning] 参数 code 必须是原始字符串，不能是 String 对象形式。如果参数 code 不是原始字符串，则 eval() 函数不会执行代码，并且将其不作任何改变地返回。\",\"如果参数 code 中的 JavaScript 代码不合法，将会引发异常。\",\"eval() 函数的返回值是任意类型，其返回值由参数 code 中具体的 JavaScript 代码决定。\"]},\"892\":{\"h\":\"说明\",\"t\":[\"传递给 eval() 函数的代码执行时所在的上下文和调用 eval() 函数时的上下文一样（也就是说，作用域不变）。\",\"请自行确认 code 代码的来源是可信的，否则使用 eval() 函数存在一定的安全隐患。\"]},\"893\":{\"h\":\"永远不要使用 eval！\",\"t\":[\"eval() 是一个危险的函数，它使用与调用者相同的权限执行代码。如果你用 eval() 运行的字符串代码被恶意方（不怀好意的人）修改，你最终可能会在你的网页/扩展程序的权限下，在用户计算机上运行恶意代码。更重要的是，第三方代码可以看到某一个 eval() 被调用时的作用域，这也有可能导致一些不同方式的攻击。相似的 Function 就不容易被攻击。\",\"eval() 通常比其他替代方法更慢，因为它必须调用 JS 解释器，而许多其他结构则可被现代 JS 引擎进行优化。\",\"此外，现代 JavaScript 解释器将 JavaScript 转换为机器代码。这意味着任何变量命名的概念都会被删除。因此，任意一个 eval 的使用都会强制浏览器进行冗长的变量名称查找，以确定变量在机器代码中的位置并设置其值。另外，新内容将会通过 eval() 引进给变量，比如更改该变量的类型，因此会强制浏览器重新执行所有已经生成的机器代码以进行补偿。但是（谢天谢地）存在一个非常好的 eval 替代方法：只需使用 window.Function。\"]},\"894\":{\"h\":\"示例\",\"t\":[\"let x = 2, y = 39, z = \\\"42\\\"; eval(\\\"x + y + 1\\\"); // 42 eval(z); // 42 // 改用更安全的写法 Function('return x + y + 1')()\"]},\"895\":{\"c\":[\"前端技术\"]},\"896\":{\"c\":[\"JavaScript\"]},\"897\":{\"h\":\"isFinite\",\"t\":[\"isFinite() 函数用于判断指定数字是否是有限值。如果指定的数字为 NaN、Infinity、-Infinity，则返回 false，其他数字均返回 true。\",\"该函数属于 Global 对象，所有主流浏览器均支持该函数。\"]},\"898\":{\"h\":\"语法\",\"t\":[\"isFinite(number);\",\"如果参数 number 不是 Number 类型（如字符串、函数等），也返回 false。\",\"isFinite() 函数的返回值是 Boolean 类型。\",\"当指定的数字为 NaN、正无穷、负无穷时，返回 false；\",\"除上述三种 Number 类型外的数字均返回 true。\"]},\"899\":{\"h\":\"示例\",\"t\":[\"// false situation isFinite(NaN); // false isFinite(Infinity); // false isFinite(-Infinity); // alse // true situaton isFinite(0); // true isFinite(2e64); // true isFinite('0'); // true // extraordinary Number.isFinite(null); // false Number.isFinite('0'); // false\",\"更推荐使用Number.isFinite()，因为 Number.isFinite() 不会强制将一个非数值的参数转换成数值，这就意味着，只有数值类型的值，且是有限值，才返回 true。\"]},\"900\":{\"c\":[\"前端技术\"]},\"901\":{\"c\":[\"JavaScript\"]},\"902\":{\"h\":\"isNaN\",\"t\":[\"isNaN() 函数用于判断指定数字是否是非数字值 NaN。\",\"该函数属于 Global 对象，所有主流浏览器均支持该函数。\"]},\"903\":{\"h\":\"语法\",\"t\":[\"isNaN(number);\",\"[!warning] 如果参数 number 不是 Number 类型，则 isNaN() 函数会将其强制转换为 Number 类型再进行判断。大多数其他类型的值无法强制转换为 Number 类型，则其转换结果为 NaN，即 isNaN() 函数返回 true。\",\"isNaN() 函数的返回值是 Boolean 类型。 \",\"如果指定的数字为 NaN，则返回 true\",\"如果指定的数字为非 NaN 则返回 false。\"]},\"904\":{\"h\":\"说明\",\"t\":[\"通常使用此函数检测来自 parseInt() 和 parseFloat() 函数的返回值。\",\"将某些不能强制转换为数字类型的值的非数字类型的值转换为数字类型的值时，也会得到 NaN。\",\"NaN 不能通过相等操作符来判断，因为 NaN 是唯一一个与其自身不等的值。\"]},\"905\":{\"h\":\"示例\",\"t\":[\"isNaN(NaN); // true isNaN(undefined); // true isNaN({}); // true isNaN(true); // false isNaN(null); // false isNaN(37); // false // strings isNaN(\\\"37\\\"); // false: 可以被转换成数值37 isNaN(\\\"37.37\\\"); // false: 可以被转换成数值37.37 isNaN(\\\"\\\"); // false: 空字符串被转换成0 isNaN(\\\" \\\"); // false: 包含空格的字符串被转换成0 // dates isNaN(new Date()); // false isNaN(new Date().toString()); // true isNaN(\\\"blabla\\\"); // true: \\\"blabla\\\"不能转换成数值\"]},\"906\":{\"c\":[\"前端技术\"]},\"907\":{\"c\":[\"JavaScript\"]},\"908\":{\"h\":\"parseFloat\",\"t\":[\"parseFloat() 函数用于将字符串转换为浮点数并返回。\",\"该函数属于 Global 对象，所有主流浏览器均支持该函数。\"]},\"909\":{\"h\":\"语法\",\"t\":[\"parseFloat(numberString); // numberString 需要转换为浮点数的字符串\",\"返回转换后的浮点数，number 类型， \",\"如果指定的字符串中包含非数字字符，只要字符串开头的一部分符合浮点数规则，则 parseFloat() 函数会将这一部分字符串转化为数字（从字符串开头，直到遇到非数字字符为止）。\",\"如果字符串以非数字字符开头，则返回 NaN。\"]},\"910\":{\"h\":\"示例\",\"t\":[\"返回正常数字\",\"parseFloat(\\\"3.14\\\"); parseFloat(\\\"314e-2\\\"); parseFloat(\\\"0.0314E+2\\\"); parseFloat(\\\"3.14more non-digit characters\\\"); // all return 3.14\",\"返回 NaN\",\"parseFloat(\\\"MDN\\\"); // NaN parseFloat(null); // NaN parseFloat([]); // NaN parseFloat({}); // NaN\"]},\"911\":{\"c\":[\"前端技术\"]},\"912\":{\"c\":[\"JavaScript\"]},\"913\":{\"h\":\"parseInt\",\"t\":[\"parseInt() 函数用于 将字符串转换为整数并返回。该函数可以将字符串视作指定的进制形式表示。\",\"该函数属于 Global 对象，所有主流浏览器均支持该函数。\",\"语法\",\"parseInt( numString [, radix ] )\",\"参数\",\"类型\",\"说明\",\"numString\",\"String 类型\",\"需要转换为整数的字符串\",\"radix\",\"Number 类型\",\"可选，指定的进制基数（介于 [2, 36] 之间的数值。）\",\"例如：参数 radix 为 2，则将 numString 视作二进制；参数 radix 为 8，则视作八进制；参数 radix 为 16，则视作十六进制。\",\"如果没有提供 radix 参数，则 parseInt() 函数将会根据参数 numString 的前缀来决定转换的进制基数。如果 numString 的前缀是 0x，则转换为十六进制；如果前缀是 0，则转换为八进制；其他情况均转换为十进制。\",\"parseInt() 函数的返回值为 Number 类型，返回转换后的整数。 \",\"如果指定的字符串中包含非数字字符，只要字符串开头的一部分符合整数的转换规则，则 parseInt() 函数会将这一部分字符串转化为整数（从字符串开头，直到遇到非数字字符为止）。\",\"如果字符串以非数字字符开头，则返回 NaN。\"]},\"914\":{\"h\":\"示例\",\"t\":[\"正常使用 parseInt()，以下均返回 15\",\"// Binary parseInt(\\\"1111\\\", 2); // Octal parseInt(\\\"17\\\", 8); parseInt(021, 8); // Decimal parseInt(\\\"015\\\", 10); parseInt(15.99, 10); parseInt(\\\"15,123\\\", 10); parseInt(\\\"15 * 3\\\", 10); parseInt(\\\"15e2\\\", 10); parseInt(\\\"15px\\\", 10); parseInt(\\\"12\\\", 13); // Hexadecimal parseInt(\\\"0xF\\\", 16); parseInt(\\\"F\\\", 16); parseInt(\\\"FXX123\\\", 16);\",\"以下均返回 NaN\",\"parseInt(\\\"Hello\\\", 8); // NaN parseInt(\\\"546\\\", 2); // NaN\"]},\"915\":{\"c\":[\"前端技术\"]},\"916\":{\"c\":[\"JavaScript\"]},\"917\":{\"h\":\"数据类型\",\"t\":[\"JavaScript 是一种 弱类型语言 或者说 动态语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。\",\"这也意味着你可以使用同个相同名称的变量保存不同类型的数据：\",\"var foo = 42; // foo is a Number now var foo = 'bar'; // foo is a String now var foo = true; // foo is a Boolean now\",\"ECMAScript 标准定义了 原始数据类型 和 引用数据类型 ：\",\"原始数据类型（基本类型）：按值访问，可以操作保存在变量中实际的值。\",\"null ：空值\",\"undefined ：未定义\",\"boolean ： 布尔值\",\"number ：数字\",\"string ：字符串\",\"symbol ： 符号\",\"bigint ：任意精度格式的整数\",\"引用类型（复杂数据类型）：引用类型的值是保存在内存中的对象。\",\"object ：对象 \",\"布尔对象（Boolean）\",\"数字对象（Number）\",\"字符串对象（String）\",\"函数对象（Function）\",\"数组对象（Array）\",\"日期对象（Date）\",\"正则对象（RegExp）\",\"错误对象（Error）\",\"[!warning] 与其他语言不同的是，JavaScript 不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。所以引用类型的值是按引用访问的。\"]},\"918\":{\"h\":\"原始数据类型\"},\"919\":{\"h\":\"空值\",\"t\":[\"空值 null 是一个字面量，它不像 undefined 是全局对象的一个属性。\",\"null 是表示缺少的标识，指示变量未指向任何对象。把 null 作为尚未创建的对象，也许更好理解。\",\"🌰 代码示例：\",\"foo 不存在，它从来没有被定义过或者是初始化过。\",\"foo; // \\\"ReferenceError: foo is not defined\\\"\",\"foo 现在已知存在的，但是它没有类型或者是值。\",\"var foo = null; foo; // null\"]},\"920\":{\"h\":\"未定义值\",\"t\":[\"未定义值 undefined 是全局对象的一个属性。也就是说，它是全局作用域的一个变量。undefined 的最初值就是原始数据类型 undefined。\",\"var foo; console.log(foo); // undefined\"]},\"921\":{\"h\":\"布尔值\",\"t\":[\"布尔类型表示一个逻辑实体，可以有两个值：true 和 false\"]},\"922\":{\"h\":\"数字\"},\"923\":{\"h\":\"进制数\",\"t\":[\"十进制：JavaScript 中默认的进制数\",\"八进制：第一位必须是 0，然后是 0-7 的数字组成\",\"十六进制：前两位必须是 0x，然后是 0-9 及 A-F（字母不区分大小写）\",\"// 十进制 var num1 = 10; // 八进制的56 var num2 = 070; // 十进制，因为有数字超过了7，这里是79 var num3 = 079; // 十六进制的31 var num4 = 0x1f;\",\"[!warning] 八进制在严格模式下 \\\"use strict\\\" 是无效的，会导致 JavaScript 报错，避免使用。\"]},\"924\":{\"h\":\"浮点数\",\"t\":[\"var num = 0.1 + 0.2; var sum = '2.3' * 100; console.log(num); // 0.30000000000000000004 console.log(sum); // 229.99999999999997\",\"上面例子表达的就是 JavaScript 的浮点型数据在计算时容易丢失精度，这一点并不仅在 JavaScript 存在，建议处理这方面问题使用专用的数字处理类，比如 Java 里的 BigDecima 类来处理。\"]},\"925\":{\"h\":\"数字的范围\",\"t\":[\"JavaScript 中数值的范围是有效位数的，基本上够我们使用，我们仅需要知道以下几个知识点：\",\"Number.MIN_VALUE 或 Number.NEGATIVE_INFINITY：表示 JavaScript 中的最小值\",\"Number.MAX_VALUE 或 Number.POSITIVE_INFINITY：表示 JavaScript 中的最大值\",\"Infinity：表示无穷大\",\"-Infinity：表示无穷小\"]},\"926\":{\"h\":\"NaN\",\"t\":[\"NaN （Not a number）的含义是本该返回数值的操作未返回数值，返回了 NaN 就不会抛出异常影响语句流畅性。\",\"NaN 属性的初始值就是 NaN，和 Number.NaN 的值一样。\",\"在现代浏览器中（ES5 环境）， NaN 属性是一个不可配置（non-configurable）、不可写（non-writable）的属性。但在 ES3 中，这个属性的值是可以被更改的，但是也应该避免覆盖。\",\"编码中很少直接使用到 NaN。通常都是在计算失败时，作为 Math 的某个方法的返回值出现的（例如：Math.sqrt(-1)）或者尝试将一个字符串解析成数字但失败了的时候（例如：parseInt(\\\"blabla\\\")）。\"]},\"927\":{\"h\":\"字符串\",\"t\":[\"JavaScript 的字符串类型用于表示文本数据。它是一组 16 位的无符号整数值的元素。在字符串中的每个元素占据了字符串的位置。第一个元素的索引为 0，下一个是索引 1，依此类推。字符串的长度是它的元素的数量。\",\"'foo'; 'bar'; '1234'; 'one line \\\\n another line'; \\\"John's cat\\\";\"]},\"928\":{\"h\":\"符号\",\"t\":[\"符号（Symbols）是 ECMAScript 第 6 版新定义的。该类型的性质在于这个类型的值可以用来创建匿名的对象属性。该数据类型通常被用作一个对象属性的键值，当这个属性是用于类或对象类型的内部使用的时候。\",\"var myPrivateMethod = Symbol(); this[myPrivateMethod] = function () { // ... }; // 可以接收一个字符串参数 let key = Symbol('KEY') console.log(key) // Symbol('KEY') // 不能使用new let a = new Symbol() // TypeError: Symbol is not a constructor // Symbol函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的Symbol函数的返回值是不相等的 let s1 = Symbol('aaa') let s2 = Symbol('aaa') console.log(s1 === s2) // false // 不能与其他值进行计算 let sym = Symbol('My symbol'); \\\"your symbol is \\\" + sym // TypeError: can't convert symbol to string `your symbol is ${sym}` // TypeError: can't convert symbol to string // 但是，Symbol 值可以显式转为字符串，也可以转为布尔值，但是不能转为数值。 let ss = Symbol() String(ss) // Symbol() Boolean(ss) // true Number(ss) // TypeError: Cannot convert a Symbol value to a number\"]},\"929\":{\"h\":\"大整数\",\"t\":[\"大整数(bigint) 是一种数字数据类型，它可以表示任意精度格式的整数。用于当整数值大于 number 数据类型支持的范围时\",\"要创建 bigint ，只需在整数的末尾追加 n 即可\",\"console.log(9007199254740995n); // → 9007199254740995n console.log(9007199254740995); // → 9007199254740996\",\"或者，可以调用BigInt()构造函数\",\"BigInt(\\\"9007199254740995\\\"); // → 9007199254740995n // 不能使用new let a = new BigInt(99999999999n) TypeError: BigInt is not a constructor\",\"bigint 文字也可以用二进制、八进制或十六进制表示\",\"// binary console.log(0b100000000000000000000000000000000000000000000000000011n); // → 9007199254740995n // hex console.log(0x20000000000003n); // → 9007199254740995n // octal console.log(0o400000000000000003n); // → 9007199254740995n // note that legacy octal syntax is not supported console.log(0400000000000000003n); // → SyntaxError\",\"请记住，不能使用严格相等运算符将 BigInt 与常规数字进行比较，因为它们的类型不同：\",\"console.log(10n === 10); // → false console.log(typeof 10n); // → bigint console.log(typeof 10); // → number\",\"相反，可以使用等号运算符，它在处理操作数之前执行隐式类型转换\",\"console.log(10n == 10); // → true\"]},\"930\":{\"h\":\"引用数据类型\",\"t\":[\"引用类型通常叫做类（Class），也就是说，遇到引用值，所处理的就是对象。\",\"在 ECMA-262 标准中根本没有出现 类 这个词，而是定义了 对象定义，逻辑上等价于其他程序设计语言中的类。\",\"对象是由 new 运算符加上要实例化的对象的名字创建的。\",\"例如，下面的代码创建 Object 对象的实例：\",\"var o = new Object();\",\"这种语法与 Java 语言的相似，不过当有不止一个参数时，ECMAScript 要求使用括号。\",\"如果没有参数，如以下代码所示，括号可以省略：\",\"var o = new Object();\",\"尽管括号不是必需的，但是为了避免混乱，最好使用括号。\"]},\"931\":{\"c\":[\"前端技术\"]},\"932\":{\"c\":[\"JavaScript\"]},\"933\":{\"h\":\"类型检测\",\"t\":[\"类型检测的方法：\",\"typeof\",\"instanceof\",\"Object.prototype.toString\",\"constructor\"]},\"934\":{\"h\":\"typeof\",\"t\":[\"typeof 操作符返回一个字符串，表示未经计算的操作数的类型。\",\"typeof undefined; // \\\"undefined\\\" typeof null; // \\\"object\\\" typeof 100; // \\\"number\\\" typeof NaN; // \\\"number\\\" typeof true; // \\\"boolean\\\" typeof 'foo'; // \\\"string\\\" typeof function () {}; // \\\"function\\\" typeof [1, 2]; // \\\"object\\\" typeof new Object(); // \\\"object\\\"\",\"typeof 操作符适合对 基本类型（除 null 之外）及 function 的检测使用，而对引用数据类型（如 Array）等不适合使用。\",\"更详细信息请查阅 typeof 操作符。\"]},\"935\":{\"h\":\"instanceof\",\"t\":[\"instanceof 运算符用于检测一个对象在其 原型链 中是否存在一个构造函数的 prototype 属性。\",\"左操作数为对象，不是就返回 false，右操作数必须是 函数对象 或者 函数构造器，不是就返回 TypeError 异常。\",\"obj instanceof constr;\",\"function Person() {} function Student() {} Student.prototype = new Person(); Student.prototype.constructor = Student; const ben = new Student(); ben instanceof Student; // true const one = new Person(); one instanceof Person; // true one instanceof Student; // false ben instanceof Person; // true\",\"任何一个构造函数都有一个 prototype 对象属性，这个对象属性将用作 new 实例化对象的原型对象。\",\"instanceof 适合用于判断对象是否属于 Array、Date 和 RegExp 等内置对象。\",\"不同 window 或 iframe 之间的对象类型检测无法使用 instanceof 检测。\",\"更详细信息请查阅 instanceof\"]},\"936\":{\"h\":\"Object.prototype.toString\",\"t\":[\"可以通过 toString() 来获取每个对象的类型。\",\"为了 每个对象 都能通过 Object.prototype.toString来检测，需要以 Function.prototype.call 或者 Function.prototype.apply 的形式来调用，传递要检查的对象作为第一个参数。\",\"Obejct.prototype.toString.call(undefined)； // \\\"[object Undefined]\\\" Obejct.prototype.toString.call(null)； // \\\"[object Null]\\\" Obejct.prototype.toString.call(true)； // \\\"[object Boolean]\\\" Obejct.prototype.toString.call('')； /// \\\"[object String]\\\" Obejct.prototype.toString.call(123)； // \\\"[object Number]\\\" Obejct.prototype.toString.call([])； // \\\"[object Array]\\\" Obejct.prototype.toString.call({})； // \\\"[object Object]\\\"\",\"💡 使用 Object.prototype.toString 方法能精准地判断出值的数据类型。\",\"[!warning] Object.prototype.toString 属于 Object 的原型方法，而 Array 或 Function 等类型作为 Object 的实例，都重写了 toString 方法。因此，不同对象类型调用 toString 方法时，调用的是重写后的 toString 方法，而非 Object 上原型 toString 方法，所以采用 xxx.toString() 不能得到其对象类型，只能将 xxx 转换成字符串类型。\"]},\"937\":{\"h\":\"constructor\",\"t\":[\"任何对象都有 constructor 属性，继承自原型对象，constructor 会指向构造这个对象的构造器或构造函数。\",\"Student.prototype.constructor === Student; // true\"]},\"938\":{\"h\":\"数组检测\",\"t\":[\"ECMAScript5 将 Array.isArray() 正式引入 JavaScript，该方法能准确检测一个变量是否为数组类型。\",\"Array.isArray(variable);\"]},\"939\":{\"c\":[\"前端技术\"]},\"940\":{\"c\":[\"JavaScript\"]},\"941\":{\"h\":\"类型转换\",\"t\":[\"JavaScript 作为一种弱类型的语言，不用像 C 语言那样要定义好数据类型，因为允许变量类型的 隐式类型转换 和允许 强制类型转换。我们在定义一个变量的时候，只需一个 var、let、const 搞定，不用担心数据的类型。\"]},\"942\":{\"h\":\"基本规则\",\"t\":[\"从 ECMAScript Standard 中了解 Number、String、Boolean、Array 和 Object 之间的相互转换会更加直观。\"]},\"943\":{\"h\":\"ToString\",\"t\":[\"此处所说的 ToString 并非对象的 toString() 方法，而是指其他类型的值转换为字符串类型的操作。\",\"下面列出常见转换为 String 类型的规则：\",\"null：转为 \\\"null\\\"\",\"undefined：转为 \\\"undefined\\\"\",\"Boolean 类型： \",\"true 转为 \\\"true\\\"\",\"false 转为 \\\"false\\\"\",\"Number 类型：转为数字的字符串形式 \",\"如 10 转为 \\\"10\\\"\",\"1e21 转为 \\\"1e+21\\\"\",\"Array 类型：转为字符串将各元素以小写逗号 , 连接，相当于调用数组 Array.prototype.join() 方法 \",\"空数组转为空字符串 ''\",\"数组中 null 和 undefined 会被当作 空字符串 处理\",\"Function 类型：转换为函数定义的字符串\",\"普通对象：转为字符串相当于直接使用 Object.prototype.toString()，返回 [object Object]\",\"String(null); // \\\"null\\\" String(undefined); // 'undefined' String(true); // 'true' String(10); // '10' String(1e21); // '1e+21' String([1, 2, 3]); // '1,2,3' String([]); // '' String([null]); // '' String([1, undefined, 3]); // '1,,3' String({}); // '[object Objecr]' String(function(){let a = 1}) // 'function(){let a = 1}' String(Object) // function Object() { [native code] }\"]},\"944\":{\"h\":\"ToNumber\",\"t\":[\"null： 转为 0\",\"undefined：转为 NaN\",\"String 类型：如果是纯数字形式，则转为对应的数字 \",\"空字符转为 0\",\"否则一律按转换失败处理，转为 NaN\",\"Boolean 类型： \",\"true 将被转为 1\",\"false 将被转为 0\",\"Array 类型：数组首先会被转为 原始数据类型，也就是 ToPrimitive 运算，然后在根据转换后的原始类型按照上面的规则处理\",\"对象：同数组的处理\",\"Number(null); // 0 Number(undefined); // NaN Number(\\\"10\\\"); // 10 Number(\\\"10a\\\"); // NaN Number(\\\"\\\"); // 0 Number(true); // 1 Number(false); // 0 Number([]); // 0 Number([\\\"1\\\"]); // 1 Number({}); // NaN\"]},\"945\":{\"h\":\"ToBoolean\",\"t\":[\"JavaScript 中假值只有 false、null、undefined、\\\"\\\"、0 和 NaN，其他值转为 Boolean 类型都为 true。\",\"Boolean(null); // false Boolean(undefined); // false Boolean(\\\"\\\"); // flase Boolean(NaN); // flase Boolean(0); // flase Boolean([]); // true Boolean({}); // true Boolean(Infinity); // true\"]},\"946\":{\"h\":\"ToPrimitive\",\"t\":[\"ToPrimitive 方法用于将引用类型转换为原始数据类型的操作\",\"🔬 值为引用数据类型时，会调用 JavaScript 内置的 @@ToPrimitive(hint) 方法来指定其目标类型。\",\"如果传入值为 Number 类型，则调用对象的 valueOf() 方法，若返回值为原始数据类型，则结束 @@ToPrimitive 操作，如果返回的不是原始数据类型，则继续调用对象的 toString() 方法，若返回值为原始数据类型，则结束 @@ToPrimitive 操作，如果返回的还是引用数据类型，则抛出异常。\",\"如果传入值为 String 类型，则先调用 toString() 方法，再调用 valueOf() 方法。\",\"[1, 2] == \\\"1,2\\\"[(1, 2)] // true .valueOf() // \\\"[1,2]\\\" [(1, 2)].toString(); // \\\"1,2\\\" const a = {}; a == \\\"[object Object]\\\"; // true a.valueOf().toString(); // \\\"[object Object]\\\"\",\"对于不同类型的引用数据类型，ToPrimitive 的规则有所不同，比如 Date 对象会先调用 toString() 方法，具体可以参考 ECMAScript6 规范中对 ToPrimitive 的定义解释 以 JavaScript 实现 ToPrimitive\",\"值得一提的是对于 数组类型 的 valueOf() 函数的调用结果仍为数组，因此数组类型的隐式类型转换结果是字符串。\",\"而在 ES6 中引入 Symbol 类型之后，JavaScript 会优先调用对象的 [Symbol.toPrimitive] 方法来将该对象转化为原始类型，那么方法的调用顺序就变为了：\",\"当 obj[Symbol.toPrimitive](preferredType) 方法存在时，优先调用该方法\",\"如果 preferredType 参数为 String 类型，则依次尝试 obj.toString() 与 obj.valueOf()\",\"如果 preferredType 参数为 Number 类型或者默认值，则依次尝试 obj.valueOf() 与 obj.toString()\"]},\"947\":{\"h\":\"显式类型转换\",\"t\":[\"通过手动进行类型转换，JavaScript 提供了以下转型函数：\",\"转换为数值类型 \",\"Number(mix)\",\"parseInt(string, radix)\",\"parseFloat(string)\",\"转换为字符串类型 \",\"toString(radix)\",\"String(mix)\",\"转换为布尔类型 \",\"Boolean(mix)\"]},\"948\":{\"h\":\"隐式类型转换\",\"t\":[\"在 JavaScript 中，当运算符在运算时，如果 两边数据不统一，CPU 就无法运算，这时我们编译器会自动将运算符两边的数据做一个数据类型转换，转成相同的数据类型再计算。\",\"这种无需开发者手动转换，而由 编译器自动转换 的方式就称为 隐式类型转换。\",\"JavaScript 的数据类型隐式转换主要分为三种情况：\",\"转换为 Boolean 类型\",\"转换为 Number 类型\",\"转换为 String 类型\",\"值在 逻辑判断 和 逻辑运算 时会隐式转换为 Boolean 类型。\",\"Boolean 类型转换规则表：\",\"数据值\",\"转换后的值\",\"数字 0\",\"false\",\"NaN\",\"false\",\"空字符串 \\\"\\\"\",\"false\",\"null\",\"false\",\"undefined\",\"false\",\"非 !0 数字\",\"true\",\"非空字符串 !\\\"\\\"\",\"true\",\"非 !null 对象类型\",\"true\",\"[!warning] 使用 new 运算符创建的对象隐式转换为 Boolean 类型的值都是 true。\",\"连续两个非操作可以将一个数强制转换为 Boolean 类型。\",\"!!undefined; // false !!null; // false !!1; // true !!\\\"\\\"; // false !!\\\"Hello\\\"; // true !!{}; // true !![]; // true !!function () {}; // true\"]},\"949\":{\"h\":\"运行环境\",\"t\":[\"很多内置函数期望传入的参数的数据类型是固定的，如 alert(value)，它期望传入的 value 为 String 类型，但是如果我们传入的是 Number 类型或者 Object 类型等非 String 类型的数据的时候，就会发生数据类型的隐式转换。这就是环境运行环境对数据类型转换的影响。\",\"类似的方法还有：\",\"alert()\",\"parseInt()\"]},\"950\":{\"h\":\"运算符\"},\"951\":{\"h\":\"加号运算符\",\"t\":[\"当加号运算符作为一元运算符运算值时，它会将该值转换为 Number 类型。\",\"' ' + // 0 '0' + // 0 '10' + // 10 'String' + // NaN true + // 1 false + // 0 undefined + // 0 null + // 0 [] + // 0 ![] + // 0 [1] + // 1 [1, 2] + // NaN [[1]] + // 1 [[1, 2]] + // NaN {} + // NaN function () {}; // NaN +'' + // 0\",\"当加号运算符作为二元运算符操作值时，它会根据两边值类型进行数据类型隐式转换。\",\"首先，当引用对象类型的值进行二元加号运算符运算时，会涉及到转换为原始数据类型的问题。事实上，当一个对象执行例如加法操作的时候，如果它是原始类型，那么就不需要转换。否则，将遵循以下规则：\",\"当 obj[Symbol.toPrimitive](preferredType) 方法存在时，优先调用该方法，如果有返回的是基础类型，停止下面的过程；否则继续\",\"调用实例的 valueOf() 方法，如果有返回的是基础类型，停止下面的过程；否则继续\",\"调用实例的 toString() 方法，如果有返回的是基础类型，停止下面的过程；否则继续\",\"都没返回原始类型，就会报错\",\"如果运算符两边均为原始数据类型时，则按照以下规则解释：\",\"字符串连接符：如果两个操作数中只要存在一个操作数为 String 类型，那么另一个操作数会调用 String() 方法转成字符串然后拼接\",\"算术运算符：如果两个操作数都不是 String 类型，两个操作数会调用 Number() 方法隐式转换为 Number 类型（如果无法成功转换成数字，则变为 NaN，再往下操作），然后进行加法算术运算\",\"值转换为 Number 类型和 String 类型都会遵循一个原则：如果该值为原始数据类型，则直接转换为 String 类型或 Number 类型。如果该值为引用数据类型，那么先通过固定的方法将复杂值转换为原始数据类型，再转为 String 类型或 Number 类型。ToPrimitive\",\"\\\"1\\\" + 1 // \\\"11\\\" \\\"1\\\" + \\\"1\\\" // \\\"11\\\" \\\"1\\\" + true // \\\"1true\\\" \\\"1\\\" + NaN // \\\"NaN\\\" \\\"1\\\" + [] // \\\"1\\\" \\\"1\\\" + {} // \\\"1[object Object]\\\" \\\"1\\\" + function(){} // \\\"1function(){}\\\" \\\"1\\\" + new Boolean() // \\\"1false\\\" 1 + NaN // NaN 1 + \\\"true\\\" // \\\"1true\\\" 1 + true // 2 1 + undefined // NaN 1 + null // 1 1 + [] // \\\"1\\\" 1 + [1, 2] // \\\"11,2\\\" 1 + {} // \\\"1[object Object]\\\" 1 + function(){} // \\\"1function(){}\\\" 1 + Number() // 1 1 + String() // \\\"1\\\" [] + [] // \\\"\\\" {} + {} // \\\"[object Object][object Object]\\\" {} + [] // \\\"[object Object]\\\" {a: 0} + 1 // '[object Object]1' [] + {} // \\\"[object Object]\\\" [] + !{} // \\\"false\\\" ![] + [] // \\\"false\\\" '' + {} // \\\"[object Object]\\\" {} + '' // \\\"[object Object]\\\" [][\\\"map\\\"] + [] // \\\"function map(){ [native code] }\\\" [][\\\"a\\\"] + [] // \\\"undefined\\\" [][[]] + [] // \\\"undefined\\\" +!![] + [] // \\\"1\\\" +!![] // 1 1-{} // NaN 1-[] // 1 true - 1 // 0 {} - 1 // -1 [] !== [] // true []['push'](1) // 1 (![]+[])[+[]] // \\\"f\\\" (![]+[])[+!![]] // \\\"a\\\"\"]},\"952\":{\"h\":\"相等运算符\",\"t\":[\"相等运算符 == 会对操作值进行隐式转换后进行比较\",\"如果其中一个操作值为布尔值，则在比较之前先将其转换为数值\",\"如果其中一个操作值为字符串，另一个操作值为数值，则通过 Number() 函数将字符串转换为数值\",\"如果其中一个操作值是对象，另一个不是，则调用对象的 valueOf() 方法，得到的结果按照前面的规则进行比较\",\"null 与 undefined 是相等的\",\"如果一个操作值为 NaN，则返回 false\",\"如果两个操作值都是对象，则比较它们是不是指向同一个对象\",\"\\\"1\\\" == true; // true \\\"1\\\" == 1; // true \\\"1\\\" == {}; // false \\\"1\\\" == []; // false undefined == undefined; // true undefined == null; // true null == null; // true\"]},\"953\":{\"h\":\"关系运算符\",\"t\":[\"关系运算符：会把其他数据类型转换成 Number 之后再比较关系（除了 Date 类型对象）\",\"如果两个操作值都是数值，则进行 数值 比较\",\"如果两个操作值都是字符串，则比较字符串对应的 ASCII 字符编码值\",\"多个字符则从左往右依次比较\",\"如果只有一个操作值是数值，则将另一个操作值转换为数值，进行 数值 比较\",\"如果一个操作数是对象，则调用 valueOf() 方法（如果对象没有 valueOf() 方法则调用 toString() 方法），得到的结果按照前面的规则执行比较\",\"如果一个操作值是布尔值，则将其转换为 数值，再进行比较\",\"📍 NaN 是非常特殊的值，它不和任何类型的值相等，包括它自己，同时它与任何类型的值比较大小时都返回 false。\",\"5 > 10; // false \\\"2\\\" > 10; // false \\\"2\\\" > \\\"10\\\"; // true \\\"abc\\\" > \\\"b\\\"; // false \\\"abc\\\" > \\\"aad\\\"; // true\"]},\"954\":{\"h\":\"JavaScript 原始类型转换表\",\"t\":[\"原始值\",\"转换为数字类型\",\"转换为字符串类型\",\"转换为布尔类型\",\"false\",\"0\",\"\\\"false\\\"\",\"false\",\"true\",\"1\",\"\\\"true\\\"\",\"true\",\"0\",\"0\",\"\\\"0\\\"\",\"false\",\"1\",\"1\",\"\\\"1\\\"\",\"true\",\"\\\"0\\\"\",\"0\",\"\\\"0\\\"\",\"true\",\"\\\"000\\\"\",\"0\",\"\\\"000\\\"\",\"true\",\"\\\"1\\\"\",\"1\",\"\\\"1\\\"\",\"true\",\"NaN\",\"NaN\",\"\\\"NaN\\\"\",\"false\",\"Infinity\",\"Infinity\",\"\\\"Infinity\\\"\",\"true\",\"-Infinity\",\"-Infinity\",\"\\\"-Inifinity\\\"\",\"true\",\"\\\"\\\"\",\"0\",\"\\\"\\\"\",\"false\",\"\\\" \\\"\",\"0\",\"\\\" \\\"\",\"true\",\"\\\"20\\\"\",\"20\",\"\\\"20\\\"\",\"true\",\"\\\"Hello\\\"\",\"NaN\",\"\\\"Hello\\\"\",\"true\",\"[]\",\"0\",\"\\\"\\\"\",\"true\",\"[20]\",\"20\",\"\\\"20\\\"\",\"true\",\"[10, 20]\",\"NaN\",\"\\\"10,20\\\"\",\"true\",\"[\\\"Hello\\\"]\",\"NaN\",\"\\\"Hello\\\"\",\"true\",\"[\\\"Hello\\\", \\\"World\\\"]\",\"NaN\",\"\\\"Hello,World\\\"\",\"true\",\"function(){}\",\"NaN\",\"\\\"function(){}\\\"\",\"true\",\"{}\",\"NaN\",\"\\\"[object Object]\\\"\",\"true\",\"null\",\"0\",\"\\\"null\\\"\",\"false\",\"undefined\",\"NaN\",\"\\\"undefined\\\"\",\"false\"]},\"955\":{\"h\":\"经典试题\",\"t\":[\"(a == 1) && (a == 2) && (a == 3) 能不能为 true？\",\"事实上是可以的，就是因为在 == 比较的情况下，会进行隐式类型转换。如果参数不是 Date 对象实例，就会进行类型转换，先 valueOf() 再 toString()。所以，我们只要改变原生的 valueOf() 或者 toString() 方法就可以达到效果：\",\"const a = { num: 0, valueOf: function () { return (this.num += 1); }, }; const eq = a == 1 && a == 2 && a == 3; console.log(eq); // true // 或者改写他的 toString 方法 const num = 0; Function.prototype.toString = function () { return ++num; }; function a() {} // 还可以改写 ES6 的 Symbol 类型的 toPrimitive 的方法 const a = { [Symbol.toPrimitive]: (function (i) { return function () { return ++i; }; })(0), };\",\"每一次进行等号的比较，就会调用一次 valueOf() 方法，自增 1，所以能成立。 另外，减法也是同理：\",\"const a = { num: 4, valueOf: function () { return (this.num -= 1); }, }; const res = a == 3 && a == 2 && a == 1; console.log(res);\"]},\"956\":{\"c\":[\"前端技术\"]},\"957\":{\"c\":[\"JavaScript\"]},\"958\":{\"h\":\"break 语句\",\"t\":[\"break 语句用于立即退出最内层的循环或 switch 语句。\"]},\"959\":{\"h\":\"语法\",\"t\":[\"break [labelname];\"]},\"960\":{\"h\":\"参数\",\"t\":[\"参数\",\"描述\",\"labelname\",\"与语句标签相关联的标识符。如果 break 语句不在一个循环或 switch 语句中，则该项是必须的。\",\"break 语句包含一个可选的标签，可允许程序摆脱一个被标记的语句。break 语句需要内嵌在引用的标签中。被标记的语句可以是任何块语句；不一定是循环语句。\",\"当 break 语句和标签一块使用时，程序将跳转到这个标签所标识的语句块结束，或者直接终止这个闭合语句的执行。\"]},\"961\":{\"h\":\"示例\"},\"962\":{\"h\":\"代码示例\",\"t\":[\"var num = 0; for (var i = 1; i < 10; i++) { if (i % 5 == 0) { break; } num++; } console.log(num); // 4\"]},\"963\":{\"h\":\"switch 语句\",\"t\":[\"var str = 'string', variable; swtich (str) { case 'number': variable = 'number'; break; case 'string': variable = 'string'; break; case 'boolean': variable ='boolean' }\"]},\"964\":{\"c\":[\"前端技术\"]},\"965\":{\"c\":[\"JavaScript\"]},\"966\":{\"h\":\"continue 语句\",\"t\":[\"continue 语句用于结束当前（或标签）的循环语句的本次迭代，并继续执行循环的下一次迭代。\"]},\"967\":{\"h\":\"语法\",\"t\":[\"break [labelname];\"]},\"968\":{\"h\":\"参数\",\"t\":[\"参数\",\"描述\",\"labelname\",\"可选，与语句标签相关联的标识符。\"]},\"969\":{\"h\":\"描述\",\"t\":[\"与 break 语句的区别在于，continue 并不会终止循环的迭代，而是： \",\"在 while 循环中，在循环开始处指定的条件判断语句会重复检测，如果检测结果为 true，循环体会从头开始执行。\",\"在 do/while 循环中，程序的执行直接跳到循环结尾处，这时会重新判断循环条件，之后才会继续下一次循环。\",\"在 for 循环中，首先执行更新语句，然后再次执行判断语句，用以判断是否继续执行循环体。\",\"在 for/in 循环中，循环开始遍历下一个属性名，这个属性名赋给了指定的变量。\",\"continue 语句可以包含一个可选的标号以控制程序跳转到指定循环的下一次迭代，而非当前循环。此时要求 continue 语句在对应的循环内部。\",\"不管 continue 语句带不带标签，它只能在循环体内使用。在其他地方使用将会报语法错误。\",\"continue 语句和 labelname 之间不能有换行。\"]},\"970\":{\"h\":\"示例\"},\"971\":{\"h\":\"代码示例\",\"t\":[\"在 for 语句中使用 continue\",\"var num = 0; for (var i = 1; i < 10; i++) { if (i % 5 == 0) { continue; } num++; } console.log(num); // 8\",\"在 while 语句中使用 continue\",\"i = 0; n = 0; while (i < 5) { i++; if (i === 3) { continue; } n += i; }\"]},\"972\":{\"c\":[\"前端技术\"]},\"973\":{\"c\":[\"JavaScript\"]},\"974\":{\"h\":\"do-while 语句\",\"t\":[\"do-while 语句创建一个执行指定语句的循环，直到 condition 值为 false。在执行 statement 后检测 condition，所以指定的 statement 至少执行一次。\"]},\"975\":{\"h\":\"语法\",\"t\":[\"do { statement; } while (expression);\"]},\"976\":{\"h\":\"描述\",\"t\":[\"像 do-while 这种后测试循环语句最常用于循环体中的代码至少要被执行一次的情形。\",\"do/while 循环和普通 while 循环之间有两点语法方面的不同之处。 \",\"do 循环要求必须使用关键字 do 来标识循环的开始，用 while 来标识循环的结尾并进入循环条件判断。\",\"和 while 循环不同，do 循环是用分号结尾的。\",\"如果 while 的循环体使用花括号括起来的话，则 while 循环也不用使用分号做结尾。\"]},\"977\":{\"h\":\"示例\",\"t\":[\"var i = 0; do { i += 2; } while (i < 10); console.log(i); // 10\"]},\"978\":{\"c\":[\"前端技术\"]},\"979\":{\"c\":[\"JavaScript\"]},\"980\":{\"h\":\"for-in 语句\",\"t\":[\"for-in 语句用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。\"]},\"981\":{\"h\":\"语法\",\"t\":[\"for (property in expression) statement;\"]},\"982\":{\"h\":\"参数\",\"t\":[\"参数\",\"类型\",\"描述\",\"property\",\"任意类型\",\"每次迭代时，将不同的属性名分配给变量。\",\"expression\",\"Object 类型\",\"被迭代枚举其属性的对象。\",\"statement\",\"-\",\"循环执行代码块。\"]},\"983\":{\"h\":\"描述\",\"t\":[\"for-in 循环只遍历可枚举属性。循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性（更接近原型链中对象的属性覆盖原型属性）。\",\"for-in 不应该用于迭代一个数组，其中索引顺序很重要。数组索引只是具有整数名称的枚举属性，并且与通用对象属性相同。不能保证 for-in 将以任何特定的顺序返回索引。for-in 循环语句将返回所有可枚举属性，包括非整数类型的名称和继承的那些。因为迭代的顺序是依赖于执行环境的，所以数组遍历不一定按次序访问元素。因此当迭代访问顺序很重要的数组时，最好用整数索引去进行 for 循环（或用 Array.prototype.forEach() 或 for-of 循环）。\",\"ECMAScript 对象的属性没有顺序，因此通过 for-in 循环输出的属性名的顺序是不可预测的。具体来说，所有可枚举的属性都会被返回一次，但返回的先后次序可能会因为浏览器而异。\",\"迭代的对象的变量值为 null 或 undefined，for-in 语句不抛出错误，但不会执行循环体（ECMAScript5 以上版本可行）。为了保证最大限度的兼容性，建议使用 for-in 之前，先检测确认该对象的值不是 null 或 undefined。\"]},\"984\":{\"h\":\"示例\"},\"985\":{\"h\":\"代码示例\",\"t\":[\"for (var propName in window) { console.log(propName); }\"]},\"986\":{\"h\":\"提取实例自身属性\",\"t\":[\"var seat = { a: 1, b: 2, c: 3 }; function Car() { this.color = 'red'; } Car.prototype = seat; var lamborghini = new Car(); // for-in statement for (var prop in lamborghini) { if (lamborghini.hasOwnProperty(prop)) { console.log(`lamborghini.${prop} = ${lamborghini[prop]}`); } } // Output: // \\\"lamborghini.color = red\\\"\"]},\"987\":{\"c\":[\"前端技术\"]},\"988\":{\"c\":[\"JavaScript\"]},\"989\":{\"h\":\"for-of 语句\",\"t\":[\"for-of 语句在可迭代对象（包括 Array，Map，Set，String，TypedArray``，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。\"]},\"990\":{\"h\":\"语法\",\"t\":[\"for (variable of iterable) { //statements }\"]},\"991\":{\"h\":\"参数\",\"t\":[\"参数\",\"说明\",\"variable\",\"在每次迭代中，将不同属性的值分配给变量\",\"iterable\",\"被迭代枚举其属性的对象\"]},\"992\":{\"h\":\"示例\"},\"993\":{\"h\":\"迭代 Array\",\"t\":[\"let iterable = [10, 20, 30]; for (let value of iterable) { value += 1; console.log(value); } // 11 // 21 // 31\",\"如果你不想修改语句块中的变量 , 也可以使用 const 代替 let。\",\"let iterable = [10, 20, 30]; for (const value of iterable) { console.log(value); } // 10 // 20 // 30\"]},\"994\":{\"h\":\"迭代 String\",\"t\":[\"let iterable = \\\"boo\\\"; for (let value of iterable) { console.log(value); } // \\\"b\\\" // \\\"o\\\" // \\\"o\\\"\"]},\"995\":{\"h\":\"迭代 TypedArray\",\"t\":[\"let iterable = new Uint8Array([0x00, 0xff]); for (let value of iterable) { console.log(value); } // 0 // 255\"]},\"996\":{\"h\":\"迭代 Map\",\"t\":[\"let iterable = new Map([ [\\\"a\\\", 1], [\\\"b\\\", 2], [\\\"c\\\", 3], ]); for (let entry of iterable) { console.log(entry); } // [\\\"a\\\", 1] // [\\\"b\\\", 2] // [\\\"c\\\", 3] for (let [key, value] of iterable) { console.log(value); } // 1 // 2 // 3\"]},\"997\":{\"h\":\"迭代 Set\",\"t\":[\"let iterable = new Set([1, 1, 2, 2, 3, 3]); for (let value of iterable) { console.log(value); } // 1 // 2 // 3\"]},\"998\":{\"h\":\"迭代 arguments 对象\",\"t\":[\"(function () { for (let argument of arguments) { console.log(argument); } })(1, 2, 3); // 1 // 2 // 3\"]},\"999\":{\"h\":\"迭代 DOM 集合\",\"t\":[\"迭代 DOM 元素集合，比如一个 NodeList 对象：下面的例子演示给每一个 article 标签内的 p 标签添加一个 read 类。\",\"//注意：这只能在实现了NodeList.prototype[Symbol.iterator]的平台上运行 let articleParagraphs = document.querySelectorAll(\\\"article > p\\\"); for (let paragraph of articleParagraphs) { paragraph.classList.add(\\\"read\\\"); }\"]},\"1000\":{\"h\":\"关闭迭代器\",\"t\":[\"对于 for-of 的循环，可以由 break, continue, throw 或 return 终止。在这些情况下，迭代器关闭。\",\"function* foo() { yield 1; yield 2; yield 3; } for (let o of foo()) { console.log(o); break; // closes iterator, triggers return } for (const e of [1, 2, 3, 4]) { if (e & 1) { continue; } console.log(e); } // 2 4\"]},\"1001\":{\"h\":\"迭代生成器\",\"t\":[\"你还可以迭代一个生成器：\",\"function* fibonacci() { // 一个生成器函数 let [prev, curr] = [0, 1]; for (;;) { // while (true) { [prev, curr] = [curr, prev + curr]; yield curr; } } for (let n of fibonacci()) { console.log(n); // 当n大于1000时跳出循环 if (n >= 1000) break; }\"]},\"1002\":{\"h\":\"不要重用生成器\",\"t\":[\"生成器不应该重用，即使 for-of 循环的提前终止，例如通过 break 关键字。在退出循环后，生成器关闭，并尝试再次迭代，不会产生任何进一步的结果。\",\"var gen = (function* () { yield 1; yield 2; yield 3; })(); for (let o of gen) { console.log(o); break; //关闭生成器 } //生成器不应该重用，以下没有意义！ for (let o of gen) { console.log(o); }\"]},\"1003\":{\"h\":\"迭代其他可迭代对象\",\"t\":[\"你还可以迭代显式实现可迭代协议的对象：\",\"var iterable = { [Symbol.iterator]() { return { i: 0, next() { if (this.i < 3) { return { value: this.i++, done: false }; } return { value: undefined, done: true }; }, }; }, }; for (var value of iterable) { console.log(value); } // 0 // 1 // 2\"]},\"1004\":{\"h\":\"for-of 与 for-in 的区别\",\"t\":[\"无论是 for-in 还是 for-of 语句都是迭代一些东西。它们之间的主要区别在于它们的迭代方式。\",\"for-in 语句以原始插入顺序迭代对象的可枚举属性。\",\"for-of 语句遍历可迭代对象定义要迭代的数据。\",\"以下示例显示了与 Array 一起使用时，for-of 循环和 for-in 循环之间的区别。\",\"Object.prototype.objCustom = function () {}; Array.prototype.arrCustom = function () {}; let iterable = [3, 5, 7]; iterable.foo = \\\"hello\\\"; for (let i in iterable) { console.log(i); // 0, 1, 2, \\\"foo\\\", \\\"arrCustom\\\", \\\"objCustom\\\" } for (let i in iterable) { if (iterable.hasOwnProperty(i)) { console.log(i); // 0, 1, 2, \\\"foo\\\" } } for (let i of iterable) { console.log(i); // 3, 5, 7 }\",\"Object.prototype.objCustom = function () {}; Array.prototype.arrCustom = function () {}; let iterable = [3, 5, 7]; iterable.foo = \\\"hello\\\";\",\"每个对象将继承 objCustom 属性，并且作为 Array 的每个对象将继承 arrCustom 属性，因为将这些属性添加到 Object.prototype 和 Array.prototype。由于继承和原型链，对象 iterable 继承属性 objCustom 和 arrCustom。\",\"for (let i in iterable) { console.log(i); // 0, 1, 2, \\\"foo\\\", \\\"arrCustom\\\", \\\"objCustom\\\" }\",\"此循环仅以原始插入顺序记录 iterable 对象的可枚举属性。它不记录数组元素 3, 5, 7 或 hello，因为这些不是枚举属性。但是它记录了数组索引以及 arrCustom 和 objCustom。\",\"for (let i in iterable) { if (iterable.hasOwnProperty(i)) { console.log(i); // 0, 1, 2, \\\"foo\\\" } }\",\"这个循环类似于第一个，但是它使用 hasOwnProperty() 来检查，如果找到的枚举属性是对象自己的（不是继承的）。如果是，该属性被记录。记录的属性是 0, 1, 2 和 foo，因为它们是自身的属性（不是继承的）。属性 arrCustom 和 objCustom 不会被记录，因为它们是继承的。\",\"for (let i of iterable) { console.log(i); // 3, 5, 7 }\",\"该循环迭代并记录 iterable 作为可迭代对象定义的迭代值，这些是数组元素 3, 5, 7，而不是任何对象的属性。\"]},\"1005\":{\"c\":[\"前端技术\"]},\"1006\":{\"c\":[\"JavaScript\"]},\"1007\":{\"h\":\"for 语句\",\"t\":[\"for 语句 也是一种前测试循环语句，但它具有在执行循环之前初始化变量和定义循环后要执行的代码的能力。\"]},\"1008\":{\"h\":\"语法\",\"t\":[\"for (initialization; expression; post - loop - expression) { // statement }\"]},\"1009\":{\"h\":\"参数：\",\"t\":[\"initialization 初始化表达式：表达式通常会初始化一个或多个循环计数器（变量），但语法上是允许一个任意复杂度的表达式，通常为一条声明赋值语句（只在循环开始之前执行一次）。\",\"expression 循环条件判断：执行循环语句前的判断语句（通常为比较表达式），若为 true 则执行循环语句，否则则不执行循环语句，并跳出循环语句。\",\"post-loop-expression 计数器变量更新：循环执行语句执行后执行的计数器变量更新表达式，更新循环计数器（变量），以进入下一次循环条件判断。\",\"statement 循环执行语句：当循环条件满足时所执行的语句，执行完毕后执行计数器变量更新语句（利用 break 、continue 语句除外）。\"]},\"1010\":{\"h\":\"最佳实践\",\"t\":[\"var count = 10; for (let i = 0; i < count; i++) { console.log(i); }\"]},\"1011\":{\"h\":\"从尾部向前循环\",\"t\":[\"const arr = [1, 2, 3, 4, 5]; for (let i = arr.length - 1; i >= 0; i--) { console.log(arr[i]); }\"]},\"1012\":{\"h\":\"位数的整倍循环\",\"t\":[\"// 五位数的数字 const num = 99999; for (let i = 1; i < num; i *= 10) { // 被除数 num // 除数 const divisor = i * 10; // 整除部分 const divided = Math.floor(num / divisor); // 余数 const remainder = num % divisor; console.log(i, divisor); // i divisor // 1. 1 10 // 2. 10 100 // 3. 100 1000 // 4. 1000 10000 // 5. 10000 100000 }\"]},\"1013\":{\"h\":\"涉及多个变量的循环\",\"t\":[\"for (let i = 0, j = 10; i < 10; i++, j--) { sum += i * j; }\",\"若在循环中一次迭代改变多个变量，则必须使用到逗号运算符，它将初始化表达式和自增表达式合并入一个表达式中以用于 for 循环。\"]},\"1014\":{\"h\":\"可忽略的表达式\",\"t\":[\"function tail(o) { // 返回链表的最后一个节点对象 for (; o.next; o = o.netx /* empty */); return; // 根据判断 o.next 是不是真值来执行遍历 }\",\"循环计数器（变量）中一般都是数字，也是最常用的，但不是必需的。for 循环中的三个表达式中的任何一个都可以忽略，但是两个分号必不可少。如果 expression ，那么这将是一个死循环，同样，和 while(true) 类似，死循环的另一种写法是 for(;;)。\"]},\"1015\":{\"c\":[\"前端技术\"]},\"1016\":{\"c\":[\"JavaScript\"]},\"1017\":{\"h\":\"if 语句\",\"t\":[\"条件语句用于基于不同的条件来执行不同的动作。\",\"在 JavaScript 中，我们可使用以下条件语句：\",\"if 语句：只有当指定条件为 true 时，使用该语句来执行代码\",\"if...else 语句： 当条件为 true 时执行代码，当条件为 false 时执行其他代码\",\"if...else if...else 语句：使用该语句来选择多个代码块之一来执行\",\"switch 语句：使用该语句来选择多个代码块之一来执行\",\"当一个逻辑条件为真，用 if 语句执行一个语句。当这个条件为假，使用可选择的 else 从句来执行这个语句。\"]},\"1018\":{\"h\":\"单层条件判断\",\"t\":[\"if (condition) { statement_1; } [else { statement_2; }] //推荐使用严格的语句块模式，语句else可选\",\"参数\",\"说明\",\"condition\",\"为任何返回结果（若非 boolean 类型会被 ECMAScrpt 转换）为 true 或 false 的表达式。如果条件式为 true，statement1 会被执行；否则 statement2 会被执行\",\"statement1(2)\",\"为任意语句（代码块），甚至可以将另一个 if 语句嵌套七种\"]},\"1019\":{\"h\":\"多层条件判断\",\"t\":[\"if (condition_1) { statement_1; } [else if (condition_2) { statement_2; }] ... [else if (condition_n_1) { statement_n_1; }] [else { statement_n; }]\",\"要执行多个语句，可以使用语句块 ({ ... }) 来分组这些语句。\"]},\"1020\":{\"h\":\"示例\",\"t\":[\"不建议在条件表达式中使用赋值操作，因为在快速查阅代码时容易看成等值比较。\",\"请勿使用以下代码：\",\"if ((x = y)) { // do something }\",\"如果你需要在表达式中使用赋值，通常在赋值语句前后额外添加一对括号。\",\"if ((x = y)) { // do something }\",\"假值等效值\",\"下面这些值将被计算出 false：\",\"false undefined null 0 NaN \\\"\\\"\",\"当传递给条件语句时，所有其他值，包括所有对象会被计算为真。\",\"请不要混淆原始的布尔值 true 和 false 与 Boolean 对象的真和假。\",\"var b = new Boolean(false); if (b) // this condition evaluates to true if (b == true) // this condition evaluates to false\"]},\"1021\":{\"c\":[\"前端技术\"]},\"1022\":{\"c\":[\"JavaScript\"]},\"1023\":{\"h\":\"label 语句\",\"t\":[\"标记语句可以和 break 或 continue 语句一起使用。标记就是在一条语句前面加个可以引用的标识符。\",\"[!warning] 标记的循环或块非常罕见。通常可以使用函数调用而不是循环跳转。\"]},\"1024\":{\"h\":\"语法\",\"t\":[\"identifier: statement;\"]},\"1025\":{\"h\":\"描述\",\"t\":[\"可使用一个标签来唯一标记一个循环，然后使用 break 或 continue 语句来指示程序是否中断循环或继续执行。\"]},\"1026\":{\"h\":\"示例\"},\"1027\":{\"h\":\"标注示例\",\"t\":[\"用作标签的 identifier 必须是一个合法的 JavaScript 标识符，而不能是一个保留字。\",\"var i, j; loop1: for (i = 0; i < 3; i++) { // The first for statement is labeled \\\"loop1\\\" loop2: for (j = 0; j < 3; j++) { // The second for statement is labeled \\\"loop2\\\" if (i == 1 && j == 1) { continue loop1; } console.log(\\\"i = \\\" + i + \\\", j = \\\" + j); } }\"]},\"1028\":{\"c\":[\"前端技术\"]},\"1029\":{\"c\":[\"JavaScript\"]},\"1030\":{\"h\":\"return 语句\",\"t\":[\"函数中的 return 语句用来返回函数调用后的返回值\"]},\"1031\":{\"h\":\"语法\",\"t\":[\"return expression;\"]},\"1032\":{\"h\":\"说明\"},\"1033\":{\"h\":\"返回语句特点\",\"t\":[\"return 语句只能出现在函数体内，如果不是会报语法错误\",\"return 1; // SyntaxError: Illegal return statement\",\"由于 JavaScript 可以自动插入分号，因此在 return 关键字和它后面的表达式之间不能有换行。\",\"var test = function fn(){ return 2; }; console.log(test()); // undefined\",\"一个函数中可以有多个 return 语句。\",\"function diff(iNum1, iNum2) { if (iNum1 > iNum2) { return iNum1 - iNum2; } else { return iNum2 - iNum1; } }\"]},\"1034\":{\"h\":\"函数进程\",\"t\":[\"如果没有 return 语句，则函数调用仅仅依次执行函数体内的每一条语句直到函数结束，最后返回调用程序。这种情况下，调用表达式的结果是 undefined。\",\"var test = function fn(){} console.log(test()); // undefined\",\"当执行到 return 语句时，函数终止执行，并返回 expression 的值给调用程序\",\"var test = function fn(){ return 2; }; console.log(test()); // 2\",\"return 语句经常作为函数内的最后一条语句出现，这是因为 return 语句可用来使函数提前返回。当 return 被执行时，函数立即返回而不再执行余下的语句\",\"//并没有弹出1 var test = function fn(){ return; alert(1); }; console.log(test());//undefined\",\"并不是函数中 return 语句后的所有语句都不执行，finally 语句是例外，return 语句不会阻止 finally 子句的执行。\",\"function testFinnally(){ try{ return 2; }catch(error){ return 1; }finally{ return 0; } } testFinnally(); // 0\"]},\"1035\":{\"h\":\"返回值\",\"t\":[\"如果函数调用时在前面加上了 new 前缀，且返回值不是一个对象，则返回 this（该新对象）\",\"function fn(){ this.a = 2; return 1; } var test = new fn(); console.log(test); // {a:2} console.log(test.constructor); // fn(){this.a = 2;return 1;}\",\"如果返回值是一个对象，则返回该对象。\",\"function fn(){ this.a = 2; return {a:1}; } var test = new fn(); console.log(test);//{a:1} console.log(test.constructor);//Object() { [native code] }\",\"return 语句可以单独使用而不必带有表达式 expression，这样的话也会向调用程序返回 undefined。\",\"var test = function fn(){ return; }; console.log(test()); // undefined\"]},\"1036\":{\"h\":\"总结\",\"t\":[\"return 语句只能出现在函数体内\",\"return 关键词和表达式之间不可换行\",\"一个函数中可以有多个 return 语句\",\"当执行 return 语句，函数终止执行，并返回表达式\",\"return 语句不会阻止 finally 子句的执行\",\"调用构造函数，且返回值不是一个对象，则返回该新对象\",\"如果返回值是一个对象，则返回该对象\",\"return 语句可单独使用而不必带有表达式，返回 undefined\"]},\"1037\":{\"c\":[\"前端技术\"]},\"1038\":{\"c\":[\"JavaScript\"]},\"1039\":{\"h\":\"switch 语句\",\"t\":[\"switch 语句允许一个程序求一个表达式的值并且尝试去匹配表达式的值到一个 case 标签。如果匹配成功，这个程序执行相关的语句。\"]},\"1040\":{\"h\":\"语法\",\"t\":[\"switch (expression) { case value_1: statements_1 [break;] case value_2: statements_2 [break;] ... default: statements_def [break;] }\",\"工作原理：首先设置表达式 expression（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break 来阻止代码自动地向下一个 case 运行。\"]},\"1041\":{\"h\":\"关键词\",\"t\":[\"case：表示一种情况，如果 expression 等于 value ，就执行 statement\",\"break：会使代码跳出 switch 语句，如果没有关键词 break，代码执行就会继续进入下一个 case 。\",\"default：说明了表达式的结果不等于任何一种情况时的操作（事实上，它相对于 else 从句）。\"]},\"1042\":{\"h\":\"示例\",\"t\":[\"var myCar = 'Porsche' switch (myCar) { case 'Nissan': alert(\\\"My car is Nissan\\\"); break; case 'Honda': alert(\\\"My car is Honda\\\"); break; case 'Porsche': alert(\\\"My car is Porsche\\\"); break; default: alert(\\\"I have no car\\\"); }\"]},\"1043\":{\"c\":[\"前端技术\"]},\"1044\":{\"c\":[\"JavaScript\"]},\"1045\":{\"h\":\"throw 语句\",\"t\":[\"throw 语句 用来抛出一个用户自定义的异常。当前函数的执行将被停止（ throw 之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个 catch 块。如果调用者函数中没有 catch 块，程序将会终止。\"]},\"1046\":{\"h\":\"语法\",\"t\":[\"throw expression;\"]},\"1047\":{\"h\":\"示例\",\"t\":[\"你可以抛出任意表达式而不是特定一种类型的表达式。\",\"throw 'Error2'; // String type throw 42; // Number type throw true; // Boolean type throw { toString: function () { return \\\"I'm an object\\\"; }, };\"]},\"1048\":{\"h\":\"抛出一个对象\",\"t\":[\"你可以在抛出异常时指定一个对象。然后可以在 catch 块中引用对象的属性。以下示例创建一个类型为 UserException 的对象，并在 throw 语句中使用它。\",\"function UserException(message){ this.message = message; this.name = \\\"UserException\\\"; } function getMonthName(mo) { mo = mo - 1; // 调整月份数字到数组索引(1 = Jan,12 = Dec) var months = [\\\"Jan\\\", \\\"Feb\\\", \\\"Mar\\\", \\\"Apr\\\", \\\"May\\\", \\\"Jun\\\", \\\"Jul\\\", \\\"Aug\\\", \\\"Sep\\\", \\\"Oct\\\", \\\"Nov\\\", \\\"Dec\\\"]; if(months[mo] !== undefined) { return months[mo]; } else { throw new UserException(\\\"InvalidMonthNo\\\"); } } try{ // statements to try var myMonth = 15; // 超出边界并引发异常 var monthName = getMonthName(myMonth); } catch (e) { var monthName = \\\"unkown\\\"; console.log(e.message, e.name); // 传递异常对象到错误处理 }\"]},\"1049\":{\"c\":[\"前端技术\"]},\"1050\":{\"c\":[\"JavaScript\"]},\"1051\":{\"h\":\"try-catch 语句\",\"t\":[\"try...catch 语句将能引发错误的代码放在 try 块中，并且对应一个响应，然后有异常被抛出。\",\"try...catch 语句包含了由一个或者多个语句组成的 try 块, 和至少一个 catch 子句或者一个 finally 子句的其中一个，或者两个兼有。\",\"下面是三种形式的 try 声明：\",\"try...catch\",\"try...finally\",\"try...catch...finally\"]},\"1052\":{\"h\":\"catch\",\"t\":[\"catch 子句包含 try 块中抛出异常时要执行的语句。也就是，你想让 try 语句中的执行操作成功，如果没成功，你想控制接下来发生的事情，这时你可以在 catch 语句中实现。\",\"如果有在 try 块中有任何一个语句（或者从 try 块中调用的函数）抛出异常，控制立即转向 catch 子句。如果在 try 块中没有异常抛出，会跳过 catch 子句。\",\"🌰 示例：\",\"try { console.log(\\\"1: start\\\"); throw \\\"this is a error\\\"; console.log(\\\"2: end\\\"); } catch (err) { console.log(\\\"3:\\\", err); } // 输出顺序： // 1：start // 3：this is a error\",\"catch 块指定一个标识符（在上面的示例中为 err），该标识符保存由 throw 语句指定的值。catch块是唯一的，因为当输入catch 块时，JavaScript 会创建此标识符，并将其添加到当前作用域；标识符仅在 catch 块执行时存在；catch 块执行完成后，标识符不再可用。\",\"从结果可以得知，如果在 try 块中任何一个语句（或者从 try 块中调用的和你熟）抛出异常，控制立即转向 catch 子句。\"]},\"1053\":{\"h\":\"finally\",\"t\":[\"finally 子句在 try 块和 catch 块之后执行但是在下一个 try 声明之前执行。\",\"[!warning] 无论是否有异常抛出或着是否被捕获它总是执行。\",\"function fn() { try { return 1; } catch (err) { return 2; } finally { console.log(3); } } console.log(fn()); // 输出顺序： // 3 // 1\",\"从结果来看，先执行 finally 再执行 try 里面 return 的值。\",\"function fn() { try { throw 'this is a error' } catch (err) { console.log(1, err) return 2 } finnally { console.log(3) } } console.log(fn()) // 输出顺序： // 1 this is a error // 3 // 2\",\"先执行 return 之前的语句，再执行 finnally，最后返回 return 的值。\",\"[!warning] 如果从 finally 块中返回一个值，那么这个值将会成为整个 try-catch-finally 的返回值，无论是否有 return 语句在 try 和 catch 中。这包括在 catch 块里抛出的异常。\"]},\"1054\":{\"h\":\"嵌套捕获\",\"t\":[\"你可以嵌套一个或者更多的 try 语句。如果内部的 try 语句没有 catch 子句，那么将会进入包裹它的 try 语句的 catch 子句。\",\"try { try { throw \\\"this is a error\\\"; } finally { console.log(1); } } catch (err) { console.log(2, err); } // 输出顺序: // 1 // 2 this is a error\",\"在 try 块中嵌套 try-catch-finnally 语句。\",\"try { try { throw \\\"this is a error\\\"; } catch (err) { console.error(1, err); throw err; } finally { console.log(2); return 3; } } catch (err) { console.error(4, err.message); } // 输出顺序： // 1 this is a error // 2\",\"因为 finally 块里的 return 语句，外部的 this is a error 异常没有抛出。从 catch 块返回的值同样适用。\"]},\"1055\":{\"h\":\"异常标识符\",\"t\":[\"当 try 块中的抛出一个异常时， exception_var（如 catch (err) 中的 err ）用来保存被抛出声明指定的值。你可以用这个标识符来获取关于被抛出异常的信息。\",\"这个标识符是 catch 子语句内部的。换言之，当进入 catch 子语句时标识符创建，catch 子语句执行完毕后，这个标识符将不再可用。\"]},\"1056\":{\"c\":[\"前端技术\"]},\"1057\":{\"c\":[\"JavaScript\"]},\"1058\":{\"h\":\"while 语句\",\"t\":[\"while 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为 true 时结束循环。\"]},\"1059\":{\"h\":\"语法\",\"t\":[\"while (expression) statement;\",\"注意：使用 break 语句在 expression 计算结果为真之前停止循环。\"]},\"1060\":{\"h\":\"示例\",\"t\":[\"var i = 0; while (i < 10) { i += 2; } var cars = [\\\"BMW\\\", \\\"Volvo\\\", \\\"Saab\\\", \\\"Ford\\\"]; var text = \\\"\\\"; var i = 0; while (i < cars.length) { text += cars[i] + \\\"<br>\\\"; i++; }\"]},\"1061\":{\"c\":[\"前端技术\"]},\"1062\":{\"c\":[\"JavaScript\"]},\"1063\":{\"h\":\"变量声明\",\"t\":[\"ECMAScript 的变量是松散类型的，所谓松散类型就是可以用于保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。\"]},\"1064\":{\"h\":\"声明\"},\"1065\":{\"h\":\"var\",\"t\":[\"var 语句用于声明一个变量，可选地将其初始化为一个值。\",\"变量声明，无论发生在何处，都在执行任何代码之前进行处理。用 var 声明的变量的作用域是它当前的执行上下文，它可以是嵌套的函数，也可以是声明在任何函数外的变量。如果你重新声明一个 JavaScript 变量，它将不会丢失其值。\",\"将赋值给未声明变量的值在执行赋值时将其隐式地创建为全局变量（它将成为全局对象的属性）。声明和未声明变量之间的差异是：\",\"声明变量的作用域限制在其声明位置的上下文中，而非声明变量总是全局的。\",\"function x() { y = 1; // 在严格模式下会抛出ReferenceError异常 var z = 2; } x(); console.log(y); // 打印'1' console.log(z); // 抛出ReferenceError: z未在x外部声明\",\"声明变量在任何代码执行前创建，而非声明变量只有在执行赋值操作的时候才会被创建。\",\"console.log(a); // 抛出ReferenceError console.log(\\\"still going...\\\"); // 永不执行\",\"var a; console.log(a); // 打印'undefined'或''（不同浏览器实现不同） console.log(\\\"still going...\\\"); // 打印'still going...'\",\"声明变量是它所在上下文环境的 不可配置属性，非声明变量是可配置的（如非声明变量可以被删除）。\",\"a = 1; b = 2; delete this.a; // 在严格模式下抛出TypeError，其他情况下执行失败并无任何提示。 delete this.b; console.log(a, b); // 抛出ReferenceError // 'b'属性已经被删除。\",\"由于这三个差异，未能声明变量将很可能导致意想不到的结果。因此，建议始终声明变量，无论它们是在函数还是全局作用域内。 而在 ECMAScript 5 严格模式下，分配给未声明的变量会引发错误。\",\"[!warning] 由于变量声明（以及其他声明）总是在任意代码执行之前处理的，所以在代码中的任意位置声明变量总是等效于在代码开头声明。这意味着变量可以在声明之前使用，这个行为叫做提升（hoisting）。提升就像是把所有的变量声明移动到函数或者全局代码的开头位置。\"]},\"1066\":{\"h\":\"let\",\"t\":[\"let 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。\",\"let 语句所声明的变量有如下特征：\",\"let 是块级变量，不存在于 window 对象下非全局属性，window.变量名 是找不到 let 声明的变量的\",\"let 不允许重复声明同名变量，会抛出异常，具有唯一性\",\"let 不允许未声明变量就使用，会抛出异常，只有执行该声明的时候才能使用\",\"let 有自己特色的闭包特性，比如在 for 语句循环中\",\"let a = 1; console.log(window.a); // Output: undefined\",\"let b = 2; let b = 3; // SyntaxError: Identifier 'b' has already been declared\",\"console.log(c); // ReferenceError: c is not defined let c = 2;\",\"for (let i = 0; i < 3; i++) { setTimeout(() => { console.log(i); // Output: 1,2,3 }); }\"]},\"1067\":{\"h\":\"暂存性死区\",\"t\":[\"临时性死区：描述 let 和 const 声明的变量不提升的效果 。\",\"在 ECMAScript 2015 中，let 绑定不受变量提升的约束，这意味着 let 声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。该变量处于从块开始到初始化处理的「暂存死区」。\",\"{ console.log(bar); // undefined console.log(foo); // ReferenceError: foo is not defined var bar = 1; let foo = 2; }\",\"在 switch 声明中你可能会遇到这样的错误，因为它只有一个块.\",\"switch (x) { case 0: let foo; break; case 1: let foo; // TypeError for redeclaration. break; }\",\"但是，重要的是要指出嵌套在 case 子句内的块将创建一个新的块作用域的词法环境，这不会产生上面显示的重新声明错误。\",\"let x = 1; switch (x) { case 0: { let foo; break; } case 1: { let foo; break; } }\",\"拓展：ES6 中 let 暂时性死区详解\"]},\"1068\":{\"h\":\"const\",\"t\":[\"const 语句用于创建一个常量，一旦声明，常量的值就不能改变。其作用域可以是全局或本地声明的块。\",\"const 声明的常量具有以下特征：\",\"const 与 let 一样，不可重复声明同名变量，具有唯一性\",\"const 与 let 一样，不存在变量提升，所声明的变量均存在暂时性死区\",\"const 与 let 一样，只在声明所在的块级作用域内有效\",\"const 声明的变量可以理解为只读变量，但是并非一成不变\",\"const 声明创建一个值的只读引用。但这并不意味着它所持有值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。\",\"常量要求一个初始值\",\"const b; // SyntaxError: missing = in const declaration\",\"常量可以定义成对象\",\"const c = { key: \\\"value\\\" }; // 重写对象和上面一样会失败 c = { OTHER_KEY: \\\"value\\\" }; // 对象属性并不在保护的范围内，下面这个声明会成功执行 c.key = \\\"otherValue\\\";\",\"常量可以定义成数组\",\"const d = []; d.push(\\\"A\\\"); // [\\\"A\\\"] d = [\\\"B\\\"]; // TypeError: Assignment to constant variable.\"]},\"1069\":{\"h\":\"变量作用域\",\"t\":[\"在所有函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在该函数内部访问。\",\"ECMAScript 6 之前的 JavaScript 没有 语句块 作用域；相反，语句块中声明的变量将成为语句块所在代码段的局部变量。例如，如下的代码将在控制台输出 5，因为 x 的作用域是声明了 x 的那个函数（或全局范围），而不是 if 语句块。\",\"if (true) { var x = 5; } console.log(x); // 5\",\"如果使用 ECMAScript 6 中的 let 声明，上述行为将发生变化。\",\"if (true) { let y = 5; } console.log(y); // ReferenceError: y is not defined\"]},\"1070\":{\"h\":\"变量的数据类型\",\"t\":[\"详情参考 数据类型\"]},\"1071\":{\"c\":[\"前端技术\"]},\"1072\":{\"c\":[\"JavaScript\"]},\"1073\":{\"h\":\"块语句\",\"t\":[\"块语句（Block）用于组合零个或多个语句。该块由一对大括号 {} 界定，块内形成块级作用域，块作用域内定义的变量将在离开块作用域后立即被回收。\",\"{ StatementList; }\"]},\"1074\":{\"h\":\"块级作用域\",\"t\":[\"ES5 只有 全局作用域 和 函数作用域，没有块级作用域，这带来很多不合理的场景：\",\"内层变量可能会覆盖外层变量\",\"用来计数的循环变量泄露为全局变量。\",\"因此，ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。在 ES6 的块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用；但又有别于 let 命令，允许重复声明同名函数且存在函数变量提升。\",\"块级作用域中的函数特征：\",\"允许在块级作用域内声明函数。\",\"函数声明类似于 var，即会提升到全局作用域或函数作用域的头部。\",\"内层作用域声明的函数不干扰外层作用域的函数。\"]},\"1075\":{\"h\":\"var\",\"t\":[\"通过 var 声明的变量没有块级作用域。在语句块里声明的变量作用域是其所在的函数或者 <script> 标签内，你可以在语句块外面访问到它。\",\"换句话说，语句块不会生成一个新的作用域。尽管单独的语句块是合法的语句，但在 JavaScript 中你不会想使用单独的语句块，因为它们不像你想象的 C 或 Java 中的语句块那样处理事物。\",\"var a = 1; { var a = 2; } console.log(a); // 2\"]},\"1076\":{\"h\":\"let 和 const\",\"t\":[\"相比之下，使用 let 和 const 声明的变量是有块级作用域的。\",\"let a = 1; { let a = 2; } console.log(a); // 1\",\"const a = 1; { const a = 2; } console.log(a); // 1\",\"注意块级作用域里的常量声明 const a = 2 并不会抛出 SyntaxError: Identifier 'a' has already been declared 这样的语法错误，因为这是一个新的作用域。\"]},\"1077\":{\"h\":\"function\",\"t\":[\"函数声明同样被限制在声明它的语句块内。\",\"foo(\\\"outside\\\"); // TypeError: foo is not a function { function foo(location) { console.log(\\\"foo is called \\\" + location); } foo(\\\"inside\\\"); // 'foo is called inside' }\"]},\"1078\":{\"c\":[\"前端技术\"]},\"1079\":{\"c\":[\"JavaScript\"]},\"1080\":{\"h\":\"字面量\",\"t\":[\"字面量（Literal），又名直接量，即程序中直接使用的数据值。\",\"// Null 字面量 const n = null; // Undefined 字面量 const u = undefined; // Boolean 布尔值字面量 const b1 = true; const b2 = false; // Number 数值字面量 const num = 1; const nan = NaN; // String 字符串字面量 const hello = 'hello'; const world = 'world'; // Regexp 正则字面量 const reg = /pattern/; // Template Literal 模版字面量 const temp = `hello, ${world}`\"]},\"1081\":{\"c\":[\"前端技术\"]},\"1082\":{\"c\":[\"JavaScript\"]},\"1083\":{\"h\":\"对象初始化表达式\",\"t\":[\"对象和数组初始化表达式实际上是一个新创建的对象和数组。这些初始化表达式有时称作 对象直接量 和 数组直接量。然而和布尔值直接量不同，它们实际上不是原始表达式，因为它们所包含的成员或者元素都是子表达式。\",\"对象初始化表达式和数组初始化表达式非常相似，只是方括号被花括号代替，并且每个子表达式都包含一个属性名和一个冒号作为前缀。\",\"// 一个拥有两个属性成员的对象 var p = { x: 2.3, y: -1.2, }; // 一个空对象 var q = {}; // q 的属性成员和 p 的一样 q.x = 2.3; q.y = -1.2;\",\"对象直接量也可以嵌套。\",\"var rectangle = { upperLeft: { x: 2, y: 2 }, lowRight: { x: 4, y: 5 }, };\",\"JavaScript 求对象初始化表达式的值的时候，对象表达式也都会各自计算一次，并且它们不必包含常数值：它们可以是任意 JavaScript 表达式。\",\"同样，对喜爱那个直接量中的属性名称可以是字符串而不是标识符（这在那些只能使用保留字或一些非法标识符作为属性名的地方非常有用）\",\"var side = 1; var square = { upperLeft: { x: p.x, y: p.y, }, lowerRight: { x: p.x + side, y: p.y + side, }, };\"]},\"1084\":{\"c\":[\"前端技术\"]},\"1085\":{\"c\":[\"JavaScript\"]},\"1086\":{\"h\":\"属性访问器\",\"t\":[\"属性访问表达式运算得到一个对象属性或一个数组元素的值。\",\"JavaScript 为属性访问定义了两种语法。\"]},\"1087\":{\"h\":\"语法\",\"t\":[\"第一种写法是一个表达式后跟随一个句点和标识符。表达式指定对象，标识符则指定需要访问的属性的名称。\",\"expression.identifiler\",\"第二种写法是使用方括号，方括号内是另一个表达式（这种方法适用于对象和数组）。第二个表达式指定要访问的属性的名称或代表要访问数组元素的索引。\",\"expression[expression]\",\"不管使用哪种形式的属性访问器，在句点和左方括号之前的表达式总是会首先计算。\",\"如果计算结果是 null 或 undefined，表达式会抛出一个类型错误异常，因为这两个值都不能包含任意属性\",\"如果计算结果不是对象，JavaScript 会将其 转换为对象\",\"如果对象表达式后跟随句点和标识符，则会查找由这个标识符指定的 属性值，并将其作为整个表达式的值返回\",\"如果对象表达式后跟随一对方括号，则会计算方括号内的表达式的值并将其转换为 字符串\",\"不论哪种情况，如果命名的属性不存在，那么整个属性访问表达式的值就是 undefined。\",\"示例\",\"var a = {x: 1, y: {z: 3}}; // 一个示例对象 var b = [a, 4, [5, 6]]; // 一个包含这个对象的示例数组 console.log(a.x); // 1 console.log(a.y.z); // 3 console.log(a[\\\"x\\\"]); // 1 console.log(b[1]); // 4 console.log(b[2][\\\"1\\\"]); // 6 console.log(b[0].x); // 1\"]},\"1088\":{\"c\":[\"前端技术\"]},\"1089\":{\"c\":[\"JavaScript\"]},\"1090\":{\"h\":\"数组初始化表达式\",\"t\":[\"数组初始化表达式 是通过一对方括号和其内由逗号隔开的列表构成的。初始化的结果是一个新创建的数组。\"]},\"1091\":{\"h\":\"逗号分隔\",\"t\":[\"数组的元素是 逗号分隔 的表达式的值。\",\"空数组：[] 内留空即表示该数组没有任何元素\",\"拥有两个元素的数组：第一个是 3，第二个是 7。\",\"[1 + 2, 3 + 4]\"]},\"1092\":{\"h\":\"嵌套数组\",\"t\":[\"数组初始化表达式中的元素初始化表达式也可以是数组的初始化表达式。也就是说，这些表达式是可以嵌套的。\",\"var matrix = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]\"]},\"1093\":{\"h\":\"可省略元素\",\"t\":[\"数组直接量中的列表逗号之间的元素可以省略，这时省略的空位会填充值不存在。\",\"var sparseArray = [1, , , , 5] // 相当于 // [1, empty x 3, 5]\",\"数组直接量的元素列表结尾处可以留下单个逗号，这时并不会创建一个新的值为 undefined 的值。\",\"const arr = [1, 2, 3, ] console.log(arr) // [1, 2, 3]\"]},\"1094\":{\"h\":\"索引赋值\",\"t\":[\"通过数组索引赋值，只会给指定索引所在位置赋值，而其中未赋值的索引位置则表示为空 empty，而非定义为 undefined.\",\"let arr = [0, 1] arr[10] = 10 console.log(arr); // [0, 1, empty x 8, 10] console.log(arr.length); // 11 ary.filter(x => x === undefined); // []\"]},\"1095\":{\"c\":[\"前端技术\"]},\"1096\":{\"c\":[\"JavaScript\"]},\"1097\":{\"h\":\"delete\",\"t\":[\"delete 操作符用于删除对象的某个属性。如果没有指向这个属性的引用了，它最终会被自动地释放。\"]},\"1098\":{\"h\":\"语法\",\"t\":[\"delete expression;\",\"expression 的计算结果应该是某个属性的引用\",\"delete object.property; delete object['property'];\"]},\"1099\":{\"h\":\"参数\",\"t\":[\"参数\",\"说明\",\"object\",\"对象的名称，或计算结果为对象的表达式\",\"property\",\"要删除的属性\"]},\"1100\":{\"h\":\"返回值\",\"t\":[\"对于所有情况都是 true，除非属性是一个自己 不可配置 的属性，在这种情况下，非严格模式返回 false。\",\"[!warning] 与通常对 delete 的理解不同，delete 操作符与直接释放内存无关。内存管理通过断开引用来间接完成的。查看 内存模型 了解更多。\"]},\"1101\":{\"h\":\"说明\",\"t\":[\"delete 操作符会从某个对象上移除指定属性。\",\"成功删除的时候回返回 true，否则返回 false。\",\"但是，以下情况需要重点考虑：\",\"如果你试图删除的属性不存在，那么 delete 将不会起任何作用，但仍会返回 true\",\"如果对象的原型链上有一个与待删除属性同名的属性，那么删除属性之后，对象会使用原型链上的那个属性（也就是说，delete 操作只会在自身的属性上起作用）\",\"任何使用 var 声明的属性不能从全局作用域或函数的作用域中删除。 \",\"这样的话，delete 操作不能删除任何在全局作用域中的函数（无论这个函数是来自于函数声明或函数表达式）\",\"除了在全局作用域中的函数不能被删除，在对象中的函数是能够用 delete 操作删除的。\",\"任何用 let 或 const 声明的属性不能够从它被声明的作用域中删除。\",\"不可设置的（Non-configurable）属性不能被移除。这意味着像 Math、Array 和 Object 等内置对象的属性以及使用 Object.defineProperty() 方法设置为不可设置的属性不能被删除。\"]},\"1102\":{\"h\":\"示例\",\"t\":[\"var Employee = { age: 28, name: 'abc', designation: 'developer', }; console.log(delete Employee.name); // true console.log(delete Employee.age); // true // 当试着删除一个不存在的属性时 // 同样会返回 true console.log(delete Employee.salary); // true\"]},\"1103\":{\"c\":[\"前端技术\"]},\"1104\":{\"c\":[\"JavaScript\"]},\"1105\":{\"h\":\"in\",\"t\":[\"in 运算符用于判断属性是否存在于对象中。\"]},\"1106\":{\"h\":\"语法\",\"t\":[\"key in obj;\"]},\"1107\":{\"h\":\"参数\",\"t\":[\"参数\",\"说明\",\"key\",\"一个字符串类型或者 Symbol 类型的属性名或者数组索引（非 Symbol 类型将会强制转为字符串）。\",\"object\",\"检查（或其原型链）是否包含具有指定名称的属性的对象。\"]},\"1108\":{\"h\":\"示例\"},\"1109\":{\"h\":\"代码示例\",\"t\":[\"数组\",\"var cars = new Array('Toyota', 'Nissan', 'Mercedes', 'Buick', 'Porsche'); 0 in cars; // true 1 in cars; // true 6 in cars; // false 'Mercedes' in cars; // false（必须使用索引号，而不是数组元素的值） 'length' in cars; // true（length是一个数组属性） Symbol.iterator in cars; // true（数组可迭代，只在 ES2015+ 上有效）\",\"内置对象\",\"'PI' in Math; // true\",\"自定义对象\",\"var myCar = { make: 'Honda', model: 'Accord', year: '1998' }; 'make' in myCar; 'model' in myCar;\",\"in 右操作数必须是一个对象值\",\"例如：你可以指定使用 String 构造函数创建的字符串，但不能指定字符串文字。\",\"var color1 = new String('green'); 'length' in color1; // true var color2 = new 'coral'(); 'length' in color2; // 报错(color2不是对象)\"]},\"1110\":{\"h\":\"值为 的对象属性\",\"t\":[\"如果你使用 delete 运算符删除了一个属性，则 in 运算符对所删除属性返回 false。\",\"var cars = new Array('Toyota', 'Nissan', 'Mercedes', 'Buick', 'Porsche'); delete cars[3]; 3 in cars; // false\",\"如果你只是将一个属性的值赋值为 undefined，而没有删除它，则 in 运算仍然会返回 true。\",\"var cars = new Array('Toyota', 'Nissan', 'Mercedes', 'Buick', 'Porsche'); cars[3] = undefined; 3 in cars; // true\"]},\"1111\":{\"h\":\"继承属性\",\"t\":[\"如果一个属性是 从原型链上继承来的，in 运算符也会返回 true。\",\"'toString' in {}; // true\"]},\"1112\":{\"c\":[\"前端技术\"]},\"1113\":{\"c\":[\"JavaScript\"]},\"1114\":{\"h\":\"instanceof\",\"t\":[\"instanceof 运算符用于测试构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\",\"代码示例：\",\"target instanceof constructor;\"]},\"1115\":{\"h\":\"检测类型\",\"t\":[\"instanceof 可以检测某个对象是否是另一个对象的 实例。\",\"const Person = function () {}; const student = new Person(); console.log(student instanceof Person); // true\",\"instanceof 可以检测父类型。\",\"function Person() {} function Student() {} const p = new Person(); // 继承原型 Student.prototype = p; const s = new Student(); console.log(s instanceof Student); // true console.log(s instanceof Person); // true\",\"其他例子：\",\"// 数字类型 console.log(1 instanceof Number); // false conosole.log(Infinity instanceof Number); // false console.log(Number(2) instanceof Number); // 布尔值 console.log(true instanceof Boolean); // false // BigInt console.log(99999999999n instanceof BigInt); // false // 字符串 console.log('' instanceof String); // false // 函数类型 const fn = () => console.log('Hello world!'); console.log(fn instanceof Function); // true\"]},\"1116\":{\"h\":\"模拟实现\",\"t\":[\"function simulateInstanceof(left, right) { if (left === null || (typeof left !== 'object' && typeof left !== 'function')) return false; // 递归原型链 while (true) { // Object.prototype.__proto__ === null if (left === null) return false; // 这里重点：当 left 严格等于 prototype 时，返回 true if (left === right.prototype) return true; left = left.__proto__; } }\"]},\"1117\":{\"c\":[\"前端技术\"]},\"1118\":{\"c\":[\"JavaScript\"]},\"1119\":{\"h\":\"typeof\",\"t\":[\"typeof 操作符返回一个字符串，表示未经计算的操作数的类型。\"]},\"1120\":{\"h\":\"语法\",\"t\":[\"typeof operand;\"]},\"1121\":{\"h\":\"参数\",\"t\":[\"参数\",\"说明\",\"perand\",\"是一个表达式，表示对象或原始值，其类型将被返回\"]},\"1122\":{\"h\":\"返回值\",\"t\":[\"下表总结了 typeof 可能的返回值。\",\"有关类型和原始值的更多信息，可查看 JavaScript 数据结构 页面。\",\"类型\",\"结果\",\"Undefined\",\"'undefined'\",\"Null\",\"'object'\",\"Boolean\",\"'boolean'\",\"Number\",\"'number'\",\"String\",\"'string'\",\"Symbol\",\"'symbol'\",\"宿主对象\",\"'object'\",\"函数对象\",\"'function'\",\"任何其他对象\",\"'object'\"]},\"1123\":{\"h\":\"示例\"},\"1124\":{\"h\":\"Number\",\"t\":[\"typeof 37 === 'number'; typeof 3.14 === 'number'; typeof Math.LN2 === 'number'; typeof Infinity === 'number'; typeof NaN === 'number'; // 尽管 NaN 是 \\\"Not-A-Number\\\" 的缩写 typeof Number(1) === 'number'; // 但不要使用这种形式!\"]},\"1125\":{\"h\":\"String\",\"t\":[\"typeof '' === 'string'; typeof 'bla' === 'string'; typeof typeof 1 === 'string'; // typeof 总是返回一个字符串 typeof String('abc') === 'string'; // 但不要使用这种形式!\"]},\"1126\":{\"h\":\"Boolean\",\"t\":[\"typeof true === 'boolean'; typeof false === 'boolean'; typeof Boolean(true) === 'boolean'; // 但不要使用这种形式!\"]},\"1127\":{\"h\":\"Symbol\",\"t\":[\"typeof Symbol() === 'symbol'; typeof Symbol('foo') === 'symbol'; typeof Symbol.iterator === 'symbol';\"]},\"1128\":{\"h\":\"BigInt\",\"t\":[\"typeof 9999999999999999n ==='bigint' typeof BigInt('9999999999999999') ==='bigint'\"]},\"1129\":{\"h\":\"Undefined\",\"t\":[\"typeof undefined === 'undefined'; typeof declaredButUndefinedVariable === 'undefined'; typeof undeclaredVariable === 'undefined';\"]},\"1130\":{\"h\":\"Object\",\"t\":[\"typeof { a: 1 } === 'object'; // 使用Array.isArray 或者 Object.prototype.toString.call // 区分数组,普通对象 typeof [1, 2, 4] === 'object'; typeof new Date() === 'object'; // 下面的容易令人迷惑，不要使用！ typeof new Boolean(true) === 'object'; typeof new Number(1) === 'object'; typeof new String('abc') === 'object';\"]},\"1131\":{\"h\":\"Function\",\"t\":[\"typeof function () {} === 'function'; typeof class C {} === 'function'; typeof Math.sin === 'function'; typeof new Function() === 'function';\"]},\"1132\":{\"h\":\"特殊的 null\",\"t\":[\"typeof null === 'object'; // 从一开始出现 JavaScript 就是这样的\",\"在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签也成为了 0，typeof null 就错误的返回了 \\\"object\\\"。\",\"ECMAScript 提出了一个修复（通过 opt-in），但被拒绝。这将导致 typeof null === 'object'。\"]},\"1133\":{\"c\":[\"前端技术\"]},\"1134\":{\"c\":[\"JavaScript\"]},\"1135\":{\"h\":\"void\",\"t\":[\"void 运算符能向期望一个表达式的值是 undefined 的地方插入会产生副作用的表达式。\",\"void 运算符通常只用于获取 undefined 的原始值，一般使用 void(0)（等同于 void 0）。在上述情况中，也可以使用全局变量 undefined 来代替（假定其仍是默认值）。\",\"console.log(void 0); // undefined console.log(void 0); // undefined\"]},\"1136\":{\"h\":\"作用\"},\"1137\":{\"h\":\"替代 undefined\",\"t\":[\"由于 undefined 并不是一个关键字，其在 IE8- 浏览器中会被重写，在高版本函数作用域中也会被重写；所以可以用 void 0 来替换 undefined。\",\"var undefined = 10; console.log(undefined); // IE8-浏览器下为10，高版本浏览器下为 undefined function t() { var undefined = 10; console.log(undefined); } console.log(t()); // 所有浏览器下都是10\"]},\"1138\":{\"h\":\"客户端 URL\",\"t\":[\"这个运算符最常用在客户端 URL 中，在 URL 中可以写带有副作用的表达式，而 void 则让浏览器不必显示这个表达式的计算结果。例如，经常在 HTML 代码中的 <a> 标签里使用 void 运算符。\",\"<a href=\\\"js:void window.open();\\\">打开一个新窗口</a>\"]},\"1139\":{\"h\":\"阻止默认事件\",\"t\":[\"阻止默认事件的方式是给事件置返回值 false。\",\"//一般写法 <a href=\\\"http://example.com\\\" onclick=\\\"f();return false;\\\">文字</a> // 等价于 <a href=\\\"js:void(f())\\\">文字</a>\"]},\"1140\":{\"c\":[\"前端技术\"]},\"1141\":{\"c\":[\"JavaScript\"]},\"1142\":{\"h\":\"位运算移位运算符\",\"t\":[\"位运算符将它的操作数视为 32 位元的二进制串（0 和 1 组成）而非十进制、八进制或十六进制数。例如：十进制数字 9 用二进制表示为 1001，位运算符就是在这个二进制表示上执行运算，但是返回结果是标准的 JavaScript 数值。\",\"所有 JavaScript 数字存储为根为 10 的 64（8 比特）浮点数。JavaScript 不是类型语言。与许多其他编程语言不同，JavaScript 不定义不同类型的数字，比如整数、短、长、浮点等等。\",\"整数精度（不使用小数点或指数计数法）最多为 15 位。小数精度的最大位数是 17，但是浮点运算并不总是 100% 准确。\",\"位运算直接对二进制位进行计算，位运算直接处理每一个比特位，是非常底层的运算，好处是速度极快，缺点是很不直观，许多场合不能够使用。\",\"位运算只对整数起作用，如果一个运算数不是整数，会自动转为整数后再运行。\",\"在 JavaScript 内部，数值都是以 64 位浮点数的形式储存，但是做位运算的时候，是以 32 位带符号的整数进行运算的，并且返回值也是一个 32 位带符号的整数。\"]},\"1143\":{\"h\":\"位运算符\",\"t\":[\"JavaScript 中共有 7 个位运算符。\"]},\"1144\":{\"h\":\"按位与\",\"t\":[\"按位与（AND）& 以特定的方式组合操作二进制数中对应的位，如果对应的位都为 1，那么结果就是 1， 如果任意一个位是 0 则结果就是 0。\",\"// 1的二进制表示为: 00000000 00000000 00000000 00000001 // 3的二进制表示为: 00000000 00000000 00000000 00000011 // ----------------------------- // 1的二进制表示为: 00000000 00000000 00000000 00000001 console.log(1 & 3); // 1\"]},\"1145\":{\"h\":\"按位或\",\"t\":[\"按位或（OR）| 运算符与 & 的区别在于如果对应的位中任一个操作数为 1 那么结果就是 1。\",\"// 1的二进制表示为: 00000000 00000000 00000000 00000001 // 3的二进制表示为: 00000000 00000000 00000000 00000011 // ----------------------------- // 3的二进制表示为: 00000000 00000000 00000000 00000011 console.log(1 | 3); // 3\"]},\"1146\":{\"h\":\"按位异或\",\"t\":[\"按位异或（XOR）^ 如果对应两个操作位有且仅有一个 1 时结果为 1，其他都是 0。\",\"// 1的二进制表示为: 00000000 00000000 00000000 00000001 // 3的二进制表示为: 00000000 00000000 00000000 00000011 // ----------------------------- // 2的二进制表示为: 00000000 00000000 00000000 00000010 console.log(1 ^ 3); // 2\"]},\"1147\":{\"h\":\"按位非\",\"t\":[\"按位非（NOT）~ 运算符是对位求反，1 变 0, 0 变 1，也就是求二进制的反码。\",\"// 1的二进制表示为: 00000000 00000000 00000000 00000001 // 3的二进制表示为: 00000000 00000000 00000000 00000011 // ----------------------------- // 1反码二进制表示: 11111111 11111111 11111111 11111110 // 由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去 1，再取一次反，然后加上负号，才能得到这个负数对应的 10 进制值。 // ----------------------------- // 1的反码减1： 11111111 11111111 11111111 11111101 // 反码取反： 00000000 00000000 00000000 00000010 // 表示为10进制加负号：-2 console.log(~1); // -2\",\"简单记忆： 一个数与自身的取反值相加等于 -1。\"]},\"1148\":{\"h\":\"左移\",\"t\":[\"左移（Left shift）<< 运算符使指定值的二进制数所有位都左移指定次数，其移动规则：丢弃高位，低位补 0，即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。\",\"// 1的二进制表示为: 00000000 00000000 00000000 00000001 // ----------------------------- // 2的二进制表示为: 00000000 00000000 00000000 00000010 console.log(1 << 1); // 2\"]},\"1149\":{\"h\":\"右移\",\"t\":[\"右移 >> 会将指定操作数的二进制位向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。由于新的最左侧的位总是和以前相同，符号位没有被改变，所以该操作也称为 符号位传播右移（sign-propagating right shift）或 算术右移 （arithmetic right shift）\",\"// 1的二进制表示为: 00000000 00000000 00000000 00000001 // ----------------------------- // 0的二进制表示为: 00000000 00000000 00000000 00000000 console.log(1 >> 1); // 0\"]},\"1150\":{\"h\":\"无符号右移\",\"t\":[\"无符号右移 >>> 会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用 0 填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。） 对于非负数，有符号右移和无符号右移总是返回相同的结果。例如，9 >>> 2 得到 2 和 9 >> 2 相同。\"]},\"1151\":{\"h\":\"总结\",\"t\":[\"运算符\",\"用法\",\"描述\",\"按位与\",\"a & b\",\"在 a b 的位表示中，每一个对应的位都为 1 则返回 1， 否则返回 0\",\"按位或\",\"a | b\",\"在 a b 的位表示中，每一个对应的位，只要有一个为 1 则返回 1， 否则返回 0\",\"按位异或\",\"a ^ b\",\"在 a b 的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0\",\"按位非\",\"~ a\",\"反转被操作数的位\",\"左移\",\"a << b\",\"将 a 的二进制串向左移动 b 位,右边移入 0\",\"右移\",\"a >> b\",\"把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位\",\"无符号右移\",\"a >>> b\",\"把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位，并把左边空出的位都填充为 0\"]},\"1152\":{\"h\":\"最佳实践\"},\"1153\":{\"h\":\"取整\",\"t\":[\"使用 ~、>>、<<、>>>、|来取整。\",\"console.log(~~6.83); // 6 console.log(6.83 >> 0); // 6 console.log(6.83 << 0); // 6 console.log(6.83 | 0); // 6 // >>>不可对负数取整 console.log(6.83 >>> 0); // 6\"]},\"1154\":{\"h\":\"值交换\",\"t\":[\"使用按位异或 ^ 来完成值交换\",\"var a = 5; var b = 8; a ^= b; b ^= a; a ^= b; console.log(a); // 8 console.log(b); // 5\",\"异或还经常被用于加密。\"]},\"1155\":{\"h\":\"十进制转二进制\",\"t\":[\"var number = 3; var result = number.toString(2); var result2 = (14).toString(2); // \\\"1110\\\"\"]},\"1156\":{\"h\":\"颜色值转换\",\"t\":[\"使用 &、>>、| 来完成 RGB 值和 16 进制颜色值之间的转换\",\"/** * 16进制颜色值转RGB * @param {String} hex 16进制颜色字符串 * @return {String} RGB颜色字符串 */ function hexToRGB(hex) { var hexx = hex.replace(\\\"#\\\", \\\"0x\\\"); var r = hexx >> 16; var g = (hexx >> 8) & 0xff; var b = hexx & 0xff; return `rgb(${r}, ${g}, ${b})`; } /** * RGB颜色转16进制颜色 * @param {String} rgb RGB进制颜色字符串 * @return {String} 16进制颜色字符串 */ function RGBToHex(rgb) { var rgbArr = rgb.split(/[^\\\\d]+/); var color = (rgbArr[1] << 16) | (rgbArr[2] << 8) | rgbArr[3]; return \\\"#\\\" + color.toString(16); } // ------------------------------------------------- hexToRGB(\\\"#ffffff\\\"); // 'rgb(255,255,255)' RGBToHex(\\\"rgb(255,255,255)\\\"); // '#ffffff'\"]},\"1157\":{\"h\":\"判断正负\",\"t\":[\"function isPos(n) { return n === n >>> 0 ? true : false; } isPos(-1); // false isPos(1); // true\"]},\"1158\":{\"h\":\"判断符号是否相同\",\"t\":[\"通常, 比较两个数是否符号相同, 我们使用 x * y > 0 来判断即可. 但如果利用按位异或 ^, 运算速度将更快。\",\"console.log(-17 ^ (9 > 0)); // false\"]},\"1159\":{\"h\":\"判断奇偶\",\"t\":[\"使用 & 运算符判断一个数的奇偶\",\"如果把 n 以二进制的形式展示的话，其实我们只需要判断最后一个二进制位是 1 还是 0 就行了。\",\"// 偶数 & 1 = 0 // 奇数 & 1 = 1 console.log(2 & 1); // 0 console.log(3 & 1); // 1\"]},\"1160\":{\"h\":\"判断索引是否存在\",\"t\":[\"这是一个很常用的技巧，如何判断一个数是否在数组里面:\",\"// 如果url含有 ? 号，则后面拼上&符号，否则加上?号 url += ~url.indexOf(\\\"?\\\") ? \\\"&\\\" : \\\"?\\\";\",\"因为：~-1 === 0\",\"-1 在内存的表示的二进制符号全为 1，按位非之后就变成了 0. 进一步说明：1 在内存的表示为：0000...0001，第一位 0 表示符号位为正，如果是 -1 的话符号位为负用 1 表示 1000...0001，这个是 -1 的原码，然后符号位不动，其余位取反变成 1111...1110，这个就是 -1 的反码表示，反码再加 1 就变成了 1111...1111，这个就是 -1 的补码，负数在内存里面（机器数）使用补码表示，正数是用原码。所以全部都是 1 的机器数按位非之后就变成了全为 0。剩下的其它所有数按位非都不为 0，所以利用这个特性可以用来做 indexOf 的判断，这样代码看起来更简洁一点。\"]},\"1161\":{\"h\":\"标志位判断\",\"t\":[\"现在有个后台管理系统，操作权限分为一级、二级、三级管理员，其中一级管理员拥有最高的权限，二、三级较低，有些操作只允许一、二级管理员操作，有些操作只允许一、三级管理员操作。现在已经登陆的某权限的用户要进行某个操作，要用怎样的数据结构能很方便地判断他能不能进行这个操作呢？\",\"我们用位来表示管理权限，一级用第 3 位，二级用第 2 位，三级用第 1 位，即一级的权限表示为 0b100 = 4，二级权限表示为 0b010 = 2，三级权限表示为 0b001 = 1。如果 A 操作只能由一级和二级操作，那么这个权限值表示为 6= 0b110，它和一级权限与一下：6 & 4 = 0b110 & 0b100 = 4，得到的值不为 0，所以认为有权限，同理和二级权限与一下 6 & 2 = 2 也不为 0，而与三级权限与一下 6 & 1 = 0，所以三级没有权限。这里标志位的 1 表示打开，0 表示关闭。\",\"这样的好处在于，我们可以用一个数字，而不是一个数组来表示某个操作的权限集，同时在进行权限判断的时候也很方便。\"]},\"1162\":{\"c\":[\"前端技术\"]},\"1163\":{\"c\":[\"JavaScript\"]},\"1164\":{\"h\":\"可选链运算符\",\"t\":[\"可选链运算符（?.）允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 运算符的功能类似于 . 链式运算符，不同之处在于，在引用为空 (nullish) (null 或者 undefined) 的情况下不会引起错误，该表达式短路返回值是 undefined。与函数调用一起使用时，如果给定的函数不存在，则返回 undefined。\",\"当尝试访问可能不存在的对象属性时，可选链运算符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链运算符也是很有帮助的。\"]},\"1165\":{\"h\":\"语法\",\"t\":[\"obj.val?.prop obj.val?.[expr] obj.func?.(args)\",\"[!warning] 可选链运算符不能用于赋值\",\"let object = {}; object?.property = 1; // Uncaught SyntaxError: Invalid left-hand side in assignment\"]},\"1166\":{\"h\":\"示例\",\"t\":[\"let myMap = new Map(); myMap.set(\\\"foo\\\", { name: \\\"baz\\\", desc: \\\"inga\\\" }); let nameBar = myMap.get(\\\"bar\\\")?.name;\",\"let customer = { name: \\\"Carl\\\", details: { age: 82, location: \\\"Paradise Falls\\\", // details 的 address 属性未有定义 }, }; let customerCity = customer.details?.address?.city; // 可选链也可以和函数调用一起使用 let duration = vacations.trip?.getTime?.();\"]},\"1167\":{\"c\":[\"前端技术\"]},\"1168\":{\"c\":[\"JavaScript\"]},\"1169\":{\"h\":\"字符串运算符\",\"t\":[\"字符串运算符（用 + 加号表示）用于把两个字符串值相连接。操作值位于运算符两侧，运算返回另一个字符串，它是两个操作数串的结合。\",\"var foo = 'Hello' + ' ' + 'world!'; console.log(foo); // 'Hello world!'\",\"简写操作符 （+= 用加等于号表示）也可以用来拼接字符串，例如：\",\"var foo = 'Hello'; foo += ' world!'; // 相当于 myString = myString + 'bet' console.log(foo); // \\\"Hello world!\\\"\"]},\"1170\":{\"c\":[\"前端技术\"]},\"1171\":{\"c\":[\"JavaScript\"]},\"1172\":{\"h\":\"扩展运算符\",\"t\":[\"扩展运算符允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组字面量）或多个变量（用于解构赋值）的位置扩展。\"]},\"1173\":{\"h\":\"语法\"},\"1174\":{\"h\":\"函数调用\",\"t\":[\"myFunction(...iterableObj);\"]},\"1175\":{\"h\":\"数组字面量或字符串\",\"t\":[\"[...iterableObj, \\\"4\\\", \\\"five\\\", 6];\"]},\"1176\":{\"h\":\"对象字面量\",\"t\":[\"let iterableObj = { ...obj };\"]},\"1177\":{\"h\":\"应用\"},\"1178\":{\"h\":\"函数中的应用\",\"t\":[\"替代数组的 apply 方法 当我们的函数有多个变量的时候（特别是当我们不知道变量的数量的时候），有时候会通过将变量保存在数组中，并通过 apply 来执行函数，有了扩展运算符后则有了更好的方式（毕竟使用 apply 需要手动指定 this ，有时候会不是很方便很准确）。\",\"// ES5 function myFunction(x, y, z) {} var args = [0, 1, 2]; myFunction.apply(null, args); // ES6 function myFunction(x, y, z) {} var args = [0, 1, 2]; myFunction(...args);\",\"参数列表中的入参都可以使用扩展语法，并且可以多次使用。\",\"function myFunction(v, w, x, y, z) {} var args = [0, 1]; myFunction(-1, ...args, 2, ...[3]);\"]},\"1179\":{\"h\":\"函数的返回值\",\"t\":[\"JavaScript 的函数只能返回一个值，如果需要返回多个值，只能返回数组或对象。扩展运算符提供了解决这个问题的一个变通方法。\",\"var dateField = readDateFields(database); var d = new Date(...dateFields);\",\"上面的代码从数据库取出一行数据，通过扩展运算符，直接将其传入构造函数 Date。\"]},\"1180\":{\"h\":\"数组中的应用\"},\"1181\":{\"h\":\"数组的合并\",\"t\":[\"扩展运算符提供了数组合并的新写法\",\"// ES5 [1, 2].concat(more) // ES6 [1, 2, ...more] var arr1 = ['a', 'b']; var arr2 = ['c']; var arr3 = ['d', 'e']; // ES5 的合并数组 arr1.concat(arr2, arr3); // ['a', 'b', 'c', 'd', 'e'] // ES6 的合并数组 [...arr1, ...arr2, ...arr3] // ['a', 'b', 'c', 'd', 'e']\"]},\"1182\":{\"h\":\"数组的拷贝\",\"t\":[\"被拷贝数组元素仅限基本数据类型。\",\"let a = [1, 2, 3]; let b = [...a];\"]},\"1183\":{\"h\":\"与解构赋值结合\",\"t\":[\"扩展运算符可以与解构赋值结合起来，用于生成数组。\",\"// ES5 a = list[0], rest = list.slice(1) // ES6 [a, ...rest] = list\",\"下面是另外一些例子\",\"// 数组的分割 const [first, ...rest] = [1, 2, 3, 4, 5]; console.log(first); // 1 console.log(rest); // [2, 3, 4, 5] const [first, ...rest] = []; console.log(first); // undefined console.log(rest); // [] const [first, ...rest] = [\\\"foo\\\"]; console.log(first); // 'foo' console.log(rest); // []\",\"如果将扩展运算符用于数组赋值，则只能将其放在参数的最后一位，否则会报错。\",\"const [...butLast, last] = [1, 2, 3, 4, 5] // 报错 const [first, ...middle, last] = [1, 2, 3, 4, 5]; // 报错\"]},\"1184\":{\"h\":\"字符串中的应用\",\"t\":[\"扩展运算符还可以将字符串转为真正的数组。\",\"[...\\\"hello\\\"]; // ['h', 'e', 'l', 'l', 'o']\",\"上面的写法有一个重要的好处：能够正确识别 32 位的 Unicode 字符。\",\"'x\\\\uD83D\\\\uDE80y'.length // 4 [...'x\\\\uD83D\\\\uDE80y'].length // 3\",\"以上代码的第一种写法中，JavaScript 会将 32 位 Unicode 字符识别为 2 个字符，采用扩展运算符就没有这个问题。因此，正确返回字符串长度的函数可以像下面这样写。\",\"function length(str) { return [...str].length; } length(\\\"x\\\\uD83D\\\\uDE80y\\\"); // 3\",\"凡事涉及操作 32 位 Unicode 字符的函数都有这个问题。因此，最好都用扩展运算符改写。\",\"let str = 'x\\\\uD83D\\\\uDE80y'; str.split('').reverse().join('') // 'y\\\\uDE80\\\\uD83Dx' [...str].reverse().join('') // 'y\\\\uD83D\\\\uDE80x'\",\"上面的代码中，如果不用扩展运算，字符串的 reverse 操作就不正确。\"]},\"1185\":{\"h\":\"实现 Iterator 接口的对象\",\"t\":[\"任何 Iterator 接口的对象都可以用扩展运算符转为真正的数组。\",\"var nodeList = document.querySelectorAll(\\\"div\\\"); var array = [...nodeList];\",\"上面的代码中，querySelectorAll 方法返回的是一个 nodeList 对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因在于 NodeList 对象实现了 Iterator。\",\"对于那些没有部署 Iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组了。\",\"let arrayLike = { 0: \\\"a\\\", 1: \\\"b\\\", 2: \\\"c\\\", length: 3, }; // TypeError: Cannot spread non-iterable object. let arr = [...arrayLike];\",\"上面的代码中，arrayLike 是一个类似数组的对象，但是没有部署 Iterator 接口，扩展运算符就会报错。这时，可以改为使用 Array.from 方法将 arrayLike 转为真正的数组。\"]},\"1186\":{\"h\":\"Map 和 Set 结构、Generator 函数\",\"t\":[\"扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，如 Map 结构。\",\"let map = new Map([ [1, \\\"one\\\"], [2, \\\"two\\\"], [3, \\\"three\\\"], ]); let arr = [...map.keys()]; // [1, 2, 3]\",\"Generator 函数运行后会返回一个遍历器对象，因此也可以使用扩展运算符。\",\"var go = function* () { yield 1; yield 2; yield 3; }; [...go()]; // [1, 2, 3]\",\"上面的代码中，变量 go 是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符即可将内部遍历得到的值转为一个数组。\",\"var obj = { a: 1, b: 2 }; let arr = [...obj]; // TypeError: Cannot spread non-iterable object\"]},\"1187\":{\"c\":[\"前端技术\"]},\"1188\":{\"c\":[\"JavaScript\"]},\"1189\":{\"h\":\"更新运算符\",\"t\":[\"更新运算符包括 前自增/自减运算符 和 后自增/自减运算符。\"]},\"1190\":{\"h\":\"前自增\",\"t\":[\"先自增，再赋值\",\"let n = 10; // 前自增 const res = ++n; console.log(n); // 11 console.log(res); // 11\"]},\"1191\":{\"h\":\"前自减\",\"t\":[\"先自减，再赋值\",\"let n = 10; // 前自减 const res = --n; console.log(res); // 9 console.log(n); // 9\"]},\"1192\":{\"h\":\"后自增\",\"t\":[\"先赋值，再自增\",\"let n = 10; // 后自增 const res = n++; console.log(res); // 10 console.log(n); // 11\"]},\"1193\":{\"h\":\"后自减\",\"t\":[\"先赋值，再自减\",\"let n = 10; // 后自减 const res = n--; console.log(res); // 10 console.log(n); // 9\"]},\"1194\":{\"h\":\"异同对比\",\"t\":[\"前自增/前自减与后自增/后自减的异同点：\",\"相同点：无论是前自增/前自减还是后自增/后自减，对于变量而言，没有区别，都是自身 +1/-1\",\"不同点： \",\"前自增/前自减：先自增/自减（变量自身），后赋值（将变量的值赋值给自增表达式的结果）\",\"后自增/后自减：先赋值，后自增/自减\",\"为什么后自增后自减优先级很高却后操作？\",\"前置操作返回加（减）1 的值，所以返回对象本身，这是左值（++i，先自增后操作）\",\"后置操作为右值，同样对其操作数 +1/-1，但操作后产生操作数原来的、未修改的值为表达式的结果（可理解为 i++ 为先操作，后自增）。实际上，由于后自增（减）优先级很高，因此会先自增（减），但在自增（减）前会创建一个副本，用来保存操作数原来的值，操作后会返回副本的值给表达式。\",\"建议：只有在必要时才使用后置操作符，尽量使用前置操作符。因为前置操作需要做的工作更少，而后置操作必须先保存操作数原来的值，对于 int 型对象和指针，编译器会优化掉这项额外的工作，但对于更多复杂的迭代器类型，这种额外的工作可能会花费更大的代价。\"]},\"1195\":{\"c\":[\"前端技术\"]},\"1196\":{\"c\":[\"JavaScript\"]},\"1197\":{\"h\":\"条件运算符\",\"t\":[\"条件运算符（Conditional Operator）是 JavaScript 中 唯一的一个三元运算符（三个操作数），有时直接称做 三元运算符。\",\"variable = boolean_expression ? true_value : false_value;\",\"本质上，这就是基于对 boolean_expression 求值的结果，决定给变量 variable 赋什么值。如果求值结果是 true ，则给变量 variable 赋值 true_value；如果求值结果是 false，则给变量 variable 赋值 false_value。\",\"条件运算符的操作数可以是任意类型，第一个操作数当成布尔值，如果它是真值 true，那么将计算第二个操作数，并返回其计算结果。否则，如果第一个操作数是假值 false，那么将计算第三个操作数，并返回其计算结果。第二个和第三个操作数总是会计算其中之一，不可能两者同时执行。\",\"其实使用 if 语句也会带来同样的效果，?: 运算符只是提供了一种简写形式。下面是一个 ?: 的典型应用场景，判断一个变量是否有定义(并拥有一个有意义的真值)，如果有定义则使用它，如果无定义则使用一个默认值:\",\"greeting = \\\"hello \\\" + (username ? username : \\\"there\\\");\",\"这和下面使用 if 语句的代码是等价的，但显然上面的代码更加简洁:\",\"greeting = \\\"hello \\\"; if (username) greeting += username; else greeting += \\\"there\\\";\",\"条件运算符（三元条件表达式）与 if...else 语句具有同样表达效果，但是两者有一个重大差别。\",\"项\",\"类型\",\"返回值\",\"if...else\",\"语句\",\"无\",\"条件运算符\",\"表达式\",\"有\",\"因此，在需要返回值的场合，只能使用条件运算符（三元条件表达式），而不能使用 if...else。\",\"console.log(true ? 'T' : 'F'); // 'T'\",\"上面代码中，console.log()方法的参数必须是一个表达式，这时就只能使用三元条件表达式。\"]},\"1198\":{\"c\":[\"前端技术\"]},\"1199\":{\"c\":[\"JavaScript\"]},\"1200\":{\"h\":\"比较运算符\",\"t\":[\"比较运算符比较它的操作数并返回一个基于表达式是否为 true 的逻辑值。\",\"比较运算符分为 关系运算符（Relational Operators）和 等值运算符（Equality Operators）。\",\"操作数可以是数字，字符串，逻辑，对象值。\",\"字符串比较是基于标准的字典顺序，使用 Unicode 值。\",\"在多数情况下，如果两个操作数不是相同的类型， JavaScript 会尝试转换它们为恰当的类型来比较。这种行为通常发生在数字作为操作数的比较。\",\"类型转换的例外是使用 === 和 !== 操作符，它们会执行严格的相等和不相等比较。这些运算符不会在检查相等之前转换操作数的类型。下面的表格描述了该示例代码中的各比较运算符。\"]},\"1201\":{\"h\":\"关系运算符\",\"t\":[\"运算符\",\"描述\",\"返回 true 的示例\",\"大于 >\",\"左边的操作数大于右边的操作数返回 true\",\"b > a\",\"大于等于 >=\",\"左边的操作数大于或等于右边的操作数返回 true\",\"b >= aa >= 1\",\"小于 <\",\"左边的操作数小于右边的操作数返回 true\",\"a < b1 < 2\",\"小于等于 <=\",\"左边的操作数小于或等于右边的操作数返回 true\",\"a <= bb <= 5\"]},\"1202\":{\"h\":\"等值运算符\",\"t\":[\"运算符\",\"描述\",\"返回 true 的示例\",\"等于 ==\",\"如果两边操作数相等时返回 true\",\"a == 1'1' == 21 == '1'\",\"不等于 !=\",\"如果两边操作数不相等时返回 true\",\"a != 2b != '1'\",\"全等 ===\",\"两边操作数相等且类型相同时返回 true\",\"a === 1\",\"不全等 !==\",\"两边操作数不相等或类型不同时返回 true\",\"a !== '1'1 !== '1'\"]},\"1203\":{\"h\":\"抽象相等比较算法\",\"t\":[\"若 Type(x) 与 Type(y) 相同，则 \",\"若 Type(x) 为 Undefined，返回 true\",\"若 Type(x) 为 Null，返回 true\",\"若 Type(x) 为 Number，则 \",\"若 x 为 NaN，返回 false\",\"若 y 为 NaN，返回 false\",\"若 x 与 y 为相等数值，返回 true\",\"若 x 为 +0 且 y 为 -0，返回 true\",\"若 x 为 -0 且 y 为 +0，返回 true\",\"返回 false\",\"若 Type(x) 为 String\",\"当 x 和 y 为完全相同的字符序列（长度相等且相同字符在相同位置）时返回 true\",\"否则，返回 false\",\"若 Type(x) 为 Boolean\",\"当 x 和 y 为同为 true 或者同为 false 时返回 true\",\"否则，返回 false\",\"当 x 和 y 为引用用一对象时返回 true。否则，返回 false。\",\"若 x 为 null 且 y 为 undefined，返回 true\",\"若 x 为 undefined 且 y 为 null，返回 true\",\"若 Type(x) 为 Number 且 Type(y) 为 String，返回比较 x == ToNumber(y) 的结果\",\"若 Type(x) 为 String 且 Type(y) 为 Number，返回比较 ToNumber(x) == y 的结果\",\"若 Type(x) 为 Boolean，返回比较 ToNumber(x) == y 的结果\",\"若 Type(y) 为 Boolean，返回比较 x == ToNumber(y) 的结果\",\"若 Type(x) 为 String 或 Number，且 Type(y) 为 Object，返回比较 x == ToPrimitive(y) 的结果\",\"若 Type(x) 为 Object 且 Type(y) 为 String 或 Number，返回比较 ToPrimitive(x) == y 的结果\",\"返回 false\",\"按以上相等之定义：\",\"字符串比较可以按这种方式强制执行：'' + a == '' + b\",\"数值比较可以按这种方式强制执行：+a == +b\",\"布尔值比较可以按这种方式强制执行：!a == !b\",\"等值比较操作保证以下不变：\",\"A !== B 等价于 !(A == B)\",\"A == B 等价于 B == A，除了 A 与 B 的执行顺序。\",\"相等运算符不总是传递的。例如，两个不同的 String 对象，都表示相同的字符串值；== 运算符认为每个 String 对象都与字符串值相等，但是两个字符串对象互不相等。\",\"new String('a') == 'a' 和 'a' == new String('a') 皆为 true\",\"new String('a') == new String('a') 为 false\",\"字符串比较使用的方式是简单地检测字符编码单元序列是否相同。不会做更复杂的、基于语义的字符或者字符串相等的定义以及 Unicode 规范中定义的 Collating Order。所以 Unicode 标准中认为相等的 String 值可能被检测为不等。实际上这一算法认为两个字符串已经是经过规范化的形式。\"]},\"1204\":{\"h\":\"引用数据类型间比较\",\"t\":[\"const a = function() {}; const b = function() {}; console.log(a === b); // false console.log([] === []); // false console.log({} === {}); // false\",\"当我们访问引用数据类型（对象、数组、函数等等）的值时，首先从栈中获得该对象的 地址指针，然后再从 堆内存 中取得所需的数据。\",\"变量 a 实际保存的是指向堆内存中对象的一个指针，而变量 b 保存的是指向堆内存中的另一个对象的指针，虽然这两个对象的值时一样的，但它们是独立的两个对象，占了两份内存空间，所以它们互不相等。\",\"而当将一个为引用数据类型的值的变量赋值给另一个变量时，即拷贝了前者的内存空间的地址指针，因此它们都指向堆内存中同一个对象。\",\"let x = {} let y = x console.log(x === y) // true\"]},\"1205\":{\"c\":[\"前端技术\"]},\"1206\":{\"c\":[\"JavaScript\"]},\"1207\":{\"h\":\"算术运算符\",\"t\":[\"算术运算符使用数值（字面量或者变量）作为操作数进行运算并返回一个数值。\",\"标准的算术运算符就是加减乘除 +、-、* 和 /。\",\"当操作数是浮点数时，这些运算符表现得跟它们在大多数编程语言中一样（特殊要注意的是，除零会产生 Infinity ）。\",\"运算符\",\"描述\",\"示例\",\"+\",\"加法\",\"1 + 1 = 2\",\"-\",\"减法\",\"2 - 1 = 1\",\"*\",\"乘法\",\"3 * 3 = 9\",\"/\",\"除法\",\"10 / 5 = 2\",\"%\",\"求余，返回相除后余值\",\"12 % 5 = 2\",\"++\",\"自增（更新运算符），分为前自增和后自增\",\"具体参考 更新运算符\",\"--\",\"自减（更新运算符），分为前自减和后自减\",\"具体参考 更新运算符\",\"-\",\"一元负值符，返回操作数的负值\",\"-\",\"+\",\"一元正值符，若操作数在操作前非数字类型，将试图将其转换成数字类型\",\"+foo\",\"**\",\"指数运算符，计算 base（底数） 的 exponent（指数）次方\",\"2 ** 3 = 8\"]},\"1208\":{\"h\":\"实践示例\",\"t\":[\"console.log(-9 % 2) // -1 console.log(1 + -+(+(+-+1))) // 2\"]},\"1209\":{\"h\":\"实现指数运算符\",\"t\":[\"function calculateExponent(base, exponent) { if (exponent === 1) { return base } else { return base * calculateExponent(base, exponent - 1) } }\"]},\"1210\":{\"c\":[\"前端技术\"]},\"1211\":{\"c\":[\"JavaScript\"]},\"1212\":{\"h\":\"解构赋值\",\"t\":[\"解构赋值（Destructing）语法是一个 JavaScript 表达式，这使得可以将 值从数组 或 属性从对象 提取到不同的变量中。\"]},\"1213\":{\"h\":\"数组的解构赋值\",\"t\":[\"var foo = [1, 2, 3]; // 不使用解构 var one = foo[0]; var two = foo[1]; var three = foo[2]; // 使用解构 var [one, two, three] = foo;\",\"上面代码表示，可以从数组中提取值，按照对应位置对应变量赋值。\",\"本质上，这种写法属于 模式匹配，只要等号两边的模式相同，左边的变量就会被赋予对应的值。\"]},\"1214\":{\"h\":\"基本用法\",\"t\":[\"下面是一些使用嵌套数组进行结构的例子。\",\"let [foo, [[bar], baz]] = [1, [[2], 3]]; foo; // 1 bar; // 2 baz; // 3 let [, , third] = [\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]; third; // \\\"baz\\\" let [x, y] = [1, 2, 3]; x; // 1 y; // 2 let [head, ...tail] = [1, 2, 3, 4]; head; // 1 tail; // [2, 3, 4] let [x, y, ...z] = [\\\"a\\\"]; x; // \\\"a\\\" y; // undefined z; // []\"]},\"1215\":{\"h\":\"解构不成功\",\"t\":[\"如果解构不成功，变量的值就等于 undefined。\",\"let [foo] = []; let [bar, foo] = [1];\"]},\"1216\":{\"h\":\"不完全解构\",\"t\":[\"即等号左边的模式只匹配一部分的等号右边的数组。\",\"let [x, y] = [1, 2, 3]; x; // 1 y; // 2 let [a, [b], d] = [1, [2, 3], 4]; a; // 1 b; // 2 d; // 4\",\"[!warning] 如果等号右边不是数组（或者严格来说不是可遍历的结构），那么将会报错\"]},\"1217\":{\"h\":\"默认值\",\"t\":[\"解构赋值允许指定默认值。\",\"let [foo = true] = []; foo; // true let [x, y = \\\"b\\\"] = [\\\"a\\\"]; // x = 'a', y = 'b' let [x, y = \\\"b\\\"] = [\\\"a\\\", undefined]; // x = 'a', y = 'b'\",\"ES6 內部使用严格相等运算符（===）判断一个位置是否有值。所以，如果一个数组成员不严格等于 undefined ，默认值是不会生效的。\",\"let [x = 1] = [undefined]; x; // 1 let [x = 1] = [null]; x; // null\",\"上面的代码中，如果一个数组成员是 null ，默认值就不会生效，因为 null 不严格等于 undefined。\",\"如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到时才会求值。\",\"function f() { console.log(\\\"aaa\\\"); } let [x = f()] = [1];\",\"上面的代码中，因为 x 能取到值，所以函数 f 根本不会执行。上面的代码其实等价于下面的代码\",\"let x; if ([1][0] === undefined) { x = f(); } else { x = [1][0]; }\",\"默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\",\"let [x = 1, y = x] = []; // x = 1, y = 1 let [x = 1, y = x] = [2]; // x = 2, y = 2 let [x = 1, y = x] = [1, 2]; // x = 1, y = 2 let [x = y, y = 1] = []; // ReferenceError\",\"上面最后一个表达式之所以会报错，是因为 x 用到默认值 y 时，y 还没有声明。\"]},\"1218\":{\"h\":\"对象的解构赋值\",\"t\":[\"解构不仅可以用于数组，还可以用于对象。\",\"let { foo, bar } = { foo: \\\"aaa\\\", bar: \\\"bbb\\\" }; foo; // 'aaa' bar; // 'bbb'\",\"对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值是由它的位置决定的；而对象的属性没有次序，变量必须与属性同名才能取到正确的值。\",\"let { bar, foo } = { foo: \\\"aaa\\\", bar: \\\"bbb\\\" }; foo; // 'aaa' bar; // 'bbb' let { baz } = { foo: \\\"aaa\\\", bar: \\\"bbb\\\" }; baz; // undefined\",\"上面代码的第一个例子中，等号左边的两个变量的次序与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于 undefined。\",\"如果变量名与属性名不一致，必须写成下面这样。\",\"var { foo: baz } = { foo: \\\"aaa\\\", bar: \\\"bbb\\\" }; baz; // 'aaa' let obj = { first: \\\"hello\\\", last: \\\"world\\\" }; let { first: f, last: l } = obj; f; // 'hello' l; // 'world'\",\"实际上说明，对象的解构赋值时下面形式的简写。\",\"let { foo: foo, bar: bar } = { foo: \\\"aaa\\\", bar: \\\"bbb\\\" };\",\"也就是说，对象的解构赋值的内部机制是先找到同名属性，然后再赋值给对应的变量。真正被赋值的是后者，而不是前者。\",\"let { foo: baz } = { foo: \\\"aaa\\\", bar: \\\"bbb\\\" }; baz; // 'aaa' foo; // error: foo is not defined\",\"上面的代码中，foo 是匹配的模式，baz 才是变量。真正被赋值的是变量 baz，而不是模式 foo。\",\"与数组一样，解构也可以用于嵌套解构的对象。\",\"let obj = { p: [\\\"Hello\\\", { y: \\\"World\\\" }], }; let { p: [x, { y }], } = obj; x; // 'Hello' y; // 'World'\",\"注意，这时 p 是模式，不是变量，因此不会被赋值。如果 p 也要作为变量赋值，可以写成下面这样。\",\"let obj = { p: [\\\"Hello\\\", { y: \\\"World\\\" }], }; let { p, p: [x, { y }], } = obj; x; // 'Hello' y; // 'World' p; // ['Hello', { y: 'World'}]\",\"下面是另一个例子\",\"var node = { loc: { start: { line: 1, column: 5, }, }, }; var { loc, loc: { start }, loc: { start: { line }, }, } = node; line; // 1 loc; // Object { start: Object } start; // Object { line: 1, column: 5}\",\"上面的代码有三次解构赋值，分别是对 loc 、start、line 三个属性的解构赋值。需要注意的是，最后一个对 line 属性的解构赋值之中，只有 line 是变量，loc 和 start 都是模式，不是变量。\",\"下面是嵌套赋值的例子。\",\"let obj = {}; let arr = []; ({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true }); obj; // { prop: 123 } arr; // [true]\",\"对象的解构也可以指定默认值。\",\"var { x = 3 } = {}; x; // 3 var { x, y = 5 } = { x: 1 }; x; // 1 y; // 5 var { x: y = 3 } = {}; y; // 3 var { x: y = 3 } = { x: 5 }; y; // 5 var { message: msg = \\\"Something went wrong\\\" } = {}; msg; // 'Something went wrong'\",\"默认值生效的条件是，对象的属性值严格等于 undefined。\",\"var { x = 3 } = { x: undefined }; x; // 3 var { x = 3 } = { x: null }; x; // null\",\"上面的代码中，如果 x 属性等于 null，就不严格等于 undefined，导致默认值不会生效。\",\"如果解构失败，变量的值等于 undefined。\",\"let { foo } = { bar: \\\"baz\\\" }; foo; // undefined\",\"如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\",\"// 报错 let { foo: { bar }, } = { baz: \\\"baz\\\" };\",\"上面的代码中，等号左边对象的 foo 属性对应一个子对象。该子对象的 bar 属性再解构时会报错。原因很简单，因为 foo 此时等于 undefined，再取子属性就会报错，请看下面的代码。\",\"let _tmp = { baz: \\\"baz\\\" }; _tmp.foo.bar; // 报错\",\"如果要將一个已经声明的变量用于解构赋值，必须非常小心。\",\"// 错误的写法 let x; {x} = {x： 1}； // SyntaxError: syntax error\",\"上面代码的写法会报错，因为 JavaScript 引擎会将 {x} 理解成一个代码块，从而发生语错误，只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\",\"// 正确的写法 let x; ({ x } = { X: 1 });\",\"上面的代码将整个解构赋值语句放在一个圆括号里面，这样就可以正确执行。关于圆括号与解构赋值的关系。\",\"解构赋值允许等号左边的模式之中不放置任何变量名。因此，可以写出非常古怪的父之表达式。\",\"({} = [true, false]); ({} = \\\"abc\\\"); ({} = []);\",\"上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\",\"对象的解构赋值可以很方便地将现有现象的方法赋值到某个变量。\",\"let { log, sin, cos } = Math;\",\"上面的代码将 Math 对象的对数、正弦、余弦三个方法赋值到对应的变量上，使用起来就会方便很多。\",\"由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\",\"let arr = [1, 2, 3]; let { 0: first, [arr.length - 1]: last } = arr; first; // 1 last; // 3\",\"上面的代码对数组进行对象解构。数组 arr 的 0 键对应的值是 1，[arr.length - 1] 就是 2 键，对应的值 3。方括号这种写法属于 属性名表达式。\"]},\"1219\":{\"h\":\"字符串的解构赋值\",\"t\":[\"字符串也可以解构赋值，这是因为此时字符串被转换成了一个类似数组的对象。\",\"const [a, b, c, d, e] = \\\"hello\\\"; a; // 'h' b; // 'e' c; // 'l' d; // 'l' e; // 'o'\",\"类似数组的对象都有一个 length 属性，因此还可以对这个属性进行解构赋值\",\"let { length: len } = \\\"hello\\\"; len; // 5\"]},\"1220\":{\"h\":\"数值和布尔值的解构赋值\",\"t\":[\"解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\",\"let { toString: s } = 123; s === Number.prototype.toString; // true let { toString: s } = true; s === Boolean.prototype.toString; // true\",\"上面的代码中，数值和布尔值的包装对象都有 toString 属性，因此变量 s 都能取到值。\",\"解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于 undefined 和 null 无法转为对象，所以对它们进行解构赋值时都会报错。\",\"let { prop: x } = undefined; // TypeError let { prop: y } = null; // TypeError\"]},\"1221\":{\"h\":\"函数参数的解构赋值\",\"t\":[\"函数的参数也可以使用解构赋值。\",\"function add([x, y]) { return x + y; } add([1, 2]); // 3\",\"上面的代码中，函数 add 的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量 x 和 y。对于函数内部的代码来说，它们能感受到的参数就是 x 和 y。\",\"下面是另一个例子。\",\"[ [1, 2], [3, 4], ].map(([a, b]) => a + b); // [3, 7]\",\"函数参数的解构也可以使用默认值。\",\"function move({ x = 0, y = 0 } = {}) { return [x, y]; } move({ x: 3, y: 8 }); // [3, 8] move({ x: 3 }); // [3, 0] move({}); // [0, 0] move(); // [0, 0]\",\"上面的代码中，函数 move 的参数是一个对象，通过对这个对象进行解构，得到变量 x 和 y 的值。如果解构失败，x 和 y 等于默认值。\",\"注意，下面写法会得到不一样的结果。\",\"function move({ x, y } = { x: 0, y: 0 }) { return [x, y]; } move({ x: 3, y: 8 }); // [3, 8] move({ x: 3 }); // [3, undefined] move({}); // [undefined, undefined] move(); // [0, 0]\",\"上面的代码是为函数 move 的参数指定默认值，而不是为变量 x 和 y 指定默认值，所以会得到与前一种写法不同的结果。\",\"undefined 就会触发函数参数的默认值。\",\"[1, undefined, 3].map((x = \\\"yes\\\") => x); // [1, 'yes', 3]\"]},\"1222\":{\"h\":\"圆括号问题\",\"t\":[\"解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\",\"由此带来的问题是，如果模式中出现圆括号该怎么处理？ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\",\"但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此建议，只要有可能，就不要在模式中放置圆括号。\"]},\"1223\":{\"h\":\"不能使用圆括号的情况\"},\"1224\":{\"h\":\"变量声明语句\",\"t\":[\"// 全部报错 let [(a)] = [1]; let {x: (c)} = {}; let ({x: c}) = {}; let {(x: c)} = {}; let {(x): c} = {}; let { o: ({ p: p }) } = { o: { p: 2 } }\",\"上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\"]},\"1225\":{\"h\":\"函数参数\",\"t\":[\"函数参数也属于变量声明，因此不能使用圆括号。\",\"// 报错 function f([(z)]) { return z; } // 报错 function f([z, (x)]) { return x; }\"]},\"1226\":{\"h\":\"赋值语句的模式\",\"t\":[\"// 全部报错 ({ p: a } = { p: 42 }); [a] = [5];\",\"上面的代码将一部分模式放在圆括号之中，导致报错。\",\"// 报错 [{ p: a }, { x: c }] = [{}, {}];\",\"上面的代码将一部分模式放在圆括号之中，导致报错。\"]},\"1227\":{\"h\":\"可以使用圆括号的情况\",\"t\":[\"可以使用圆括号的情况只有一种：赋值语句的非模式部分可以使用圆括号。\",\"[b] = [3]; // 正确 ({ p: d } = {}); // 正确 [parseInt.prop] = [3]; // 正确\"]},\"1228\":{\"h\":\"用途\"},\"1229\":{\"h\":\"交换变量的值\",\"t\":[\"let x = 1; let y = 2; [x, y] = [y, x];\",\"上面的代码交换变量 x 和 y 的值，这样的写法不仅简洁，而且易读，语义非常清晰。\"]},\"1230\":{\"h\":\"从函数返回多个值\",\"t\":[\"函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便了。\",\"// 返回一个数组 function example() { return [1, 2, 3]; } let [a, b, c] = example(); // 返回一个对象 function example() { return { foo: 1, bar: 2, }; } let { foo, bar } = example();\"]},\"1231\":{\"h\":\"函数参数的定义\",\"t\":[\"解构赋值可以方便地将一组参数与变量名对应起来。\",\"// 参数是一组有次序的值 function f({x, y, z}) { ... } f([1, 2, 3]); // 参数是一组无次序的值 function f({x, y, z}) {...} f({z: 3, y: 2, x: 1});\"]},\"1232\":{\"h\":\"提取 JSON 数据\",\"t\":[\"解构赋值对提取 JSON 对象中的数据尤其有用。\",\"let jsonData = { id: 42, status: \\\"ok\\\", data: [867, 3509], }; let { id, status, data: number } = jsonData; console.log(id, status, number); // 42, \\\"ok\\\", [867, 5309]\",\"上面的代码可以快速提取 JSON 数据的值。\"]},\"1233\":{\"h\":\"函数参数的默认值\",\"t\":[\"jQuery.ajax = function ( url, { async = true, beforeSend = function () {}, cache = true, complete = function () {}, crossDomain = false, global = ture, // ... more config } ) { // ... do stuff };\",\"指定参数的默认值，这样就避免了在函数体内部再写 var foo = config.foo || 'default foo'; 这样的语句。\"]},\"1234\":{\"h\":\"遍历 Map 结构\",\"t\":[\"任何部署了 Iterator 接口的对象都可以用 for...of 循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值获取键名和键值就非常方便。\",\"var map = new Map(); map.set(\\\"first\\\", \\\"hello\\\"); map.set(\\\"second\\\", \\\"world!\\\"); for (let [key, value] of map) { console.log(ket + \\\" is \\\" + value); } // first is hello // second is world\",\"如果只想获取键名，或者只想获取键值，可以写成下面这样。\",\"// 获取键名 for (let [key] of map) { // ... } // 获取键值 for (let [, value] of map) { // ... }\"]},\"1235\":{\"h\":\"加入模块的指定方法\",\"t\":[\"加载模块时，往往需要指定输入的方法。解构赋值使得输入语句非常清晰。\",\"const { SourceMapConsumer, SourceNode } = require(\\\"source-map\\\");\"]},\"1236\":{\"c\":[\"前端技术\"]},\"1237\":{\"c\":[\"JavaScript\"]},\"1238\":{\"h\":\"赋值运算符\",\"t\":[\"一个 赋值运算符（assignment operator）将它右边操作数的值赋给它左边的操作数。\",\"下列为 ECMAScript 标准规范的 Assignment Operator：\",\"* = /= %= += -= <<= >>= >>>= &= ^= |= **=\",\"运算名称\",\"简写的操作符\",\"分解含义\",\"符号\",\"赋值\",\"x = y\",\"x = y\",\"=\",\"加法赋值\",\"x += y\",\"x = x + y\",\"+=\",\"减法赋值\",\"x -= y\",\"x = x - y\",\"-=\",\"乘法赋值\",\"x *= y\",\"x = x * y\",\"*=\",\"除法赋值\",\"x /= y\",\"x = x / y\",\"/=\",\"求余赋值\",\"x %= y\",\"x = x % y\",\"%=\",\"求幂赋值\",\"x ** y\",\"x = x ** y\",\"**\",\"左移位赋值\",\"x <<= y\",\"x = x << y\",\"<<=\",\"右移位赋值\",\"x >>= y\",\"x = x >> y\",\">>=\",\"无符号右移位赋值\",\"x >>>= y\",\"x = x >>> y\",\">>>=\",\"按位与赋值\",\"x & y\",\"x = x & y\",\"&\",\"按位异赋值\",\"x ^= y\",\"x = x ^ y\",\"^=\",\"按位或赋值\",\"x |= y\",\"x = x | y \",\"|y\"]},\"1239\":{\"c\":[\"前端技术\"]},\"1240\":{\"c\":[\"JavaScript\"]},\"1241\":{\"h\":\"运算符优先级\",\"t\":[\"运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。\"]},\"1242\":{\"h\":\"结合性\",\"t\":[\"结合性决定了拥有相同优先级的运算符的执行顺序。考虑下面这个表达式：\",\"a OP b OP c\",\"左结合（左到右）相当于把左边的子表达式加上小括号 (a OP b) OP c\",\"右关联（右到左）相当于 a OP (b OP c)\",\"赋值运算符是右关联的，所以你可以这么写：\",\"a = b = 5;\",\"结果：a 和 b 的值都会成为 5。这是因为赋值运算符的返回结果就是赋值运算符右边的那个值，具体过程是：b 被赋值为 5，然后 a 也被赋值为 b = 5 的返回值，也就是 5。\"]},\"1243\":{\"h\":\"汇总表\",\"t\":[\"以下示例中使用 foo 和 bar 作为演示变量或表达式。\",\"优先级\",\"运算类型\",\"关联性\",\"运算符示例\",\"20\",\"分组表达式\",\"N/A\",\"(foo)\",\"19\",\"属性访问器\",\"从左到右\",\"foo.bar\",\"属性访问器\",\"从左到右\",\"foo[bar]\",\"实例化对象（带参数列表）\",\"N/A\",\"new Foo(bar)\",\"函数调用\",\"从左到右\",\"foo()\",\"18\",\"实例化对象（无参数列表）\",\"从左到右\",\"new Foo\",\"17\",\"更新表达式（后置递增）\",\"N/A\",\"foo++\",\"更新表达式（后置递减）\",\"N/A\",\"foo--\",\"16\",\"逻辑运算符（逻辑非）\",\"从右到左\",\"!foo\",\"按位非\",\"~foo\",\"一元加法\",\"+foo\",\"一元减法\",\"-foo\",\"更新表达式（前置递增）\",\"++foo\",\"更新表达式（前置递减）\",\"--foo\",\"typeof\",\"typeof foo\",\"void\",\"void foo\",\"delete\",\"delete foo\",\"await\",\"await foo\",\"15\",\"算术运算符（幂）\",\"从右到左\",\"foo ** bar\",\"14\",\"算术运算符（乘法）\",\"从左到右\",\"foo * bar\",\"算术运算符（除法）\",\"foo / bar\",\"算术运算符（取模）\",\"foo % bar\",\"13\",\"算术运算符（加法）\",\"从左到右\",\"foo + bar\",\"算术运算符（减法）\",\"foo - bar\",\"12\",\"按位左移\",\"从左到右\",\"foo << bar\",\"按位右移\",\"foo >> bar\",\"无符号右移\",\"... >>> bar\",\"11\",\"小于\",\"从左到右\",\"foo < bar\",\"小于等于\",\"foo <= bar\",\"大于\",\"foo > bar\",\"大于等于\",\"foo >= bar\",\"in\",\"foo in bar\",\"instanceof\",\"foo instance bar\",\"10\",\"等号\",\"从左到右\",\"foo == bar\",\"非等号\",\"foo !== bar\",\"全等号\",\"foo === bar\",\"非全等号\",\"foo !== bar\",\"9\",\"按位与\",\"从左到右\",\"foo & bar\",\"8\",\"按位异或\",\"从左到右\",\"foo ^ bar\",\"7\",\"按位或\",\"从左到右\",\"foo | bar\",\"6\",\"逻辑运算符（逻辑与）\",\"从左到右\",\"foo && bar\",\"5\",\"逻辑运算符（逻辑或）\",\"从左到右\",\"foo || bar\",\"4\",\"条件运算符\",\"从右到左\",\"foo ? foo : bar\",\"3\",\"赋值运算符\",\"从右到左\",\"foo = bar\",\"赋值运算符\",\"foo += bar\",\"赋值运算符\",\"foo -= bar\",\"赋值运算符\",\"foo *= bar\",\"赋值运算符\",\"foo /= bar\",\"赋值运算符\",\"foo %= bar\",\"赋值运算符\",\"foo <<= bar\",\"赋值运算符\",\"foo >>= bar\",\"赋值运算符\",\"foo >>>= bar\",\"赋值运算符\",\"foo &= bar\",\"赋值运算符\",\"foo ^= bar\",\"赋值运算符\",\"foo |= bar\",\"2\",\"yield\",\"从右到左\",\"yield foo\",\"yield*\",\"yield* foo\",\"1\",\"扩展运算符\",\"N/A\",\"...foo\",\"0\",\"逗号运算符\",\"从左到右\",\"foo, bar\"]},\"1244\":{\"c\":[\"前端技术\"]},\"1245\":{\"c\":[\"JavaScript\"]},\"1246\":{\"h\":\"逗号运算符\",\"t\":[\"逗号运算符 是 二元运算符，它的操作数可以是任意类型。\",\"它首先计算左操作数，然后计算右操作数，最后返回右操作数的值，用逗号运算符可以在一条语句中执行多个运算。\",\"(x = 0), (y = 1), (z = 2); // 计算结果是 2，它和下面的代码基本等价 x = 0; y = 1; z = 2;\"]},\"1247\":{\"h\":\"用法\"},\"1248\":{\"h\":\"用于声明多个变量\",\"t\":[\"var a = 1, b = 2, c = 3; let x, y, z;\",\"逗号运算符最常用的场景是在 for 循环中，这个 for 循环通常具有多个循环变量：\",\"// for 循环中的第一个逗号是 var 语句的一部分 // 第二个逗号是逗号运算符 // 它将两个表达式(i++和j--)放在一条语句中 for (var i = 0, j = 10; i < j; i++, j--) { console.log(i + j); }\"]},\"1249\":{\"h\":\"用于赋值\",\"t\":[\"逗号运算符还可以用于赋值，在用于赋值时，逗号运算符总是返回表达式中的最后一项。\",\"var foo = (1, 2, 3, 4, 5); // 去掉括号会报错 console.log(foo); // 5\"]},\"1250\":{\"c\":[\"前端技术\"]},\"1251\":{\"c\":[\"JavaScript\"]},\"1252\":{\"h\":\"逻辑运算符\",\"t\":[\"逻辑运算符常用于对操作数进行布尔运算，经常和关系运算符一样配合使用。逻辑运算符将多个关系表达式组合起来组成一个更复杂的表达式。逻辑运算符分为逻辑与 && 、逻辑或 || 、逻辑非 ! 三种。\"]},\"1253\":{\"h\":\"逻辑与\",\"t\":[\"逻辑与运算符 由两个和号 && 表示，有两个操作数，只有在两个操作数都为 true 时，结果才返回 true，否则返回 false。\",\"逻辑与的真值表\",\"第一个操作数\",\"第二个操作数\",\"结果\",\"true\",\"true\",\"true\",\"true\",\"false\",\"false\",\"false\",\"true\",\"false\",\"false\",\"false\",\"false\",\"逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值。\",\"[!warning] 逻辑与操作属于 短路操作，如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值。\",\"对于逻辑与而言：\",\"如果第一个操作数是 false，则无论第二个操作数是什么值，结果都是 false，则返回第一个操作数\",\"如果第一个操作数为 true，则结果的真假和第二个操作数的真假相同，则返回第二个操作数\",\"在 JaavScript 的世界中：\",\"除了 false、undefined、null、+0、-0、NaN、'' ，其余都是真值。\",\"示例:\",\"var a = true && true; // true var b = true && false; // false var c = false && true; // false var d = false && 3 == 4; // false var e = \\\"Cat\\\" && \\\"Dog\\\"; // 'Dog' var f = false && \\\"Cat\\\"; // false var g = \\\"Cat\\\" && false; // false\",\"逻辑与运算符可以多个连用，返回第一个布尔值为 false 的表达式的值。\",\"console.log(true && \\\"foo\\\" && \\\"\\\" && 4 && \\\"foo\\\" && true); // ''\",\"可以使用逻辑与运算符来取代 if-else 结构\",\"if (a == b) { doSomething(); } // 等价于 a == b && doSomething();\",\"或者：\",\"// 判断对象是否存在再取值 const foo = a && a.b;\",\"逻辑与运算符常常用于回调函数使用中\",\"若没有给参数 a 传值，则 a 为默认的 undefined，是假值，所以不执行 a()，防止报错，如果给参数 a 传值，则执行函数 a()。\",\"function fn(a) { if (a) { a(); } } //等价于 function fn(a) { a && a(); }\"]},\"1254\":{\"h\":\"逻辑或\",\"t\":[\"逻辑或运算符 由两个竖线( || )表示，有两个操作数，只有在两个操作数都是 false 时，结果才返回 false，否则返回 true。\",\"逻辑或( || )的真值表\",\"第一个操作数\",\"第二个操作数\",\"结果\",\"true\",\"true\",\"true\",\"true\",\"false\",\"true\",\"false\",\"true\",\"true\",\"false\",\"false\",\"false\",\"同样地，逻辑或操作也可以应用于任何类型的操作数，而不仅仅是布尔值。如果其中一个操作数不是布尔值，则逻辑或操作不一定返回布尔值。\",\"逻辑或操作也属于短路操作，如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值。\",\"对于逻辑或而言，如果第一个操作数是 true，则无论第二个操作数是什么值，结果都是 true，则返回第一个操作数；如果第一个操作数是 false，则结果的真假和第二个操作数的真假相同，则返回第二个操作数。\",\"var a = true || true; // true var b = false || true; // true var c = true || false; // true var d = false || 3 == 4; // false var e = \\\"Cat\\\" || \\\"Dog\\\"; // Cat var f = false || \\\"Cat\\\"; // Cat var g = \\\"Cat\\\" || false; // Cat\",\"同样地，逻辑或运算符也可以多个连用，返回第一个布尔值为 true 的表达式的值。\",\"console.log(false || 0 || \\\"\\\" || 4 || \\\"foo\\\" || true); // 4\",\"逻辑或运算符常用于为变量设置默认值\",\"// 如果没有向参数 p 传入任何对象，则将该参数默认设置为空对象 function fn(p) { p = p || {}; }\"]},\"1255\":{\"h\":\"逻辑非\",\"t\":[\"逻辑非操作符 由一个叹号( ! )表示，可以应用于 ECMAScript 中的任何值。无论这个值是什么数据类型，这个操作符都会返回一个布尔值。逻辑非操作符首先会将它的操作数转换成一个布尔值，然后再对其求反。\",\"console.log(!null); // true console.log(!undefined); // true console.log(!0); // true console.log(!NaN); // true console.log(!\\\"\\\"); // true console.log(!\\\"123\\\"); // false console.log(!Infinity); // false console.log(!{ a: 1 }); // false\",\"逻辑非对操作数转为布尔类型的转换类型与 Boolean() 转型函数相同，只不过最后再将其结果取反。而如果同时使用两个逻辑非操作符，实际上就会模拟 Boolean() 转型函数的行为。\",\"console.log(!!undefined); // false console.log(!!null); // false console.log(!!0); // false console.log(!!-0); // false console.log(!!NaN); // false console.log(!!\\\"\\\"); // false console.log(!!false); // false console.log(!!{}); // true console.log(!![]); // true console.log(!!new Boolean(false)); // true console.log(!!false); // false console.log(!!new Boolean(null)); // true console.log(!!null); // false\"]},\"1256\":{\"h\":\"逻辑空\",\"t\":[\"空值合并运算符 (??) 是一个逻辑运算符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。\",\"与逻辑或运算符（||）不同，逻辑或运算符会在左侧操作数为假值时返回右侧操作数。也就是说，如果使用 || 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，'' 或 0）时。\",\"const foo = null ?? 'default string'; console.log(foo); // \\\"default string\\\" const baz = 0 ?? 42; console.log(baz); // 0\"]},\"1257\":{\"c\":[\"前端技术\"]},\"1258\":{\"c\":[\"JavaScript\"]},\"1259\":{\"h\":\"内存模型\",\"t\":[\"JavaScript 内存空间分为 栈（Stack）、堆（Heap）、池（一般也会归类为栈中）。其中 栈 存放变量，堆 存放复杂对象，池 存放常量。\"]},\"1260\":{\"h\":\"栈数据结构\",\"t\":[\"与 C / C++ 不同，JavaScript 中并没有严格意义上区分栈内存与堆内存。因此我们可以简单粗暴的理解为 JavaScript 的所有数据都保存在堆内存中。但是在某些场景，我们仍然需要基于堆栈数据结构的思维来实现一些功能，比如 JavaScript 的 执行上下文。执行上下文的执行顺序借用了栈数据结构的存取方式。\",\"要简单理解栈的存取方式，我们可以通过类比乒乓球盒子来分析。\",\"这种乒乓球的存放方式与栈中存取数据的方式如出一辙。处于盒子中最顶层的 乒乓球 5，它一定是最后被放进去，但可以最先被使用。而我们想要使用底层的 乒乓球 1，就必须将上面的 4 个乒乓球取出来，让 乒乓球 1 处于盒子顶层。这就是栈空间 先进后出，后进先出 的特点。图中已经详细的表明了栈空间的存储原理。\"]},\"1261\":{\"h\":\"堆数据结构\",\"t\":[\"堆数据结构是一种树状结构。它的存取数据的方式，则与书架与书非常相似。\",\"书虽然也整齐的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在 JSON 格式的数据中，我们存储的 key-value 是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。\"]},\"1262\":{\"h\":\"队列数据结构\",\"t\":[\"队列是一种先进先出（FIFO）的数据结构。正如排队过安检一样，排在队伍前面的人一定是最先过检的人。用以下的图示可以清楚的理解队列的原理。\"]},\"1263\":{\"h\":\"变量对象与基础数据类型\",\"t\":[\"JavaScript 的 执行上下文 生成之后，会创建一个叫做 变量对象 的特殊对象，JavaScript 的基础数据类型往往都会保存在变量对象中。\",\"严格意义上来说，变量对象也是存放于堆内存中，但是由于变量对象的特殊职能，我们在理解时仍然需要将其与堆内存区分开来。\",\"JavaScript 中的基础数据类型，这些值都有固定的大小，往往都保存在栈内存中（闭包除外），由系统自动分配存储空间。我们可以直接操作保存在栈内存空间的值，因此基础数据类型都是按值访问，数据在栈内存中的存储与使用方式类似于数据结构中的堆栈数据结构，遵循 后进先出 的原则。\",\"暂不考虑 Symbol 类型\"]},\"1264\":{\"h\":\"引用数据类型与堆内存\",\"t\":[\"与其他语言不同，JavaScript 的引用数据类型，比如数组 Array，它们值的大小是不固定的。引用数据类型的值是保存在堆内存中的对象。JavaScript 不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。这里的引用，我们可以粗浅地理解为保存在栈内存中的一个引用地址，该地址与堆内存的实际值相关联。 堆存取数据的方式，则与书架与书非常相似。 书虽然也有序的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在 JSON 格式的数据中，我们存储的 key-value 是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。\",\"为了更好的搞懂变量对象与堆内存，我们可以结合以下例子与图解进行理解。\",\"// 变量对象 var a1 = 0; // 变量对象 var a2 = 'Bingo!'; // 变量对象 var a3 = null; // 变量 b 存在于变量对象中，{m: 20} 作为对象存在于堆内存中 var b = { m: 20 }; // 变量 c 存在于变量对象中，[1, 2, 3] 作为对象存在于堆内存中 var c = [1, 2, 3];\",\"因此当我们要访问堆内存中的引用数据类型时，实际上我们首先是从变量对象中获取了该对象的 引用地址（或者地址指针），然后再从堆内存中取得我们需要的数据。\",\"理解了 JavaScript 的内存空间，我们就可以借助内存空间的特性来验证一下数据类型的特点了。\"]},\"1265\":{\"h\":\"数据拷贝\"},\"1266\":{\"h\":\"基本数据类型\",\"t\":[\"🌰 代码示例：\",\"const a = 10; const b = a; b = 20;\",\"在变量对象中数据发生拷贝操作时，系统会自动为新的变量分配一个新值。const b = a 赋值操作执行后，虽然变量 a 和变量 b 均为 100，但是它们其实已经是相互独立互不影响的值了。\",\"具体变化如下图所示：\"]},\"1267\":{\"h\":\"引用数据类型\",\"t\":[\"🌰 代码示例：\",\"const m = { a: 10, b: 20 }; const n = m; n.a = 15;\",\"引用类型的拷贝同样也会为新的变量自动分配一个新的值保存在变量对象中，但不同的是，这个新的值，仅仅只是引用类型的一个地址指针。当地址指针相同时，尽管他们相互独立，但是在变量对象中访问到的具体对象实际上是同一个。\"]},\"1268\":{\"h\":\"总结\",\"t\":[\"栈内存\",\"堆内存\",\"存储基础数据类型\",\"存储引用数据类型\",\"按值访问\",\"按引用访问\",\"存储的值大小固定\",\"存储的值大小不定，可动态调整\",\"由系统自动分配内存空间\",\"由开发者通过代码进行分配\",\"主要用来执行程序\",\"主要用来存放对象\",\"空间小，运行效率高\",\"空间大，但是运行效率相对较低\",\"先进后出，后进先出\",\"无序存储，可根据引用直接获取\"]},\"1269\":{\"c\":[\"前端技术\"]},\"1270\":{\"c\":[\"JavaScript\"]},\"1271\":{\"h\":\"内存生命周期\",\"t\":[\"JavaScript 环境中分配的内存一般有如下生命周期：\",\"内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存\",\"内存使用：即读写内存，也就是使用变量、函数等\",\"内存回收：使用完毕，由 垃圾回收机制 自动回收不再使用的内存\",\"🌰 代码示例：\",\"// 在内存中给数值变量分配空间 var a = 20; // 使用内存 console.log(a + 80); // 使用完毕之后，释放内存空间 a = null;\"]},\"1272\":{\"h\":\"内存分配\"},\"1273\":{\"h\":\"值的初始化\",\"t\":[\"为了不让开发者费心分配内存，JavaScript 在定义变量时就完成了内存分配。\",\"// 给数值变量分配内存 var a = 123; // 给字符串分配内存 var b = 'Hello'; // 给对象及其包含的值分配内存 var c = { a: 1, b: null, }; // 给数组及其包含的值分配内存 var d = [0, null, undefined, 'Hello']; // 给函数分配内存 function e() { return 1; } // 函数表达式也能分配内存 someElement.addEventListener( 'click', function () { someElement.style.backgroundColor = 'blue'; }, false );\"]},\"1274\":{\"h\":\"函数调用分配\",\"t\":[\"函数调用结果分配对象内存。\",\"// 分配 Date 对象实例 var f = new Date(); // 分配 DOM 元素 var g = document.createElement('div');\",\"分配新变量或新对象。\",\"var s = 'bingo'; var q = s.substr(0, 3); // q 是一个新的字符串 // 因为字符串是不可变量 // JavaScript 可能决定不分配内存 // 只是存储 [0-3] 的范围 var x = ['a', 'b']; var y = ['c', 'd']; var z = x.concat(y); // 新数组有四个元素 是 x 和 y 连接的结果\"]},\"1275\":{\"h\":\"存使用\",\"t\":[\"使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。\"]},\"1276\":{\"h\":\"内存回收\",\"t\":[\"大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到所分配的内存确实已经不再需要了。它往往要求开发者来确定在程序中哪一块内存不再需要并且释放它。\",\"高级语言解释器嵌入了 垃圾回收器机制，它的主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这只能是一个近似的过程，因为要知道是否仍然需要某块内存是无法判定的（无法通过某种算法解决）。\"]},\"1277\":{\"c\":[\"前端技术\"]},\"1278\":{\"c\":[\"JavaScript\"]},\"1279\":{\"h\":\"垃圾回收\",\"t\":[\"由于字符串、对象和数组没有固定大小，所以当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript 序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript 的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。——《JavaScript 权威指南》\",\"在 C 和 C++ 之类的语言中，需要手动来管理内存的，这也是造成许多不必要问题的根源。幸运的是，在编写 JavaScript 的过程中，内存的分配以及内存的回收完全实现了自动管理。\",\"JavaScript 通过 自动垃圾收集机制 实现内存的管理。垃圾回收机制通过垃圾收集器每隔固定的时间段（周期性）找出那些不再需要继续使用的变量，执行一次释放占用内存的操作。\",\"什么是不再需要继续使用的值？\",\"不再需要继续使用的变量也就是生命周期结束的变量。\",\"局部变量：在局部作用域中，当函数执行完毕，局部变量也就没有存在的必要了（除了闭包），因此垃圾收集器很容易做出判断并回收\",\"全局变量：但是全局变量的生命周期直到浏览器卸载页面才会结束，也就是全局变量不会被当成垃圾变量回收。所以声明一个全局变量的时候，我们一定要慎重的考虑，在使用完这个变量的对象之后，我们是否还在需要这个对象，如果不需要的话，我们应该手动的将这个变量置为空（null），这样在下一次垃圾回收的时候，就能去释放这个变量上一次指向的值\"]},\"1280\":{\"h\":\"原理\",\"t\":[\"JavaScript 有两种策略实现垃圾回收机制：\",\"引用计数法\",\"标记清除法\"]},\"1281\":{\"h\":\"引用计数法\",\"t\":[\"引用计数法： 跟踪记录每个值被引用的次数，当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是 1，如果这个值再被赋值给另一个变量，则引用次数加 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减 1。当这个引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为 0 的值所占的内存。\",\"这种垃圾收集方式存在一个比较大的问题就是循环引用，就是说对象 a 包含一个指向 b 的指针，对象 b 也包含一个指向 a 的引用。 这就可能造成大量内存得不到回收，也就是内存泄漏，这是因为它们的引用次数永远不可能是 0。\",\"🌰 代码示例：\",\"function problem() { var a = new Object(); var b = new Object(); a.ref = b; b.ref = a; }\",\"浅大小（shallow size）：对象自身所存储的原生值及其他必要数据的大小。 留存大小（retained size）：对象自身的浅大小和它支配的所有对象的浅大小的总和。\",\"引用计数法无法解决循环引用问题：\",\"function fn() { var x = {}; var y = {}; x.a = y; y.a = x; }\"]},\"1282\":{\"h\":\"标记清除法\",\"t\":[\"标记清除法：当程序执行流入到一个函数中时，会创建该函数的执行上下文，执行上下文中的变量都会被标记为 进入环境，从逻辑上讲，永远不能释放 进入执行环境 变量所占用的内存。因为只要执行流进入相应的执行上下文，就可能会用到这些变量。\",\"标记清除的工作流程：\",\"垃圾收集器在运行的时候会给存储在内存的中的 所有变量都加上标记\",\"去掉 执行上下文中的变量 以及 被环境中的变量引用的变量 的标记\",\"那些 还存在标记的变量将被视为准备删除的变量\",\"最后垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间\",\"手动释放内存：\",\"let a = 1; a = null;\",\"a = null 其实仅仅只是做了一个释放引用的操作，让变量 a 原本对应的值失去引用，脱离执行环境，这个值会在下一次垃圾收集器执行操作时被找到并释放。而在适当的时候解除引用，是为页面获得更好性能的一个重要方式。\",\"JavaScript 引擎的垃圾回收机制是标记清除法，判断内存是否可回收的依据是可达性，它是对引用计数法的改良，对象间的循环引用问题不会引起回收问题，因为判断是否可回收的依据是变量是否可达。这种算法下存在一个根节点，它始终不会被回收，称为 GC Root，比如 JavaScript Runtime 的全局对象，在浏览器中叫 window 以及 DOM 树根节点都是 GC Root。程序间对象的引用关系形成了节点的图，凡事能够从 GC Root 出发，沿着引用关系可以访达的对象被标记为活跃对象，而那些和 GC Root 孤立的对象就会被回收，可以发现代码中引用数为 0 的对象一定无法从 GC Root 访达，也就是说某个对象引用计数法认为它应该被回收的话，那么标记清除法也会将其回收，但是和 GC Root 孤立的对象，它在代码中的引用数不一定是 0，比如说对象属性的循环引用，它们都不可达，且都和 GC Root 孤立，但它们的引用数不一定是 0。所以说标记清除算法可以取代引用计数算法。\"]},\"1283\":{\"h\":\"堆栈溢出\",\"t\":[\"堆栈溢出：指内存空间已经被申请完，没有足够的内存提供了。\"]},\"1284\":{\"h\":\"内存泄漏\",\"t\":[\"内存泄漏：指申请的内存执行完后没有及时的清理或者销毁，占用空闲内存，内存泄漏过多的话，就会导致后面的进程申请不到内存。因此内存泄漏会导致内部内存溢出。\",\"内存泄漏 --> 可能导致 --> 堆栈溢出\",\"在传统的编程软件中，比如 C 语言中，需要使用 malloc 来申请内存空间，再使用 free 来释放掉，需要手动清除。而 JavaScript 中有自己的垃圾回收机制，一般常用的垃圾收集方法就是标记清除法。\",\"即使 1Byte 的内存，也叫内存泄漏，并不一定是导致浏览器奔溃、卡顿才能叫内存泄漏\",\"一般是堆区内存泄漏，栈区不会泄漏。基本数据类型的值保存在栈中，引用数据类型保存在堆中。所以对象、数组等才会发生内存泄漏。\",\"常见的内存泄漏的原因：\",\"全局变量引起的内存泄漏\",\"没有被清除的定时器\",\"闭包\",\"解决方法：\",\"减少不必要的全局变量\",\"减少闭包的使用（因为闭包会导致内存泄漏）\",\"避免死循环的发生\"]},\"1285\":{\"h\":\"全局变量\",\"t\":[\"全局变量不会被当成垃圾回收，我们在编码中应该尽量避免声明全局变量。\",\"<body> <button onclick=\\\"grow()\\\">Global Var</button> <script type=\\\"text/javascript\\\"> function LargeObj() { this.largeArr = new Array(1000_0000); } var x = []; function grow() { var o = new LargeObj(); x.push(0); } </script> </body>\",\"当我们使用 默认绑定，this 会指向全局对象。\",\"🔧 解决方法： 在函数内使用严格模式或手动释放全局变量的内存。\",\"调试方式：More Tools -> Developer Tools -> Performance/Memory，一般现在 Performance 面板录制页面内存占用情况随时间变化的图像，对内存泄漏有个直观的判断，然后在 Memory 面板定位问题发生的位置\"]},\"1286\":{\"h\":\"分离的 DOM 引用\",\"t\":[\"DOM 节点的内存被回收要满足两点：DOM 节点在 DOM 树上被移除，并且代码中没有对他的引用。内存泄漏发生在节点从 DOM 上被删除了，但代码中留存着对它的 JS 引用，我们称这种为分离的 DOM 节点。\",\"实现分离的 DOM 引用的内存泄漏示例：\",\"<body> <button>移除列表</button> <ul id=\\\"list\\\"> <li>项目1</li> </ul> <script type=\\\"text/javascript\\\"> var button = document.getElementById('button'); var list = document.getElementById('list'); button.addEventListener('click', function () { list.remove(); }); </script> </body>\",\"可以通过堆快照（Heap Snapshot），调试路径 Memory -> Heap Snapshot -> Take Snapshot，堆快照可以直接告诉我们是否存在分离的 DOM 节点，只要在顶部过滤框 filter 输入 detached，如果过滤出东西，说明存在分离的 DOM 节点。\",\"对于上例，可以把 list 节点放到点击节点的回调中，这样当回调函数返回后，局部变量会被销毁。\"]},\"1287\":{\"h\":\"闭包\",\"t\":[\"闭包也会造成内存泄漏，是因为函数实例上的隐式指针会留存实例创建环境下的作用域对象。\",\"<body> <button onclick=\\\"closure()\\\">Closure</button> <script type=\\\"text/javascript\\\"> var func = []; function outer() { var someText = new Array(1000_0000); return function inner() { return someText; }; } function closure() { funcs.push(outer()); } </script> </body>\",\"[!warning] 并非该代码一定有什么问题，只是说明闭包会带来内存占用，不合理的内存占用才会被定性为内存泄漏。\",\"调试方式：More Tools -> Developer Tools -> Memory -> Allocation instrumentation on timeline。\"]},\"1288\":{\"h\":\"定时器\",\"t\":[\"当不需要 setInterval 或者 setTimeout 时，定时器没有被清除，定时器的回调函数以及内部依赖的变量都不能被回收，造成内存泄漏。\",\"const someResource = getData(); // node、someResource 存储了大量数据 无法回收 const timerId = setInterval(function () { const node = document.getElementById('Node'); if (node) { // 定时器也没有清除 node.innerHTML = JSON.stringify(someResource); } }, 1000); clearInterval(timerId);\",\"解决办法\",\"在定时器完成工作的时候，手动清除定时器。\"]},\"1289\":{\"h\":\"控制台打印\",\"t\":[\"使用 console.log 语句打印调试信息，因为控制台要始终保持他们的引用，以便随时查看，所以他们的内存也无法被回收，所以建议生产环境下去除控制台打印。\"]},\"1290\":{\"c\":[\"前端技术\"]},\"1291\":{\"c\":[\"JavaScript\"]},\"1292\":{\"h\":\"函数原型对象属性\"},\"1293\":{\"h\":\"length 属性\",\"t\":[\"在函数中，arguments 对象的 length 属性表示实参个数，而函数的 length 属性则表示函数希望接受形参个数。\",\"function sayName(name) { // do something } function sum(num1, num2) { // do something } function sayHi() { // do something } console.log(sayName.length); // Output: 1 console.log(sum.length); // Output: 2 console.log(sayHi.length); // Output: 0\"]},\"1294\":{\"h\":\"name 属性\",\"t\":[\"函数定义了一个非标准的 name 属性，通过这个属性可以访问到给定函数指定的名字，这个属性的值永远等于跟在 function 关键字后面的标识符，匿名函数的 name 属性为空。\",\"// IE11-浏览器无效，均输出undefined // chrome在处理匿名函数的name属性时有问题，会显示函数表达式的名字 function a() {} console.log(a.name); // Output: 'fn' const b = function() {}; console.log(b.name); // Output: '' 在chrome浏览器中会显示'fn' const c = function abc() {}; console.log(c.name); // Output: 'abc'\"]},\"1295\":{\"h\":\"ES6 列入标准\",\"t\":[\"ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5 的 name 属性，会返回空字符串，而 ES6 的 name 属性会返回实际的函数名。\",\"const fun = function() {}; console.log(fun.name); // ES5: '' console.log(fun.name); // ES6: 'fun'\",\"如果将一个具名函数赋值给一个变量，则 ES5 和 ES6 的 name 属性都返回这个具名函数原本的名字。\",\"const bar = function baz() {}; console.log(bar.name); // ES5: \\\"baz\\\" console.log(bar.name); // ES6: \\\"baz\\\"\"]},\"1296\":{\"h\":\"构造函数\",\"t\":[\"Function 构造函数返回的函数实例，name 属性的值为 anonymous。\",\"new Function().name; // 'anonymous'\",\"bind 返回的函数，name 属性值会加上 bound 前缀。\",\"function foo() {} console.log(foo.bind({}).name) // 'bound foo'\"]},\"1297\":{\"c\":[\"前端技术\"]},\"1298\":{\"c\":[\"JavaScript\"]},\"1299\":{\"h\":\"函数原型对象方法\"},\"1300\":{\"h\":\"apply\",\"t\":[\"apply() 函数用于调用当前函数，并可同时使用指定对象作为本次函数执行时函数内部的 this 指针引用。\"]},\"1301\":{\"h\":\"语法\",\"t\":[\"func.apply( [thisArg [, argsArray]])\"]},\"1302\":{\"h\":\"参数\",\"t\":[\"参数\",\"类型\",\"描述\",\"func\",\"Function 类型\",\"当前函数调用 apply() 函数的函数，通常为 this （函数内部执行）。\",\"thisArg\",\"可选，Object 类型\",\"执行函数时，函数内部 this 指针引用的对象。需要注意的是，使用的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象（浏览器中就是 Window 对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的包装对象。\",\"argsArray\",\"可选，Array 类型或 TypedArray 类型\",\"一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 func 函数。如果该参数的值 为 null 或 undefined，则表示不需要传入任何参数。从 ECMAScript 5 开始可以使用类数组对象。\"]},\"1303\":{\"h\":\"示例\",\"t\":[\"基本用法\",\"const a = { name: 'Cherry', func1: function(){ console.log(this.name) } func2: function(){ setTimeout(function(){ this.func1() }.apply(a), 100) } } a.func2() // Cherry\"]},\"1304\":{\"h\":\"call\",\"t\":[\"call() 函数用于调用当前函数，并可同时使用指定对象作为本次执行时函数内部的 this 指针引用。\"]},\"1305\":{\"h\":\"语法\",\"t\":[\"func.call( [thisArg [, arg1 [, arg2 [, argN...]]]] )\"]},\"1306\":{\"h\":\"参数\",\"t\":[\"参数\",\"类型\",\"描述\",\"func\",\"Function 类型\",\"当前函数调用 call() 函数的函数，通常为 this （函数内部执行）。\",\"thisArg\",\"可选，Object 类型\",\"在fun函数运行时指定的 this 值*。*需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 和 undefined 的 this 值会自动指向全局对象（浏览器中就是 Window 对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象。\",\"arg1,arg2,argN\",\"可选，Array 类型或 TypedArray 类型\",\"指定的参数列表。\"]},\"1307\":{\"h\":\"示例\",\"t\":[\"const sayName = function () { console.log(this.name); }; const peter = { name: 'peter', }; sayName.call(peter); // peter function Person1() { this.name = 'person1'; this.sayName = function () { alert(this.name); }; } function Person2() { this.name = 'person2'; } var sam = new Person2(); Person1.call(sam); sam.sayName(); // person1\"]},\"1308\":{\"h\":\"bind\",\"t\":[\"bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。\"]},\"1309\":{\"h\":\"语法\",\"t\":[\"func.bind( thisArg [, arg1 [, arg2 [, ...]]] )\"]},\"1310\":{\"h\":\"参数\",\"t\":[\"参数\",\"类型\",\"描述\",\"func\",\"Function 类型\",\"thisArg\",\"可选，Object 类型\",\"当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用 new 操作符调用绑定函数时，该参数无效。\",\"arg1,arg2,argN\",\"可选，Array类型或 TypedArray 类型\",\"当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。\"]},\"1311\":{\"h\":\"描述\",\"t\":[\"bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的 call 属性）。当新函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。一个绑定函数也能使用 new 操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。\"]},\"1312\":{\"h\":\"示例\",\"t\":[\"代码示例\",\"bind() 最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的 this 值。JavaScript 新手经常犯的一个错误是将一个方法从对象中拿出来，然后再调用，希望方法中的 this 是原来的对象（比如在回调中传入这个方法）。如果不做特殊处理的话，一般会丢失原来的对象。从原来的函数和原来的对象创建一个绑定函数，则能很漂亮地解决这个问题。\",\"this.x = 9; var module = { x: 8, getX: function () { return this.x; }, }; module.getX(); // return 8 var retrieveX = module.getX; retrieveX(); // return 9 var boundGetX = retrieveX.bind(module); boundGetX(); // return 8\",\"偏函数\",\"bind() 的另一个最简单的用法是使一个函数拥有预设的初始参数。这些参数（如果有的话）作为 bind() 的第二个参数跟在 this（或其他对象）后面，之后它们会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们的后面。\",\"function list() { return Array.prototype.slice.call(arguments); } var list1 = list(1, 2, 3); // [1, 2, 3] // Create a function with a preset leading argument var defaultsList = list.bind(undefined, 10); var list2 = defaultsList(); // [10] var list3 = defaultsList(1, 2, 3); // [10, 1, 2, 3]\",\"配合定时器\",\"在默认情况下，使用 window.setTimeout() 时，this 关键字会指向 window （或全局）对象。当使用类的方法时，需要 this 引用类的实例，你可能需要显式地把 this 绑定到回调函数以便继续使用实例。\",\"function LateBloomer() { this.petalCount = Math.ceil(Math.random() * 12) + 1; } // Declare bloom after a delay of 1 second LateBloomer.prototype.bloom = function () { window.setTimeout(this.declare.bind(this), 1000); }; LateBloomer.prototype.declare = function () { console.log('I am a beautiful flower with ' + this.petalCount + ' petals!'); }; var flower = new LateBloomer(); flower.bloom(); // 一秒钟后, 调用'declare'方法\"]},\"1313\":{\"c\":[\"前端技术\"]},\"1314\":{\"c\":[\"JavaScript\"]},\"1315\":{\"h\":\"函数存取器\"},\"1316\":{\"h\":\"取值函数\",\"t\":[\"getter 语法将对象属性绑定到查询该属性时将被调用的函数。\"]},\"1317\":{\"h\":\"语法\",\"t\":[\"{get prop() { // do something }} {get [expression]() { // do something }}\",\"参数\",\"说明\",\"prop\",\"要绑定到给定函数的属性名\",\"expression\",\"一个计算属性名的表达式\"]},\"1318\":{\"h\":\"描述\",\"t\":[\"有时需要允许访问返回动态计算值的属性，或者你可能需要反映内部变量的状态，而不需要使用显式方法调用。在 JavaScript 中，可以使用 getter 来实现。虽然可以使用 getter 和 setter 来创建一个伪属性类型，但是不可能同时将一个 getter 绑定到一个属性并且该属性实际上具有一个值。\",\"使用 get 语法时应注意以下问题：\",\"可以使用数值或字符串作为标识\",\"必须不带参数\",\"它不能与另一个 get 或具有相同属性的数据条目同时出现在一个对象字面量中。\",\"可以通过 delete 操作符删除 getter。\"]},\"1319\":{\"h\":\"示例\",\"t\":[\"基本用法\",\"const foo = { arr: [0, 1, 2, 3, 4], get num(){ // 只有数组长度等于 5 时，获取 foo.b 才返回数组索引为 1 的值 if (this.arr.length === 5) { return this.arr[1] } } } console.log(foo.num) // 1\",\"删除对象的取值函数\",\"const foo = { get name() { return 'BINGO!' } } console.log(foo.name) // Output: 'BINGO!' delete foo.name // true console.log(foo.name) // Output: undefined\",\"在现有对象上定义取值函数\",\"可以使用 defineProperty 方法在现有对象上定义取值函数。\",\"let foo = { a: 0 }; Object.definedProperty(foo, \\\"b\\\", { get: function () { return this.a + 1; } }); console.log(foo.b); // Runs the getter, which yields a + 1 (which is 1)\",\"计算属性名\",\"const expr = 'foo'; const obj = { get [expr]() { return 'bar'; } } console.log(obj.foo) // 'bar'\"]},\"1320\":{\"h\":\"存值函数\",\"t\":[\"当尝试设置属性时，set 语法将对象属性绑定到要调用的函数。\"]},\"1321\":{\"h\":\"语法\",\"t\":[\"{set prop(val) { . . . }} {set [expression](val) { . . . }}\",\"参数\",\"说明\",\"prop\",\"要绑定到给定函数的属性值\",\"val\",\"用于保存尝试分配给 prop 值的变量的一个别名\",\"expression\",\"从 ECMAScript 2015 开始，还可以使用一个计算属性名的表达式绑定到给定的函数\"]},\"1322\":{\"h\":\"描述\",\"t\":[\"在 JavaScript 中，如果试着改变一个属性的值，那么对应的 setter 将被执行。setter 经常和 getter 连用以创建一个伪属性。不可能在具有真实值的属性上同时拥有一个 setter 器。\",\"使用 set 语法时请注意：\",\"它的标识符可以是数字或字符串\",\"它必须有一个明确的参数\",\"在对象字面量中，不能为一个已有真实值的变量使用 set，也不能为一个属性设置多个 set\"]},\"1323\":{\"h\":\"示例\",\"t\":[\"基本用法\",\"const foo = { set current(name) { this.log.push(name) }, log: [] } foo.current = 'EN' console.log(foo.log) // ['EN'] foo.current = 'ZN' console.log(foo.log) // ['EN', 'ZN']\"]},\"1324\":{\"c\":[\"前端技术\"]},\"1325\":{\"c\":[\"JavaScript\"]},\"1326\":{\"h\":\"函数声明定义\",\"t\":[\"一个函数定义由一系列的 function 关键字组成，依次为：\",\"函数的名称\",\"函数的参数列表，包围在括号中并由逗号分隔\",\"函数执行的语句，用大括号 {} 括起来（函数体）\"]},\"1327\":{\"h\":\"函数声明语句\",\"t\":[\"函数声明语句的组成要素：\",\"function 关键字\",\"functionName 函数名\",\"arg 参数（可选）\",\"functionBody 函数体\"]},\"1328\":{\"h\":\"语法\",\"t\":[\"function functionName ([arg1 [,arg2 [...,argn]]]) { // functionBody 函数体 }\",\"函数声明要素\",\"含义\",\"说明\",\"function\",\"声明关键字\",\"声明的函数名称的标识符\",\"functionName\",\"函数名称\",\"当前作用域内函数名称唯一\",\"arg\",\"参数列表\",\"函数名之后的圆括号中是参数列表，参数之间使用逗号分隔。当调用函数时，这些标识符则指代传入函数的实参。\",\"functionBody\",\"函数体\",\"所有语句的集合，包括花括号在内\"]},\"1329\":{\"h\":\"特点\",\"t\":[\"当函数的参数是一个值（基本数据类型），若被调用函数改变了这个参数的值，这样的改变不会影响到全局或调用的函数\",\"但当函数的参数是一个对象（即一个非原始值，例如 Array 或用户自定义的其他对象），若函数改变了这个对象的的属性，这样的改变对函数外部是可见的\",\"function fn(arg1) { arg1.name = 'JavaScript'; } let foo = { name: 'Java', year: 1998 }; fn(foo); console.log(foo.name); // 'JavaScript'\",\"function 语句里的 花括号是必需 的，这和 while 循环和其他一些语句所使用的语句块是不同的，即使函数体内只包含一条语句，仍然必须使用花括号将其括起来。\",\"function test(); // SyntaxError: Unexpected end of input function test(){}; // 不报错 while(true); // 不报错\",\"函数的重复声明会覆盖前面的声明（无论是函数表达式还是函数声明）\",\"[!warning] 由于函数声明提升优先于函数表达式的变量声明提升，所以变量的声明无作用\",\"var foo; function foo() { console.log(1); } foo(); // 1\",\"后面的函数声明会覆盖前面的函数声明\",\"baz(); // 2 function baz() { console.log(1); } function baz() { console.log(2); }\",\"和变量声明一样，函数声明语句创建的变量无法删除\",\"function foo() { console.log(1); } delete foo; // false console.log(foo()); // 1\"]},\"1330\":{\"h\":\"函数表达式\",\"t\":[\"函数表达式要素：\",\"var/let/const 关键字\",\"variableName 变量名\",\"表达式赋值等号\",\"声明变量后的分号\",\"functionName 函数名（可选，没有的话叫做匿名函数）\",\"functionBody 函数体\",\"通常而言，以表达式方式定义函数时都不需要名称，这会让定义它们的代码更加紧凑。函数定义表达式特别适合用来定义那些只会使用一次的函数。\"]},\"1331\":{\"h\":\"语法\",\"t\":[\"const variableName = function functionName(arg) { // 函数体 functionBody; };\",\"函数表达式要素与函数声明语句基本一致\"]},\"1332\":{\"h\":\"匿名函数\",\"t\":[\"匿名函数（anonymous function） 也叫拉姆达函数，是 function 关键字后面没有标识符的函数。\",\"const square = function (number) { return number * number; }; var x = square(4); // x 得到的值为16\"]},\"1333\":{\"h\":\"具名函数\",\"t\":[\"函数表达式也可以提供函数名，并且可以用于在函数内部使用来代指其本身，或者在调试器堆栈跟踪中鉴别该函数。\",\"const factorial = function fac(n) { return n < 2 ? 1 : n * fac(n - 1); }; console.log(factorial(3)); // 6\"]},\"1334\":{\"h\":\"函数名称\",\"t\":[\"一个函数定义表达式包含名称，函数的局部作用域将会包含一个绑定到函数对象的名称。实际上，函数的名称将成为函数内部的一个局部变量。\",\"const foo = function fn() { return fn; }; console.log(foo); // fn(){ // return fn // } console.log(foo()); // fn(){ // return fn // } console.log(foo()()); // fn(){ // return fn // }\",\"[!info]\",\"对于具名的函数表达式来说，函数名称 相当于函数对象的 形参，只能在函数内部使用\",\"而 变量名称 相当于函数对象的 实参，在函数内部和函数外部都可以使用。\",\"const foo = function fn() { return fn === foo; }; console.log(foo()); // true console.log(foo === fn); // ReferenceError: fn is not defined\",\"函数定义了一个非标准的 name 属性，通过这个属性可以访问到给定函数指定的名字，这个属性的值永远等于跟在 function 关键字后面的标识符，匿名函数的 name 属性为空\",\"// IE11- 浏览器无效，均输出 undefined // Chrome在处理匿名函数的 name 属性时有问题，会显示函数表达式的名字 function fn() {} console.log(fn.name); // 'fn' var fn = function () {}; console.log(fn.name); // ''，在chrome浏览器中会显示'fn' var fn = function abc() {}; console.log(fn.name); // 'abc'\"]},\"1335\":{\"h\":\"函数声明优先\",\"t\":[\"虽然都可以定义函数，但最大的区别在于：\",\"解析器会 率先读取函数声明，使其在执行任何代码之前就可以访问（也就是 函数声明提升）；\",\"而函数表达式则需要 解析器执行到它所在的代码行 才会被解释执行。\",\"foo(); // 能正常运行 弹出 foo bar(); // 报错 Uncaught TypeError: baz is a function(...) function foo() { alert('foo'); } var baz = function bar() { alert('bar'); };\"]},\"1336\":{\"c\":[\"前端技术\"]},\"1337\":{\"c\":[\"JavaScript\"]},\"1338\":{\"h\":\"异步函数\",\"t\":[\"async 函数是 Generator 函数的语法糖。使用关键字 async 来表示，在函数内部是使用 await 命令来表示异步。\",\"相较于 Generator，async 函数的改进在于以下四点：\",\"内置执行器：Generator 函数的执行必须靠执行器，而 async 函数自带执行器，调用方式与普通函数一致。\",\"更好的语义：async 和 await 相较于星号（*）和 yield 更加语义化。async 表示函数中有异步操作，await 表示紧跟在后面的表达式需要等待结果。\",\"更广的适用性：co 模块约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面则可以是 Promise 和原始类型的值（Number、String 和 Boolean，但这时会自动转成立即 fulfilled 状态的 Promise 对象）。\",\"返回值是 Promise：async 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用 then 方法指定下一步的操作。\",\"进一步说，async 函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而 await 命令就是内部 then 命令的语法糖。\",\"async 函数与 Generator 函数的对比\",\"async 函数\",\"Generator 函数\",\"定义方式\",\"async function(){}\",\"function* (){}\",\"异步语句命令\",\"await\",\"yield\"]},\"1339\":{\"h\":\"基本用法\"},\"1340\":{\"h\":\"异步函数的声明\",\"t\":[\"凡是在函数声明前添加 async 关键字的函数在执行后都会自动返回 Promise 对象。\",\"async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。当函数执行的时候，一旦遇到 await 就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。\",\"function timeout(ms) { return new Promise((resolve) => setTimeout(resolve, ms)); } async function foo(arg1, ms) { await timeout(ms); return arg1; } foo('Hello world!', 500).then(console.log); // 'Hello world!'\"]},\"1341\":{\"h\":\"异步函数的语句\",\"t\":[\"await 命令必须在 async 函数里使用，不能单独使用。\",\"由于 async 函数返回的是 Promise 对象，可以作为 await 命令的参数。\"]},\"1342\":{\"h\":\"异步语句返回值\",\"t\":[\"await 后需跟 Promise。\",\"await 作用之一就是获取随后 Promise 对象成功状态传递出来的参数。\",\"await 命令只能用在 async 函数中，否则会报错。\"]},\"1343\":{\"h\":\"语法\"},\"1344\":{\"h\":\"返回值类型\",\"t\":[\"async 函数返回一个 Promise 对象\",\"async 函数内部 return 语句返回的值，会成为 then 方法回调函数的参数。\",\"async function foo() { return 'Hello world!'; } foo().then((res) => console.log(res)); // 'Hello world!'\",\"如果 async 函数内部抛出异常，则会导致返回的 Promise 对象状态变为 rejected 状态。抛出的错误而会被 catch 方法回调函数接收到。\",\"async function foo() { throw new Error('Error'); } foo() .then((res) => console.log(res)) .catch((err) => console.log(err));\"]},\"1345\":{\"h\":\"返回值状态变化\",\"t\":[\"async 函数返回的 Promise 对象，必须等到内部所有 await 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 return 语句或者抛出错误。也就是说，只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的回调函数。\",\"const delay = (timeout) => new Promise((resolve) => setTimeout(resolve, timeout)); async function foo() { await delay(1000); await delay(2000); await delay(3000); return 'done'; } foo().then(console.log); // 'done'\",\"上面代码中，函数 foo 内部有三个延迟函数。只有这三个操作依次完成，才会执行 then 方法里面的 console.log。\"]},\"1346\":{\"h\":\"异步语句返回值\",\"t\":[\"正常情况下，异步语句 await 命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。\",\"async funciont foo(){ return await 1 } fn.then(res => console.log(res)); // 1\"]},\"1347\":{\"h\":\"异常处理\"},\"1348\":{\"h\":\"捕捉异常\",\"t\":[\"任何一个 await 语句后面的 Promise 对象变为 rejected 状态，那么整个 async 函数都会中断执行。\",\"async function foo() { await Promise.reject('Error!'); await Promise.resolve('Hello world!'); // 不会执行 }\",\"当 async 异步函数中只要有一个 await 异步语句返回的 Promise 处于 rejected 状态，则后面的 await 异步语句都不会执行。\",\"解决方法：使用 try-catch 语句 或在 await 返回的 Promise 添加 catch 方法捕捉错误。\",\"有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个 await 放在 try...catch 结构里面，这样不管这个异步操作是否成功，第二个 await 都会执行。\",\"async function foo() { try { await Promise.reject('Error!'); } catch (err) { // do something } return await Promise.resolve('Hello world!'); } foo().then((res) => console.log(res)); // 'Hello world!'\",\"另一种方法是 await 后面的 Promise 对象再跟一个 catch 方法，处理前面可能出现的错误。\",\"async function foo() { await Promise.reject('Error!').catch((e) => console.log(e)); return await Promise.resolve('Hello world!'); } foo().then((res) => console.log(res)); // 'Error!' // 'Hello world!'\"]},\"1349\":{\"h\":\"操作中断\",\"t\":[\"如果 await 后面的异步操作出错，那么等同于 async 函数返回的 Promise 对象被 reject。\",\"使用 try...catch 语句，实现多次重复尝试。\",\"const superagent = require('superagent'); const NUM_RETRIES = 3; async function foo() { let i; for (i = 0; i < NUM_RETRIES; i++) { try { await superagent.get('https://google.com/this-throws-an-error'); break; } catch (err) { // do something } } console.log(i); // 3 } foo();\",\"如果 await 操作成功，就会使用 break 语句退出循环；如果失败，会被 catch 语句捕捉，然后进入下一轮循环。\"]},\"1350\":{\"h\":\"实现原理\",\"t\":[\"async 函数的实现原理，就是将 Generator 函数和自动执行器，包装在一个函数里。\",\"async function foo() { // ... }\",\"相当于：\",\"function foo(args) { return spawn(function* () { // ... }); }\",\"所有的 async 函数都可以写成上面的第二种形式，其中的 spawn 函数就是自动执行器。\",\"function spawn(genF) { return new Promise(function (resolve, reject) { const gen = genF(); function step(nextF) { let next; try { next = nextF(); } catch (e) { return reject(e); } if (next.done) { return resolve(next.value); } Promise.resolve(next.value).then( function (v) { step(function () { return gen.next(v); }); }, function (e) { step(function () { return gen.throw(e); }); } ); } step(function () { return gen.next(undefined); }); }); }\"]},\"1351\":{\"h\":\"最佳实践\"},\"1352\":{\"h\":\"异步阻塞\",\"t\":[\"后面请求的发送总是需要依赖上一个请求返回的数据。\",\"function request(time) { return new Promise((resolve, rejecr) => { setTimeout(() => { resolve(time); }, time); }); } async function getResult() { let p1 = await request(500); let p2 = await request(p1 + 1000); let p3 = await request(p2 + 1000); return p3; } getResult() .then((res) => { console.log(res); }) .catch((err) => { console.log(err); });\"]},\"1353\":{\"h\":\"异步非阻塞\",\"t\":[\"在某些业务场景下，开发者可能需要处理多个连续步骤的操作，但是这些操作未必相互依赖。因此需要对这些操作进行优化。\",\"综合上述 异步阻塞 和 异步并发，我们可以利用 Event Loop 的优势并发执行这些非阻塞异步函数。\",\"// 选择披萨 async function selectPizza() { // 异步获取披萨数据 const pizzaData = await getPizzaData(); // 选择披萨 const chosenPizza = choosePizza(); // 异步添加选中披萨到购物车 await addPizzaToCart(chosenPizza); } // 选择饮料 async function selectDrink() { // 异步获取饮料数据 const drinkData = await getDrinkData(); // 选择饮料 const chosenDrink = chooseDrink(); // 异步添加选中饮料到购物车 await addDrinkToCart(chosenDrink); } (async () => { // 并发执行这些非阻塞异步函数 Promise.all([selectPizza(), selectDrink()]).then(orderItems); })();\"]},\"1354\":{\"h\":\"异步并发\",\"t\":[\"多个网络请求是非继发关系，最好使用 Promise.all 方法实现同时触发。\",\"const [userList, orderList] = await Promise.all([getUserList(), getOrderList()]); let userPromise = getUserList(); let orderPromise = getOrderList(); let user = await userPromise; let order = await orderPromise;\",\"上面两种写法，getUserList 和 getOrderList 都是同时触发，这样就会缩短程序的执行时间。\"]},\"1355\":{\"h\":\"未知数量的异步并发\",\"t\":[\"承接上个实践方案，当我们需要解决未知数量的 Promise 的时候，我们只需要创建数组并存储它们，然后同样使用 Promise.all 方法就能够并发地等待所有 Promise 返回结果。\",\"async function foo() { // 批量配置项 const items = await batchDisposal(); // 每个配置项对应一个异步请求 const promises = items.map((item) => sendRequest(item)); await Promise.all(promises); }\"]},\"1356\":{\"h\":\"不等待结果的异步循环\",\"t\":[\"await 每次循环任务，注意遍历执行的匿名函数也要设置为 async 异步函数。\",\"function delay() { return new Promise((resolve) => setTimeout(resolve, 300)); } async function delayedLog(item) { // notice that we can await a function that returns promise await delay(); // log item only after a delay console.log(item); } async function execute(tasks) { tasks.forEach(async (item) => { await delayLog(item); }); console.log('DONE!'); }\"]},\"1357\":{\"h\":\"异步串行遍历\",\"t\":[\"要等待所有的结果返回，我们还是要回到老式的 for 循环写法：\",\"async function execute(tasks) { let result = []; for (const task of tasks) { try { result.push(await task()); } catch (err) { result.push(null); } } return result; }\",\"上面这段的遍历是 串行 执行的，我们也可以把它转换成 并行 的。\"]},\"1358\":{\"h\":\"异步并行遍历\",\"t\":[\"我们可以通过更改上面的代码来实现并行的异步操作：\",\"async function execute(tasks) { // map tasks to promises const promises = tasks.map(delayLog); // wait until all promises are resolved await Promise.all(promises); console.log('DONE!'); }\"]},\"1359\":{\"c\":[\"前端技术\"]},\"1360\":{\"c\":[\"JavaScript\"]},\"1361\":{\"h\":\"箭头函数\",\"t\":[\"箭头函数表达式的语法比函数表达式更短，并且没有自己的 this、arguments、super 和 new.target。\",\"箭头函数表达式更适用于那些本来需要匿名函数的业务场景，并且它们不能用作构造函数。\"]},\"1362\":{\"h\":\"赋值式写法\",\"t\":[\"箭头函数只能用 赋值式写法，不能用声明式写法。\",\"const fn = () => { // do something };\"]},\"1363\":{\"h\":\"箭头函数参数\"},\"1364\":{\"h\":\"单个参数\",\"t\":[\"当只有一个参数时，圆括号是可选的，如果没有参数或者参数多于一个就需要加括号。\",\"const fn1 = (param1) => { // do something }; const fn2 = () => { // do something }; const fn3 = (param1, param2) => { // do something };\"]},\"1365\":{\"h\":\"剩余参数\",\"t\":[\"支持剩余参数和默认参数。\",\"const numbers = (...nums) => nums; numbers(1, 2, 3, 4, 5); // [1, 2, 3, 4, 5] const headAndTail = (head, ...tail) => [head, tail]; headAndTail(1, 2, 3, 4, 5); // [1, [2, 3, 4, 5]]\"]},\"1366\":{\"h\":\"默认参数\",\"t\":[\"const fn = (params1 = default1, params2, ..., paramsN = defaultN) => { // do something }\"]},\"1367\":{\"h\":\"解构赋值\",\"t\":[\"同样支持参数列表解构\",\"const fn = ([a, b] = [1, 2], { x: c } = { x: a + b }) => a + b + c; fn(); // 6 const full = ({ first, last }) => firsr + '' + last; // 等同于 function full(person) { return person.first + '' + person.last; }\"]},\"1368\":{\"h\":\"函数体\"},\"1369\":{\"h\":\"单个表达式\",\"t\":[\"如果函数体只有一个表达式，可以不加花括号\",\"const fn = (param1, param2) => param1 + param2;\"]},\"1370\":{\"h\":\"返回缺省值\",\"t\":[\"如果函数没有括号，可以不写 return ，箭头函数会帮你 return\",\"const fn = (param1, param2) => param1 + param2; fn(1, 2);\"]},\"1371\":{\"h\":\"直接返回对象\",\"t\":[\"加括号的函数体返回对象字面表达式\",\"const fn = (bar) => ({ foo: bar });\"]},\"1372\":{\"h\":\"应用场景\"},\"1373\":{\"h\":\"回调函数\",\"t\":[\"数组方法 map 函数：\",\"// 普通函数写法 const result = [1, 2, 3].map(function (x) { return x * x; }); // 箭头函数写法 const result = [1, 2, 3].map((x) => x * x);\",\"数组方法 sort 函数：\",\"// 普通函数写法 const result = values.sort(function (a, b) { return a - b; }); // 箭头函数写法 const result = values.sort((a, b) => a - b);\"]},\"1374\":{\"h\":\"注意事项\",\"t\":[\"函数体内的 this 对象，就是 定义时所在 的对象，而不是使用时所在的对象\",\"不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误\",\"不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替\",\"不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数\"]},\"1375\":{\"h\":\"箭头函数中的 this\",\"t\":[\"this 对象的指向时可变的，但是在箭头函数中，它是固定的。因为箭头函数内部的 this 是 词法作用域，由上下文确定。\",\"function foo() { setTimeout(() => { console.log(this.key); }, 100); } var key = 100; foo.call({ key: 50 }); // 50\",\"上面的代码中，setTimeout 的参数一个箭头函数，这个箭头函数的定义生效是在 foo 函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时 this 应该指向全局对象 window，这时应该输出 100。但是，箭头函数导致 this 总是指向函数定义生效时所在的对象（本例时 { key: 50 }），所以输出的是 50。\",\"箭头函数可以让 setTimeout 里面的 this，绑定定义时所在的作用域，而不是指向运行时所在的作用域。\",\"下面是另一个例子。\",\"function Timer() { this.num1 = 0; this.num2 = 0; // 箭头函数 setInterval(() => this.num1++, 1000); // 普通函数 setInterval(function () { this.num2++; }, 1000); } const timer = new Timer(); setTimeout(() => console.log('num1', timer.num1), 3000); setTimeout(() => console.log('num2', timer.num2), 3000); // num1: 3 // num2: 0\",\"上面的代码中，Timer 函数内部设置了两个定时器，分别使用了箭头函数和普通函数。\",\"前者的 this 绑定 定义时 所在的作用域（即 Timer 函数），后者的 this 指向 运行时 所在的作用域（即全局对象）。所以，3000ms 之后， timer.num1 被更新了 3 次，而 timer.num2 一次都没更新。\",\"箭头函数可以让 this 指向固定化，这种特征很 有利于封装回调函数。\",\"const handler = { id: '123456', init: function () { document.addEventListener('click', (event) => this.doSomething(event.type), false); }, doSomething: function (type) { console.log('Handling' + type + ' for ' + this.id); }, };\",\"以上的代码的 init 方法中使用了箭头函数，这导致箭头函数里面的 this 总是指向 handler 对象。否则，回调函数运行时，this.doSomething 一行会报错，因为此时 this 指向 document 对象。\",\"[!warning] this 指向的固定化并不是因为箭头函数内部有绑定 this 的机制，实际原因时箭头函数根本没有自己的 this，导致内部的 this 就是外层代码块的 this。正是因为它没有 this，所以不能用作构造函数。\",\"箭头函数转成 ES5 的代码如下。\",\"// ES6 function foo() { setTimeout(() => { console.log('id:', this.id); }, 100); } // ES5 function foo() { var _this = this; setTimeout(function () { console.log('id:', _this.id); }, 100); }\",\"上面的代码中，转换后的 ES5 版本清楚地说明了箭头函数里面根本没有自己的 this，而是引用外层的 this。\",\"// 请问下面的代码之中有几个this? function foo() { return () => { return () => { return () => { console.log('id:', this.id); }; }; }; } var fn = foo.call({ id: 1 }); var res1 = fn.call({ id: 2 })()(); // id: 1 var res2 = fn().call({ id: 3 })(); // id: 1 var res3 = fn()().call({ id: 4 }); // id: 1\",\"上面的代码中只有一个 this，就是函数 foo 的 this，所以 res1、res2、res3 都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的 this，它们的 this 其实都是最外层 foo 函数的 this。\",\"除了 this 外，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：arguments、super、new.target\",\"function foo() { setTimeout(() => { console.log('args:', arguments); }, 100); } foo(2, 4, 6, 8); // args: [2, 4, 6, 8]\",\"上面代码中，箭头函数内部的变量 arguments ，其实是函数 foo 的 arguments 变量。\",\"另外，由于箭头函数没有自己的 this，所以当然也就不能用call()、apply()、bind()这些方法去改变 this 的指向。\",\"(function () { return [(() => this.x).bind({ x: 'inner' })()]; }.call({ x: 'outer' })); // ['outer']\",\"上面代码中，箭头函数没有自己的 this ，所以 bind 方法无效，内部的 this 指向外部的 this。\"]},\"1376\":{\"h\":\"嵌套的箭头函数\",\"t\":[\"箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。\",\"function insert(value) { return { into: function (array) { return { after: function (afterValue) { array.splice(array.indexOf(afterValue) + 1, 0, value); return array; }, }; }, }; } insert(2).into([1, 3]).after(1); // [1, 2, 3]\",\"上面这个函数，可以使用箭头函数改写。\",\"let insert = (value) => ({ into: (array) => ({ after: (afterValue) => { array.splice(array.indexOf(afterValue) + 1, 0, value); return array; }, }), }); insert(2).into([1, 3]).after(1); // [1, 2, 3]\",\"下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。\",\"const pipeline = (...focus) => (val) => focus.reduce((a, b) => b(a), val); const plus1 = (a) => a + 1; const mult2 = (a) => a * 2; const addThenMult = pipeline(plus1, mult2); addTheMult(5); // 12\",\"如果觉得上面的可读性比较差，也可以采用下面的写法。\",\"const plus1 = (a) => a + 1; const mult2 = (a) => a * 2; mult2(plus1(5)); // 12\"]},\"1377\":{\"c\":[\"前端技术\"]},\"1378\":{\"c\":[\"JavaScript\"]},\"1379\":{\"h\":\"函数参数\"},\"1380\":{\"h\":\"arguments\",\"t\":[\"JavaScript 中的函数定义并未指定函数形参的类型，函数调用也未对传入的实参值做任何类型检查。实际上，JavaScript 函数调用甚至不检查传入形参的个数。\",\"function foo(x) { return x + 1; } console.log(foo(1)); // 2 console.log(foo('1')); // '11' console.log(foo()); // NaN console.log(foo(1, 2)); // 2\"]},\"1381\":{\"h\":\"同名形参\",\"t\":[\"在非严格模式下，函数中可以出现同名形参，且只能访问最后出现的该名称的形参。\",\"function foo(x, x, x) { console.log(x); } foo(1, 2, 3); // 3\",\"而在严格模式下，出现同名形参会抛出语法错误。\",\"function foo(x, x, x) { 'use strict'; console.log(x); } foo(1, 2, 3); // SyntaxError: Duplicate parameter name not allowed in this context\"]},\"1382\":{\"h\":\"参数数量\",\"t\":[\"当实参比函数声明指定的形参个数要少，剩下的形参都将设置为 undefined 值。\",\"function foo(x, y) { console.log(x, y); // 1 undefined } foo(1);\",\"默认值设置：\",\"常常使用逻辑或运算符给省略的参数设置一个合理的默认值。\",\"function foo(x, y) { y = y || 2; console.log(x, y); // 1 2 } foo(1);\",\"实际上，使用 y || 2 是不严谨的，显式地设置假值(undefined、null、false、0、-0、''、NaN)也会得到相同的结果。所以应该根据实际场景进行合理设置。\",\"当实参比形参个数要多时，剩下的实参没有办法直接获得，需要使用即将提到的 arguments 对象。\",\"JavaScript 中的参数在内部用一个数组表示。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数。在函数体内可以通过 arguments 对象来访问这个参数数组，从而获取传递给函数的每一个参数。\",\"arguments 对象并不是 Array 的实例，它是一个类数组对象，可以使用方括号语法访问它的每一个元素。\",\"function foo(x) { console.log(arguments[0], arguments[1], arguments[2]); // 1 2 3 return x + 1; } foo(1, 2, 3);\",\"arguments 对象的 length 属性显示实参的个数，函数的 length 属性显示形参的个数。\",\"function fn(x, y) { console.log(arguments.length); // 3 } fn(1, 2, 3); console.log(fn.length); // 2\",\"形参只是提供便利，但不是必需的。\",\"function foo() { console.log(arguments[0]); // 1 console.log(arguments[1]); // 2 }\",\"当一个函数包含超过 3 个形参时，要记住调用函数中实参的正确顺序实在让人头疼。\",\"function fn( /*array*/ from, /*index*/ form_start, /*array*/ to, /*index*/ to_start, /*integer*/ length ) { // do something }\",\"通过键/值对的形式来传入参数，这样参数的顺序就无关紧要了。定义函数的时候，传入的实参都写入一个单独的对象之中，在调用的时候传入一个对象，对象中的名/值对是真正需要的实参数据。\",\"function fn(args) { fn(args.from, args.from_start || 0, args.to, args.to_start || 0, args.length); } const a = [1, 2, 3, 4], b = []; fn({ from: a, to: b, length: 4 });\",\"ES6 的 剩余参数（Rest 参数） 有效地解决了函数参数过多和参数先后顺序的问题。\"]},\"1383\":{\"h\":\"同步\",\"t\":[\"当形参与实参的个数相同时，arguments 对象的值和对应形参的值保持同步。\",\"function foo(num1, num2) { console.log(num1, arguments[0]); // 1 1 arguments[0] = 2; console.log(num1, arguments[0]); // 2 2 num1 = 10; console.log(num1, arguments[0]); // 10 10 } foo(1);\",\"虽然命名参数和对应 arguments 对象的值相同，但并不是相同的命名空间。它们的命名空间是独立的，但值是同步的。\",\"但在严格模式下，arguments 对象的值和形参的值是独立的。\",\"function fn(num1, num2) { 'use strict'; console.log(num1, arguments[0]); // 1 1 arguments[0] = 2; console.log(num1, arguments[0]); // 1 2 num1 = 10; console.log(num1, arguments[0]); // 10 2 } fn(1);\",\"当形参并没有对应的实参时，arguments 对象的值与形参的值并不对应。\",\"function fn(num1, num2) { console.log(num1, arguments[0]); //undefined,undefined num1 = 10; arguments[0] = 5; console.log(num1, arguments[0]); //10,5 } fn();\"]},\"1384\":{\"h\":\"内部属性\"},\"1385\":{\"h\":\"callee\",\"t\":[\"arguments 对象有一个名为 callee 的属性，该属性是一个指针，指向拥有这个 arguments 对象的函数。\",\"下面是经典的阶乘函数：\",\"function fn(num) { if (num <= 1) { return 1; } else { return num * fn(num - 1); } } console.log(fn(5)); // 120\",\"但是，上面这个函数的执行与函数名紧紧耦合在了一起，可以使用 arguments.callee 可以消除函数解耦。\",\"function fn(num) { if (num <= 1) { return 1; } else { return num * arguments.callee(num - 1); } } console.log(fn(5)); // 120\",\"但在严格模式下，访问这个属性会抛出 TypeError 错误。\",\"function fn(num) { 'use strict'; if (num <= 1) { return 1; } else { return num * arguments.callee(num - 1); } } console.log(fn(5)); // TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them\",\"这时，可以使用具名的函数表达式。\",\"const fn = function fn(num) { if (num <= 1) { return 1; } else { return num * fn(num - 1); } }; console.log(fn(5)); //120\"]},\"1386\":{\"h\":\"caller\",\"t\":[\"实际上有两个 caller 属性。\",\"函数的 caller\",\"函数的 caller 属性保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值是 null。\",\"function foo() { bar(); } function bar() { console.log(bar.caller); // foo(){ bar(); } } foo();\",\"function foo() { console.log(foo.caller); // null } foo();\",\"在严格模式下，访问这个属性会抛出 TypeError 错误。\",\"function foo() { 'use strict'; // TypeError: 'caller' and 'arguments' are restricted function properties and cannot be accessed in this context console.log(foo.caller); } foo();\",\"arguments 对象的 caller\",\"该属性始终是 undefined，定义这个属性是为了分清 arguments.caller 和函数的 caller 属性。\",\"function foo(x) { console.log(arguments.caller); // undefined } foo(1);\",\"同样地，在严格模式下，访问这个属性会抛出 TypeError 错误。\",\"function foo(x) { 'use strict'; // TypeError: 'caller' and 'arguments' are restricted function properties and cannot be accessed in this context console.log(arguments.caller); } foo(1);\"]},\"1387\":{\"h\":\"参数传递\",\"t\":[\"JavaScript 中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制到函数内部的参数，就和把值从一个变量复制到另一个变量一样。\"]},\"1388\":{\"h\":\"基本类型值\",\"t\":[\"在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（命名参数或 arguments 对象的一个元素）\",\"function foo(x) { x = 1; return x; } let y = 2; let result = foo(y); console.log(y); // 2 没有变化 console.log(result); // 1\"]},\"1389\":{\"h\":\"引用类型值\",\"t\":[\"在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。\",\"function foo(x) { x.name = 'ABC'; } var y = {}; foo(y); console.log(y.name); // 'ABC'\",\"当在函数内部重写引用类型的形参时，这个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁。\",\"function foo(obj) { obj.name = 'black'; console.log(person.name); // 'black' obj = {}; obj.name = 'white'; console.log(person.name); // 'black' } var person = {}; foo(person);\"]},\"1390\":{\"h\":\"函数重载\",\"t\":[\"JavaScript 函数不能像传统意义上那样实现重载。而在其他语言中，可以为一个函数编写两个定义，只要这两个定义的签名（接受的参数的类型和数量）不同即可。\",\"JavaScript 函数没有签名，因为其参数是由包含零个或多个值的数组来表示的。而没有函数签名，真正的重载是不可能做到的。\",\"// 后面的声明覆盖了前面的声明 function addSomeNumber(num) { return num + 100; } function addSomeNumber(num) { return num + 200; } var result = addSomeNumber(100); // 300\",\"只能通过检查传入函数中参数的类型和数量并作出不同的反应，来模仿方法的重载。\",\"function doAdd() { if (arguments.length == 1) { alert(arguments[0] + 10); } else if (arguments.length == 2) { alert(arguments[0] + arguments[1]); } } doAdd(10); // 20 doAdd(30, 20); // 50\"]},\"1391\":{\"c\":[\"前端技术\"]},\"1392\":{\"c\":[\"JavaScript\"]},\"1393\":{\"h\":\"剩余参数\",\"t\":[\"剩余参数（亦称 rest 参数） 用于获取函数的多余参数，这样就不要使用 arguments 对象了。剩余参数搭配的变量是一个 数组，该变量将多余的参数放入数组中。\",\"function add(...values) { let sum = 0; for (var val of values) { sum += val; } return sum; } add(2, 5, 3); // 10\",\"上面代码的 add 函数是一个求和函数，利用函数剩余参数，可以向该函数传入任意数目的参数。\",\"下面是一个函数剩余参数代替 arguments 变量的例子。\",\"// arguments变量的写法 function sortNumbers() { return Array.prototype.slice.call(arguments).sort(); } // rest参数的写法 const sortNumbers = (...numbers) => numbers.sort();\",\"arguments 对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须使用 Array.prototype.slice.call 先将其转为数组。函数剩余参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用函数剩余参数改写数组 push 方法的例子。\",\"function push(array, ...items) { items.forEach(function(item) { array.push(item); console.log(item); }); } const collection = []; push(collection 1, 2, 3)\"]},\"1394\":{\"h\":\"与参数对象的对比\",\"t\":[\"剩余参数\",\"参数对象\",\"只包含那些没有对应形参的实参\",\"包含了传给函数的所有实参\",\"实的数组，可直接使用所有数组方法\",\"不是一个真实的数组，是个类数组，需要 Array.from 或解构赋值转换为真实数组后方可遍历\",\"还有一些附加的属性， 比如 callee 属性\"]},\"1395\":{\"h\":\"注意事项\",\"t\":[\"函数剩余参数之后不能再有其他参数（即 只能是最后一个参数），否则会报错。\",\"function f(a, ...b, c) { ... } // Uncaught SyntaxError: Rest parameter must be last formal parameter\",\"函数的 length 属性，不包括函数剩余参数。\",\"(function(a) {}.length); // 1 (function(...a) {}.length); // 0 (function(a, ...b) {}.length); // 1\"]},\"1396\":{\"c\":[\"前端技术\"]},\"1397\":{\"c\":[\"JavaScript\"]},\"1398\":{\"h\":\"默认参数\",\"t\":[\"通常来说，函数调用者不需要传递所有可能存在的参数，没有被传递的参数可由感知到的默认参数进行填充。JavaScript 有严格的默认参数格式，未被传值的参数默认为 undefined。ES6 引入了一种新方式，可以指定任意参数的默认值。\",\"JavaScript 函数参数的默认值都是undefined， ES5 里，不支持直接在形参里写默认值。所以，要设置默认值，就要检测参数是否为undefined，按需求赋值。\",\"function fn(x, y) { y = y || 'World'; console.log(x, y); } fn('Hello'); // Hello World fn('Hello', 'China'); // Hello China fn('Hello', ''); // Hello World\",\"缺点：如果参数 y 赋值了，但是对应的布尔值为 false，则该赋值不起作用。\",\"为了避免这个问题，我们需要先判断参数 y 是否被赋值，如果没有，再等于默认值。\",\"function fn(x, y) { y = typeof y === undefined ? y || 'World'; console.log(x, y); }\"]},\"1399\":{\"h\":\"基本用法\",\"t\":[\"ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。\",\"function fn(x, y = 'World') { console.log(x, y); } log('Hello'); // Hello World log('Hello', 'China'); // Hello China log('Hello', ''); // Hello\",\"优点：\",\"阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档\",\"有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行\"]},\"1400\":{\"h\":\"默认声明\",\"t\":[\"参数变量是 默认声明 的，所以不能用 let 或 const 再次声明。\",\"function fn(x = 1) { let x = 2; // SyntaxError: Identifier 'x' has already been declared const x = 3; // SyntaxError: Identifier 'x' has already been declared }\"]},\"1401\":{\"h\":\"参数命名冲突\",\"t\":[\"使用参数默认值时，函数不能有同名参数。\",\"// 不报错 function fn(x, x, y) { // do something } // 报错 function fn(x, x, y = 1) { // do something } // SyntaxError: Duplicate parameter name not allowed in this context\"]},\"1402\":{\"h\":\"惰性求值\",\"t\":[\"参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。\",\"let x = 99; function fn(p = x + 1) { console.log(p); } fn(); // 100 x = 100; fn(); // 101\"]},\"1403\":{\"h\":\"结合解构赋值\",\"t\":[\"function fn({ x, y = 5 }) { console.log(x, y); } fn({}); // undefined 5 fn({ x: 1 }); // 1 5 fn({ x: 1, y: 2 }); // 1 2 fn(); // TypeError: Cannot read property 'x' of undefined\",\"上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数 fn 的参数是一个对象时，变量 x 和 y 才会通过解构赋值生成。如果函数 fn 调用时没提供参数，变量 x 和 y 就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。\",\"function fn({ x, y = 5 } = {}) { console.log(x, y); } fn(); // undefined 5\",\"下面是另一个解构赋值默认值的例子。\",\"function fetch(url, { body = '', method = 'GET', headers = {} }) { console.log(method); } fetch('http://example.com', {}); // \\\"GET\\\" fetch('http://example.com'); // VM1292:1 Uncaught TypeError: Cannot read property 'body' of undefined // at fetch (<anonymous>:1:23) // at <anonymous>:5:1\",\"上面代码中，如果函数 fetch 的第二个参数是一个对象，就可以为它的三个属性设置默认值。这种写法不能省略第二个参数，如果结合函数参数的默认值，就可以省略第二个参数。这时，就出现了双重默认值。\",\"function fetch(url, { body = '', method = 'GET', headers = {} } = {}) { console.log(method); } fetch('http://example.com'); // \\\"GET\\\"\",\"上面代码中，函数 fetch 没有第二个参数时，函数参数的默认值就会生效，然后才是解构赋值的默认值生效，变量 method 才会取到默认值 GET。\"]},\"1404\":{\"h\":\"结合案例分析\",\"t\":[\"// 写法一 function fn1({ x = 0, y = 0 } = {}) { return [x, y]; } // 写法二 function fn2({ x, y } = { x: 0, y: 0 }) { return [x, y]; }\",\"上面两种写法都对函数的参数设定了默认值，区别是：\",\"写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；\",\"写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值\",\"// 函数没有参数的情况 fn1(); // [0, 0] fn2(); // [0, 0] // x 和 y 都有值的情况 fn1({ x: 3, y: 8 }); // [3, 8] fn2({ x: 3, y: 8 }); // [3, 8] // x 有值，y 无值的情况 fn1({ x: 3 }); // [3, 0] fn2({ x: 3 }); // [3, undefined] // x 和 y 都无值的情况 fn1({}); // [0, 0]; fn2({}); // [undefined, undefined] fn1({ z: 3 }); // [0, 0] fn2({ z: 3 }); // [undefined, undefined]\"]},\"1405\":{\"h\":\"参数默认值的位置\",\"t\":[\"通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。\",\"// example 1 function fn(x = 1, y){ return [x, y]; } fn(); // [1, undefined] fn(2); // [2, undefined] fn(, 1); // Uncaught SyntaxError: Unexpected token , fn(undefined, 1); // [1, 1] // example 2 function bar(x, y = 5, z){ return [x, y, z]; } bar(); // [undefined, 5, undefined] bar(1); // [1, 5, undefined] bar(1, ,2); // Uncaught SyntaxError: Unexpected token , bar(1, undefined, 2); // [1, 5, 2]\",\"如果传入undefined，将触发该参数等于默认值，null则没有这个效果。\",\"function fn(x = 5, y = 6) { console.log(x, y); } fn(undefined, null); // 5 null\"]},\"1406\":{\"h\":\"函数的长度属性\",\"t\":[\"指定了默认值以后，函数的 length 属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。\",\"示例一：一个参数，没有默认值\",\"(function(a) {}.length); // 1\",\"示例二：一个参数，有默认值\",\"(function(a = 5) {}.length); // 0\",\"(function(a, b, c = 5) {}.length); // 2\",\"上面代码中，length 属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。比如，上面最后一个函数，定义了 3 个参数，其中有一个参数 c 指定了默认值，因此 length 属性等于 3 减去 1，最后得到 2。\",\"这是因为 length 属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，后文的 rest 参数也不会计入 length 属性。\",\"(function(...args) {}.length); // 0\",\"如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。\",\"(function(a = 0, b, c) {}.length( // 0 function(a, b = 1, c) {} ).length); // 1\"]},\"1407\":{\"h\":\"参数作用域\",\"t\":[\"一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。\",\"var x = 1; function fn(x, y = x) { console.log(y); } f(2); // 2\",\"上面代码中，参数 y 的默认值等于变量 x。调用函数 fn 时，参数形成一个单独的作用域。在这个作用域里面，默认值变量 x 指向第一个参数 x，而不是全局变量 x，所以输出是 2。\",\"再看下面的例子。\",\"let x = 1; function fn(y = x) { let x = 2; console.log(y); } fn(); // 1\",\"上面代码中，函数 fn 调用时，参数 y = x 形成一个单独的作用域。这个作用域里面，变量 x 本身没有定义，所以指向外层的全局变量 x。函数调用时，函数体内部的局部变量 x 影响不到默认值变量 x。\",\"如果此时，全局变量 x 不存在，就会报错。\",\"function fn(y = x) { let x = 2; console.log(y); } fn(); // ReferenceError: x is not defined\",\"下面这样写，也会报错。\",\"var x = 1; function fn(x = x) { // ... } fn(); // ReferenceError: x is not defined\",\"上面代码中，参数 x = x 形成一个单独作用域。实际执行的是 let x = x，由于暂时性死区的原因，这行代码会报错 x is not defined（指第二个 x 未定义）。\",\"如果参数的默认值是一个函数，该函数的作用域也遵守这个规则。请看下面的例子。\",\"let fn = 'outer'; function bar(func = () => fn) { let fn = 'inner'; console.log(func()); } bar(); // outer\",\"上面代码中，函数 bar 的参数 func 的默认值是一个匿名函数，返回值为变量 fn。函数参数形成的单独作用域里面，并没有定义变量 fn，所以 fn 指向外层的全局变量 fn，因此输出 outer。\",\"如果写成下面这样，就会报错。\",\"function bar(func = () => fn) { let fn = 'inner'; console.log(func()); } bar(); // ReferenceError: fn is not defined\",\"上面代码中，匿名函数里面的 fn 指向函数外层，但是函数外层并没有声明变量 fn，所以就报错了。\",\"下面是一个更复杂的例子。\",\"var x = 1; function fn( x, y = function() { x = 2; } ) { var x = 3; y(); console.log(x); } fn(); // 3 x; // 1\",\"上面代码中，函数 fn 的参数形成一个单独作用域。这个作用域里面，首先声明了变量 x，然后声明了变量 y，y 的默认值是一个匿名函数。这个匿名函数内部的变量 x ，指向同一个作用域的第一个参数 x。函数 fn 内部又声明了一个内部变量 x，该变量与第一个参数 x 由于不是同一个作用域，所以不是同一个变量，因此执行y后，内部变量 x 和外部全局变量 x 的值都没变。\",\"如果将 var x = 3 的 var 去除，函数 fn 的内部变量 x 就指向第一个参数 x，与匿名函数内部的 x 是一致的，所以最后输出的就是 2，而外层的全局变量 x 依然不受影响。\",\"var x = 1; function fn( x, y = function() { x = 2; } ) { x = 3; y(); console.log(x); } fn(); // 2 console.log(x); // 1\",\"总结：\",\"函数声明初始化时，一旦设置了参数默认值，参数会形成一个单独的作用域，等初始化结束后，该作用域即会消失。这种语法在不设置参数默认值的时候是不会出现的。\",\"参数作用域出线的变量名率先寻找参数作用域内先声明的参数，若不存在则寻找外部作用域的（不会从函数内部作用域寻找） \",\"若先声明的参数已定义，则该值为该参数所定义的值\",\"若先声明的参数未定义，并且外部作用域无同名变量已定义，则报错\",\"若参数默认值为函数，则该作为默认值的函数作用域与参数独立作用域相同 \",\"当函数内部作用域重新声明与已有参数同名变量，变量与同名参数不为同一变量\",\"当函数内部作用域存在同名变量（没有重新声明），变量指向的是函数参数本身\"]},\"1408\":{\"h\":\"抛弃参数对象\",\"t\":[\"现在我们已经看到了 arguments 对象可被不定参数和默认参数完美代替，移除 arguments 后通常会使代码更易于阅读。除了破坏可读性外，众所周知，针对 arguments 对象对 JavaScript 虚拟机进行的优化会导致一些让你头疼不已的问题。\",\"我们期待着不定参数和默认参数可以完全取代 arguments，要实现这个目标，标准中增加了相应的限制：在使用不定参数或默认参数的函数中禁止使用 arguments 对象。曾经实现过 arguments 的引擎不会立即移除对它的支持，当然，现在更推荐使用不定参数和默认参数。\"]},\"1409\":{\"c\":[\"前端技术\"]},\"1410\":{\"c\":[\"JavaScript\"]},\"1411\":{\"h\":\"偏函数\",\"t\":[\"维基百科中对偏函数（Partial）的定义为：\",\"In computer science, partial application(or partial function application) refers to the process of fixing a number of arguments to a function, producing another function of smaller arity.\",\"在计算机科学中，局部应用是指固定一个函数的一些参数，然后产生另一个更小元的函数。\",\"什么是元？\",\"元是指函数参数的个数，比如一个带有两个参数的函数被称为二元函数。\",\"🌰 示例：\",\"function add(a, b) { return a + b; } // 执行 add 函数，一次传入两个参数即可 add(1, 2); // 3 // 假设有一个 partial 函数可以做到局部应用 var addOne = partial(add, 1); addOne(2); // 3\",\"偏函数与柯里化十分相像：\",\"柯里化： 将多参数函数转换成多个单参数函数，也就是将一个 n 元函数转换成 n 个一元函数\",\"偏函数： 则是固定一个函数的一个或多个参数，也就是将一个 n 元函数转换成一个 n - x 元函数\"]},\"1412\":{\"h\":\"实际应用\",\"t\":[\"bind 函数可以让我们传入一个或多个预设的参数，之后返回一个新函数，并拥有指定的 this 值和预设参数。当绑定函数被调用时，这些参数会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数跟在它们后面。\",\"function addition(x, y) { return x + y; } const plus5 = addition.bind(null, 5); plus5(10); // 15 plus5(25); // 30\",\"我们预先传入参数 5，并返回一个新函数赋值给 plus5，此函数可以接受剩余的参数。调用 plus5 传入剩余参数 10 得到最终结果 15，又传入参数 20 得到结果 30。偏函数通过设定预设值，帮助哦我们实现代码上的复用。\"]},\"1413\":{\"h\":\"实现偏函数\",\"t\":[\"在 Underscore.js 和 Lodash 均有实现 partial 偏函数，这里稍微实现一下：\",\"var _ = {}; function partial(fn) { var args = [].slice.call(arguments, 1); return function() { var position = 0, leng = args.length; for (var i = 0; i < len; i++) { args[i] = args[i] === _ ? arguments[position++] : args[i]; } while (position < arguments.length) args.push(arguments[position++]); return fn.apply(this, args); }; }\"]},\"1414\":{\"c\":[\"前端技术\"]},\"1415\":{\"c\":[\"JavaScript\"]},\"1416\":{\"h\":\"函数柯里化\",\"t\":[\"在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\",\"柯里化（Currying），又称部分求值（Partial Evaluation），是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。核心思想是把多参数传入的函数拆成单参数（或部分）函数，内部再返回调用下一个单参数（或部分）函数，依次处理剩余的参数。\",\"// 传统写法 fn(1, 2, 3, 4); // 柯里化 fn(1)(2)(3)(4);\",\"假设这个函数是用于求和，那么就是把本来接收多个参数一次性求和的函数改成了接收单一参数逐个求和的函数。这样是不是容易理解了。\"]},\"1417\":{\"h\":\"代码实现\",\"t\":[\"一步步实现一个柯里化函数。\",\"const sum3(x, y, z) { return x + y + z } console.log(sum(1,2,3)); // 6\",\"// 柯里化 const sum3(x) { return function (y) { return function (z) { return x + y + z } } } console.log(sum(1)(2)(3)); // 6\",\"function curry(fn) { return function (y) { return function (z) { return fn(x, y, z); }; }; } var sum3 = curry((x, y, z) => { return x + y + z; }); console.log(sum3(1)(2)(3)); // 6\",\"更多参数：\",\"function curryN(fn) { return function (a1) { return function (a2) { return function (a3) { //...... return function (aN) { return fn(a1, a2, a3, ...aN); }; }; }; }; }\",\"通过 递归 来简化这种写法：\",\"function next(fn) { return function (x) { return next(fn); }; } function curry(fn) { return next(fn); }\",\"这里缺少一个循环终止的判断，所以 next 函数先引入一个新参数 i，当 i === N 时递归终止\",\"function next(fn, i) { return function(x) { if (i === N) { return fn(...) } return next(fn, i + 1) } } function curry(fn) { return next(fn, 1) }\",\"接着，需要一个存放任意多个参数的数组，将这个数组命名为 args，然后传入 next 函数。\",\"function next(fn, i, args) { return function (x) { args.push(x); if (i === fn.length) { return fn(...args); } return next(fn, i + 1, args); }; } function curry(fn) { const args = []; return next(fn, 1, args); }\",\"最后在添加一个处理 0 个参数的情况，我们就完成了最终版的柯里化函数。\",\"function curry(fn) { if (fn.length === 0) { return fn; } const args = []; return next(fn, 1, args); }\"]},\"1418\":{\"h\":\"代码示例\",\"t\":[\"示例一：实现一个柯里化求和函数\",\"const currying = function (fn, ...args) { const len = fn.length; args = args || []; return () => { const totalArgs = [...args].concat([...arguments]); return totalArgs.length >= len ? fn.call(this, totalArgs) : currying.call(this, fn, totalArgs); }; }; const sum = (a, b, c) => a + b + c; const newSum = currying(sum); newSum(1)(2)(3)(4); // 10\",\"看起来挺巧妙，但是这种案例明摆着就像不从实际出发的面试题。\",\"示例二：查询数组中是否存在某值\",\"const find = function (arr, value) { return arr.indexOf(value) !== -1; };\",\"一个简单的函数用于查询数组中是否某个值，每次使用都需要这样调用。\",\"find(arr, 1); find(arr, 2);\",\"既然 arr 是个固定参数，那么我们可以先保存一个接收过 arr 的函数，再用这个函数去处理变化的参数。\",\"const collection = [5, 4, 3, 2, 1]; const findInCollection = currying(find)(collection); findInCollection(1); findInCollection(2);\",\"函数柯里化的用途可以理解为：参数复用。本质上是降低通用性，提高适用性。\",\"柯里化简便实现\",\"const curry = (fn) => (judge = (...args) => (args.length === fn.length ? fn(...args) : (arg) => judge(...args, arg))); // 展开 const currying = (fn) => {};\"]},\"1419\":{\"h\":\"反柯里化\",\"t\":[\"与柯里化相对应。\",\"柯里化是为了缩小适用范围，创建一个针对性更强的函数；\",\"反柯里化则是扩大适用范围，创建一个应用范围更广的函数。\",\"对应的代码转换就变成这样。\",\"fn(1)(2)(3)(4) -> fn(1, 2, 3, 4)\",\"实例\",\"Array.forEach = function () { const fn = [].pop.call(arguments); const arr = arguments.length > 1 ? arguments : arguments[0]; return [].forEach.call(arr, fn); }; Array.forEach(1, 2, 3, function (i) { console.log(i); // 1 2 3 }); Array.forEach('123', function (i) { console.log(i); // 1 2 3 }); Array.forEach( { '0': 1, '1': 2, '2': 3, length: 3, }, function (i) { console.log(i); // 1 2 3 } );\",\"类数组借用 Array 原型函数，是很常见的应用了。这个例子应用 call 函数提取出一个新的函数，可以接收更多的参数和类型，适用性更广。\"]},\"1420\":{\"c\":[\"前端技术\"]},\"1421\":{\"c\":[\"JavaScript\"]},\"1422\":{\"h\":\"函数睡眠\",\"t\":[\"伪命题，JavaScript 引擎线程无法挂起，通过异步实现类似 sleep 的效果。\"]},\"1423\":{\"h\":\"代码实现\"},\"1424\":{\"h\":\"回调函数实现\",\"t\":[\"const sleep = (cb, time) => setTimeout(cb, time); sleep(() => { console.log('Hello world!'); }, 1000);\"]},\"1425\":{\"h\":\"Promise 实现\",\"t\":[\"function sleep(time) { return function() { return new Promise(function(resolve, reject) { setTimeout(resolve, time); }); }; } const promise = new Promise(function(resolve) { console.log('do something'); resolve(); }) .then(sleep(2000)) .then(function() { console.log('after sleep 2000'); });\",\"优点：这种方式实际上是用了 setTimeout，没有形成进程阻塞，不会造成性能和负载问题\",\"缺点：虽然不像 callback 套那么多层，但仍不怎么美观，而且当我们需要在某过程中需要停止执行（或者在中途返回了错误的值），还必须得层层判断后跳出，非常麻烦，而且这种异步并不是那么彻底，还是看起来别扭\"]},\"1426\":{\"h\":\"Generator 实现\",\"t\":[\"function* sleep(time) { yield new Promise(function(resolve, reject) { setTimeout(resolve, time); }); } sleep(1000) .next() .value.then(() => { console.log('Hello world!'); });\",\"优点：同 Promise 优点，另外代码就变得非常简单干净，没有 then 那么生硬和恶心\",\"缺点：但不足也很明显，就是每次都要执行 next 显得很麻烦，虽然有 co（第三方包）可以解决，但就多包了一层不好看，错误也必须按 co 的逻辑来处理不爽\"]},\"1427\":{\"h\":\"Async/Await 实现\",\"t\":[\"function sleep(time) { return new Promise(function(resolve) { setTimeout(resolve, time); }); } async function test() { const res = await sleep(1000); console.log('Hello world!'); return res; } // 延迟 1000ms 输出 \\\"Hello world!\\\"\",\"优点：同 Promise 和 Generator 的优点。Async/Await 可以看座是 Generator 的语法糖，Async 和 Await 相较于 * 和 yield 更加语义，另外各个函数都是扁平的，不会产生多余的嵌套，代码更加清爽易读。\",\"缺点：ES7 语法存在兼容性问题，有 Babel 一切兼容性都不是问题\"]},\"1428\":{\"h\":\"使用 node-sleep\",\"t\":[\"const sleep = requir('node-sleep'); const sec = 10; sleep.sleep(sec); // Sleep for sec seconds sleep.msleep(sec); // Sleep for sec milliseconds sleep.usleep(sec); // Sleep for sec microseconds（1 second is 1000000 microseconds）\"]},\"1429\":{\"c\":[\"前端技术\"]},\"1430\":{\"c\":[\"JavaScript\"]},\"1431\":{\"h\":\"函数节流\",\"t\":[\"函数节流：规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。简单来说，触发后立即执行，但如果要执行下一次，需要在离上次执行时间间隔设定时间后再出发才能执行。\",\"🏕 生活中的实例：\",\"我们知道目前的一种说法是当 1 秒内连续播放 24 张以上的图片时，在人眼的视觉中就会形成一个连贯的动画，所以在电影的播放中基本是以每秒 24 张的速度播放的，为什么不是 100 张或更多呢，主要是因为 24 张就可以满足人类视觉需求的时候，100 张就会显得很浪费资源。\"]},\"1432\":{\"h\":\"目的\",\"t\":[\"从字面上就可以理解，函数节流就是用来节流函数从而一定程度上优化性能的。\",\"例如，DOM 操作比起非 DOM 交互需要占用更多的内存空间和消耗更多的 CPU 时间。连续尝试进行过多的 DOM 相关操作可能会导致浏览器卡顿，有时候甚至会崩溃。尤其在 IE 中使用 onresize 事件处理程序的时候容易发生，当调整浏览器大小的时候，该事件会连续触发。在 onresize 事件处理程序内部如果尝试进行 DOM 操作，其高频率的更改可能会让浏览器崩溃。\"]},\"1433\":{\"h\":\"代码实现\",\"t\":[\"/** * 实现函数的节流（目的是频繁触发中缩减频率） * @param fn {Function} 实际要执行的函数 * @param wait {Number} 执行间隔，单位是毫秒(ms)，默认100ms * @return {Function} 可被调用执行的函数 */ function throttle(fn, wait = 500) { // 利用闭包保存定时器和上次执行时间 // 上次执行时间 let timer = null, last; return function (...args) { const now = +new Date(); if (last && now < last + timeout) { clearTimeout(timer); timer = setTimeout(() => { last = now; fun.apply(this, args); }, timeout); } else { last = now; fn.apply(this, args); } }; }\"]},\"1434\":{\"h\":\"应用实践\"},\"1435\":{\"h\":\"原生实现应用\",\"t\":[\"首次点击按钮触发 trigger 函数，在 1000 毫秒内频繁点击按钮也不会再次执行 trigger 函数，直到 1000 毫秒之后再次点击才会再次执行 trigger 函数。\",\"const button = document.getElementById('button'); function trigger() { console.log('click'); } button.addEventListener('click', throttle(trigger, 1000));\"]},\"1436\":{\"h\":\"React 应用\",\"t\":[\"在 React 中使用，下面监听窗口的 resize 和输入框的 onChange 事件：\",\"import React, { Component } from 'react'; import { throttle } from '@utils/throttle'; export default class Invoke extends Component { constructor() { super(); this.change = throttle((e) => { console.log(e.target.value); console.log('throttle'); }, 100); } handleWindowResize() { console.log('resize'); } componentDidMount() { window.addEventListener('resize', throttle(this.handleWindowResize, 100)); } componentWillUnmount() { window.removeEvenetListener('resize', throttle(this.handleWindowResize), 100); } handleInputChange = (e) => { // 持久化 e.persist(); this.change(e); }; render() { return <input type=\\\"text\\\" onChange={this.handleInputChange} />; } }\",\"其他框架库的实现：\",\"Lodash - throttle\",\"Underscore - throttle\"]},\"1437\":{\"h\":\"应用场景\",\"t\":[\"常见的高频触发监听事件的应用场景：\",\"动画场景：避免短时间内多次触发动画引起性能问题\",\"拖拽场景：固定时间内只执行一次，防止超高频次触发位置变动（mousemove）\",\"缩放场景：监控浏览器窗口大小（resize）\",\"滚轮场景：鼠标滚轮事件（wheel）\",\"Canvas 画笔功能\",\"总结：适合大量事件按时间做平均分配触发\"]},\"1438\":{\"h\":\"页面滚动事件\",\"t\":[\"这里以判断页面是否滚动到底部为例，普通的做法就是监听 Window 对象的 scroll 事件，然后在函数体中写入判断是否滚动到底部的逻辑。\",\"$(window).on('scroll', function () { // 判断是否滚动到底部的逻辑 let pageHeight = $('body').height(), scrollTop = $(window).scrollTop(), winHeight = $(window).height(), thresold = pageHeight - scrollTop - winHeight; if (thresod > -100 && thresold <= 20) { console.log('The end'); } });\",\"这样做的一个缺点就是比较消耗性能，因为当在滚动的时候，浏览器会无时无刻地在计算判断是否滚动到底部的逻辑，而在实际场景中是不需要这么做的，在实际场景中可能是这样的：在滚动过程中，每隔一段时间再去计算这个判断逻辑。而函数节流所做的工作就是每隔一段时间去执行一次原本需要无时无刻地在执行的函数，所以在滚动事件中引入函数的节流是一个非常好的实践。\",\"$(window).on( 'scroll', throttle(function () { // 判断是否滚动到底部的逻辑 let pageHeight = $('body').height(), scrollTop = $(window).scrollTop(), winHeight = $(window).height(), thresold = pageHeight - scrollTop - winHeight; if (thresold > -100 && thresold <= 20) { console.log('end'); } }, 300) );\",\"加入函数节流之后，当页面再滚动的时候，每隔 300ms 才会执行一次判断逻辑。\",\"简单来说，函数的节流就是通过闭包保存一个标记（通常是定时器标识），在函数的开头判断这个标记是否为 true ，如果为 true 的话就继续执行函数，否则则 return 掉，判断完标记后立即把这个标记设为 false ，然后把外部传入的函数的执行包在一个 setTimeout 中，最后在 setTimeout 执行完毕后再把标记设置为 true （这里很关键），表示可以执行下一次的循环了。当 setTimeout还未执行的时候，canRun 这个标记始终为 false，在开头的判断中被 return 掉。\",\"function throttle(fn, interval = 300) { let canRun = true; return function () { if (!canRun) return; canRun = false; setTimeout(() => { fn.apply(this.arguments); canRun = true; }, interval); }; }\"]},\"1439\":{\"c\":[\"前端技术\"]},\"1440\":{\"c\":[\"JavaScript\"]},\"1441\":{\"h\":\"函数记忆\",\"t\":[\"函数记忆： 指将上次的（计算结果）缓存起来，当下次调用时，如果遇到相同的（参数），就直接返回（缓存中的数据）。\",\"实现原理：将参数和对应的结果保存在对象中，再次调用时，判断对象 key 是否存在，存在返回缓存的值。\",\"function memorize() { const cache = {}; return function() { const key = Array.prototype.call(arguments, ','); if (key in cache) { return cache[key]; } return (cache[key] = fn.apply(this, arguments)); }; }\"]},\"1442\":{\"c\":[\"前端技术\"]},\"1443\":{\"c\":[\"JavaScript\"]},\"1444\":{\"h\":\"函数防抖\",\"t\":[\"函数防抖：在频繁触发的情况下，只有足够的空闲时间，才执行代码一次，如果没有执行完就清除掉，重新执行逻辑。简单来说，当触发后再次触发，会取消上一次触发的执行，直到最后一次触发后过去设定时间后才执行。\",\"🏕 生活中的实例：\",\"假设你正在乘电梯上楼，当电梯门关闭之前发现有人也要乘电梯，礼貌起见，你会按下开门开关，然后等他进电梯；如果在电梯门块关闭之前，又有人来了，你会继续开门；这样一直进行下去，假定电梯没有容量限制，你可能需要等待几分钟，等到最终没人进电梯了，才会关闭电梯门，然后上楼。\",\"函数防抖规定函数再次执行需要满足两个条件：\",\"当调用事件触发一段时间后，才会执行该事件\",\"在条件一等待的这段时间间隔内再次调用此动作则将重新计算时间间隔\"]},\"1445\":{\"h\":\"实现原理\",\"t\":[\"某些代码不可以在没有间断的情况连续重复执行。第一次调用函数，创建一个定时器，在指定的时间间隔之后运行代码。当第二次调用该函数时，它会清除前一次的定时器并设置另一个。如果前一个定时器已经执行过了，这个操作就没有任何意义。然而，如果前一个定时器尚未执行，其实就是将其替换为一个新的定时器。目的是只有在执行函数的请求停止了一段时间之后才执行。\"]},\"1446\":{\"h\":\"代码实现\",\"t\":[\"当事件触发之后，必须等待设定的时间间隔之后，回调函数才会执行，假若在等待的时间内，事件又触发了则重新再等待设定的时间间隔，直到事件在设定的时间间隔内事件不被触发，那么最后一次触发事件后，则执行函数。\",\"💡 实现思路：\",\"将目标方法（动作）包装在定时器 setTimeout 里面，然后这个方法是一个事件的回调函数，如果这个回调函数一直执行，那么对应在运行的定时器通过设置 clearTimeout 进行清除，那么定时器内的目标方法也就不会执行，直到定时器的回调函数在时间间隔后开始执行，目标方法才被执行。\",\"/** * 实现函数的防抖（目的是频繁触发中只执行一次） * @param func {function} 需要执行的函数 * @param wait {number} 检测防抖的间隔频率，单位是毫秒（ms） * @return {function} 可被调用执行的函数 */ function debounce(func, wait = 500, immediate = false) { let timer = null; // 返回一个函数，这个函数会在一个时间区间结束后的 wait 毫秒执行 func 函数 return function (...args) { // 是否立即执行 if (immediate) { fn.apply(this, args); } // 函数被调用，清除定时器 timer && clearTimout(timer); // 当返回的函数被最后一个调用后（也就是用户停止了某个连续的操作） // 再过 wait 毫秒就执行 func // 这里直接使用箭头函数就不用保存执行上下文的引用了 timer = setTimeout(() => { fn.apply(this, args); }, delay); }; }\",\"其他框架库实现：Lodash Underscore\"]},\"1447\":{\"h\":\"应用场景\",\"t\":[\"函数防抖应用场景：连续事件的响应只需执行一次回调\",\"按钮提交场景：防止多次点击提交按钮，只执行最后提交的一次\",\"服务端验证场景：表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词功能类似\",\"总结：适合多次事件一次响应的情况\"]},\"1448\":{\"h\":\"应用实践\"},\"1449\":{\"h\":\"注册实时验证\",\"t\":[\"这里以用户注册时验证用户名是否被占用为例，如今很多网站为了提高用户体验，不会再输入框失去焦点的时候再去判断用户名是否被占用，而是在输入的时候就在判断这个用户名是否已被注册：\",\"$('input.user-name').on('input', function () { $.ajax({ url: `https://just.com/check`, method: 'post', data: { username: $(this).val(), }, success(data) { if (data.isRegistered) { $('.tips').text('该用户名已被注册！'); } else { $('.tips').text('恭喜！该用户名还未被注册！'); } }, error(error) { console.log(error); }, }); });\",\"很明显，这样的做法不好的是当用户输入第一个字符的时候，就开始请求判断了，不仅对服务器的压力增大了，对用户体验也未必比原来的好。而理想的做法应该是这样的，当用户输入第一个字符后的一段时间内如果还有字符输入的话，那就暂时不去请求判断用户名是否被占用。在这里引入函数防抖就能很好地解决这个问题：\",\"$('input.user-name').on( 'input', debounce(function () { $.ajax({ url: `https://just.com/check`, method: 'post', data: { username: $(this).val(), }, success(data) { if (data.isRegistered) { $('.tips').text('该用户名已被注册！'); } else { $('.tips').text('恭喜！该用户名还未被注册！'); } }, error(error) { console.log(error); }, }); }) );\",\"其实函数防抖的原理也非常地简单，通过闭包保存一个标记来保存 setTimeout 返回的值，每当用户输入的时候把前一个 setTimeout clear掉，然后又创建一个新的 setTimeout，这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数了。\",\"function debounce(fn, interval = 300) { let timeout = null; return function () { clearTimeout(timeout); timeout = setTimeout(() => { fn.apply(this, arguments); }, interval); }; }\"]},\"1450\":{\"c\":[\"前端技术\"]},\"1451\":{\"c\":[\"JavaScript\"]},\"1452\":{\"h\":\"回调函数\",\"t\":[\"回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码。\",\"在 JavaScript 中函数也是对象的一种，同样对象可以作为参数传递给函数，因此函数也可以作为参数传递给另外一个函数，这个作为参数的函数就是回调函数。\",\"回调函数\",\"function add(num1, num2, callback) { const sum = num1 + num2; // 数值相加后，将相加和作为参数传入回调函数 callback(sum); } function print(num) { console.log(num); } add(1, 2, print); // 3\",\"匿名回调函数\",\"function add(num1, num2, callback) { const sum = num1 + num2; // 数值相加后，将相加和作为参数传入回调函数 callback(sum); } add(1, 2, function(sum) { console.log(sum); // 3 });\"]},\"1453\":{\"h\":\"函数特点\"},\"1454\":{\"h\":\"不会立即执行\",\"t\":[\"回调函数作为参数传递给一个函数的时候，传递的只是函数的定义并不会立即执行。和普通的函数一样，回调函数在函调用函数数中也要通过 () 括号运算符调用才会执行。\"]},\"1455\":{\"h\":\"是个闭包\",\"t\":[\"回调函数是一个闭包，也就是说它能访问到其外层定义的变量。\"]},\"1456\":{\"h\":\"执行前类型判断\",\"t\":[\"function add(num1, num2, callback) { var sum = num1 + num2; if (typeof callback === 'function') { callback(sum); } }\"]},\"1457\":{\"h\":\"this 的使用\",\"t\":[\"注意在回调函数调用时 this 的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文。\",\"var obj = { sum: 0, add: function(num1, num2) { this.sum = num1 + num2; }, }; function add(num1, num2, callback) { callback(num1, num2); } add(1, 2, obj.add); console.log(obj.sum); // 0 console.log(window.sum); // 3\",\"上述代码调用回调函数的时候是在全局环境下，因此 this 指向的是 window，所以 sum 的值是赋值给windows的。\",\"关于 this 执行上下文的问题可以通过 apply 方法解决。\",\"const obj = { sum: 0, add: function(num1, num2) { this.sum = num1 + num2; }, }; function add(num1, num2, callbackObj, callback) { callback.apply(callbackObj, [num1, num2]); } add(1, 2, obj, obj.add); console.log(obj.sum); // 3 console.log(window.sum); // undefined\"]},\"1458\":{\"h\":\"允许传递多个回调函数\",\"t\":[\"// 一个函数中可以传递多个回调函数，典型的例子如 jQuery function beforeCallback() { // Do stuff before send } function successCallback() { // Do stuff if success message received } function completeCallback() { // Do stuff upon completion } function errorCallback() { // Do stuff if error received } $.ajax({ url: 'https://example.com/api/collect', before: beforeCallback, success: successCallback, complete: completeCallback, error: errorCallback, });\"]},\"1459\":{\"h\":\"函数嵌套\",\"t\":[\"一个回调函数中可以嵌入另一个回调函数，对于这种情况出现多层嵌套时，代码会难以阅读和维护，这个时候可以采用命名回调函数的方式调用，或者采用模块化管理函数，也可以用 Promise 模式编程。\"]},\"1460\":{\"h\":\"优点和使用场景\"},\"1461\":{\"h\":\"优点\",\"t\":[\"DRY，避免重复代码\",\"可以将通用的逻辑抽象\",\"加强代码可维护性\",\"加强代码可读性\",\"分离专职的函数\"]},\"1462\":{\"h\":\"使用场景\",\"t\":[\"异步编程\",\"事件监听、处理\",\"setTimeout、setInterval 方法\",\"通用功能，简化逻辑\"]},\"1463\":{\"c\":[\"前端技术\"]},\"1464\":{\"c\":[\"JavaScript\"]},\"1465\":{\"h\":\"惰性函数\",\"t\":[\"惰性函数 表示函数执行的分支只会在函数 第一次调用 的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。\"]},\"1466\":{\"h\":\"解决问题\",\"t\":[\"在一个方法里面可能会涉及到一些兼容性的问题，不同的浏览器对应不同的方法，第一次我们遍历这些方法找到最合适的那个， 并将这个方法覆盖于遍历它的函数，这就是惰性函数即只遍历一次就找到最佳方案，下次再要找那个方法的时候就不用遍历了，提高了性能。\",\"🌰 示例：常见的为 DOM 节点添加事件的函数\",\"function addEvent(type, element, func) { if (element.addEventListener) { element.addEventListener(type, func, false); } else if(element.attachEvent){ element.attachEvent('on' + type, func); } else{ element['on' + type] = func; } }\",\"每次调用 addEvent 函数的时候，它都要对浏览器所支持的能力进行检查，首先检查是否支持 addEventListener 方法，如果不支持，再检查是否支持 attachEvent 方法，如果还不支持，就用 DOM0 级的方法添加事件。这个过程，在 addEvent 函数每次调用的时候都要走一遍，其实，如果浏览器支持其中的一种方法，那么他就会一直支持了，就没有必要再进行其他分支的检测了，也就是说，if 语句不必每次都执行，代码可以运行的更快一些。解决的方案就是称之为 惰性载入 的技巧。\"]},\"1467\":{\"h\":\"函数重写\",\"t\":[\"在介绍惰性函数（或称惰性载入）之前，首先介绍函数重写技术。\",\"由于一个函数可以返回另一个函数，因此可以用新的函数来覆盖旧的函数。\",\"function foo(){ console.log('foo'); foo = function(){ console.log('bar'); } }\",\"这样一来，第一次调用该函数时会 console.log('foo') 会被执行，全局变量 foo 被重定义，并被赋予新的函数。当该函数再次被调用时，console.log('bar') 会被执行。\"]},\"1468\":{\"h\":\"惰性载入\",\"t\":[\"惰性函数的本质就是函数重写。所谓 惰性载入，就是说函数执行的分支只会执行一次，之后调用函数时，直接进入所支持的分支代码。\",\"有两种实现惰性载入的方式，第一种事函数在第一次调用时，对函数本身进行二次处理，该函数会被覆盖为符合分支条件的函数，这样对原函数的调用就不用再经过执行的分支了，我们可以用下面的方式使用惰性载入重写 addEvent()。\"]},\"1469\":{\"h\":\"在函数被调用时处理函数\",\"t\":[\"函数在第一次调用时，该函数会被覆盖为另外一个按合适方式执行的函数，这样任何对原函数的调用都不用再经过执行的分支了。代码重写如下\",\"function addEvent(type, element, func) { if (element.addEventListener) { addEvent = function (type, element, func) { element.addEventListener(type, func, false); } } else if(element.attachEvent){ addEvent = function (type, element, func) { element.attachEvent('on' + type, func); } } else{ addEvent = function (type, element, func) { element['on' + type] = func; } } return addEvent(type, element, func); }\",\"在这个惰性载入的 addEvent() 中，if 语句的每个分支都会为 addEvent 变量赋值，有效覆盖了原函数。最后一步便是调用了新赋函数。下一次调用 addEvent() 时，便会直接调用新赋值的函数，这样就不用再执行 if 语句了。\",\"但是，这种方法有个缺点，如果函数名称有所改变，修改起来比较麻烦。\"]},\"1470\":{\"h\":\"声明函数时指定适当的函数\",\"t\":[\"把嗅探浏览器的操作提前到代码加载的时候，在代码加载的时候就立刻进行一次判断，以便让 addEvent 返回一个包裹了正确逻辑的函数。\",\"var addEvent = (function () { if (document.addEventListener) { return function (type, element, func) { element.addEventListener(type, func, false); } } else if (document.attachEvent) { return function (type, element, func) { element.attachEvent('on' + type, func); } } else { return function (type, element, func) { element['on' + type] = func; } } })();\"]},\"1471\":{\"c\":[\"前端技术\"]},\"1472\":{\"c\":[\"JavaScript\"]},\"1473\":{\"h\":\"构造函数\",\"t\":[\"在典型的 OOP 语言中，如 Java 都存在类的概念，类就是对象的模版，对象就是类的实例。但是在 JavaScript 中不存在类的概念，JavaScript 不是基于类，而是通过构造函数（constructor）和原型链（prototype chains）实现的。但在 ES6 中引入了类（class） 这个概念，作为对象的模版，新的 class 写法知识让原型对象的写法更加清晰，这里不重点谈这个。\"]},\"1474\":{\"h\":\"特点\",\"t\":[\"构造函数的首字母必须大写，用来区分于普通函数\",\"内部使用的 this 对象，来指向即将要生成的实例对象\",\"使用 new 关键字来生成实例对象\",\"function Person(name, age){ this.name = name; this.age = age; this.sayHello = function(){ console.log(this.name + \\\"say hello\\\"); } } const foo = new Person('Bella', 23); foo.sayHello(); // Bella say hello\"]},\"1475\":{\"h\":\"缺点\",\"t\":[\"所有实例都会通过原型链引用到 prototype\",\"prototype 相当于特定类型所有实例都可以访问到一个公共容器\",\"那么我们就将重复的东西放到公共容器就好了\"]},\"1476\":{\"h\":\"作用\",\"t\":[\"constructor 属性的作用\",\"分辨原型对象到底是哪个构造函数\",\"function Person(){}; const person1 = new Person(); console.log(person1.constructor === Person); // true\",\"从实例中新建另一个实例\",\"function Person(){}; const person1 = new Person(){}; const person2 = new person1.constructor(); console.log(person2 instanceof Person); // true\",\"由于 constructor 属性是一种原型对象和构造函数的关系，所以在修改原型对象对的时候，一定要注意 constructor 的指向问题，避免 instanceof 失真。\"]},\"1477\":{\"h\":\"与普通函数对比\",\"t\":[\"在命名规则上，构造函数一般是首字母大写，普通函数遵照小驼峰式命名法。\",\"在函数调用的时候：\",\"构造函数\",\"普通函数\",\"new Fn()\",\"fn()\",\"构造函数内部会创建一个新的对象，即 Fn 的实例\",\"在调用函数的内部不会创建新的对象\",\"函数内部的 this 指向 新创建的 Fn 的实例\",\"函数内部的 this 指向调用函数的对象（如果没有对象调用，默认是 window）\",\"默认的返回值是 Fn 的实例\",\"返回值由 return 语句决定\",\"构造函数的返回值：\",\"有一个默认的返回值，新创建的实例对象。\",\"当手动添加返回值后（return 语句）：\",\"返回值是基本数据类型的话，真正的返回值还是那个新创建的实例对象\",\"返回值是复杂数据类型（对象）的话，真正的返回值是这个对象\"]},\"1478\":{\"c\":[\"前端技术\"]},\"1479\":{\"c\":[\"JavaScript\"]},\"1480\":{\"h\":\"类构造函数\"},\"1481\":{\"h\":\"ES5 中近类的结构\",\"t\":[\"ES5 中创建类的方法：新建一个构造函数，定义一个方法并且赋值给构造函数的原型\",\"'use strict'; function Person(name) { this.name = name; } Person.prototype.sayName = function () { return this.name; }; const uzi = new Person('Uzi'); console.log(uzi.sayName()); // Uzi\"]},\"1482\":{\"h\":\"ES6 class 类\",\"t\":[\"ES6 实现类非常简单，只需要类声明。\"]},\"1483\":{\"h\":\"类声明\",\"t\":[\"class Person { // 新建构造函数 constructor(name) { // 私有属性 this.name = name; } // 定义一个方法并且赋值给构造函数的原型 sayName() { return this.name } } const uzi = new Person('Uzi')； console.log(uzi.sayName()); // Uzi\",\"和 ES5 中使用构造函数不同的是，在 ES6 中，我们将原型的实现写在类中，但本质上还是一样的，都是需要新建一个类名，然后实现构造函数，再实现原型方法。\",\"私有属性是实例中的属性，不会出现在原型上，且只能在类的构造函数或方法中创建，此例的 name 就是一个私有属性。这里建议你在构造函数中创建所有私有属性，从而只通过一处就可以控制所有的私有属性。\",\"定义私有属性，只需要在构造方法中定义 this.xx = xx。\",\"值得注意的是：typeof Person 最终返回的结果是 function\",\"类声明和函数声明的区别和特点：\",\"函数声明可以被提升，类声明不能提升（与 let 声明类似）\",\"类声明中的代码自动强行运行在严格模式下\",\"类中的所有方法都是不可枚举的，而自定义类型中，可以通过 Object.defineProperty() 手工指定不可枚举属性\",\"每个类都有一个 [[constructor]] 方法\",\"只能使用 new 来调用类的构造函数\",\"不能在类中修改类名\"]},\"1484\":{\"h\":\"表现形式\",\"t\":[\"类有两种表现形式：\",\"声明式\",\"表达式\",\"// 声明式 class Person { constructor(){} } // 匿名表达式 const Car = class { constructor(){} } // 命名表达式，Order 可以在外部使用，而 Order1 只能在内部使用 const Order = class Order1 { constructor(){} }\"]},\"1485\":{\"h\":\"类和普通函数的共性\",\"t\":[\"可以将类作为参数传入函数\",\"// 新建一个类 let Person = class { sayName(){ return 'Uzi' } } // 该函数返回一个类的实例 function fn(Person) { return new Person(); } // 给 fn 函数传入 Person const uzi = fn(Person); console.log(uzi.sayName()); // Uzi\",\"通过立即调用类构造函数可以创建单例\",\"用 new 调用类的表达式，紧接着通过一对小括号调用这个表达式。\",\"const uzi = new class { constructor(name) { this.name = name; } sayName(){ return this.name } }('Uzi') console.log(uzi.sayName()); // Uzi\"]},\"1486\":{\"h\":\"函数存取器\",\"t\":[\"类支持在原型上定义访问器属性。\",\"尽管应该在类的构造函数中创建自己属性，但是类也支持直接在原型上定义访问器属性。创建 getter 时，需要在关键字 get 后紧跟一个空格和响应的标识符；创建 setter 时，只需把关键字 get 替换为 set 即可。\",\"class Person { constructor(state) { this.state = state } // 创建 getter get myName() { return this.state.name } // 创建 setter set myName(name) { this.state.name = name } } // 获取指定对象的自身属性描述符。自身属性描述符是指直接在对象上定义（而非从对象的原型即成）的描述符。 let descriptor = Object.getOwnPropertyDescriptor(Person.prototype, 'myName'); console.log('get' in descriptor); // true console.log(descriptor.enumerable); // false 不可枚举\"]},\"1487\":{\"h\":\"可计算成员名称\",\"t\":[\"可计算成员时指使用方括号包裹一个表达式，如下面定义了一个变量 methodName，然后使用 [methodName] 设置为类 Person 的原型方法。\",\"const methodName = 'sayName'; class Person { constructor(name) { this.name = name; } [methodName]() { return this.name } } const uzi = new Person('Uzi') uzi.sayName(); //\"]},\"1488\":{\"h\":\"生成器方法\",\"t\":[\"生成器是一个返回迭代器的函数。在类中，我们也可以使用生成器方法。\",\"class Person { *sayNum() { yield 1; yield 2; yield 3; } } const uzi = new Person(); console.log(uzi.sayNum().next()); // {done: false, value: 1} console.log(uzi.sayNum().next()); // {done: false, value: 1} console.log(uzi.sayNum().next()); // {done: false, value: 1}\",\"这个写法很有趣，我们新增一个原型方法稍微改动一下。\",\"class Person { *sayNum() { yield 1; yield 2; yield 3; } render(){ // 从 render 方法返回 sayNum，类似于 React 中经常用到的写法 return this.sayNum() } } let uzi = new Person(); console.log(uzi.render().next()); // {done: false, value: 1}\"]},\"1489\":{\"h\":\"静态成员\",\"t\":[\"静态成员是指在方法名或属性名前面加上 static 关键字，和普通方法不一样的是，static 修饰的方法不能在实例中访问，只能用类名直接访问。\",\"class Person { constructor(name) { this.name = name; } static create(name) { return new Person(name) } } const uzi = Person.create('Uzi'); console.log(uzi.name); // Uzi let ben = new Person(); console.log(ben.create('Ben')); // ben.create is not a function\"]},\"1490\":{\"h\":\"继承与派生类\",\"t\":[\"我们在写 React 的时候，自定义的组件汇集成 React.Component。\",\"class Person extends Component { constructor(props) { super(props) } }\",\"Person 叫做派生类，在派生类中，如果使用了构造方法，就必须使用 super()。\",\"class Person { constructor([name, age] = props){ this.name = name; this.age = age; } sayHi() { return `Hi, my name is ${this.name}, and I'm ${this.age} years old.`; } } class Player extends Person { constructor(props) { super(props) } } let uzi = new Player(['Uzi', 22]); console.log(uzi.sayHi()); // Hi, my name is Uzi, and I'm 22 years old.\",\"关于 super 使用的几点要求：\",\"只可以在派生类中使用 super，派生类是指继承自其他类的新类\",\"在构造函数中访问 this 之前要调用 super()，负责初始化 this。\",\"// Bad class Player extends Person { constructor(props) { this.name = 1 // 必须先写 super() super(props) } }\",\"如果不想调用 super，可以让类的构造函数返回一个对象。\"]},\"1491\":{\"h\":\"类方法遮蔽\",\"t\":[\"我们可以在继承的类中重写父类的方法。\",\"class Person { constructor([name, age] = props){ this.name = name; this.age = age; } sayHi() { return `Hi, my name is ${this.name}, and I'm ${this.age} years old.`; } } class Player extends Person { constructor(props) { super(props) } // 重写add方法，求积 sayHi() { return `Hi, my name is ${this.name}, ${this.age}.` } } let uzi = new Player(['Uzi', 22]); console.log(uzi.sayName()); // Hi, my name is Uzi, 22.`\"]},\"1492\":{\"h\":\"静态成员继承\",\"t\":[\"父类中静态成员，也可以继承到派生类中。静态成员继承只能通过派生类访问，不能通过派生类的实例访问。\",\"class Person { constructor([name, age] = props) { this.name = name; this.age = age } static say([name, age] = props) { return `${name}, ${age}`; } } class Player extends Person { constructor(props) { super(props) } } const uzi = new Play(['Uzi', 22]) console.log(uzi.say([2, 3])); // 5\"]},\"1493\":{\"h\":\"派生自表达式的类\",\"t\":[\"很好理解，就是指父类可以是一个表达式。\",\"function Rectangle(length, ){ // do something } class Square extends Rectangle { // do something }\"]},\"1494\":{\"c\":[\"前端技术\"]},\"1495\":{\"c\":[\"JavaScript\"]},\"1496\":{\"h\":\"级联函数\",\"t\":[\"级联函数 也叫 链式函数，是一种在一个对象上使用一条连续的代码来重复调用不同方法的技巧。这种技巧在 jQuery 和其他一些 JavaScript 库中很流行，它甚至也是一些 JavaScript 原生方法的内在特性，比如常见的字符串方法。一定程度上可以减少代码量，提高代码可读性，缺点是它占用了函数的返回值。\",\"级连函数的表达形式如下所示：\",\"// jQuery $('#wrapper').fadeOut().html('Welcome, Sir').fadeIn(); // 字符串操作 'kankuuii'.replace('k', 'R').toUpperCase().substr(0, 4); // 'RANK'\"]},\"1497\":{\"h\":\"实现方法\",\"t\":[\"要使用级联函数，我们只需要在每个函数中返回 this 对象（也就是后面方法中操作的对象）。操作的对象就会在执行完一个函数后继续调用往后的方法，即实现了链式操作了。\",\"function Person() { this.name = ''; this.age = 0; this.weight = 10; } Person.prototype = { setName:function(name){ this.name = name; return this; }, setAge:function(age){ this.age = age; return this; }, setWeight:function(weight) { this.weight = weight; return this; } } var uzi = new Person(); uzi.setName('Uzi').setAge(22).setWeight(160); console.log(uzi); // { name: \\\"Uzi\\\", age: 22, weight: 160 }\",\"通过工厂函数创建实例对象，由于所有对象都会继承其原型对象的属性和方法，所以我们可以让定义原型对象中的那几个方法都返回用以调用方法的实例对象的引用，这样既可以对那些方法进行链式调用。\"]},\"1498\":{\"c\":[\"前端技术\"]},\"1499\":{\"c\":[\"JavaScript\"]},\"1500\":{\"h\":\"高阶函数\",\"t\":[\"高阶函数 指操作函数的函数，一般地，有以下两种情况：\",\"函数可以作为参数被传递\",\"函数可以作为返回值输出\",\"JavaScript 中的函数显然满足高阶函数的条件，在实际开发中，无论是将函数当作参数传递，还是让函数的执行结果返回另外一个函数，这两种情形都有很多应用场景。\"]},\"1501\":{\"h\":\"作为参数传递\",\"t\":[\"把函数当作参数传递，代表可以抽离出一部分容易变化的业务逻辑，把这部分业务逻辑放在函数参数中，这样一来可以分离业务代码中变化与不变的部分。\"]},\"1502\":{\"h\":\"回调函数\",\"t\":[\"其中一个常见的应用场景就是回调函数。\",\"在 AJAX 异步请求的过程中，回调函数使用得非常频繁\",\"在不确定请求返回的时间时，将 callback 回调函数当作参数传入\",\"待请求完成后执行 callback 函数\",\"🌰 代码示例\",\"const getUserInfo = function (userId, callback) { $.ajax('http://example.com/getUserInfo?' + userId, function (data) { if (typeof callback === 'function') { callback(data); } }); }; getUserInfo(123, function (data) { console.log(data.userName); });\",\"回调函数的应用不仅只在异步请求中，当一个函数不适合执行一些请求时，也可以把这些请求封装成一个函数，并把它作为参数传递给另外一个函数，委托 给另外一个函数来执行。\",\"比如，想在页面中创建 100 个 div 节点，然后把这些 div 节点都设置为隐藏。\",\"const appendDiv = function () { for (let i = 0; i < 100; i++) { const div = document.createElement('div'); div.innerHTML = i; document.body.appendChild(div); div.style.display = 'none'; } }; appendDiv();\",\"把 div.style.display = 'none' 的逻辑硬编码在 appendDiv 里显然是不合理的，appendDiv 未免有点个性化，成为了一个难以复用的函数，并不是每个人创建了节点之后就希望它们立刻被隐藏。\",\"于是把 div.style.display = 'none' 这行代码抽出来，用回调函数的形式传入 appendDiv 方法\",\"const appendDiv = function (callback) { for (let i = 0; i < 100; i++) { const div = document.createElement('div'); div.innerHTML = i; document.body.appendChild(div); if (typeof callback === 'function') { callback(div); } } }; appendDiv(function (node) { node.style.display = 'none'; });\",\"可以看到，隐藏节点的请求实际上是由客户发起的，但是客户并不知道节点什么时候会创建好，于是把隐藏节点的逻辑放在回调函数中，委托 给 appendDiv 方法。appendDiv 方法当然知道节点什么时候创建好，所以在节点创建好的时候，appendDiv 会执行之前客户传入的回调函数。\"]},\"1503\":{\"h\":\"数组排序\",\"t\":[\"函数作为参数传递的另一个常见场景是数组排序函数 sort()。Array.prototype.sort 接受一个函数当作参数，这个函数里面封装了数组元素的排序方法。目的是对数组进行排序，这是不变的部分；而使用什么规则去排序，则是可变的部分。把可变的部分封装在函数参数里，动态传入 Array.prototype.sort，使 Array.prototype.sort 方法成为了一个非常灵活的方法。\",\"// 从小到大排列，输出: [ 1, 3, 4 ] [1, 4, 3].sort(function (a, b) { return a - b; }); // 从大到小排列，输出: [ 4, 3, 1 ] [1, 4, 3].sort(function (a, b) { return b - a; });\"]},\"1504\":{\"h\":\"作为返回值输出\",\"t\":[\"相比把函数当作参数传递，函数当作返回值输出的应用场景也有很多。让函数继续返回一个可执行的函数，意味着运算过程是可延续的。\",\"下面是使用 Object.prototype.toString 方法判断数据类型的一系列的 isType 函数\",\"let isString = function (obj) { return Object.prototype.toString.call(obj) === '[object String]'; }; let isArray = function (obj) { return Object.prototype.toString.call(obj) === '[object Array]'; }; let isNumber = function (obj) { return Object.prototype.toString.call(obj) === '[object Number]'; };\",\"实际上，这些函数的大部分实现都是相同的，不同的只是 Object.prototype.toString.call(obj) 返回的字符串。为了避免多余的代码，可以把这些字符串作为参数提前传入 isType 函数。\",\"let isType = function (type) { return function (obj) { return Object.prototype.toString.call(obj) === '[object ' + type + ']'; }; }; const isString = isType('String'); const isArray = isType('Array'); const isNumber = isType('Number'); console.log(isArray([1, 2, 3])); // true\",\"其实上面实现的 isType 函数，也属于偏函数的范畴，偏函数实际上是返回了一个包含预处理参数的新函数，以便后续逻辑可以调用。\",\"当然，还可以用循环语句，来批量注册这些 isType 函数：\",\"let Type = {}; for (var i = 0, type; (type = ['String', 'Array', 'Number'][i++]); ) { (function (type) { Type['is' + type] = function (obj) { return Object.prototype.toString.call(obj) === '[object ' + type + ']'; }; })(type); } Type.isArray([]); // true Type.isString('str'); // true\"]},\"1505\":{\"h\":\"AOP 面向切面编程\",\"t\":[\"AOP 即面向切面编程，它的主要作用是 把一些跟核心业务逻辑模块无关的功能抽离出来，这些跟业务逻辑无关的功能通常包括日志统计、安全控制、异常处理等。把这些功能抽离出来之后，再通过 动态织入 的方式掺入业务逻辑模块中。这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。\",\"通常，在 JavaScript 中实现 AOP，都是指把一个函数 动态织入 到另外一个函数之中。下面通过扩展 Function.prototype 来实现\",\"Function.prototype.before = function (beforefn) { // 保存原函数的引用 const _this = this; // 返回包含了原函数和新函数的 \\\"代理\\\" 函数 return function () { // 先执行新函数，修正 this beforefn.apply(this, arguments); // 再执行原函数 return _this.apply(this, arguments); }; }; Function.prototype.after = function (afterfn) { const _this = this; return function () { // 先执行原函数 const result = _this.apply(this, arguments); // 再执行新函数 afterfn.apply(this, arguments); return result; }; }; const fn = function () { console.log(2); }; fn = fn .before(function () { console.log(1); }) .after(function () { console.log(3); }); fn(); // 1 2 3\",\"把负责输出数字 1 和输出数字 3 的两个函数通过 AOP 的方式动态植入 fn 函数。\",\"通过执行上面的代码，控制台顺利地返回了执行结果 1、2、3。\",\"const service = function () { console.log('功能逻辑'); }; const proxyMethod = (function () { let startTime; return { before: function () { startTime = new Date(); console.log('计时开始'); }, after: function () { const endTime = new Date() - startTime; console.log('计时结束，用时：' + endTime); }, }; })(); const aop = function (fn, proxy) { proxy.before && proxy.before(); fn(); proxy.after && proxy.after(); }; aop(service, proxyMethod); // 计时开始 // 功能逻辑 // 计时结束：1\"]},\"1506\":{\"h\":\"其他应用\",\"t\":[\"函数柯里化\",\"反柯里化\",\"函数节流\",\"函数防抖\"]},\"1507\":{\"c\":[\"前端技术\"]},\"1508\":{\"c\":[\"JavaScript\"]},\"1509\":{\"h\":\"函数调用模式\",\"t\":[\"函数调用模式（Function Invocation Pattern）\",\"当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。对于普通的函数调用来说，函数的返回值就是调用表达式的值。\",\"function add ( x, y ){ return x + y; } var sum = add( 3, 4); console.log( sum ) // 7\"]},\"1510\":{\"h\":\"调用母体\",\"t\":[\"使用函数调用模式调用函数时，非严格模式下，this 被绑定到全局对象；在严格模式下，this 是 undefined。\",\"function add( x, y){ console.log( this ); // window } add(); function add(x,y){ 'use strict'; console.log(this); // undefined } add();\",\"💡因此，this 可以用来判断当前是否是严格模式\",\"const strict = (function(){ return !this; }());\"]},\"1511\":{\"h\":\"重写现象\",\"t\":[\"因为函数调用模式的函数中的 this 绑定到全局对象，所以会发生全局属性被重写的现象。\",\"var a = 0; function fn(){ this.a = 1; } fn(); console.log(this, this.a, a); // window 1 1\"]},\"1512\":{\"c\":[\"前端技术\"]},\"1513\":{\"c\":[\"JavaScript\"]},\"1514\":{\"h\":\"方法调用模式\",\"t\":[\"方法调用模式（Method Invocation Pattern）\",\"在面向对象程序设计中，当函数（Function）作为对象属性时被称为方法（Method）。方法被调用时 this 会被绑定到对应的对象。在 JavaScript 中有两种语法可以完成方法调用。\"]},\"1515\":{\"h\":\"函数作为方法调用\",\"t\":[\"当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，this 被绑定到该对象。如果调用表达式包含一个提取属性的动作，那么它就是被当做一个方法来调用。\",\"var foo = { fn: function(){ console.log(1); } }; foo.fn(); // 1\"]},\"1516\":{\"h\":\"对象的公共方法提取\",\"t\":[\"方法可以使用 this 访问自己所属的对象，所以它能从对象中取值或对对象进行修改。this 到对象的绑定发生在调用的时候。通过 this 可取得它们所属对象的上下文的方法称为公共方法。\",\"var foo = { id: 1, fn: function(){ return this; }, update: function(){ this.id = 2; } }; console.log(foo.fn().id); // 1 foo.update(); console.log(foo.fn().id); // 2\"]},\"1517\":{\"h\":\"隐式实参\",\"t\":[\"任何函数只要作为方法调用实际上都会传入一个隐式的实参——这个实参是一个对象，方法调用的母体就是这个对象，通常来讲，基于那个对象的方法可以执行多种操作，方法调用的语法已经很清晰地表明了函数将基于一个对象进行操作。\",\"rect.setSize(width, height); setRectSize(rect, width, height);\",\"假设上面两行代码的功能完全一样，它们都作用于一个假定的对象 rect。可以看出，第一行的方法调用语法非常清晰地表明这个函数执行的载体是 rect 对象，函数中的所有操作都将基于这个对象。\"]},\"1518\":{\"h\":\"函数方法中的 this\",\"t\":[\"和变量不同，关键字 this 没有作用域的限制，嵌套的函数不会从调用它的函数中继承 this。\",\"如果嵌套函数作为方法调用，其 this 的值指向 调用它的对象。 如果嵌套函数作为函数调用，其 this 值不是 全局对象（非严格模式下）就是 undefined（严格模式下）。\",\"var foo = { fn: function(){ function n(){ return this; } return n(); } } console.log(foo.fn()); // window var foo = { fn: function(){ function n(){ 'use strict'; return this; } return n(); } } console.log(foo.fn()); // undefined\",\"如果想访问这个外部函数的 this 值，需要将 this 的值保存在一个变量里，这个变量和内部函数都同在一个作用域内。通常使用变量 self 或 that 来保存 this。\",\"const foo = { fn: function(){ const self = this; console.log(this === foo); //true function n(){ console.log(this === foo); //false console.log(self === foo); //true return self; } return n(); } } console.log(foo.fn() === foo); // true\"]},\"1519\":{\"c\":[\"前端技术\"]},\"1520\":{\"c\":[\"JavaScript\"]},\"1521\":{\"h\":\"构造函数调用模式\",\"t\":[\"构造函数调用模式（Constructor Invocation Pattern）\",\"构造函数调用模式的特征：\",\"构造函数的首字母一般要大写\",\"一般情况下和关键字 new 一起使用\",\"构造函数中的 this 指向 new 关键字创建出来的实例对象\",\"默认返回 new 创建出来的这个对象（this）\"]},\"1522\":{\"h\":\"关键字 new\",\"t\":[\"如果函数或者方法调用之前带有关键字 new，它就构成构造函数调用。\",\"function fn(){ this.a = 1; }; const obj = new fn(); console.log(obj.a); // 1\"]},\"1523\":{\"h\":\"实参表达式\",\"t\":[\"如果构造函数调用在圆括号内包含一组实参列表，先计算这些实参表达式，然后传入函数内。\",\"function fn(x){ this.a = x; }; const obj = new fn(2); console.log(obj.a); // 2\"]},\"1524\":{\"h\":\"省略圆括号\",\"t\":[\"如果构造函数没有形参，JavaScript 构造函数调用的语法是允许省略实参列表和圆括号的。凡是没有形参的构造函数调用都可以省略圆括号。\",\"const target = new Object(); //等价于 const target = new Object;\"]},\"1525\":{\"h\":\"调用上下文\",\"t\":[\"尽管构造函数看起来像一个方法调用，它依然会使用这个新对象作为调用上下文。也就是说，在表达式 new target.fn() 中，调用上下文并不是 target。\",\"const target = { fn: function(){ return this; } } var obj = new target.fn(); console.log(obj,obj === target); //{} false console.log(obj.constructor === target.fn); //true\"]},\"1526\":{\"h\":\"构造函数的返回语句\",\"t\":[\"构造函数通常不使用 return 关键字，它们通常初始化新对象，当构造函数的函数体执行完毕时，它会显式返回。在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值。\",\"function fn(){ this.a = 2; } const test = new fn(); console.log(test); // { a: 2 }\",\"如果构造函数使用 return 语句但没有指定返回值，或者返回一个原始值，那么这时将忽略返回值，同时使用这个新对象作为调用结果。\",\"function fn(){ this.a = 2; return; } const test = new fn(); console.log(test); // { a: 2 }\",\"如果构造函数显式地使用 return 语句返回一个对象，那么调用表达式的值就是这个对象。\",\"const obj = { a: 1 }; function fn(){ this.a = 2; return obj; } const test = new fn(); console.log(test); // { a: 1 }\"]},\"1527\":{\"c\":[\"前端技术\"]},\"1528\":{\"c\":[\"JavaScript\"]},\"1529\":{\"h\":\"间接调用模式\",\"t\":[\"JavaScript 中函数也是对象，函数对象也可以包含方法。call() 和 apply() 方法可以用来间接地调用函数。\",\"这两个方法都允许显式指定调用所需的 this 值，也就是说，任何函数可以作为任何对象的方法来调用，哪怕这个函数不是那个对象的方法。两个方法都可以指定调用的实参。call() 方法使用它自有的实参列表作为函数的实参，apply() 方法则要求以数组的形式传入参数。\",\"var obj = {}; function sum(x, y) { return x + y; } console.log(sum.call(obj, 1, 2)); // 3 console.log(sum.apply(obj, [1, 2])); // 3\"]},\"1530\":{\"c\":[\"前端技术\"]},\"1531\":{\"c\":[\"JavaScript\"]},\"1532\":{\"h\":\"事件循环\",\"t\":[\"为了协调事件、用户交互、脚本、UI 渲染、网络请求，用户代理必须使用 事件循环机制（Event Loop）。\",\"这种事件循环机制是由 JavaScript 的宿主环境来实现的，在浏览器运行环境中由浏览器内核引擎实现，而在 NodeJS 中则由 libuv 引擎实现。\",\"主线程运行时候，产生堆（Heap）和栈（Stack），栈中的代码调用各种外部 API，它们在任务队列中加入各种事件。只要栈中的代码执行完毕，主线程就会通过事件循环机制读取任务队列，依次执行那些事件所对应的回调函数。\",\"运行机制：\",\"所有同步任务都在主线程上执行，形成一个 执行栈（Execution Context Stack）\",\"主线程之外，还存在一个 任务队列（Task Queue）。只要异步任务有了运行结果，就在 任务队列 之中放置一个事件\",\"一旦 执行栈 中的所有同步任务执行完毕，系统就会读取 任务队列，看看里面有哪些待执行事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行\",\"主线程不断重复上面的第三步\"]},\"1533\":{\"h\":\"浏览器环境\",\"t\":[\"JavaScript 的异步任务根据事件分类分为两种：宏任务（MacroTask）和 微任务（MicroTask）\",\"宏任务：main script、setTimeout、setInterval、setImmediate（Node.js）、I/O（Mouse Events、Keyboard Events、Network Events）、UI Rendering（HTML Parsing）、MessageChannel\",\"微任务：Promise.then（非 new Promise）、process.nextTick（Node.js）、MutationObserver\",\"宏任务与微任务的区别在于队列中事件的执行优先级。进入整体代码（宏任务）后，开始首次事件循环，当执行上下文栈清空后，事件循环机制会优先检测微任务队列中的事件并推至主线程执行，当微任务队列清空后，才会去检测宏任务队列中的事件，再将事件推至主线程中执行，而当执行上下文栈再次清空后，事件循环机制又会检测微任务队列，如此反复循环。\",\"宏任务与微任务的优先级\",\"宏任务的优先级高于微任务\",\"每个宏任务执行完毕后都必须将当前的微任务队列清空\",\"第一个 <script> 标签的代码是第一个宏任务\",\"process.nextTick 优先级高于 Promise.then\",\"🌰 代码示例：\",\"console.log(1); setTimeout(() => { console.log(2); }, 0); let promise = new Promise((res) => { console.log(3); resolve(); }) .then((res) => { console.log(4); }) .then((res) => { console.log(5); }); console.log(6); // 1 3 6 4 5 2\"]},\"1534\":{\"h\":\"Node 环境\",\"t\":[\"在 Node 中，事件循环表现出的状态与浏览器中大致相同。不同的是 Node 中有一套自己的模型。Node 中事件循环的实现是依靠的 libuv 引擎。我们知道 Node 选择 Chrome V8 引擎作为 JavaScript 解释器，V8 引擎将 JavaScript 代码分析后去调用对应的 Node API，而这些 API 最后则由 libuv 引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。 因此实际上 Node 中的事件循环存在于 libuv 引擎中。\",\"┌───────────────────────┐ ┌─>│ timers │ │ └──────────┬────────────┘ │ ┌──────────┴────────────┐ │ │ I/O callbacks │ │ └──────────┬────────────┘ │ ┌──────────┴────────────┐ │ │ idle, prepare │ │ └──────────┬────────────┘ ┌───────────────┐ │ ┌──────────┴────────────┐ │ incoming: │ │ │ poll │<──connections─── │ │ └──────────┬────────────┘ │ data, etc. │ │ ┌──────────┴────────────┐ └───────────────┘ │ │ check │ │ └──────────┬────────────┘ │ ┌──────────┴────────────┐ └──┤ close callbacks │ └───────────────────────┘\",\"外部输入数据\",\"轮询阶段（Poll）：等待新的 I/O 事件，Node 在一些特殊情况下会阻塞在这里\",\"检查阶段（Check）：setImmediate 的回调会在这个阶段执行\",\"关闭事件回调阶段（Close Callback）\",\"定时器检测阶段（Timer）：这个阶段执行定时器队列中的回调\",\"I/O 事件回调阶段（I/O Callbacks）：这个阶段执行几乎所有的回调，但是不包括 close 事件、定时器和 setImmediate() 的回调\",\"闲置阶段（Idle Prepare）：仅在内部使用，不必理会\",\"当一个消息需要太长时间才能处理完毕时，Web 应用就无法处理用户的交互，例如点击或滚动。浏览器用程序需要过长时间运行的对话框来缓解这个问题。一个很好的做法是缩短消息处理，并在可能的情况下将一个消息裁剪成多个消息。\"]},\"1535\":{\"c\":[\"前端技术\"]},\"1536\":{\"c\":[\"JavaScript\"]},\"1537\":{\"h\":\"定时器机制\",\"t\":[\"让我们看看这里发生了什么事情：\",\"首先在 0 毫秒的时候有一个持续 18 毫秒的 JavaScript 代码块要执行。\",\"然后在 0 毫秒的时候设了两个 10 毫秒延迟的定时器，setTimeout 以及 setInterval ，setTimeout 先设定。\",\"在第 6 毫秒的时候有一个发生了鼠标单击事件。\"]},\"1538\":{\"h\":\"事件排队\",\"t\":[\"同时发生了这么多事情，由于 JavaScript 的 单线程 特性：当主线程正在执行状态，有异步事件触发时，它就会退出主线程，进入宿主环境中用于处理定时器的线程，当准备就绪后会进入事件队列，并且在主线程空闲时才推入执行。\",\"这里的异步事件包括：鼠标单击、定时器触发、Ajax 请求、Promise 等事件。\",\"示例中首先有一个 18 毫秒的代码块要执行，在这 18 毫秒中只能执行这段代码块，其他事件触发了之后只能在事件队列中排队等待执行。\",\"在代码块还在运行期间，第 6 毫秒的时候，发生了一个鼠标单击事件，以及第 10 毫秒时的 setTimeout 和 setInterval 两个处理程序，这三个事件不能立即执行，而是被添加到等待执行的事件队列中。\"]},\"1539\":{\"h\":\"先进先出原则\",\"t\":[\"18 毫秒的时候代码块结束执行，有三个任务在排队等待执行，根据先进先出的原则，此时会先执行 click 鼠标点击事件，setTimeout 和 setInterval 将继续排队等待执行。先进先出原则可以理解为先排队的先执行。\"]},\"1540\":{\"h\":\"间歇调用定时器调用被废弃\",\"t\":[\"在鼠标点击事件执行时，第 20 毫秒处，第二个 setInterval 也到期了，因为此时已经 click 事件占用了线程，所以 setInterval 还是不能被执行，并且因为此时队列中已经有一个 setInterval 正在排队等待执行，所以这一次的 setInterval 的调用将被废弃。\",\"[!warning] 浏览器不会对同一个 setInterval 处理程序多次添加到待执行队列。\"]},\"1541\":{\"h\":\"定时器无法保证准时执行回调函数\",\"t\":[\"鼠标点击事件在第 28 毫秒处结束执行，有两个任务（setTimeout 和 setInterval）正在等待执行，遵循先进先出的原则，setTimeout 早于 setInterval 设定，所以先执行 setTimeout。\",\"因此我们期望在第 10 毫秒处执行的 setTimeout 处理程序，最终会在第 28 毫秒处才开始执行，这就是上文提到的 setTimeout /setInterval 无法保证准时执行回调函数。\",\"在 30 毫秒处，setInterval 又触发了，因为队列中已经有 setInterval 在排队，所以这次的触发又作废了。\"]},\"1542\":{\"h\":\"间歇调用定时器的连续执行\",\"t\":[\"setTimeout 执行结束，在第 36 毫秒处，队列中的 setInterval 处理程序才开始执行，setInterval 需要执行 6 毫秒。\",\"在第 40 毫秒的时候 setInterval 再次触发，因为此时上一个 setInterval 正在执行期间，队列中并没有 setInterval 在排队，这次触发的 setInterval 将进入队列等候。\",\"因此，setInterval 的处理时长不能比设定的间隔长，否则 setInterval 将会没有间隔地重复执行。\",\"第 42 毫秒的时候，第一个 setInterval 结束，然后队列中的 setInterval 立即开始执行，在 48 毫秒的时候完成执行。然后 50 毫秒的时候再次触发 setInterval，此时没有任务在排队，将会立即执行。\"]},\"1543\":{\"h\":\"超时调用定时器按固定间隔触发周期性定时器\",\"t\":[\"上文说了，setInterval 的处理时长不能比设定的间隔长，否则 setInterval 将会没有间隔的重复执行。\",\"但是对这个问题，很多情况下，我们并不能清晰的把控处理程序所消耗的时长，为了我们能按照一定的间隔周期性的触发定时器。\",\"// 实际上我不止在忍者秘籍中见过，在很多地方都见过这种技术。 setTimeout(function repeatMe() { // do something setTimeout(repeatMe, 10); // 执行完处理程序的内容后，在末尾再间隔10毫秒来调用该程序，这样就能保证一定是10毫秒的周期调用 }, 10);\",\"定时器不能非常细粒化的控制执行的时间，书中建议在 15ms 以上。\",\"可以使用定时器来分解长时间运行的任务，这里可以自行谷歌。\",\"函数 setTimeout 接受两个参数：待加入队列的消息 和 一个延迟（可选，默认为 0）。这个延迟代表了消息被实际加入到队列的最小延迟时间。如果队列中没有其它消息，在这段延迟时间过去之后，消息会被马上处理。但是，如果有其它消息，setTimeout 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少延迟时间，而非确切的等待时间。\"]},\"1544\":{\"c\":[\"前端技术\"]},\"1545\":{\"c\":[\"JavaScript\"]},\"1546\":{\"h\":\"并发模型\"},\"1547\":{\"h\":\"名词解释\",\"t\":[\"在了解 JavaScript 单线程、非阻塞机制之前，先了解几组易混淆的概念。\",\"进程和线程的概念以及关系：\",\"进程（Process）：进程是系统资源分配和调度的单元。一个运行着的程序就对应了一个进程。一个进程包括了运行中的程序和程序所使用到的内存和系统资源。\",\"线程（Thread）：线程是进程下的执行者，一个进程至少开启一个线程（主线程），也可以开启多个线程。\",\"并行和并发的概念：\",\"并行（Parallelism）：指程序的运行状态，在同一时间内有几件事情并行在处理。由于一个线程在同一时间只能处理一件事情，所以并行需要多个线程在同一时间执行多件事情。\",\"并发（Concurrency）：指程序的设计结构，在同一时间内多件事情能被交替地处理。重点是，在某个时间内只有一件事情在执行。比如单核 CPU 能实现多任务运行的过程就是并发。\",\"阻塞和非阻塞的概念：\",\"阻塞（Blocking）：阻塞是指调用在等待的过程中线程被挂起（CPU 资源被分配到其他地方去）\",\"非阻塞（Non-blocking）：非阻塞是指等待的过程 CPU 资源还在该线程中，线程还能做其他的事情\",\"再来区分单线程和多线程的区别：\",\"单线程：从头执行到尾，逐行执行，如果其中一行代码报错，那么剩下代码将不再执行。同时容易代码阻塞。\",\"多线程：代码运行的环境不同，各线程独立，互不影响，避免阻塞。\",\"同步与异步的概念：\",\"同步（Synchronous）：程序发出调用的时候，一直等待直到返回结果，没有结果之前不会返回。也就是，同步时调用者主动等待调用过程，且能立即得到结果的。\",\"异步（Asynchronous）：程序发出调用之后，无法立即得到结果，需要额外的操作才能得到预期的结果是为异步。\"]},\"1548\":{\"h\":\"运行环境\",\"t\":[\"JavaScript 的运行通常是在浏览器环境中进行的，具体由 JavaScript 引擎去解析和运行。\"]},\"1549\":{\"h\":\"浏览器线程\",\"t\":[\"目前最为流行的浏览器为：Chrome、IE、Safari、Firefox、Opera。浏览器的内核是多线程的，通常由以下几个常驻的线程组成：\",\"渲染引擎线程：负责页面的渲染\",\"JavaScript 引擎线程：负责 JavaScript 的解析和执行\",\"定时触发器线程：处理定时事件，比如 setTimeout、setInterval\",\"浏览器事件触发线程：处理 DOM 事件\",\"异步 HTTP 请求线程：处理 HTTP 请求\",\"[!warning] 渲染线程和 JavaScript 引擎线程是 互斥 的。渲染线程在执行任务的时候，JavaScript 引擎线程会被挂起。因为 JavaScript 可以操作 DOM，若在渲染中 JavaScript 处理了 DOM，浏览器可能会不知所措了。\"]},\"1550\":{\"h\":\"内核引擎\",\"t\":[\"通常讲到浏览器的时候，我们会说到两个浏览器的核心组件：渲染引擎（Rendering Engine）和 JavaScript 解释器（JavaScript Interpreter）。\",\"浏览器厂商\",\"渲染引擎\",\"JavaScript 解释器（引擎）\",\"Chrome\",\"Webkit => Blink\",\"V8\",\"Safari\",\"Webkit\",\"Nitro\",\"Firefox\",\"Gecko\",\"SpiderMonky / TraceMonkey / JaegerMonkey\",\"Opera\",\"Presto => Blink\",\"Linear A / Linear B / Futhark / Carakan\",\"Internet Explorer\",\"Trident => EdgeHTML\",\"JScript / Chakra（9+）\",\"Edge\",\"EdgeHTML => Chromium\",\"Chakra\",\"注：Webkit 引擎包含 WebCore 排版引擎及 JavaScript Core 解析引擎\",\"不同的渲染引擎对同一个样式的实现不一致，就导致了经常被人诟病的浏览器样式兼容性问题。\",\"JavaScript 解释器可以说是 JavaScript 虚拟机，负责 JavaScript 代码的解析和执行。这里 编译阶段 有详细解读。\"]},\"1551\":{\"h\":\"单线程\",\"t\":[\"JavaScript 的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准呢？\",\"所以，为了避免复杂性，从诞生之初以来，JavaScript 运行环境就是单线程，这已经成了这门语言的核心特征，将来也不会改变。\",\"为了利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制，且不得操作 DOM。所以，这个新标准并没有改变 JavaScript 单线程的本质。\",\"[!warning] JavaScript 的单线程是指一个程序进程（在浏览器运行环境中运行的就是浏览器进程）中只有一个 JavaScript 的执行线程，同一时刻内只会有一段 JavaScript 代码在执行。而异步机制是运行环境的两个或以上常驻线程共同完成的。\"]},\"1552\":{\"h\":\"任务队列\",\"t\":[\"JavaScript 中的程序任务可以分为两种：\",\"同步任务（Synchronous）：同步任务在主线程上调用之后需要一直等待，只有当前任务执行完毕后，才能执行下一个任务\",\"异步任务（Asynchronous）：异步任务会在主线程先执行一部分，然后退出主线程至专用线程中执行。在异步任务准备就绪后，会被推进任务队列等待（Task Queue），当主线程空闲时，JavaScript 解释器会执行一次事件循环（EventLoop）将事件队列中首个事件推进主线程执行\",\"具体来说，异步执行的运行机制 如下：\",\"所有同步任务及异步任务按照 编译原理 在主线程上执行，形成一个 执行上下文栈（Execution Context Stack）\",\"同步任务执行完成并返回结果后退出执行上下文栈；异步任务执行一部分后，退出主线程的执行上下文栈，推进至运行环境的专用线程中继续执行\",\"当运行环境的专用线程中的异步任务准备就绪后，将被推至任务队列（Task Queue）中等待执行\",\"主线程的执行上下文栈中的所有任务执行完毕后，JavaScript 解释器就会通过事件循环机制检查任务队列中是否存在等待执行的事件。如果存在，则队首的异步任务将结束等待状态，进入执行上下文执行\",\"JavaScript 主线程运行期间将不断重复上面第四步\"]},\"1553\":{\"c\":[\"前端技术\"]},\"1554\":{\"c\":[\"JavaScript\"]},\"1555\":{\"h\":\"执行上下文栈\",\"t\":[\"当我们调用一个函数时（激活），一个新的执行上下文就会被创建。\",\"一个执行上下文的生命周期可分为 创建阶段 和 代码执行阶段 两个阶段。\",\"创建阶段：在这个阶段中，执行上下文会分别进行以下操作\",\"创建 变量对象\",\"建立 作用域链\",\"确定 this 的指向\",\"代码执行阶段：创建完成之后，就会开始执行代码，并依次完成以下步骤\",\"变量赋值\",\"函数引用\",\"执行其他代码\"]},\"1556\":{\"h\":\"可执行代码\",\"t\":[\"每次当控制器转到可执行代码的时候，就会进入一个执行上下文。\",\"执行上下文可以理解为当前代码的执行环境，它会形成一个作用域。\",\"JavaScript 中的运行环境大概包括三种情况：\",\"全局环境：JavaScript 代码运行起来会首先进入该环境\",\"函数环境：当函数被调用执行时，会进入当前函数中执行代码\",\"eval（不建议使用，可忽略）\",\"因此在一个 JavaScript 程序中，必定会产生多个执行上下文，而 JavaScript 引擎会以栈的方式来处理它们，这个栈，我们称其为 函数调用栈（Call Stack）。栈底永远都是全局上下文，而栈顶就是当前执行的上下文。\",\"当代码在执行过程中，遇到以上三种情况，都会生成一个执行上下文，放入栈中，而处于栈顶的上下文执行完毕之后，就会自动出栈。\"]},\"1557\":{\"h\":\"栈堆实现分析\",\"t\":[\"JavaScript 引擎通过创建 执行上下文栈（Execution Context Stack，ECS） 用于管理执行上下文。\",\"🎯 为了模拟执行上下文栈的行为，让我们类比执行上下文栈是一个数组。\",\"ECStack = [];\",\"试想当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，ECStack 才会被清空，所以程序结束之前， ECStack 最底部永远有个 globalContext。\",\"ECStack = [globalContext];\",\"现在 JavaScript 遇到下面的这段代码了：\",\"function fun3() { console.log('fun3'); } function fun2() { fun3(); } function fun1() { fun2(); } fun1();\",\"当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。\",\"知道了这样的工作原理，让我们来看看如何处理上面这段代码：\",\"// fun1() ECStack.push(<fun1> functionContext); // fun1 中竟然调用了 fun2，还要创建 fun2 的执行上下文 ECStack.push(<fun2> functionContext); // 擦，fun2 还调用了 fun3！ ECStack.push(<fun3> functionContext); // fun3 执行完毕 ECStack.pop(); // fun2 执行完毕 ECStack.pop(); // fun1 执行完毕 ECStack.pop(); // JavaScript 接着执行下面的代码，但是 ECStack 底层永远有个 globalContext\",\"详细了解了这个过程之后，我们就可以对 执行上下文栈 总结一些结论了。\",\"JavaScript 引擎是单线程的\",\"同步执行，只有栈顶的上下文处于执行中，其他上下文需要等待\",\"全局上下文只有唯一的一个，它在浏览器关闭时出栈\",\"函数的执行上下文的个数没有限制\",\"每次某个函数被调用，就会有个新的执行上下文为其创建，即使是调用的自身函数，也是如此\"]},\"1558\":{\"c\":[\"前端技术\"]},\"1559\":{\"c\":[\"JavaScript\"]},\"1560\":{\"h\":\"变量对象\",\"t\":[\"变量对象是与 执行上下文 相关的数据作用域，存储了在上下文中定义的 变量 和 函数声明。\",\"因为不同执行上下文中的变量对象稍有不同，所以我们来聊聊 全局执行上下文 下的变量对象和 函数执行上下文 下的变量对象。\"]},\"1561\":{\"h\":\"全局执行上下文\",\"t\":[\"💡 全局执行上下文中的变量对象就是全局对象\",\"我们先了解一个概念，叫全局对象。在 W3School 中也有介绍：\",\"全局对象 是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。\",\"在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。\",\"例如，当 JavaScript 代码引用 parseInt 函数时，它引用的是全局对象的 parseInt 属性，相当于 window.parseInt。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。\",\"如果看的不是很懂的话，容我再来介绍下全局对象:\",\"可以通过 this 引用，在 JavaScript 中，全局对象就是 Window 对象\",\"console.log(this); // Window { ... }\",\"全局对象是由 Object 构造函数实例化的一个对象\",\"console.log(this instanceof Object); // true\",\"预定义全局函数和全局属性，在任何地方均可调用\",\"console.log(Math.random === this.Math.random); // true console.log(Math.PI === this.Math.PI); // true\",\"作为全局变量的宿主\",\"const a = 'foo'; console.log(this.a); // foo\",\"在 JavaScript 中，全局对象有 Window 属性指向自身\",\"const a = 'foo'; console.log(window.a); // 'foo' this.window.b = 'foo'; console.log(this.b); // 'foo'\"]},\"1562\":{\"h\":\"函数执行上下文\",\"t\":[\"在函数执行上下文中，我们用 活动对象（Activation Object，AO）来表示变量对象。\",\"活动对象 和 变量对象 其实是同一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 Activation Object ，而只有 被激活 的变量对象，也就是活动对象上的各种属性才能被访问。\",\"活动对象是在进入函数执行上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象。\"]},\"1563\":{\"h\":\"执行过程\",\"t\":[\"执行上下文的代码会分成两个阶段进行处理：\",\"分析：进入执行上下文\",\"执行：代码执行\"]},\"1564\":{\"h\":\"进入执行上下文阶段的变量对象\",\"t\":[\"当进入执行上下文时，这时候还没有执行代码，变量对象的创建，依次经历了以下几个过程：\",\"函数的所有形参（如果是函数执行上下文）\",\"建立 Arguments 对象\",\"检查当前上下文的参数，由名称和对应值组成的一个变量对象的属性被创建\",\"没有实参，属性值设为 undefined\",\"函数声明\",\"检查当前上下文的函数声明，也就是使用 function 关键字声明的函数\",\"在变量对象中以函数名建立一个属性，属性值为指向该函数所在内存地址的引用\",\"如果变量对象已经存在相同名称的属性，那么该属性将会被新的引用所覆盖\",\"变量声明\",\"检查当前上下文中的变量声明\",\"每找到一个变量声明，就在变量对象中以变量名建立一个属性，属性值为 undefined\",\"如果变量名称与已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性（亦可理解为为了防止同名的变量属性被修改为 undefined，则会直接跳过，原属性值不会被修改）\",\"🌰 代码示例：\",\"function foo(a) { var b = 2; function c() {} var d = function () {}; b = 3; }\",\"在进入执行上下文后，这时候的活动对象 AO 是：\",\"AO = { arguments: { 0: 1, length: 1 }, a: 1, b: undefined, c: reference to function() {}, d: undefined }\"]},\"1565\":{\"h\":\"代码执行阶段的变量对象\",\"t\":[\"在代码执行阶段，会根据代码，顺序执行代码，修改变量对象的值\",\"还是上面的例子，当代码执行完后，这时候的 AO 是：\",\"AO = { arguments: { 0: 1, length: 1 }, a: 1, b: 3, c: reference to function c(){}, d: reference to FunctionExpression \\\"d\\\" }\",\"总结：\",\"全局执行上下文的变量对象初始化是全局对象\",\"函数执行上下文的变量对象初始化只包括 Arguments 对象\",\"在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值\",\"在代码执行阶段，会再次修改变量对象的属性值\"]},\"1566\":{\"h\":\"变量对象和活动对象\",\"t\":[\"VO 和 AO 到底是什么关系？\",\"未进入执行阶段之前，变量对象（VO：Variable Object）中的属性都不能访问。\",\"但是进入执行阶段之后，活动对象（AO：Activation Object）被激活，里面的属性包括 VO、函数执行时传入的参数和 Arguments 对象都能被访问了，然后开始进行执行阶段的操作。\",\"利用公式可以简单表述为:\",\"AO = VO + function parameters + arguments\"]},\"1567\":{\"c\":[\"前端技术\"]},\"1568\":{\"c\":[\"JavaScript\"]},\"1569\":{\"h\":\"作用域链\",\"t\":[\"在 变量对象 中提及到，当查找变量的时候，会先从当前执行上下文的变量对象中查找，如果没有找到，就会从父级（词法层面上的父级）执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的 变量对象 构成的链表就叫做作用域链。\",\"下面，我们从一个函数的 创建 和 激活 两个阶段来剖析作用域链是如何创建和变化的。\"]},\"1570\":{\"h\":\"函数的创建\",\"t\":[\"函数作用域在函数定义的时候就决定了。\",\"这是因为函数有一个内部属性 [[Scopes]]，当函数创建的时候，就会保存所有父级作用域内的变量对象到其中，你可以理解 [[Scopes]] 就是所有父级作用域的变量对象的层级链，但是注意：[[Scopes]] 并不代表完整的作用域链。\",\"🌰 代码示例：\",\"function foo() { function bar() { // do something } }\",\"函数创建时，各自的 [[Scopes]] 为：\",\"console.dir(foo); // [[Scopes]]: Scopes[2] // 0: Scripts {...} // 1: Global {...} foo.[[Scopes]] = [ globalContext.VO ]; bar.[[Scopes]] = [ fooContext.AO, globalContext.VO ];\"]},\"1571\":{\"h\":\"函数的激活\",\"t\":[\"当函数激活（执行）时，进入函数上下文，创建 VO / AO 后，就会将 活动对象 添加到作用域链的前端。\",\"这时候执行上下文的作用域链，我们命名为 Scopes：\",\"Scopes = [AO].concat([[Scopes]]);\",\"至此，作用域链创建完毕。\"]},\"1572\":{\"h\":\"示例分析\",\"t\":[\"以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的 创建过程：\",\"const scope = 'global scope'; function checkscope() { var scope2 = 'local scope'; return scope2; } checkscope();\",\"执行过程 如下：\",\"checkscope 函数被创建，保存作用域链到内部属性 [[Scopes]]\",\"checkscope.[[Scopes]] = [ globalContext.VO ];\",\"执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈\",\"ECStack = [checkscopeContext, globalContext];\",\"checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数 [[Scopes]] 属性创建作用域链\",\"checkscopeContext = { Scopes: checkscope.[[Scopes]], }\",\"用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明\",\"checkscopeContext = { AO: { arguments: { length: 0 }, scope2: undefined }， Scopes: checkscope.[[Scopes]], }\",\"将活动对象压入 checkscope 作用域链顶端\",\"checkscopeContext = { AO: { arguments: { length: 0, }, scope2: undefined, }, Scopes: [AO, [[Scopes]]], };\",\"准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值\",\"checkscopeContext = { AO: { arguments: { length: 0, }, scope2: 'local scope', }, Scopes: [AO, [[Scopes]]], };\",\"查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出\",\"ECStack = [globalContext];\"]},\"1573\":{\"c\":[\"前端技术\"]},\"1574\":{\"c\":[\"JavaScript\"]},\"1575\":{\"h\":\"当前执行上下文 this\",\"t\":[\"业界没有 当前执行上下文 的叫法，但是笔者私自把 this 的指向理解为执行时所指向的执行上下文。\"]},\"1576\":{\"h\":\"调用位置\",\"t\":[\"在理解 this 的绑定过程之前，首先要理解 this 的调用位置：调用位置就是函数在代码中被调用的位置（而不是声明的位置）。\",\"而要理解 this 的调用位置，最重要的是要 分析调用栈（就是为了到达当前执行位置所调用的所有函数）。我们关心的调用位置就在当前正在执行的函数的前一个调用中。\",\"function baz() { // 当前调用栈是：baz // 因此，当前调用位置是全局作用域 console.log('baz'); bar(); // <-- bar 的调用的位置 } function bar() { // 当前调用栈是 baz -> bar // 因此，当前调用调用位置在 baz 中 console.log('bar'); foo(); // <-- foo 的调用位置 } function foo() { // 当前调用栈是 baz -> bar -> foo // 因此，当前调用位置在 bar 中 console.log('foo'); } baz(); // <-- baz 的调用位置\",\"注意我们是如何从调用栈中分析出真正的调用位置，因为它决定了 this 的绑定。\"]},\"1577\":{\"h\":\"绑定规则\",\"t\":[\"函数的执行过程中调用位置决定 this 的 绑定对象。\",\"你必须找到调用位置，然后判断需要应用下面四条规则中的哪一条。我们首先会分别解释这四条规则，然后解释多条规则都可用时它们的优先级如何排列。\",\"(调用栈) => (调用位置) => (绑定规则) => 规则优先级\"]},\"1578\":{\"h\":\"默认绑定\",\"t\":[\"首先要介绍的是最常用的函数调用类型：独立函数调用。可以把这条规则看作是无法应用其他规则时的默认规则。\",\"🌰 代码示例：\",\"function foo() { console.log(this.a); } // 声明在全局作用域中的变量就是全局对象的一个同名属性 // 相当于 window.a = 2 var a = 2; // 调用 foo 函数时 this.a 被解析成了全局变量 a // 因为在本例中，函数调用时应用了 this 的默认绑定 // 因此 this 指向全局对象 global objects 或 window objects // 分析调用位置来获知 foo 是如何调用的 // foo 函数直接使用不带任何修饰的函数引用进行调用，因此只能使用默认绑定，无法应用其他规则 foo(); // 2\",\"如果使用严格模式（Strict Mode），则不能将全局对象用于默认绑定，因此 this 会绑定到 undefined。\",\"function foo() { 'use strict'; console.log(this.a); } var a = 2; foo(); // TypeError:this is undefined\",\"这里有一个微妙但是非常重要的细节，虽然 this 的绑定规则完全取决于调用位置，但是只有 foo() 运行在非严格模式下时，默认绑定才能绑定到全局对象；在严格模式下调用 foo 则不受默认绑定影响。\",\"function foo() { console.log(this.a); } var a = 2; (function fun() { 'use strict'; foo(); // 2 })();\",\"[!warning] 通常来说你不应该在代码中混合使用严格模式和非严格模式。整个程序要么严格要么非严格。然而，有时候你可能会用到第三方库，其严格程度和你代码有所不同，因此一定要注意这类兼容性细节。\"]},\"1579\":{\"h\":\"隐式绑定\",\"t\":[\"另一条需要考虑的规则是调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含，不过这种说法可能会造成一些误导。\",\"🌰 代码示例：\",\"function foo() { console.log(this.a); } const container = { a: 2, foo: foo, }; container.foo(); // 2\",\"首先需要注意的是 foo 的声明方式，及其之后是如何被当作引用属性添加到 container 中的。但是无论是直接在 container 中定义还是先定义再添加为引用属性，这个函数严格来说都不属于 container 对象。\",\"然而，调用位置会使用 container 上下文来引用函数，因此你可以说函数被调用时 container 对象 拥有 或者 包含 它。\",\"无论你如何称呼这个模式，当 foo 被调用时，它的前面确实加上了对 container 的引用。当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象。因为调用 foo 时 this 被绑定到 container 上，因此 this.a 和 container.a 是一样的。\",\"💡 对象属性引用链中只有上一层或最后一层在调用位置中起作用。\",\"function foo() { console.log(this.a); } var obj2 = { a: 42, foo: foo, }; var obj1 = { a: 2, obj2: obj2, }; obj1.obj2.foo(); // 42\",\"隐式丢失\",\"一个最常见的 this 绑定问题就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把 this 绑定到全局对象或者 undefined 上（这取决于是否是严格模式）。\",\"🌰 代码示例：\",\"function foo() { console.log(this.a); } const container = { a: 2, foo: foo, }; // 函数别名 const bar = container.foo; // a 是全局对象的属性 const a = 'Hello world!'; bar(); // \\\"Hello world!\\\"\",\"📍 虽然 bar 是 container.foo 的一个引用，但是实际上，它引用的是 foo 函数本身，因此此时的 bar 其实是一个不带任何修饰的函数调用，因此应用了默认绑定。\",\"一种更微妙、更常见并且更出乎意料的情况发生在传入回调函数时。\",\"🌰 代码示例：\",\"function foo() { console.log(this.a); } function bar(fn) { // fn 其实引用的是 foo fn(); // <--调用位置 } var container = { a: 2, foo: foo, }; // a 是全局对象的属性 var a = 'Hello world!'; bar(container.foo); // \\\"Hello world!\\\"\",\"参数传递其实是一种隐式赋值，因此我们传入函数时也会被隐式赋值，所以结果和上个示例一样。\",\"如果把函数传入语言内置的函数而不是传入你自己声明的函数，结果是一样的，没有区别。\",\"function foo() { console.log(this.a); } const container = { a: 2, foo: foo, }; // a 是全局对象的属性 var a = 'Hello world!'; setTimeout(container.foo, 100); // 'Hello world!'\",\"回调函数丢失 this 绑定是非常常见的。\",\"除此之外，还有一种情况 this 的行为会出乎我们意料：调用回调函数的函数可能会修改 this。在一些流行的 JavaScript 库中事件处理器会把回调函数的 this 强制绑定到触发事件的 DOM 元素上。这在一些情况下可能很有用，但是有时它可能会让你感到非常郁闷。遗憾的是，这些工具通常无法选择是否启用这个行为。\",\"无论是哪种情况，this 的改变都是意想不到的，实际上你无法控制回调函数的执行方式，因此就没有办法控制调用位置以得到期望的绑定。之后我们会介绍如何通过固定 this 来修复这个问题。\"]},\"1580\":{\"h\":\"显式绑定\",\"t\":[\"就像我们刚才看到的那样，在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把 this 隐式绑定到该对象上。\",\"JavaScript 提供了 apply、call 和 bind 方法，为创建的所有函数 绑定宿主环境。通过这些方法绑定函数的 this 指向称为 显式绑定。\",\"硬绑定\",\"硬绑定可以解决之前提出的丢失绑定的问题。\",\"🌰 代码示例：\",\"function foo() { console.log(ths.a); } const container = { a: 2, }; var bar = function () { foo.call(container); }; bar(); // 2 setTimeout(bar, 100); // 2 // 硬绑定的 bar 不可能再修改它的 this bar.call(window); // 2\",\"我们创建了函数 bar，并在它的内部手动调用了 foo.call(container) ，因此强制把 foo 的 this 绑定到了 container 。无论之后如何调用函数 bar，它总会手动在 container 上调用 foo。这种绑定是一种显式（手动）的强制绑定，因此我们称之为硬绑定。\",\"内置函数\",\"第三方库的许多函数，以及 JavaScript 语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为 上下文（context），其作用和 bind 一样，确保你的回调函数使用指定的 this 。\",\"function foo(item) { console.log(this.title, item); } const columns = { title: 'No:', }[ // 调用 foo 时把 this 绑定到 columns (1, 2, 3) ].forEach(foo, columns); // No:1 No:2 No:3\",\"这些函数实际上就是通过 call 或者 apply 实现了显式绑定，这样代码会更加优雅。\"]},\"1581\":{\"h\":\"构造调用绑定\",\"t\":[\"在 JavaScript 中，构造函数只是使用 new 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类，实际上，它们甚至都不能说是一种特殊的函数类型，它们只是被 new 操作符调用的普通函数而已。\",\"举例来说，思考一下 Number() 作为构造函数时的行为，ES5.1 中这样描述它：\",\"15.7.2 Number 构造函数当 Number 在 new 表达式中被调用时，它是一个构造函数：它会初始化新创建的对象。\",\"所以，包括内置对象函数在内的所有函数都可以用 new 来调用，这种函数调用被称为 构造函数调用。这里有一个重要但是非常细微的区别：实际上并不存在所谓的构造函数，只是对于函数的 构造调用。\",\"🎉 使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。\",\"创建全新的空对象\",\"将新对象的隐式原型对象关联构造函数的显式原型对象\",\"执行对象类的构造函数，同时该实例的属性和方法被 this 所引用，即 this 指向新构造的实例\",\"如果构造函数执行后没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象\",\"🎯 模拟过程：\",\"function objectFactory(constructor, ...rest) { // 创建空对象，空对象关联构造函数的原型对象 const instance = Object.create(constructor.prototype); // 执行对象类的构造函数，同时该实例的属性和方法被 this 所引用，即 this 指向新构造的实例 const result = constructor.apply(instance, rest); // 判断构造函数的运行结果是否对象类型 if (result !== null && /^(object|function)$/.test(typeof result)) { return result; } return instance; }\",\"解剖内部操作后，我们能得出结论 new 操作符是为了实现该过程的一种语法糖。\"]},\"1582\":{\"h\":\"优先级\",\"t\":[\"上文介绍了函数调用中 this 绑定的四条规则，你需要做的就是找到函数的调用位置并判断应用哪条规则。但是，如果某个调用位置应用多条规则，则必须给这些规则设定优先级。\",\"毫无疑问，默认绑定的优先级是四条规则中最低的，所以我们先不考虑它。\",\"显式绑定 > 构造调用绑定 > 隐式绑定\"]},\"1583\":{\"h\":\"隐式绑定和显式绑定\",\"t\":[\"function foo() { console.log(this.a); } const container1 = { a: 1, foo: foo, }; const container2 = { a: 2, foo: foo, }; container1.foo(); // 1 container2.foo(); // 2 container1.foo.call(container2); // 2 container2.foo.call(container1); // 1\",\"可以看到，显式绑定优先级更高，也就是说在判断时应当先考虑是否可以存在显式绑定。\"]},\"1584\":{\"h\":\"构造调用绑定和隐式绑定\",\"t\":[\"function foo(something) { this.a = something; } const container1 = { foo: foo, }; const container2 = {}; container1.foo(2); console.log(container1.a); // 2 container1.foo.call(container2, 3); console.log(container2.a); // 3 var bar = new container1.foo(4); console.log(container1.a); // 2 console.log(bar.a); // 4\",\"可以看到 new 绑定比隐式绑定优先级高。但是 new 绑定和显式绑定谁的优先级更高呢？\",\"new 和 call/apply 无法一起使用，因此无法通过 new foo.call(obj1) 来直接进行测试。但是我们可以使用硬绑定来测试他俩的优先级。\",\"在看代码之前先回忆一下硬绑定是如何工作的。Function.prototype.bind会创建一个新的包装函数，这个函数会忽略它当前的 this 绑定（无论绑定的对象是什么），并把我们提供的对象绑定到 this 上。\",\"这样看起来硬绑定（也是显式绑定的一种）似乎比 new 绑定的优先级更高，无法使用 new 来控制 this 绑定。\",\"function foo(something) { this.a = something; } var container1 = {}; var bar = foo.bind(container1); bar(2); console.log(container1.a); // 2 var baz = new bar(3); console.log(container1.a); // 2 console.log(baz.a); // 3\"]},\"1585\":{\"h\":\"绑定例外\"},\"1586\":{\"h\":\"忽略指向\",\"t\":[\"如果将 null 或 undefined 作为 this 的绑定对象传入 call、apply 或 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。\",\"function foo() { console.log(this.a); } var a = 2; foo.call(null); // 2\",\"此类写法常用于 apply 来展开数组，并当作参数传入一个函数，类似地，bind 可以对参数进行柯里化（预先设置一些参数）。\",\"function foo(a, b) { console.log('a:' + a + ',b:' + b); } // 把数组展开成参数 foo.apply(null, [2, 3]); // a:2, b:3 // 使用 bind 进行柯里化 var bar = foo.bind(null, 2); bar(3); // a:2, b:3\",\"这两种方法都需要传入一个参数当作 this 的绑定对象。如果函数并不关心 this 的话，你 仍然需要传入一个占位值，这时 null 可能是一个不错的选择。\"]},\"1587\":{\"h\":\"软绑定\",\"t\":[\"硬绑定这种方式可以把 this 强制绑定到指定的对象（除了使用 new 时），防止函数调用应用默认绑定规则。问题在于，硬绑定会大大降低函数的灵活性，使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改 this。\",\"如果可以给默认绑定指定一个全局对象和 undefined 以外的值，那就可以实现和硬绑定相同的效果，同时保留隐式绑定或者显式绑定修改 this 的能力。\",\"if (!Function.prototype.softBind) { Function.prototype.softBind = function(obj) { var fn = this; // 捕获所有 curried 参数 var curried = [].slice.call( arguments, 1 ); var bound = function() { return fn.apply( (!this || this === (window || global)) ? obj : this curried.concat.apply( curried, arguments ) ); }; bound.prototype = Object.create( fn.prototype ); return bound; }; }\"]},\"1588\":{\"h\":\"指向变更\",\"t\":[\"如下列出四种方法可以在编码中改变 this 指向。\",\"使用 ES6 的箭头函数\",\"在函数内部使用 _this = this\",\"使用 apply、call 和 bind\",\"new 实例化一个对象\"]},\"1589\":{\"h\":\"箭头函数\",\"t\":[\"箭头函数并不是使用 function 关键字定义的，而是使用被称为胖箭头的操作符 => 定义的。箭头函数不使用 this 的四种标准规则，而是根据外层（函数或者全局）作用域来决定 this 的指向。并且，箭头函数拥有静态的上下文，即一次绑定之后，便不可再修改。\",\"this 指向的固定化，并不是因为箭头函数内部有绑定 this 的机制，实际原因是箭头函数根本没有自己的 this，导致内部的 this 就是外层代码块的 this。正是因为它没有 this，所以也就不能用作构造函数。\",\"function foo() { // 返回一个箭头函数 return (a) => { // this 继承自 foo() console.log(this.a); }; } const container1 = { a: 1 }; const container2 = { a: 2 }; const bar = foo.call(container1); bar.call(container2); // 1\",\"foo 内部创建的箭头函数会捕获调用时 foo 的 this。由于 foo 的 this 绑定到 container1，bar（引用箭头函数）的 this 也会绑定到 container1，箭头函数的绑定无法被修改。\",\"箭头函数可以像 bind 一样确保函数的 this 被绑定到指定对象，此外，其重要性还体现在它用更常见的词法作用域取代了传统的 this 机制。实际上，在 ES6 之前我们就已经在使用一种几乎和箭头函数完全一样的模式。\",\"虽然 const self = this 和箭头函数看起来都可以取代 bind，但是从本质上来说，它们想替代的是 this 机制。\",\"如果你经常编写 this 风格的代码，但是绝大部分时候都会使用 const self = this 或者箭头函数来否定 this 机制，那你或许应当:\",\"只使用词法作用域并完全抛弃错误 this 风格的代码\",\"完全采用 this 风格，在必要时使用 bind，尽量避免使用 const self = this 和箭头函数\"]},\"1590\":{\"h\":\"应用场景总结\",\"t\":[\"函数的普通调用\",\"函数作为对象方法调用\",\"函数作为构造函数调用\",\"函数通过 call、apply、bind 间接调用\",\"箭头函数的调用\"]},\"1591\":{\"c\":[\"前端技术\"]},\"1592\":{\"c\":[\"JavaScript\"]},\"1593\":{\"h\":\"动态加载\",\"t\":[\"import 命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行（import 命令叫做 连接）。因此，下面的代码会报错。\",\"// Error if (x === 2) { import module from './module'; }\",\"[!warning] 引擎处理 import 语句是在编译阶段，这时并不会去分析或执行 if 语句，所以 import 语句放在 if 代码块之中毫无意义，因此会报句法错误，而不是执行时错误。也就是说，import 和 export 命令只能在模块的顶层，不能在代码块之中。\",\"如此的设计，固然有利于编译器提高效率，但也导致无法在运行时加载模块。在语法上，条件加载就不可能实现。如果 import 命令要取代 Node 的 require 方法，这就形成了一个障碍。因为 require 是运行时加载模块，import 命令无法取代 require 的 动态加载功能。\",\"const path = './' + fileName; const myModual = require(path);\",\"上面的语句就是动态加载，require 到底加载哪一个模块，只有运行时才知道。import 命令做不到这一点。\",\"因此，有一个提案，建议引入 import() 函数，实现动态加载。\",\"import(module);\",\"参数 module ，表示指定所要加载的模块的位置。import 命令能够接受什么参数，import() 函数就能接受什么参数，两者区别主要是后者为动态加载。\",\"import() 返回一个 Promise 对象。\",\"const main = document.querySelector('main'); import(`./section-modules/${someVariable}.js`) .then((module) => { module.loadPageInto(main); }) .catch((err) => { main.textContent = err.message; });\",\"import() 函数可以用在任何地方，不仅仅是模块，非模块的脚本也可以使用。它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块。另外，import() 函数与所加载的模块没有静态连接关系，这点也是与 import 语句不相同。import() 类似于 Node 的 require 方法，区别主要是前者是异步加载，后者是同步加载。\"]},\"1594\":{\"h\":\"适用场景\"},\"1595\":{\"h\":\"按需加载\",\"t\":[\"import() 可以在需要的时候，再加载某个模块。\",\"button.addEventListener('click', (event) => { import('./dialogBox.js') .then((dialogBox) => { dialogBox.open(); }) .catch((error) => { /* Error handling */ }); });\",\"上面代码中，import() 方法放在 click 事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。\"]},\"1596\":{\"h\":\"条件加载\",\"t\":[\"import() 可以放在 if 代码块，根据不同的情况，加载不同的模块。\",\"if (condition) { import('moduleA').then(...) } else { import('moduleB').then(...) }\",\"上面代码中，如果满足条件，就加载模块 A，否则加载模块 B。\"]},\"1597\":{\"h\":\"动态的模块路径\",\"t\":[\"import() 允许模块路径动态生成。\",\"import(fn()).then(() => {});\",\"上面代码中，根据函数 fn 的返回结果，加载不同的模块。\"]},\"1598\":{\"h\":\"注意事项\"},\"1599\":{\"h\":\"解构赋值输出模块导入\",\"t\":[\"import() 加载模块成功以后，这个模块会作为一个对象，当作 then 方法的参数。因此，可以使用对象解构赋值的语法，获取输出接口。\",\"import('./module.js').then(({ export1, export2 }) => { // do something });\",\"上面代码中，export1 和 export2 都是 module.js 的输出接口，可以解构获得。\"]},\"1600\":{\"h\":\"默认模块导入\",\"t\":[\"如果模块有 default 输出接口，可以用参数直接获得。\",\"import('./module.js').then((module) => { console.log(module.default); });\"]},\"1601\":{\"h\":\"命名模块导入\",\"t\":[\"上面的代码也可以使用 具名输入 的形式。\",\"import('./module.js').then(({ default: defaultInterface }) => { console.log(defaultInterface); });\"]},\"1602\":{\"h\":\"并发加载多个模块\",\"t\":[\"如果想同时加载多个模块，可以采用下面的写法。\",\"Promise.all([import('./module1.js'), import('./module2.js'), import('./module3.js')]).then( ([module1, module2, module3]) => { // do something } );\"]},\"1603\":{\"h\":\"异步函数的模块导入\",\"t\":[\"import() 也可以用在 async 函数之中。\",\"async function main() { const module = await import('./module.js'); const { export1, export2 } = await import('./module.js'); const [module1, module2, module3] = await Promise.all([ import('./module1.js'), import('./module2.js'), import('./module3.js'), ]); } main();\"]},\"1604\":{\"c\":[\"前端技术\"]},\"1605\":{\"c\":[\"JavaScript\"]},\"1606\":{\"h\":\"模块化\",\"t\":[\"🌽 模块化：把复杂的系统分解到多个模块以方便编码\",\"在 模块化编程 中，开发者将程序分解成离散功能块（discrete chunks of functionality），并称之为模块。\",\"将一个复杂的程序依据一定的规则（规范）封装成几个块（文件），并进行组合在一起 块的内部数据相对而言是私有的，只是向外部暴露一些接口与外部其他模块通信 每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。 精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。\"]},\"1607\":{\"h\":\"模块化趋势\"},\"1608\":{\"h\":\"痛点\",\"t\":[\"过去代码组织方式，会出现的问题：\",\"命名空间冲突\",\"无法合理地管理项目依赖和版本\",\"无法方便控制依赖的加载顺序\",\"项目体积变大后难以维护\"]},\"1609\":{\"h\":\"优势\",\"t\":[\"实现模块化能实现的优势：\",\"方便代码维护\",\"提高代码复用性\",\"降低代码耦合度（解耦）\",\"分治思想\"]},\"1610\":{\"h\":\"模块化进化史\"},\"1611\":{\"h\":\"全局模式\",\"t\":[\"module1.js\",\"// 数据 let data1 = 'module one data'; // 操作数据的函数 function foo() { console.log(`foo() ${data1}`); } function bar() { console.log(`bar() ${data1}`); }\",\"module2.js\",\"let data2 = 'module two data'; function foo() { //与模块1中的函数冲突了 console.log(`foo() ${data2}`); }\",\"test.html\",\"<!-- 同步引入，若函数冲突，则后面覆盖前面 --> <script type=\\\"text/javascript\\\" src=\\\"module1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module2.js\\\"></script> <script type=\\\"text/javascript\\\"> foo(); // foo() module two data bar(); // bar() module one data </script>\",\"说明：\",\"全局模式：将不同的功能封装成不同的全局函数\",\"问题：全局变量被污染了，很容易引起命名冲突\"]},\"1612\":{\"h\":\"单例模式\",\"t\":[\"module1.js\",\"let moduleOne = { data: 'module one data', foo() { console.log(`foo() ${this.data}`); }, bar() { console.log(`bar() ${this.data}`); }, };\",\"module2.js\",\"let moduleTwo = { data: 'module two data', foo() { console.log(`foo() ${this.data}`); }, bar() { console.log(`bar() ${this.data}`); }, };\",\"test.html\",\"<script type=\\\"text/javascript\\\" src=\\\"module1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module2.js\\\"></script> <script type=\\\"text/javascript\\\"> moduleOne.foo(); //foo() module one data moduleOne.bar(); //bar() module one data moduleTwo.foo(); //foo() module two data moduleTwo.bar(); //bar() module two data moduleOne.data = 'update data'; //能直接修改模块内部的数据 moduleOne.foo(); //foo() update data </script>\",\"说明：\",\"单例模式模式：简单对象封装\",\"作用：减少了全局变量（如两个模块的 data 都不是全局变量了，而是对象的某一个属性）\",\"问题：不安全，可以直接修改模块内部的数据\"]},\"1613\":{\"h\":\"IIFE 模式\",\"t\":[\"module1.js\",\"(function(window) { // 数据 let data = 'IIFE module data'; //操作数据的函数 function foo() { // 用于暴露的函数 console.log(`foo() ${data}`); } function bar() { // 用于暴露的函数 console.log(`bar() ${data}`); otherFun(); //内部调用 } function otherFun() { // 内部私有的函数 console.log('privateFunction go otherFun()'); } // 暴露 foo 函数和 bar 函数 window.module = { foo, bar }; })(window);\",\"test.html\",\"<script type=\\\"text/javascript\\\" src=\\\"module1.js\\\"></script> <script type=\\\"text/javascript\\\"> module.foo(); // foo() IIFE module data module.bar(); // bar() IIFE module data privateFunction go otherFun() // module.otherFun() //报错，module.otherFun is not a function console.log(module.data); // undefined 因为我暴露的 module 对象中无 data module.data = 'xxxx'; // 不是修改的模块内部的 data，而是在 module 新增 data 属性 module.foo(); // 验证内部的 data 没有改变 还是会输出 foo() IIFE module data </script>\",\"说明：\",\"IIFE 模式：匿名函数自调用（闭包）\",\"IIFE：Immediately-Invoked Function Expression（立即调用函数表达式）\",\"作用：数据是私有的，外部只能通过暴露的方法操作\",\"问题：如果当前这个模块依赖另一个模块怎么办？见下面 IIFE 增强版的（模块依赖于 jQuery）\"]},\"1614\":{\"h\":\"IIFE 模式增强\",\"t\":[\"引入 jQuery 到项目中\",\"module1.js\",\"(function(window, $) { //数据 let data = 'IIFE Strong module data'; //操作数据的函数 function foo() { //用于暴露的函数 console.log(`foo() ${data}`); $('body').css('background', 'red'); } function bar() { //用于暴露的函数 console.log(`bar() ${data}`); otherFun(); //内部调用 } function otherFun() { //内部私有的函数 console.log('privateFunction go otherFun()'); } //暴露foo函数和bar函数 window.moduleOne = { foo, bar }; })(window, jQuery);\",\"test.html\",\"<!--引入的js必须有一定顺序--> <script type=\\\"text/javascript\\\" src=\\\"jquery-1.10.1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module1.js\\\"></script> <script type=\\\"text/javascript\\\"> moduleOne.foo(); //foo() IIFE Strong module data 而且页面背景会变色 </script>\",\"说明：\",\"IIFE 模式增强：引入依赖\",\"这就是现代模块实现的基石。其实很像了，有引入和暴露两个方面。\",\"存在的问题：一个页面需要引入多个 JS 文件的问题\",\"<script type=\\\"text/javascript\\\" src=\\\"module1.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module2.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module3.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"module4.js\\\"></script>\",\"请求过多：一个 <script> 标签就是一次请求\",\"依赖模糊：看不出来谁依赖着谁？哪些模块是有依赖关系的，很难看出来\",\"难以维护：内部依赖关系混乱也就难以维护啦\"]},\"1615\":{\"h\":\"模块化方案\"},\"1616\":{\"h\":\"CommonJS\",\"t\":[\"CommonJS 是服务器端模块的规范，Node.js 就是采用了这个规范。但目前也可用于浏览器端，需要使用 Browserify 进行提前编译打包。\",\"CommonJS 模块化的引入方式使用 require，暴露的方式使用 module.exports 或 exports。\",\"特点\",\"同步加载依赖的模块\",\"可复用于 Node 环境\",\"成熟的第三方模块社区\",\"彻底说明白 module.exports 和 exports 的区别：\",\"在 Node.js 中，module 是一个全局变量，类似于在浏览器端的 Window 也是一个全局变量一样的道理。\",\"module.exports 初始的时候置为空对象，exports 也指向这个空对象。\",\"内部代码实现：\",\"var module = { id: 'xxxx', exports: {}, }; var exports = module.exports; // exports 是对 module.exports 的引用 // 也就是 exports 现在指向的内存地址和 module.exports 指向的内存地址是一样的\",\"上面的代码可以看出我们平常使用的 exports 是对 module.exports 的一个引用，两者都是指向同一个对象。\",\"用一句话来说明就是，模块的 require（引入）能看到的只有 module.exports 这个对象，它是看不到 exports 对象的，而我们在编写模块时用到的 exports 对象实际上只是对 module.exports 的引用。\",\"exports = module.exports;\",\"我们可以使用 exports.a = 'xxx' 或 exports.b = function(){} 添加方法或属性，本质上它也添加在 module.exports 所指向的对象身上。\",\"但是你不能直接 exports = { a: 'xxx'}，这就将 exports 重新指向新的对象，它和 module.exports 就不是指向同一个对象，也就让两者失去了关系，而 Node.js 中 require 能看到的是 module.exports 指向的对象。\",\"因此，我们一般都会直接使用：\",\"module.exports;\",\"再举例说明两者区别：\",\"function foo() { console.log('foo'); } function bar() { console.log('bar'); }\",\"想要将这两个函数暴露出去，可以直接使用 exports\",\"exports.foo = foo; exports.bar = bar;\",\"也可以对 module.exports 赋值\",\"module.exports = { foo: foo, bar: bar, };\",\"但是不能直接对 exports 赋值\",\"// 错误 exports = { foo: foo, bar: bar, };\",\"因为这样做仅仅改变了 exports 的引用，而不改变 module.exports。\",\"总结\",\"特点：同步加载，有缓存\",\"用法：关键在于引入和暴露\",\"引入模块 \",\"require(url)（url 为路径参数）\",\"路径：自定义模块路径必须以 ./ 或者 ../开头\",\"第三方模块/内置模块/核心模块：路径直接使用模块名称\",\"暴露模块 \",\"exports\",\"module.exports\",\"主要是在服务器端使用的，但是也能在浏览器端运行，需要借助 Browserify 进行编译。\"]},\"1617\":{\"h\":\"AMD\",\"t\":[\"CommonJS 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。由于 NodeJS 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，所以同步加载没有问题。但是如果是浏览器端，同步加载很容易阻塞，这时候 AMD 规范就出来了。AMD 规范则是非同步加载模块，允许指定回调函数。故浏览器端一般会使用 AMD 规范。\",\"AMD 是 require.js 在推广过程中对模块定义的规范化产出 。\",\"特点：\",\"异步加载依赖的模块\",\"可在不转换代码的情况下直接在浏览器运行\",\"并行加载多个模块\",\"可运行在浏览器和 Node 环境\",\"用法：\",\"暴露模块 \",\"在模块内部使用 return\",\"定义模块 \",\"define(['模块名'], function (模块暴露内容) {})\",\"require(['模块名'], function (模块暴露内容) {})\",\"在模块内部可以使用 require 定义异步模块\",\"主模块： \",\"requirejs.config({}) 配置使用的模块路径\",\"requirejs(['模块名'], function (模块暴露内容) {})\",\"HTML 文件引入 <script> 标签 \",\"<script data-main='app.js' src='require.js'></script>\",\"AMD（通用模块定义）主要是在浏览器使用的。\"]},\"1618\":{\"h\":\"CMD\",\"t\":[\"CMD 是根据 CommonJS 和 AMD 基础上提出的。\",\"CMD（通用模块定义）和 AMD（异步模块定）是比较相似的。\",\"require.js 遵循的是 AMD（异步模块定义）规范，sea.js 遵循的是 CMD （通用模块定义）规范。\",\"特点：\",\"异步加载，有缓存\",\"用法：\",\"定义模块 \",\"define(function (require, exports, module) {})\",\"引入模块 \",\"同步加载 require()\",\"异步加载 require.async(['模块名'], function(模块暴露内容) {})\",\"暴露模块 \",\"exports\",\"module.exports\",\"HTML 文件引入 <script> 标签 \",\"<script src='sea.js'></script>\",\"<script>seajs.use('app.js')</script>\",\"sea.js 和 require.js 一样主要在浏览器中使用。其实这两个一般都很少使用。用的比较多的是 commonjs 和马上要介绍的 ES6 模块化。\"]},\"1619\":{\"h\":\"ES6 Module\",\"t\":[\"特点：\",\"动态引入（按需加载），没有缓存\",\"用法：\",\"引入模块使用 import\",\"统一暴露：import {模块暴露的内容} from '模块路径'\",\"分别暴露：import * as m1 from './module1'\",\"这两者暴露的本质是对象，接收的时候只能以对象的解构赋值的方式来接收值\",\"默认暴露：直接使用 import 模块暴露的内容 from '模块路径'。默认暴露，暴露任意数据类型，暴露什么数据类型，接收什么数据类型。\",\"暴露模块使用 export\",\"分别暴露 （基本不用）\",\"统一暴露 （暴露多个内容）\",\"默认暴露 （暴露单个内容）\",\"主要是用在浏览器，服务器端也使用。但是现在浏览器和服务器均不支持 ES6 的模块化语法，所以要借助工具来编译运行\",\"Babel 将 ES6+ 转换为 ES5- （ES6 的模块化语法 编译成 commonjs）\",\"Browserify 将 CommonJS 语法编译成能让浏览器识别的语法\"]},\"1620\":{\"h\":\"严格模式\",\"t\":[\"ES6 的模块自动采用严格模式，不管你是否有在模块头部加上 'use strict'。\",\"严格模式主要有以下限制：\",\"变量必须声明后再使用\",\"函数的参数不能有同名属性，否则报错\",\"不能使用 with 语句\",\"不能对只读属性赋值，否则报错\",\"不能使用前缀 0 表示八进制数，否则报错\",\"不能删除不可删除的属性，否则报错\",\"不能删除变量 delete prop，会报错，只能删除属性 delete global[prop]\",\"eval 不会在它的外层作用域引入变量\",\"eval 和 arguments 不能被重新赋值\",\"arguments 不会自动反映函数参数的变化\",\"不能使用 arguments.callee\",\"不能使用 arguments.caller\",\"禁止 this 指向全局对象\",\"不能使用 fn.caller 和 fn.arguments 获取函数调用的堆栈\",\"增加了保留字（比如 protected、static 和 interface）\",\"其中，尤其需要注意 this 的限制。ES6 模块之中，顶层的 this 指向 undefined，即不应该在顶层代码使用 this。\"]},\"1621\":{\"h\":\"模块化与组合化\",\"t\":[\"既然说到模块化，其实我更想说说模块化与组件化。这两个概念在前端领域已经十分普遍。\",\"先有模块化后有组件化。组件化是建立在模块化思想上的一次演进，一个变种。所以，我们会在软件工程体系中看过一句话：模块化是组件化的基石。\",\"组件化和模块化的思想都是 分而治之 的思想。但还是有细小的区分，他们的侧重点有所不同。\",\"组件化更加倾向于 UI 层面上，是一个可以独立展示内容的「积木」，比如一个页面的头部组件，包含结构 HTML、样式 CSS、逻辑 JS、以及静态资源图片组合一个集合体。一个页面是由众多组件组成的，就像由众多「积木」搭成的「城堡」一样； 模块化更加倾向于功能或者数据的封装，一般由几个组件或单个组件构成的带有一定功能的集合体；\",\"就如上图的这个 title 组件，包含了结构 HTML、样式 CSS、逻辑 JavaScript、以及静态资源图片，往往组件的组成就是以上四个方面。这个 header 文件夹我们可以拿到其他项目中使用，它具有可以独立展示内容的特点。\",\"结合前面提到的模块化开发，整个前端项目可以划分为这么几种开发概念：\",\"名称\",\"说明\",\"举例\",\"JS 模块\",\"独立算法和数据单元\",\"浏览器环境检测（detect）、网络请求（ajax）、应用配置（config）、DOM 操作（dom）、工具函数（utils）以及组件里的 JS 单元\",\"CSS 模块\",\"独立的功能性样式单元\",\"栅格系统（grid）、字体图标（icon-fonts）、动画样式（animate）以及组件里的 CSS 单元\",\"页面\",\"前端这种 GUI 软件的的界面状态，是 UI 组件的容器\",\"首页（index）、列表页（list）、用户管理（user）\",\"应用\",\"整个项目或整个站点被称之为应用，由多个页面组成\",\"那么它们之间的关系如下图所示，一个应用由多个下图的页面组成。一个页面由多个组件组合。组件中可依赖 JS 模块。\",\"所以，前端开发现在不仅仅只是别人说的「画画页面实现点效果」的职位，它是实现软件的图形用户界面（Graphical User Interface，简称 GUI），是一名软件工程师。现在前端开发都是基于模块化和组件化的开发，可以说算是工程化的项目了。从单页面（SPA）的应用就可以看出 JavaScript 大大改善了 Web 应用的用户体验。从谷歌提出 PWA（Progressive Web Apps）就可以看出前端在领域的成长。\",\"不仅仅如此，多终端也已经成为时下以及未来的一个必然趋势，移动端、PC 端、触摸屏、智能设备、物联网等等，相信前端在跨端的领域下肯定会有更好的解决方案。\",\"但是，如果从整个软件工程来看，我们就会意识到一个惨痛的事实：前端工程师在整个系统工程中的地位太低了。前端是处于系统软件的上游（用户入口），因此没有其他系统会来调取前端系统的服务。而后端它在软件开发中处于下游，后端一方面要为前端提供接口服务，一方面要向中后台以及数据层索取服务，对接层次会更多，地位也就更高了。由此导致，感觉每次需求评估前端往往是最后一道坎，因为上游依托下游，就只能是下游先行了，整体上就会感觉前端对业务的参与度太低了。\"]},\"1622\":{\"c\":[\"前端技术\"]},\"1623\":{\"c\":[\"JavaScript\"]},\"1624\":{\"h\":\"模块导入 import\",\"t\":[\"import 命令用于输入其他模块提供的功能。\"]},\"1625\":{\"h\":\"导入方式\",\"t\":[\"ECMAScript 规范中的模块化方案提供了四种引入模块的方式：\",\"命名导入（Named Imports）\",\"命名空间导入（Namespace Import）\",\"默认导入（Default Import）\",\"空的导入（Empty Import）\"]},\"1626\":{\"h\":\"命名导入\",\"t\":[\"从源模块导入其原始名称的特定项目。\",\"import { originModule } from './module.js' // React Hook import { useState, useEffect } from 'react'\",\"从源模块导入特定项，并在导入时指定自定义名称。使用关键字 as，将输入的变量重命名。\",\"import { originMoudle as newMoudleName } from './module.js'\"]},\"1627\":{\"h\":\"命名空间导入\",\"t\":[\"将源模块中的所有内容作为对象导入，将所有源模块的命名导出公开为属性和方法。默认导出被排除在此对象之外。\",\"import * as module from './module.js' // Node.js `fs` module import * as fs from 'fs'\",\"上述例子中 originModule 将被附加到作为属性的导入对象上，即 module.originModule。\"]},\"1628\":{\"h\":\"默认导入\",\"t\":[\"导入源文件的默认导出。\",\"import module from './module.js'\"]},\"1629\":{\"h\":\"空的导入\",\"t\":[\"加载模块代码，但不要创建任何新对象。\",\"import './module.js'\"]},\"1630\":{\"h\":\"特性规范\"},\"1631\":{\"h\":\"只读性\",\"t\":[\"import 命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。\",\"import { foo } from './module.js' foo = { a: 1 } // Syntax Error : 'a' is read-only;\",\"但是，如果输入变量是对象类型，改写该变量是被允许的。\",\"import { bar } from './module.js' bar.a = 1 // Right\",\"尽管此处修改的对象属性，在其他模块也可以读取改写后的值。不过，这种做法很难查错，因此建议凡是输入的变量，都当作只读变量，轻易不要修改它。\"]},\"1632\":{\"h\":\"输入路径\",\"t\":[\"import 后面的 from 指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js 后缀可以省略。\",\"如果只是模块名，不带有路径，那么必须有 配置文件（通常从引入模块目录下 package.json 中查找），告诉 JavaScript 引擎该模块的位置。\",\"import React from 'react'\"]},\"1633\":{\"h\":\"模块提升\",\"t\":[\"注意，import 命令具有提升效果，import 命令无论写在文件中的哪一行，都会提升到整个模块的头部，首先执行。\",\"foo() import { foo } from './module.js'\",\"上面的代码不会报错，因为 import 的执行早于 foo 的调用。这种行为的本质是，import 命令是编译阶段执行的，在代码运行之前。\"]},\"1634\":{\"h\":\"静态执行\",\"t\":[\"由于 import 是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。\",\"// 报错 - 使用了表达式 import { 'f' + 'oo' } from 'my_module'; // 报错 - 使用了变量 var module = 'my_module'; import { foo } from module; // 报错 - 使用了判断语句 if (x === 1) { import { foo } from 'module1'; } else { import { foo } from 'module2'; }\",\"上面三种写法都会报错，因为它们用到了表达式、变量和 if 结构。在静态分析阶段，这些语法都是没法得到值的。\"]},\"1635\":{\"h\":\"重复加载\",\"t\":[\"如果多次重复执行同一句 import 语句，那么只会执行一次，而不会执行多次。\",\"import 'lodash' import 'lodash'\",\"上面代码加载了两次 lodash，但是只会执行一次。\",\"import { foo } from 'my_module'; import { bar } from 'my_module'; // 等同于 import { foo, bar } from 'my_module';\",\"上面代码中，虽然 foo 和 bar 在两个语句中加载，但是它们对应的是同一个 my_module 实例。也就是说，import 语句是 Singleton 模式。\"]},\"1636\":{\"h\":\"模块化隔离\",\"t\":[\"目前阶段，通过 Babel 转码，CommonJS 模块的 require 命令和 ES6 模块的 import 命令，可以写在同一个模块里面，但是最好不要这样做。因为 import 在静态解析阶段执行，所以它是一个模块之中最早执行的。下面的代码可能不会得到预期结果。\",\"require('core-js/modules/es6.symbol') require('core-js/modules/es6.promise') import React from 'React'\"]},\"1637\":{\"c\":[\"前端技术\"]},\"1638\":{\"c\":[\"JavaScript\"]},\"1639\":{\"h\":\"模块导入/导出的复合写法\",\"t\":[\"如果在一个模块之中，先输入后输出同一个模块，import 语句可以与 `export 语句写在一起。\"]},\"1640\":{\"h\":\"模块整体转发\",\"t\":[\"从 module 模块整体导入后，直接完整导出。\",\"export * from 'module'\"]},\"1641\":{\"h\":\"模块部分接口转发\",\"t\":[\"从 module 模块导入 foo 和 bar，并直接导出这两个接口。\",\"export { foo, bar } from 'module' // 可以理解为 import { foo, bar } from 'module' export { foo, bar }\",\"实际上，这样的写法只是相当于对外转发了这两个接口，当前模块不能直接使用这两个接口。\"]},\"1642\":{\"h\":\"模块部分重命名转发\",\"t\":[\"模块导入的接口重命名，从 module 导入 foo 接口，并以 newFoo 的名义导出。\",\"export { foo as newFoo } from 'module'\"]},\"1643\":{\"h\":\"默认模块转发\",\"t\":[\"export { default } from 'module'\"]},\"1644\":{\"h\":\"命名模块改默认模块\",\"t\":[\"export { foo as default } from './module' // 等同于 import { foo } from './module' export default foo\"]},\"1645\":{\"h\":\"默认模块改命名模块\",\"t\":[\"export { default as foo } from './module'\"]},\"1646\":{\"h\":\"无对应写法场景\",\"t\":[\"下面三种写法，没有对应的复合写法：\",\"命名模块重命名转发\",\"默认模块转发\",\"整体和部分模块共同转发\",\"// 命名模块重命名转发 import * as foo from './module' // 默认模块转发 import foo from './module' // 整体和部分模块共同转发 import foo , { namedFoo } from './module'\",\"为了做到形式的对称，现在有提案，提出补上这三种复合写法。\",\"export * as foo from './module' export foo from './module' export foo , { namedFoo } from './module'\"]},\"1647\":{\"c\":[\"前端技术\"]},\"1648\":{\"c\":[\"JavaScript\"]},\"1649\":{\"h\":\"模块导出 export\",\"t\":[\"export 命令用于规定模块的对外接口。\"]},\"1650\":{\"h\":\"导出方式\",\"t\":[\"ECMAScript 规范中的模块化方案提供了两种导出模块的方式：\",\"命名导出（Named Exports）\",\"默认导出（Default Export）\"]},\"1651\":{\"h\":\"命名导出\",\"t\":[\"在声明的变量前添加 export 关键字即可将相对应的变量输出。\",\"导出前声明的值：\",\"这种写法能在脚本底部清晰看到所有输出模块，推荐。\",\"const originModule = true; export { originModule };\",\"在导出时重命名：\",\"同样使用 as 关键字，同一函数可以定义多个不同的变量名输出。\",\"export { originModule as newModule }; export { originModule as smartModule };\",\"声明后立即导出：\",\"export var something = true; export let anything = true; export const nothing = true; export function everything (){} export class interesting = true;\"]},\"1652\":{\"h\":\"默认导出\",\"t\":[\"默认导出让开发者无须知道源模块输出的模块名称即可完成导入。（默认导出的变量无法使用命名导入）\",\"导出一个值作为源模块的默认导出：\",\"export default something;\",\"[!warning] 仅当源模块只有一个导出时，才建议使用此做法。 将默认和命名导出组合在同一个模块中是不好的做法，尽管它是规范允许的。\",\"扩展：\",\"本质上，export default 就是输出一个叫做 default 的变量或方法，然后系统允许你为它取任意名字。\",\"所以，下面的写法是有效的。\",\"模块导出：\",\"function add(x, y) { return x * y; } export { add as default }; // 等同于 // export default add;\",\"模块导入：\",\"import { default as foo } from 'modules'; // 等同于 // import foo from 'modules';\",\"正是因为 export default 命令其实只是输出一个叫做 default 的变量，所以它后面不能跟变量声明语句。\"]},\"1653\":{\"h\":\"特性规范\"},\"1654\":{\"h\":\"对应关系\",\"t\":[\"需要特别注意的是，export命令规定的是 对外的接口，必须与模块内部的变量建立一一对应关系。\",\"// Error export 1 // Error const foo = 1 export foo\",\"如上两种写法都会报错，因为均会输出 1，而 1 只是一个值 ，并非对外的接口。\",\"export var foo = 1; var bar = 1; export { bar }; var baz = 1; export { baz as bat };\",\"其他脚本可以通过这个接口，取到值 1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。\",\"同样地，函数和类必须遵守这种书写方法。\",\"// Error function foo(){} export foo // Good export function bar(){} // Good function baz(){} export { baz }\",\"另外，export 语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。\"]},\"1655\":{\"h\":\"模块顶层输出\",\"t\":[\"export 命令可以出现在模块的任何位置，只要处于模块顶层就可以。\",\"如果处于块级作用域内，就会报错，import 命令也是如此。这是因为处于条件代码块之中，就没法做 静态优化 了，违背了 ES6 模块的设计初衷。\",\"function foo() { export default 'bar'; // SyntaxError } foo();\"]},\"1656\":{\"c\":[\"前端技术\"]},\"1657\":{\"c\":[\"JavaScript\"]},\"1658\":{\"h\":\"模块继承\",\"t\":[\"模块之间也可以继承。\",\"假设有一个 children 模块，继承自 parent 模块。\",\"// children.js export * from 'parent' export var name = 'child' export function cry(){ // do something }\",\"如上代码中的 export *，表示输出 parent 模块的所有模块和方法。然后，如上代码又输出了自定义的 name 属性和默认方法 cry。\",\"同时，也可以将 parent 的属性或方法，改名后再输出。\",\"// children.js export { work as job } from 'parent'\",\"上面的代码表示，只输出 parent 模块的 work 方法，并且将其改名为 job。\",\"加载上面模块的写法如下：\",\"// main.js import * as child from 'children' import cry from 'children' console.log(cry(child.name))\",\"上面代码中的 import cry from 'children' 表示，将 children 模块的默认方法加载为 cry 方法。\"]},\"1659\":{\"c\":[\"前端技术\"]},\"1660\":{\"c\":[\"JavaScript\"]},\"1661\":{\"h\":\"跨模块常量\",\"t\":[\"由于 const 声明的变量只在当前代码块有效，如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。\",\"// constants.js 声明后命名导出 export const a = 1 export const b = 2 export const c = 3 // module1.js 命名空间导入 import * as constants from './constants.js' console.log(constants.a) // 1 console.log(constants.b) // 2 // module2.js 命名导入 import { a, b } from './constants.js' console.log(a) // 1 console.log(b) // 2\",\"如果要使用的常量非常多，可以建一个专门的 constants 目录，将各种常量写在不同的文件里面，保存在该目录下。\",\"// constants/a.js export const a = { a1: 'a1', a2: 'a2', a3: 'a3' } // constants/b.js export const b = ['b1', 'b2', 'b3', 'b5', 'b6', 'b7']\",\"然后，将这些文件输出的常量，合并在 index.js 里面。\",\"// constants/index.js export { a } from './a' export { b } from './b'\",\"使用的时候，直接加载 index.js 就可以了。\",\"// module.js import { a, b } from './constants'\"]},\"1662\":{\"c\":[\"前端技术\"]},\"1663\":{\"c\":[\"JavaScript\"]},\"1664\":{\"h\":\"编译阶段\"},\"1665\":{\"h\":\"编译原理\",\"t\":[\"JavaScript 是一门编译语言。与传统的编译语言不同的是，JavaScript 不是提前编译的，编译结果也不能在分布式系统中进行移植。 在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为 编译。\",\"分词 / 词法分析\",\"解析 / 语法分析\",\"代码生成\"]},\"1666\":{\"h\":\"分词和词法分析\",\"t\":[\"词法分析（Tokenizing / Lexing） 这个过程会将由字符组成的字符串分解成有意义的代码块（对编程语言来说），这些代码块被称为 词法单元（Token）。\",\"const a = 2;\",\"这段程序通常会被分解成为下列词法单元：const、a、=、2、;。\",\"空格是否会被当作词法单元，取决于空格在这门语言中是否具有意义。\",\"分词（Tokenizing）和词法分析（Lexing）之间的主要差异在于词法单元的识别是通过有状态还是无状态的方式进行的。简单来说，如果词法单元生成器在判断 a 是一个独立的词法单元还是其他词法单元的一部分时，调用的是 有状态的解析规则，那么这个过程就被称为 词法分析。\"]},\"1667\":{\"h\":\"解析和语法分析\",\"t\":[\"语法分析（Parsing） 这个过程是将词法单元流转换成一个 由元素逐级嵌套所组成 的代表了程序语法结构的树。这个树被称为 抽象语法树（Abstract Syntax Tree，AST 在各大框架及 Babel 中我们都会看到它的身影）。\"]},\"1668\":{\"h\":\"代码生成\",\"t\":[\"将 AST 转换为可执行代码的过程被称为 代码生成。这个过程与语言、目标平台等息息相关。 抛开具体细节，简单来说就是有某种方法可以将 var a = 2; 的 AST 转化为一组 机器指令：创建一个叫做 a 的变量（包括 分配内存 等），并将一个值存储在变量 a 中。\",\"通过上述三个阶段，浏览器已经可以运行我们得到的 可执行代码，这三个阶段还有一个合称叫 编译阶段。我们把之后对可执行代码的执行称为 运行阶段。\"]},\"1669\":{\"h\":\"编译过程\",\"t\":[\"编译过程中的关键角色：\",\"引擎：从头到尾负责整个 JavaScript 程序的编译及执行过程\",\"编译器：负责语法分析及代码生成等步骤\",\"作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限\"]},\"1670\":{\"h\":\"编译过程详解\",\"t\":[\"const a = 2;\",\"通过以上论述可以得知，编译器首先会将这段代码分解成词法单元，然后将词法单元解构成一个树结构（AST），但是当编译器开始进行代码生成时，它对这段代码的处理方式会和预期的情况有所不同。\",\"当我们看到这行代码，用伪代码与别人进行概括时，可能会表述为：为一个变量分配内存，并将其命名为变量 a，然后将值 2 保存到这个变量（内存）中。\",\"然而，这并不完全正确。\",\"事实上编译器会进行如下操作：\",\"执行流遇到 const a，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为a。\",\"接下来编译器会为引擎生成运行所需的代码，这些代码被用来处理 a = 2 这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中，是否存在一个叫作 a 的变量，如果是，引擎就会使用这个变量；如果否，引擎就会继续查找该变量。\",\"总结起来就是：\",\"编译器在作用域声明变量（如果没有）\",\"引擎在运行这些代码时查找该变量，如果作用域中有该变量则进行赋值\",\"在上面的第二步中，引擎执行运行时所需的代码时，会通过查找变量 a 来判断它是否已经声明过。查找的过程由作用域进行协助，但是引擎执行怎么查找，会影响最终的查找结果。\",\"还是 const a = 2; 这个例子，引擎会为变量 a 进行 LHS 查询。当然还有一种 RHS 查询。\",\"那么 LHS 和 RHS 查询是什么呢？\",\"这里的 L 代表左侧，R 代表右侧。通俗且不严谨的解释 LHS 和 RHS 的含义就是：当变量出现在赋值操作的左侧时进行 LHS 查询，出现在右侧时进行 RHS 查询。\",\"那么描述的更准确的一点，RHS 查询与简单的查找某个变量的值毫无二致，而 LHS 查询则是试图找到变量的容器本身，从而可以对其赋值。\",\"从这个角度说，RHS 并不是真正意义上的\\\"赋值操作的右侧\\\"，更准确的说是\\\"非左侧\\\"。所以，我们可以将 RHS 理解成 Retrieve his source value（取到它的源值），这意味着，\\\"得到某某的值\\\"。\",\"那我们来看一段代码深入理解一下 LHS 与 RHS。\",\"function foo(a) { console.log(a); } foo(2);\",\"在 console.log(a) 中，变量 a 的引用是一个 RHS 引用，因为我们是取到 a 的值。并将这个值传递给 console.log() 方法 相比之下，例如： a = 2 ，调用 foo(2) 时，隐式的进行了赋值操作。这里对 a 的引用就是 LHS 引用，因为我们实际上不关心当前的值时什么，只要想把 = 2 这个赋值操作找到一个目标。 LHS 和 RHS 的含义是 赋值操作的左侧或右侧 并不一定意味着就是 = 赋值操作符的左侧或右侧。\",\"赋值操作还有其他几种形式，因此在概念上最好将其理解 赋值操作的目标是谁（LHS） 以及 谁是赋值操作的源头（RHS）。\",\"当然上面的程序并不只有一个 LHS 和 RHS 引用：\",\"function foo(a) { // 这里隐式的进行了对形参 a 的 LHS 引用。 // 这里对 log() 方法进行了 RHS 引用，询问 console 对象上是否有 log() 方法。 // 对 log(a) 方法内的 a 进行 RHS 引用，取到 a 的值。 console.log(a); // 2 } // 此处调用 foo() 方法，需要调用对 foo 的 RHS 引用。意味着\\\"去找foo这个值，并把它给我\\\" foo(2);\",\"需要注意的是：我们经常会将函数声明 function foo(a) {...} 转化为普通的变量赋值（函数表达式） var foo = function(a) {…}，这样去理解的话，这个函数是 LHS 查询。但是有一个细微的差别，编译器可以在代码生成的同时处理声明和值的定义，比如引擎执行代码时，并不会有线程专门用来将一个函数值\\\"分配给\\\" foo，因此，将函数声明理解成前面讨论的 LHS 查询和赋值的形式并不合适。\",\"💡 综上所述，作用域是一套 标识符的查询规则（注意这里的用词是规则），JavaScript 编译引擎执行时根据查找的目的进行 LHS 与 RHS 查询。这套查询规则确定标识符在何处（当前作用域、上层作用域或全局作用域）以及如何查找（LHS、RHS）。\"]},\"1671\":{\"c\":[\"前端技术\"]},\"1672\":{\"c\":[\"JavaScript\"]},\"1673\":{\"h\":\"词法作用域\",\"t\":[\"作用域就是变量（标识符）适用范围，控制着变量的可见性。\",\"《You don‘t know js》对作用域的定义：\",\"使用一套严格的规则来分辨哪些标识符对哪些语法有访问权限。\",\"《JavaScript 权威指南》中对变量作用域的描述：\",\"一个变量的作用域（Scope）是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，在 JavaScript 代码中的任何地方都是有定义的。然而在函数内声明的变量只在函数体内有定义。它们是局部变量，作用域是局部性的。函数参数也是局部变量，它们只是在函数体内有定义。\",\"作用域共有两种主要的工作模式：\",\"词法作用域/静态作用域\",\"动态作用域\",\"JavaScript 采用 词法作用域（Lexical Scope），也称为 静态作用域。\",\"因为 JavaScript 采用的是词法作用域，因此函数的作用域在函数定义的时候就决定了。\",\"而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。\"]},\"1674\":{\"h\":\"词法作用域/静态作用域\",\"t\":[\"大部分标准语言编译器的第一个工作阶段叫作 词法化（也叫单词化）。词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。\",\"简单来说，词法作用域就是定义在词法阶段的作用域。换句话来说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况下时这样的）。\",\"🌰 代码示例：\",\"function foo(a) { var b = a * 2; function brc(c) { console.log(a, b, c); } bar(b * 3); } foo(2); // 2, 4, 12\",\"在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们想象成几个逐级包含的气泡。\",\"包含着整个全局作用域，其中只有一个标识符：foo\",\"包含着 foo 所创建的作用域，其中有三个标识符：a、bar 和 b\",\"包含着 bar 所创建的作用域，其中只有一个标识符：c 作用域气泡由其对应的作用域代码写在哪里决定，它们是 逐级包含 的。现在只需要假设每一个函数都会创建一个新的作用域气泡就好了。\",\"bar 的气泡被完全包含在 foo 所创建的气泡中，唯一的原因是那里就是我们希望定义函数 bar 的位置。\"]},\"1675\":{\"h\":\"查找\",\"t\":[\"作用域气泡的结构和互相之间的位置关系给引擎提供了足够的位置信息，引擎利用这些信息来查找标识符的位置。\",\"在上个代码片段中，引擎执行 console.log 声明，并依次查找 a、b 和 c 三个变量的引用。\",\"它首先从最内部的作用域，也就是 bar 函数的作用域气泡开始查找\",\"引擎无法在这里找到 a，因此会去上一级到所嵌套的 foo 的作用域中继续查找。在这里找到了 a，因此引擎使用了这个引用\",\"对 b 来讲也是一样的\",\"而对 c 来说，引擎在 bar 中就找到了它\",\"如果 a、c 都存在于 bar 和 foo 的内部，console.log 就可以直接使用 bar 中的变量，而无需到外面的 foo 中查找。\"]},\"1676\":{\"h\":\"遮蔽\",\"t\":[\"作用域查找会在找到第一个匹配的标识符时停止。\",\"在多层嵌套作用域中允许定义同名标识符，称为 遮蔽效应（内部的标识符遮蔽了外部的标识符）。\",\"抛开遮蔽效应，作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上层作用域进行查询，直到遇见第一个匹配的标识符为止。\",\"全局变量会自动成为全局对象的属性（比如浏览器中的 Window 对象），因此可以不直接使用全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。\",\"🌰 代码示例：\",\"window.a;\",\"通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。\",\"无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定。\",\"词法作用域查找只会查找一级标识符，比如 a、b 和 c。如果代码中引用了 foo.bar.baz，词法作用域查找只会试图查找 foo 标识符，找到这个变量后，对象属性访问规则会分别接管对 bar 和 baz 属性的访问。\"]},\"1677\":{\"h\":\"动态作用域\",\"t\":[\"词法作用域最重要的特征是它的定义过程发生在代码的书写阶段。\",\"那为什么要介绍动态作用域呢？\",\"实际上动态作用域是 JavaScript 另一个重要机制 this 的表亲。作用域混乱多数是因为词法作用域和 this 机制相混淆。\",\"动态作用域 并不关心函数和作用域是如何声明以及在何处声明，它只关心它们从何处调用。\",\"换句话说，作用域链 是基于 调用栈 的，而不是代码中的作用域嵌套。\",\"const a = 2; function foo() { console.log(a); } function bar() { const a = 3; foo(); } bar();\",\"如果处于词法作用域，变量 a 首先在 foo 函数中查找，没有找到。于是 顺着作用域链到全局作用域 中查找，找到并赋值为 2。所以控制台输出 2\",\"如果处于动态作用域，同样地，变量 a 首先在 foo 中查找，没有找到。这里会 顺着调用栈 在调用 foo 函数的地方，也就是 bar 函数中查找，找到并赋值为 3。所以控制台输出 3\",\"对于两种作用域的区别，简而言之，词法作用域是在 定义 时确定的，而动态作用域是在 运行 时确定的。\"]},\"1678\":{\"c\":[\"前端技术\"]},\"1679\":{\"c\":[\"JavaScript\"]},\"1680\":{\"h\":\"函数作用域\",\"t\":[\"函数作用域 指属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。这种设计方案是非常有用的，能充分利用 JavaScript 变量可以根据需要改变值类型的动态特性。\"]},\"1681\":{\"h\":\"隐藏内部实现\",\"t\":[\"对函数的传统认知就是先声明一个函数，然后再向里面添加代码。但反过来想也可以带来一些启示：从所写的代码中挑选出一个任意的片段，然后用函数声明对它进行包装，实际上就是把这些代码隐藏起来。\",\"实际的结果就是在这个代码片段的周围创建了一个作用域气泡，也就是说这段代码中的任何声明（变量或函数）都将绑定在这个新创建的包装函数的作用域中，而不是先前所在的作用域中。换句话说，可以把变量和函数包裹在一个函数的作用域中，然后用这个作用域来隐藏它们。\",\"有很多原因促成了这种基于作用域的隐藏方法。它们大都是从 最小权限原则 中引申出来的。\",\"这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都 隐藏 起来，比如某个模块或对象的 API 设计。这个原则可以延伸到如何选择作用域来包含变量和函数。如果所有变量和函数都在全局作用域中。当然可以在所有的内部嵌套作用域中访问到它们。但这样会破坏前面提到的最小权限原则，因为可能会暴露过多的变量或函数，而这些变量或函数本应该是私有的，正确的代码应该是 可以阻止对这些变量或函数进行访问。\",\"🌰 代码示例：\",\"function doSomething(a) { b = a + doSomethingElse(a * 2); console.log(b * 3); } function doSomethingElse(a) { return a - 1; } var b; doSomething(2); // 15\",\"在这个代码片段中，变量 b 和函数 doSomethingElse 应该是 doSomething 内部具体实现的私有内容。给予外部作用域对 b 和 doSomethingElse 的访问权限不仅没有必要，而且可能是危险的，因为它们可能被有意或无意地以非预期的方式使用，从而导致超出了 doSomething 的适用条件。更使用的设计会将这些私有的具体内容隐藏在 doSomething 内部。\",\"🌰 代码示例：\",\"function doSomething(a) { function doSomethingElse(a) { return a - 1; } var b; b = a + doSomethingElse(a * 2); console.log(b * 3); } doSomething(2); // 15\",\"现在，b 和 doSomethingElse 都无法从外部被访问，而只能被 doSomething 所控制。功能性和最终效果都没有受影响，但是设计上将具体内容私有化了，设计良好的软件都会依次进行实现。\"]},\"1682\":{\"h\":\"规避命名冲突\",\"t\":[\"隐藏作用域中的变量和函数可以避免同名标识符之间的冲突，两个标识符可能具有相同的名字但用途却不一样，无意间可能造成命名冲突。冲突会导致变量的值被意外覆盖。\",\"🌰 代码示例：\",\"function foo() { function bar(a) { // 修改 for 循环所属作用域中的 i i = 3; console.log(a + i); } for (var i = 0; i < 10; i++) { // 糟糕，无限循环了！ bar(i * 2); } } foo();\"]},\"1683\":{\"h\":\"全局命名空间\",\"t\":[\"变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。\",\"这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴露在顶级的词法作用域中。\",\"const MyReallyCoolLibrary = { awesome: 'stuff', doSomething: function () { // ... }, doAnotherThing: function () { // ... }, };\"]},\"1684\":{\"h\":\"模块管理\",\"t\":[\"另外一种避免冲突的办法和现代的模块机制很接近，就是众多模块管理器中挑选一个来使用。使用这些工具，任何库都无需将标识符加入到全局作用域中，而是通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。\",\"显而易见，这些工具并没有能够违反词法作用域规则的功能。它们只是利用作用域的规则强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突，\",\"因此，只要你愿意，即使不使用任何依赖管理工具也可以实现规避冲突的功效。\",\"在任意代码片段外部添加包装函数，可以将内部的变量和函数定义 隐藏 起来，外部作用域无法访问包装函数内部的任何内容。\",\"const a = 2; function foo() { // <-- 添加这一行 const a = 3; console.log(a); // 3 } // <-- 以及这一行 foo(); // <-- 以及这一行 console.log(a); // 2\",\"虽然这种技术可以解决一些问题，但是它并不理想，因为会导致一些额外的问题。首先，必须声明一个具名函数 foo() ，意味着 foo 这个名称本身\\\"污染\\\"了所在作用域（在这个例子中是全局作用域）。其次，必须显式地通过函数名foo()调用这个函数才能运行其中的代码。\",\"如果函数不需要函数名（或者至少函数名可以不污染所在作用域），并且能够自动运行，这将会更加理想。\"]},\"1685\":{\"h\":\"匿名和具名函数表达式\",\"t\":[\"无论是匿名还是具名，都是针对 函数表达式 的。函数声明必须有名称，否则报错。\",\"// 函数声明 function foo() { // do something }\",\"而函数表达式可以有名称也可以没有名称。\",\"匿名函数表达式：\",\"let foo = function () { // do something }; console.log(foo.name); // foo\",\"具名函数表达式：\",\"// 不要这样写 let bar = function foobar() { // do something }; console.log(bar.name); // foobar\",\"对于函数表达式最熟悉的场景可能就是回调参数了。\",\"setTimeout(function () { console.log('I waited 1 second!'); }, 1000);\",\"这叫 匿名函数表达式，因为 function(){} 是没有名称的标识符。\",\"[!warning] 函数表达式可以是匿名的，而 函数声明 是不可以省略函数名。\",\"匿名函数表达式的缺点：\",\"匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难\",\"如果没有函数名，当函数需要引用自身时只能使用已经过期的 arguments.callee 引用。比如在递归中，另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身\",\"匿名函数省略了对于代码可读性 / 可理解性很重要的函数名。一个描述性的名称可以让代码不言自明\",\"行内函数表达式非常强大且有用——匿名和具名之间的区别并不会对这点有任何影响。给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名时一个最佳实践。\"]},\"1686\":{\"h\":\"立即执行函数表达式 IIFE\",\"t\":[\"立即执行函数表达式 又称 自执行函数，社区给他规定了术语为 IIFE（Immediately Invoked Function Expression）。\",\"🌰 代码示例：\",\"(function () { // do something console.log('IIFE'); })();\",\"IIFE 的另一个非常普遍的进阶用法是把它们当作函数调用并传递参数进去。\",\"var a = 2; (function IIFE(global) { var a = 3; console.log(a); // 3 console.log(global.a); // 2 })(window); console.log(a); // 2\"]},\"1687\":{\"c\":[\"前端技术\"]},\"1688\":{\"c\":[\"JavaScript\"]},\"1689\":{\"h\":\"块作用域\",\"t\":[\"任何一对花括号中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为 块级作用域。\",\"尽管函数作用域是最常见的作用域单元，也是现行大多数 JavaScript 最普遍的设计方法，但其他类型的作用域单元也是存在的，并且通过使用其他类型的作用域单元甚至可以实现维护起来更加优秀、简洁的代码，比如块作用域。\"]},\"1690\":{\"h\":\"声明关键字\"},\"1691\":{\"h\":\"var\",\"t\":[\"ES5 及之前是没有块级变量这个说法的，常规性是用 闭包 来防止内存泄漏。\",\"如下所示为 ES5 中 var 声明的一些特点：\",\"函数内的变量若是带 var 声明，则会覆盖外部的全局变量 优先使用\",\"// 代码示例：优先使用 var foo = 5; function bar() { var foo = 3; console.log(foo); } bar(); // 3\",\"若是函数内部声明变量不带 var 声明，则直接 覆盖同名的全局变量\",\"函数内存在 声明提升 的情况，可以先使用后声明\",\"// 代码示例：变量提升 var foo = 5; function bar() { console.log(foo); var foo = 3; } // JavaScript 允许不存在的变量先使用 // 默认会初始化为一个 undefined bar(); // undefined,\",\"for 循环中的 var 会污染全局（不局限于循环内）\",\"// 代码示例：污染全局 for (var i = 0; i < 9; i++) { console.log('循环内部' + i); } console.log(i); // 9 console.log(i * 5); // 45\"]},\"1692\":{\"h\":\"let\",\"t\":[\"let 声明使用方法基本和 var 相同，而且声明的变量只在其块和子块中可用。 二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。\",\"function foo() { if(true) { var number = 5; console.log(number); } console.log(number); } function bar(） { if(true) { let number = 5; console.log(number); } console.log(number); } foo(); // 5 和 5 bar(); // 5 和 ReferenceError: number is not defined\",\"let 声明的变量的作用域只有外层块，而不是整个外层函数。\",\"我们可以利用这个特性来替代立即执行函数（IIFE）。\",\"/** * IIFE */ (function () { var number = 1; // do something })(); /** * Block 块级 */ { let number = 1; // do something }\",\"[!warning]\",\"不允许重新声明同名变量，会抛出异常，具有唯一性\",\"不允许没声明就使用，会抛出异常，只有执行该声明的时候才能使用\",\"有自己特色的闭包特性，比如在 for 循环的应用中\"]},\"1693\":{\"h\":\"const\",\"t\":[\"const 的用法跟 let 差不多，但是 const 一定要赋值，不赋值会报错。\",\"// 用法 const number = 4; // 没有初始化报错 const t; // SyntaxError: Missing initializer in const declaration\",\"const 是块级作用域，const 跟 let 的语义相似，就是用来声明常量的，一旦声明了就不能更改。\",\"[!warning] const 声明的变量记录的是 指针，不可更改的是 指针，如果 const 所声明的是对象，对象的内容还是可以修改的。\",\"// 重新赋值声明导致报错 const PI = 3.14; PI = 3.1415926; // TypeError: Assignment to constant variable. // 给对象增加属性不会导致 foo 的指针变化，所以不会报错 const foo = { foo: 2 }; foo.bar = 3; console.log(foo); // { // foo: 2, // bar: 3 // }\",\"[!warning]\",\"与 let 一样，具有唯一性，不可重复声明\",\"可以将 const 声明的基本类型变量理解为只读变量，但是其声明的引用类型变量则是可修改的\"]},\"1694\":{\"h\":\"暂时性死区\",\"t\":[\"使用 let 或 const 声明的变量，在声明赋值没有到达之前，访问该变量都会导致报错，就连一直以为安全的 typeof 也不再安全。\",\"// TDZ1 function foo() { // TDZ 开始 console.log(typeof number); let number = 5; // TDZ 结束 } foo(); // ReferenceError: number is not defined\",\"报的错是 ReferenceError，如果使用 var 声明的话，number 输出应该是 undefined，从 let 声明的变量的块的第一行，到声明变量之间的这个区域被称作 暂时性死区（TDZ）。凡是在这个区域使用这些变量都会报错。\",\"// TDZ2 function bar() { console.log(typeof number); } bar(); // undefined\",\"在函数里没有用 let 声明 number 的时候，number 是 undefined，讲道理在 let 声明前也应该是 5，然而 foo 函数却报了错，证明了就算是在未到达 let 声明的地方，但是在用 let 之前已经起到了作用。这是不是说明其实 let 也有提升（这个提升并不是 var 的那种提升，只是有影响），只是在 TDZ 使用的时候报错了，而不是 undefined。\",\"事实上，当 JavaScript 引擎检视下面的代码块有变量声明时，对于 var 声明的变量，会将声明提升到函数或全局作用域的顶部，而对 let 或 const 的时候会将声明放在暂时性死区内。\",\"[!warning] 任何在暂时性死区内访问变量的企图都会导致 运行时错误（Runtime Error）。只有执行到变量的声明语句时，该变量才会从暂时性死区内被移除并可以安全使用。\"]},\"1695\":{\"h\":\"显式块级作用域\",\"t\":[\"在嵌套的作用域内使用 let 声明同一变量是被允许的。这个嵌套的作用域，在 ES6 中又称 显式块级作用域。\",\"var foo = 1; { // 不会报错 let = 2; // other code }\",\"同时因为是 let 和 const 是块级作用域，声明的变量在当前块使用完之后就会被释放，所以就算使用相同的标识符也不会覆盖外部作用域的变量, 而 var 是会覆盖外部作用域的变量的。\",\"function foo() { var bar = 1; { let bar = 2; } console.log(bar); } function zoo() { var bar = 1; { var bar = 2; } console.log(bar); } foo(); // 1 zoo(); // 2\",\"在 ECMAScript 6 的发展阶段，被广泛认可的变量声明方式是：默认情况下应当使用 let 而不是 var 。\",\"对于多数 JavaScript 开发者来说， let 的行为方式正是 var 本应有的方式，因此直接用 let 替代 var 更符合逻辑。在这种情况下，你应当对 需要受到保护的变量 使用 const。\",\"在默认情况下使用 const ，而只在你知道变量值 需要被更改 的情况下才使用 let 。这在代码中能确保基本层次的不可变性，有助于防止某些类型的错误。\"]},\"1696\":{\"c\":[\"前端技术\"]},\"1697\":{\"c\":[\"JavaScript\"]},\"1698\":{\"h\":\"声明提升\",\"t\":[\"JavaScript 程序的运行阶段分为 预编译阶段 和 执行阶段。\",\"在预编译阶段，JavaScript 引擎会做一件事情，那就是 读取变量的定义 并 确定其作用域 即生效范围。\",\"变量定义 使用 var 或 let 关键字定义的变量，在未赋值的情况下，该变量的值是 undefined 使用 const 关键字定义变量却不赋值，将会抛出错误\",\"变量作用域 全局变量的作用域遍布全局 局部变量的作用域仅在于函数内部及其嵌套函数的作用域 函数内部的同名变量或参数优先级高于全局同名变量\",\"在 JavaScript 中，如果变量或函数没有声明就被使用，会引致错误的。\",\"console.log(a); // Uncaught ReferenceError: a is not defined\",\"声明提升 包括 变量声明提升 和 函数声明提升：\",\"变量声明提升：通过 var、let 和 const 声明的变量在代码执行之前被 JavaScript 引擎提升到当前作用域的顶部\",\"函数声明提升：通过函数声明的方式（非函数表达式）声明的函数在代码执行之前被 JavaScript 引擎提升了当前作用域的顶部，而且 函数声明提升优先于变量声明提升\",\"JavaScript 的代码在生成前，会先对代码进行编译，编译的一部分工作就是找到所有的声明，然后建立作用域将其关联起来，因此，在 当前作用域内 包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。\",\"[!warning] 这里是 声明 会被提前处理，赋值 并没有， 定义声明是在编译阶段进行的，而赋值是在执行阶段进行的 。也就是说声明提升了，赋值还留着原地，等待执行。\"]},\"1699\":{\"h\":\"变量声明提升\",\"t\":[\"下面展示了标准的变量声明提升。\",\"console.log(a); var a = 2; console.log(a);\",\"等价于\",\"var a; // 变量声明 默认赋值 undefined comsole.log(a); // 输出变量a undefined a = 2; // 给a赋值2 console.log(a); // 输出变量 a 为 2\",\"这里就用到了我们上面的结论声明提升了，赋值还留着原地。\"]},\"1700\":{\"h\":\"函数声明提升\",\"t\":[\"函数的两种创建方式：\",\"函数声明\",\"函数表达式\",\"🌰 代码示例：函数声明\",\"foo(); // 输出 'bar' function foo() { console.log('bar'); }\",\"🌰 代码示例：函数表达式\",\"foo(); // 报错：foo is not a function var foo = function () { console.log('bar'); };\",\"解析：同样地先执行函数，后创建函数，结果却是不一样。原因在于，通过函数声明的方式，该 函数声明（包括定义）会被提升至作用域的顶部，而表达式的创建方式则只提升了变量 foo 至作用域的顶部，此时的 foo 其值为undefined，调用 foo 自然报错：foo 不是一个方法。\",\"再来看一个示例：\",\"var foo = function () { console.log('1'); }; function foo() { console.log('2'); } foo(); // '1'\",\"预编译阶段进行变量声明提升和函数声明提升后，上述代码执行效果等同于：\",\"// 变量声明提升 const foo; // 函数声明提升 function foo(){ console.log('2'); } // 变量赋值保持原位执行，foo 函数被覆盖 foo = function(){ console.log('1'); }; foo(); // '1'\",\"总结：\",\"函数声明提升，会将函数的声明和定义全都提升至作用域顶部\",\"变量声明提升，只提升声明部分（未赋值状态），赋值部分保持原位置不动\"]},\"1701\":{\"h\":\"函数覆盖\",\"t\":[\"函数声明和变量声明都会被提升。但是，函数声明会覆盖变量声明。\",\"🌰 代码示例：\",\"var a; function a() {} console.log(a); // 'function a(){}'\",\"但是，如果变量存在赋值操作，则最终的值为变量的值。\",\"var a = 1; function a() {} console.log(a); // 'function a(){}' var a; function a() {} console.log(a); // 'function a(){}' a = 1; console.log(a); // 1\",\"变量的重复声明是无用的，但函数的重复声明会覆盖前面的声明（无论是变量还是函数声明）。\"]},\"1702\":{\"h\":\"重复声明无效\",\"t\":[\"var a = 1; var a; console.log(a);\",\"输出结果为 1，以上代码等同于：\",\"// 此时 a 的默认值为 undefined var a; a = 1; console.log(a); // 1\"]},\"1703\":{\"h\":\"函数声明优先\",\"t\":[\"由于函数声明提升优先于变量声明提升，所以变量的声明无效。\",\"var a; function a() { console.log(1); } a(); // 1\"]},\"1704\":{\"h\":\"函数声明覆盖\",\"t\":[\"后面的函数声明会覆盖前面的函数声明。\",\"a(); // 2 function a() { console.log(1); } function a() { console.log(2); }\",\"所以，应该避免在同一作用域中重复声明。\"]},\"1705\":{\"c\":[\"前端技术\"]},\"1706\":{\"c\":[\"JavaScript\"]},\"1707\":{\"h\":\"闭包\",\"t\":[\"在了解闭包之前，先要熟悉以下几点：\",\"首先要理解执行环境（执行上下文栈），执行环境定义了变量或函数有权访问的其他数据。\",\"每个执行环境都有一个与之关联的 变量对象，环境中定义的所有变量和函数都保存在这个对象中。\",\"每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入到一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。\",\"当某个函数被调用时，会创建一个执行环境及其相应的 作用域链。然后使用 arguments 和其他命名参数的值来初始化函数的活动对象。在函数中，活动对象作为变量对象使用（作用域链是由每层的变量对象使用链结构链接起来的）。\",\"在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，直到作用域链终点即全局执行环境。\",\"作用域链的本质是一个指向变量对象的指针列表，它只引用但不实际包含变量对象。\"]},\"1708\":{\"h\":\"定义\",\"t\":[\"闭包的定义：指有权访问另一个函数作用域中的变量的函数，一般情况就是在一个函数中包含另一个函数。\",\"闭包的作用：访问函数内部变量、保持函数在环境中一直存在，不会被垃圾回收机制处理\",\"函数内部声明的变量是局部的，只能在函数内部访问到，但是函数外部的变量是对函数内部可见的。\",\"子级可以向父级查找变量，逐级查找，直到找到为止或全局作用域查找完毕。\",\"因此我们可以在函数内部再创建一个函数，这样对内部的函数来说，外层函数的变量都是可见的，然后我们就可以访问到他的变量了。\",\"function foo() { let value = 1; function bar() { console.log(value); } return bar(); } const baz = foo(); // 这就是闭包的作用，调用 foo 函数，就会执行里面的 bar 函数，foo 函数这时就会访问函数外层的变量 baz();\",\"bar 包含 foo 内部作用域的闭包，使得该作用域能够一直存活，不会被垃圾回收机制处理掉，这就是闭包的作用，以供 bar 在任何时间进行引用。\"]},\"1709\":{\"h\":\"执行过程分析\",\"t\":[\"我们通过一段代码仔细分析上述代码片段执行过程到底发生了什么：\",\"function foo() { var a = 2; function bar() { console.log(a); } return bar; } var baz = foo(); baz();\",\"代码执行流进入全局执行环境，并对全局执行环境中的代码进行声明提升。\",\"执行流执行 var baz = foo ，调用 foo 函数，此时执行流进入 foo 执行环境中，对该执行环境中的代码进行声明提升过程。此时执行环境栈中存在两个执行环境，foo 函数为当前执行流所在执行环境。\",\"执行流执行代码 var a = 2;，对 a 进行 LHS 查询，给 a 赋值 2。\",\"执行流执行 return bar ，将 bar 函数作为返回值返回。按理说，这时 foo 函数已经执行完毕，应该销毁其执行环境，等待垃圾回收。但因为其返回值是 bar 函数。bar 函数中存在自由变量 a，需要通过作用域链到 foo 函数的执行环境中找到变量 a 的值，所以虽然 foo 函数的执行环境被销毁，但其变量对象不能被销毁，只是从活动状态变成非活动状态；而全局环境的变量对象则变成活动状态；执行流继续执行 var baz = foo，把 foo 函数的返回值 bar 函数赋值给 baz。\",\"执行流执行 baz ，通过在全局执行环境中查找 baz 的值，baz 保存着 foo 函数的返回值 bar。所以这时执行 baz ，会调用 bar 函数，此时执行流进入 bar 函数执行环境中，对该执行环境中的代码进行声明提升过程。此时执行环境栈中存在三个执行环境，bar 函数为当前执行流所在的执行环境。\",\"在声明提升的过程中，由于 a 是个自由变量，需要通过 bar 函数的作用域链 bar -> foo -> 全局作用域 进行查找，最终在 foo 函数中找到 var a = 2; ，然后在 foo 函数的执行环境中找到 a 的值是 2，所以给 a 赋值 2。\",\"执行流执行 console.log(a) ，调用内部对象 console，并从 console 对象中找到 log 方法，将 a 作为参数传递进去。从 bar 函数的执行环境中找到 a 的值是 2，所以，最终在控制台显示 2。\",\"执行流执行完 bar 函数后，bar 的执行环境被弹出执行环境栈，并被销毁，等待垃圾回收，控制权还给全局执行环境。\",\"当页面关闭时，所有执行环境都被销毁。\",\"// 执行上下文栈 ECStack = [ globalContext ] // 全局执行上下文 global = { VO: [global], Scope: [globalContext.VO], this: globalContext.VO } // 函数foo被创建，保存作用域链到函数内部属性[[Scopes]] foo.[[Scopes]] = [ globalContext.VO ]\",\"// foo函数执行上下文 fooContext = { AO: { a: undefined, bar: function () { console.log(a); }, arguments: [], }, Scope: [AO, globalContext.VO], this: undefined, };\",\"// bar 函数执行上下文 barContext = { AO: { a: undefined, arguments: [], }, Scope: [AO, globalContext.VO], this: undefined, };\",\"当 bar 函数执行的时候，foo 函数上下文已经被销毁了（亦即从执行上下文栈中被弹出），怎么还会读取到 foo 作用域下的 a 值呢？\",\"当我们了解了具体的执行过程后，我们知道 bar 函数执行上下文维护了一个作用域链：\",\"barContext = { Scope: [AO, fooContext.AO, globalContext.VO], };\",\"对的，就是因为这个作用域链，bar 函数依然可以读取到 fooContext.AO 的值，说明当 bar 函数引用了 fooContext.AO 中的值的时候，即使 fooContext 被销毁了，但是 JavaScript 依然会让 fooContext.AO 活在内存中，bar 函数依然可以通过 bar 函数的作用域链找到它，正是因为 JavaScript 做到了这一点，从而实现了闭包这个概念。\"]},\"1710\":{\"h\":\"应用场景\",\"t\":[\"闭包的常见应用场景：\",\"函数嵌套：函数里面的函数能够保证外面的函数的作用域不会被销毁，所以无论是在函数里面还是在外面调用函数里面的函数都可以访问到- 外层函数的作用域，具体做法可以将里面函数当做返回值返回后通过两次的括号调用\",\"回调函数：回调函数会保留当前外层的作用域，然后回调到另一个地方执行，执行的时候就是闭包\",\"匿名函数自执行：严格算也不是闭包，就是 (function(){})() 这种格式\",\"function hoc(a, b) { return function () { console.log(a, b); }; } const fn = hoc(1, 2); setTimeout(fn, 3000);\",\"一般 setTimeout 的第一个参数是个函数，但是不能传值。如果想传值进去，可以调用一个函数返回一个内部函数的调用，将内部函数的调用传给 setTimeout。内部函数执行所需的参数，外部函数传给他，在 setTimeout 函数中也可以访问到外部函数。\"]},\"1711\":{\"h\":\"优缺点\",\"t\":[\"优点：能够让希望一个变量长期驻扎在内存之中成为可能，避免全局变量的污染，以及允许私有成员的存在\",\"缺点：就是常驻内存会增大内存使用量，并且使用不当容易造成内存泄漏\",\"如果不是因为某些特殊任务而需要闭包，在没有必要的情况下，在其他函数中创建函数是不明智的，因为闭包对脚本性能具有负面影响，包括处理速度和内存消耗。\"]},\"1712\":{\"c\":[\"前端技术\"]},\"1713\":{\"c\":[\"JavaScript\"]},\"1714\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"1715\":{\"h\":\"Css\"},\"1716\":{\"h\":\"前端技术\"},\"1717\":{\"h\":\"Html\"},\"1718\":{\"h\":\"浏览器\"},\"1719\":{\"h\":\"问题解决\"},\"1720\":{\"h\":\"Git\"},\"1721\":{\"h\":\"开发工具\"},\"1722\":{\"h\":\"Npm\"},\"1723\":{\"h\":\"Linux\"},\"1724\":{\"h\":\"后端技术\"},\"1725\":{\"h\":\"OOP\"},\"1726\":{\"h\":\"Java Script\"},\"1727\":{\"h\":\"基本语法\"},\"1728\":{\"h\":\"设计模式\"},\"1729\":{\"h\":\"CSS\"},\"1730\":{\"h\":\"代码片段\"},\"1731\":{\"h\":\"Java Script\"},\"1732\":{\"h\":\"计算机网络体系\"},\"1733\":{\"h\":\"计算机网络\"},\"1734\":{\"h\":\"Html\"},\"1735\":{\"h\":\"面试相关\"},\"1736\":{\"h\":\"Css\"},\"1737\":{\"h\":\"Java Script\"},\"1738\":{\"h\":\"Vue.js\"},\"1739\":{\"h\":\"浏览器\"},\"1740\":{\"h\":\"算法\"},\"1741\":{\"h\":\"理解对象\"},\"1742\":{\"h\":\"创建对象\"},\"1743\":{\"h\":\"类\"},\"1744\":{\"h\":\"继承\"},\"1745\":{\"h\":\"Array\"},\"1746\":{\"h\":\"内置对象\"},\"1747\":{\"h\":\"Object\"},\"1748\":{\"h\":\"全局对象 值属性\"},\"1749\":{\"h\":\"全局对象 函数属性\"},\"1750\":{\"h\":\"数据类型和值\"},\"1751\":{\"h\":\"语句和声明\"},\"1752\":{\"h\":\"表达式\"},\"1753\":{\"h\":\"运算符\"},\"1754\":{\"h\":\"内存管理\"},\"1755\":{\"h\":\"核心模块\"},\"1756\":{\"h\":\"函数内部\"},\"1757\":{\"h\":\"函数声明\"},\"1758\":{\"h\":\"函数参数\"},\"1759\":{\"h\":\"函数类型\"},\"1760\":{\"h\":\"函数调用\"},\"1761\":{\"h\":\"并发模型\"},\"1762\":{\"h\":\"执行阶段\"},\"1763\":{\"h\":\"模块化\"},\"1764\":{\"h\":\"编译阶段\"}},\"dirtCount\":0,\"index\":[[\"做到了这一点\",{\"1\":{\"1709\":1}}],[\"做就行了\",{\"1\":{\"93\":1}}],[\"活在内存中\",{\"1\":{\"1709\":1}}],[\"活动对象作为变量对象使用\",{\"1\":{\"1707\":1}}],[\"活动对象是在进入函数执行上下文时刻被创建的\",{\"1\":{\"1562\":1}}],[\"活动对象\",{\"1\":{\"1562\":2,\"1566\":1,\"1571\":1}}],[\"怎么还会读取到\",{\"1\":{\"1709\":1}}],[\"怎么判断是不是用new关键字来调用呢\",{\"1\":{\"394\":1}}],[\"证明了就算是在未到达\",{\"1\":{\"1694\":1}}],[\"讲道理在\",{\"1\":{\"1694\":1}}],[\"差不多\",{\"1\":{\"1693\":1}}],[\"差错控制等\",{\"1\":{\"318\":1}}],[\"社区给他规定了术语为\",{\"1\":{\"1686\":1}}],[\"始终给函数表达式命名时一个最佳实践\",{\"1\":{\"1685\":1}}],[\"污染全局\",{\"1\":{\"1691\":1}}],[\"污染\",{\"1\":{\"1684\":1}}],[\"糟糕\",{\"1\":{\"1682\":1}}],[\"冲突会导致变量的值被意外覆盖\",{\"1\":{\"1682\":1}}],[\"功能性和最终效果都没有受影响\",{\"1\":{\"1681\":1}}],[\"功能逻辑\",{\"1\":{\"1505\":2}}],[\"起来\",{\"1\":{\"1681\":1,\"1684\":1}}],[\"顺着调用栈\",{\"1\":{\"1677\":1}}],[\"顺着作用域链到全局作用域\",{\"1\":{\"1677\":1}}],[\"顺序执行代码\",{\"1\":{\"1565\":1}}],[\"遮蔽效应\",{\"1\":{\"1676\":1}}],[\"遮蔽\",{\"0\":{\"1676\":1}}],[\"询问\",{\"1\":{\"1670\":1}}],[\"继续进行编译\",{\"1\":{\"1670\":1}}],[\"继承自\",{\"1\":{\"1589\":1,\"1658\":1}}],[\"继承自原型对象\",{\"1\":{\"937\":1}}],[\"继承与派生类\",{\"0\":{\"1490\":1}}],[\"继承原型\",{\"1\":{\"1115\":1}}],[\"继承方法和属性\",{\"1\":{\"804\":1}}],[\"继承父类原型对象\",{\"1\":{\"664\":1}}],[\"继承父类构造函数中的属性\",{\"1\":{\"662\":1}}],[\"继承父类的所有属性和方法\",{\"1\":{\"619\":1}}],[\"继承了\",{\"1\":{\"625\":1,\"636\":1}}],[\"继承了属性\",{\"1\":{\"548\":1}}],[\"继承是面向对象编程中\",{\"1\":{\"618\":1}}],[\"继承而来的要结合\",{\"1\":{\"647\":1}}],[\"继承而来的\",{\"1\":{\"576\":1}}],[\"继承属性\",{\"0\":{\"1111\":1},\"1\":{\"565\":1,\"1004\":1}}],[\"继承对象\",{\"1\":{\"548\":1}}],[\"继承描述了类之间的\",{\"1\":{\"229\":1}}],[\"继承\",{\"0\":{\"1744\":1},\"1\":{\"229\":2,\"618\":1,\"625\":1}}],[\"继承样式\",{\"1\":{\"17\":1}}],[\"抽象语法树\",{\"1\":{\"1667\":1}}],[\"抽象相等比较算法\",{\"0\":{\"1203\":1}}],[\"违背了\",{\"1\":{\"1655\":1}}],[\"了所在作用域\",{\"1\":{\"1684\":1}}],[\"了\",{\"1\":{\"1655\":1}}],[\"了解更多\",{\"1\":{\"1100\":1}}],[\"了解它是如何工作的\",{\"1\":{\"3\":1}}],[\"轻易不要修改它\",{\"1\":{\"1631\":1}}],[\"感觉每次需求评估前端往往是最后一道坎\",{\"1\":{\"1621\":1}}],[\"地位也就更高了\",{\"1\":{\"1621\":1}}],[\"地址指针\",{\"1\":{\"1204\":1}}],[\"地址信息\",{\"1\":{\"318\":1}}],[\"地址发送\",{\"1\":{\"152\":1}}],[\"地址\",{\"1\":{\"152\":2,\"153\":1,\"464\":1}}],[\"物联网等等\",{\"1\":{\"1621\":1}}],[\"物理层\",{\"1\":{\"317\":1,\"318\":2}}],[\"智能设备\",{\"1\":{\"1621\":1}}],[\"触摸屏\",{\"1\":{\"1621\":1}}],[\"触发后立即执行\",{\"1\":{\"1431\":1}}],[\"触发目标节点上的事件处理函数\",{\"1\":{\"453\":1}}],[\"触发相应的监听回调\",{\"1\":{\"401\":1}}],[\"端\",{\"1\":{\"1621\":1}}],[\"端口建立tcp链接\",{\"1\":{\"464\":1}}],[\"端口\",{\"1\":{\"464\":1}}],[\"端口号\",{\"1\":{\"148\":1,\"449\":1}}],[\"画画页面实现点效果\",{\"1\":{\"1621\":1}}],[\"画笔功能\",{\"1\":{\"1437\":1}}],[\"栅格系统\",{\"1\":{\"1621\":1}}],[\"独立的功能性样式单元\",{\"1\":{\"1621\":1}}],[\"独立算法和数据单元\",{\"1\":{\"1621\":1}}],[\"独立函数调用\",{\"1\":{\"1578\":1}}],[\"城堡\",{\"1\":{\"1621\":1}}],[\"搭成的\",{\"1\":{\"1621\":1}}],[\"积木\",{\"1\":{\"1621\":2}}],[\"层面上\",{\"1\":{\"1621\":1}}],[\"层序遍历\",{\"1\":{\"479\":1}}],[\"他们的侧重点有所不同\",{\"1\":{\"1621\":1}}],[\"他们可以遍历和操作\",{\"1\":{\"464\":1}}],[\"统称为\",{\"1\":{\"1665\":1}}],[\"统一暴露\",{\"1\":{\"1619\":2}}],[\"统计数组元素出现次数\",{\"1\":{\"352\":1}}],[\"彻底说明白\",{\"1\":{\"1616\":1}}],[\"彻底拿掉这个参数\",{\"1\":{\"1399\":1}}],[\"难以维护\",{\"1\":{\"1614\":1}}],[\"见下面\",{\"1\":{\"1613\":1}}],[\"暴露单个内容\",{\"1\":{\"1619\":1}}],[\"暴露多个内容\",{\"1\":{\"1619\":1}}],[\"暴露什么数据类型\",{\"1\":{\"1619\":1}}],[\"暴露任意数据类型\",{\"1\":{\"1619\":1}}],[\"暴露模块使用\",{\"1\":{\"1619\":1}}],[\"暴露模块\",{\"1\":{\"1616\":1,\"1617\":1,\"1618\":1}}],[\"暴露的方式使用\",{\"1\":{\"1616\":1}}],[\"暴露foo函数和bar函数\",{\"1\":{\"1614\":1}}],[\"暴露\",{\"1\":{\"1613\":1}}],[\"降低代码耦合度\",{\"1\":{\"1609\":1}}],[\"降为一维数组\",{\"1\":{\"374\":1}}],[\"痛点\",{\"0\":{\"1608\":1}}],[\"精心编写的模块提供了可靠的抽象和封装界限\",{\"1\":{\"1606\":1}}],[\"测试轻而易举\",{\"1\":{\"1606\":1}}],[\"测试一个数组内的所有元素是否都能通过指定函数的测试\",{\"1\":{\"351\":1}}],[\"什么时候运行到这一句\",{\"1\":{\"1593\":1}}],[\"什么是元\",{\"1\":{\"1411\":1}}],[\"什么是不再需要继续使用的值\",{\"1\":{\"1279\":1}}],[\"什么是bfc\",{\"0\":{\"325\":1}}],[\"什么是\",{\"0\":{\"2\":1,\"115\":1,\"126\":1}}],[\"固然有利于编译器提高效率\",{\"1\":{\"1593\":1}}],[\"固定时间内只执行一次\",{\"1\":{\"1437\":1}}],[\"固定\",{\"1\":{\"105\":3}}],[\"风格\",{\"1\":{\"1589\":1}}],[\"风格的代码\",{\"1\":{\"1589\":2}}],[\"风格的\",{\"1\":{\"153\":1}}],[\"便不可再修改\",{\"1\":{\"1589\":1}}],[\"便会直接调用新赋值的函数\",{\"1\":{\"1469\":1}}],[\"似乎比\",{\"1\":{\"1584\":1}}],[\"思考一下\",{\"1\":{\"1581\":1}}],[\"硬绑定会大大降低函数的灵活性\",{\"1\":{\"1587\":1}}],[\"硬绑定这种方式可以把\",{\"1\":{\"1587\":1}}],[\"硬绑定的\",{\"1\":{\"1580\":1}}],[\"硬绑定可以解决之前提出的丢失绑定的问题\",{\"1\":{\"1580\":1}}],[\"硬绑定\",{\"1\":{\"1580\":1}}],[\"遗憾的是\",{\"1\":{\"1579\":1}}],[\"库中事件处理器会把回调函数的\",{\"1\":{\"1579\":1}}],[\"库中很流行\",{\"1\":{\"1496\":1}}],[\"业界没有\",{\"1\":{\"1575\":1}}],[\"叫全局对象\",{\"1\":{\"1561\":1}}],[\"叫做派生类\",{\"1\":{\"1490\":1}}],[\"叫做局部变量\",{\"1\":{\"1069\":1}}],[\"叫做全局变量\",{\"1\":{\"1069\":1}}],[\"叫做main\",{\"1\":{\"332\":1}}],[\"擦\",{\"1\":{\"1557\":1}}],[\"擦除属性申明\",{\"1\":{\"29\":1}}],[\"知道了这样的工作原理\",{\"1\":{\"1557\":1}}],[\"知道了需要调度哪些资源文件\",{\"1\":{\"153\":1}}],[\"必定会产生多个执行上下文\",{\"1\":{\"1556\":1}}],[\"必须显式地通过函数名foo\",{\"1\":{\"1684\":1}}],[\"必须显式指定是作为函数\",{\"1\":{\"623\":1}}],[\"必须声明一个具名函数\",{\"1\":{\"1684\":1}}],[\"必须与模块内部的变量建立一一对应关系\",{\"1\":{\"1654\":1}}],[\"必须先写\",{\"1\":{\"1490\":1}}],[\"必须先通过父类的构造函数完成塑造\",{\"1\":{\"619\":1}}],[\"必须等待设定的时间间隔之后\",{\"1\":{\"1446\":1}}],[\"必须等到内部所有\",{\"1\":{\"1345\":1}}],[\"必须不带参数\",{\"1\":{\"1318\":1}}],[\"必须解析到\",{\"1\":{\"1222\":1}}],[\"必须非常小心\",{\"1\":{\"1218\":1}}],[\"必须写成下面这样\",{\"1\":{\"1218\":1}}],[\"必须是一个合法的\",{\"1\":{\"1027\":1}}],[\"必须是原始字符串\",{\"1\":{\"891\":1}}],[\"必须采用\",{\"1\":{\"861\":1}}],[\"必须使用索引号\",{\"1\":{\"1109\":1}}],[\"必须使用\",{\"1\":{\"848\":1,\"1393\":1}}],[\"必须直接在原型对象上调用\",{\"1\":{\"576\":1}}],[\"必须有一个空的非捕获分组\",{\"1\":{\"245\":1}}],[\"激活\",{\"1\":{\"1555\":1,\"1569\":1}}],[\"推荐\",{\"1\":{\"1651\":1}}],[\"推荐使用严格的语句块模式\",{\"1\":{\"1018\":1}}],[\"推进至运行环境的专用线程中继续执行\",{\"1\":{\"1552\":1}}],[\"各自的\",{\"1\":{\"1570\":1}}],[\"各线程独立\",{\"1\":{\"1547\":1}}],[\"各修订号由一个\",{\"1\":{\"509\":1}}],[\"逐级查找\",{\"1\":{\"1708\":1}}],[\"逐级包含\",{\"1\":{\"1674\":1}}],[\"逐级向外或者说向上层作用域进行查询\",{\"1\":{\"1676\":1}}],[\"逐级向上传播\",{\"1\":{\"453\":1}}],[\"逐级向下传播到较为具体的元素\",{\"1\":{\"454\":1}}],[\"逐级向下传播\",{\"1\":{\"453\":1}}],[\"逐行执行\",{\"1\":{\"1547\":1}}],[\"资源还在该线程中\",{\"1\":{\"1547\":1}}],[\"资源被分配到其他地方去\",{\"1\":{\"1547\":1}}],[\"阻塞是指调用在等待的过程中线程被挂起\",{\"1\":{\"1547\":1}}],[\"阻塞\",{\"1\":{\"1547\":1}}],[\"阻塞和非阻塞的概念\",{\"1\":{\"1547\":1}}],[\"阻止默认事件的方式是给事件置返回值\",{\"1\":{\"1139\":1}}],[\"阻止默认事件\",{\"0\":{\"1139\":1}}],[\"阻止执行\",{\"0\":{\"243\":1}}],[\"待加入队列的消息\",{\"1\":{\"1543\":1}}],[\"待请求完成后执行\",{\"1\":{\"1502\":1}}],[\"早于\",{\"1\":{\"1541\":1}}],[\"鼠标点击事件在第\",{\"1\":{\"1541\":1}}],[\"鼠标点击事件\",{\"1\":{\"1539\":1}}],[\"鼠标单击\",{\"1\":{\"1538\":1}}],[\"鼠标滚轮事件\",{\"1\":{\"1437\":1}}],[\"闲置阶段\",{\"1\":{\"1534\":1}}],[\"└──┤\",{\"1\":{\"1534\":1}}],[\"└───────────────────────┘\",{\"1\":{\"1534\":1}}],[\"└───────────────┘\",{\"1\":{\"1534\":1}}],[\"└──────────┬────────────┘\",{\"1\":{\"1534\":5}}],[\"│<──connections───\",{\"1\":{\"1534\":1}}],[\"│\",{\"1\":{\"1534\":28}}],[\"┌───────────────┐\",{\"1\":{\"1534\":1}}],[\"┌───────────────────────┐\",{\"1\":{\"1534\":1}}],[\"┌──────────┴────────────┐\",{\"1\":{\"1534\":5}}],[\"┌─>│\",{\"1\":{\"1534\":1}}],[\"产生堆\",{\"1\":{\"1532\":1}}],[\"哪些模块是有依赖关系的\",{\"1\":{\"1614\":1}}],[\"哪些文件不应纳入版本控制\",{\"1\":{\"171\":1}}],[\"哪怕这个函数不是那个对象的方法\",{\"1\":{\"1529\":1}}],[\"省略圆括号\",{\"0\":{\"1524\":1}}],[\"委托\",{\"1\":{\"1502\":2}}],[\"级连函数的表达形式如下所示\",{\"1\":{\"1496\":1}}],[\"级联函数\",{\"0\":{\"1496\":1},\"1\":{\"1496\":1}}],[\"级的方法添加事件\",{\"1\":{\"1466\":1}}],[\"派生自表达式的类\",{\"0\":{\"1493\":1}}],[\"派生类是指继承自其他类的新类\",{\"1\":{\"1490\":1}}],[\"派卡\",{\"1\":{\"25\":1}}],[\"惰性载入\",{\"0\":{\"1468\":1},\"1\":{\"1466\":1,\"1468\":1}}],[\"惰性函数的本质就是函数重写\",{\"1\":{\"1468\":1}}],[\"惰性函数\",{\"0\":{\"1465\":1},\"1\":{\"1465\":1}}],[\"惰性求值\",{\"0\":{\"1402\":1}}],[\"典型的例子如\",{\"1\":{\"1458\":1}}],[\"典型代表就是浮动\",{\"1\":{\"48\":1}}],[\"匿名和具名之间的区别并不会对这点有任何影响\",{\"1\":{\"1685\":1}}],[\"匿名和具名函数表达式\",{\"0\":{\"1685\":1}}],[\"匿名表达式\",{\"1\":{\"1484\":1}}],[\"匿名回调函数\",{\"1\":{\"1452\":1}}],[\"匿名函数自执行\",{\"1\":{\"1710\":1}}],[\"匿名函数自调用\",{\"1\":{\"1613\":1}}],[\"匿名函数省略了对于代码可读性\",{\"1\":{\"1685\":1}}],[\"匿名函数在栈追踪中不会显示出有意义的函数名\",{\"1\":{\"1685\":1}}],[\"匿名函数表达式的缺点\",{\"1\":{\"1685\":1}}],[\"匿名函数表达式\",{\"1\":{\"1685\":2}}],[\"匿名函数里面的\",{\"1\":{\"1407\":1}}],[\"匿名函数\",{\"0\":{\"1332\":1},\"1\":{\"1332\":1}}],[\"匿名函数的\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"间接调用\",{\"1\":{\"1590\":1}}],[\"间接调用模式\",{\"0\":{\"1529\":1}}],[\"间歇调用定时器的连续执行\",{\"0\":{\"1542\":1}}],[\"间歇调用定时器调用被废弃\",{\"0\":{\"1540\":1}}],[\"间隔内如果还有字符输入的话\",{\"1\":{\"1449\":1}}],[\"间的通信和交互的规则\",{\"1\":{\"318\":1}}],[\"很难看出来\",{\"1\":{\"1614\":1}}],[\"很容易引起命名冲突\",{\"1\":{\"1611\":1}}],[\"很多情况下\",{\"1\":{\"1543\":1}}],[\"很多内置函数期望传入的参数的数据类型是固定的\",{\"1\":{\"949\":1}}],[\"很好理解\",{\"1\":{\"1493\":1}}],[\"很明显\",{\"1\":{\"1449\":1}}],[\"恭喜\",{\"1\":{\"1449\":2}}],[\"礼貌起见\",{\"1\":{\"1444\":1}}],[\"掉\",{\"1\":{\"1438\":2}}],[\"滚轮场景\",{\"1\":{\"1437\":1}}],[\"监控浏览器窗口大小\",{\"1\":{\"1437\":1}}],[\"监听\",{\"1\":{\"403\":1}}],[\"缩放场景\",{\"1\":{\"1437\":1}}],[\"缩小每一趟的增量\",{\"1\":{\"488\":1}}],[\"拖拽场景\",{\"1\":{\"1437\":1}}],[\"动画样式\",{\"1\":{\"1621\":1}}],[\"动画场景\",{\"1\":{\"1437\":1}}],[\"动作\",{\"1\":{\"1446\":1}}],[\"动态引入\",{\"1\":{\"1619\":1}}],[\"动态的模块路径\",{\"0\":{\"1597\":1}}],[\"动态加载功能\",{\"1\":{\"1593\":1}}],[\"动态加载\",{\"0\":{\"1593\":1}}],[\"动态织入\",{\"1\":{\"1505\":2}}],[\"动态传入\",{\"1\":{\"1503\":1}}],[\"动态语言\",{\"1\":{\"917\":1}}],[\"动态作用域\",{\"0\":{\"630\":1,\"1677\":1},\"1\":{\"1673\":1,\"1677\":1}}],[\"动态插入原型方法\",{\"1\":{\"570\":1}}],[\"动态原型模式将所有信息都封装在构造函数中\",{\"1\":{\"570\":1}}],[\"动态原型模式\",{\"0\":{\"570\":1}}],[\"动态初始化增量\",{\"1\":{\"488\":1}}],[\"动态规划\",{\"1\":{\"524\":1},\"2\":{\"487\":1,\"496\":1,\"520\":1,\"526\":1}}],[\"动态主机配置协议\",{\"1\":{\"311\":1}}],[\"动态类型\",{\"1\":{\"230\":1}}],[\"动态绑定\",{\"1\":{\"229\":2}}],[\"持久化\",{\"1\":{\"1436\":1}}],[\"尤其需要注意\",{\"1\":{\"1620\":1}}],[\"尤其在\",{\"1\":{\"1432\":1}}],[\"尤其是\",{\"1\":{\"873\":1}}],[\"尤其是泰国\",{\"1\":{\"85\":1}}],[\"🌽\",{\"1\":{\"1606\":1}}],[\"🎉\",{\"1\":{\"1581\":1}}],[\"🎯\",{\"1\":{\"1557\":1,\"1581\":1}}],[\"🏕\",{\"1\":{\"1431\":1,\"1444\":1}}],[\"🌰\",{\"1\":{\"235\":1,\"252\":1,\"253\":2,\"531\":1,\"561\":2,\"622\":1,\"635\":1,\"640\":1,\"648\":1,\"659\":1,\"662\":1,\"919\":1,\"1052\":1,\"1266\":1,\"1267\":1,\"1271\":1,\"1281\":1,\"1411\":1,\"1466\":1,\"1502\":1,\"1533\":1,\"1564\":1,\"1570\":1,\"1578\":1,\"1579\":3,\"1580\":1,\"1674\":1,\"1676\":1,\"1681\":2,\"1682\":1,\"1686\":1,\"1700\":2,\"1701\":1}}],[\"套那么多层\",{\"1\":{\"1425\":1}}],[\"展开\",{\"1\":{\"1418\":1}}],[\"看不出来谁依赖着谁\",{\"1\":{\"1614\":1}}],[\"看看里面有哪些待执行事件\",{\"1\":{\"1532\":1}}],[\"看起来挺巧妙\",{\"1\":{\"1418\":1}}],[\"看板页面样式\",{\"0\":{\"283\":1}}],[\"核心模块\",{\"0\":{\"1755\":1},\"1\":{\"1616\":1}}],[\"核心思想是把多参数传入的函数拆成单参数\",{\"1\":{\"1416\":1}}],[\"核心api\",{\"1\":{\"402\":1}}],[\"英语\",{\"1\":{\"1416\":1}}],[\"英寸\",{\"1\":{\"25\":1}}],[\"帮助哦我们实现代码上的复用\",{\"1\":{\"1412\":1}}],[\"帮助命令\",{\"0\":{\"191\":1}}],[\"柯里化是为了缩小适用范围\",{\"1\":{\"1419\":1}}],[\"柯里化简便实现\",{\"1\":{\"1418\":1}}],[\"柯里化\",{\"1\":{\"1411\":1,\"1416\":3,\"1417\":1}}],[\"局部应用是指固定一个函数的一些参数\",{\"1\":{\"1411\":1}}],[\"局部变量的作用域仅在于函数内部及其嵌套函数的作用域\",{\"1\":{\"1698\":1}}],[\"局部变量会被销毁\",{\"1\":{\"1286\":1}}],[\"局部变量也就没有存在的必要了\",{\"1\":{\"1279\":1}}],[\"局部变量\",{\"1\":{\"1279\":1}}],[\"维基百科中对偏函数\",{\"1\":{\"1411\":1}}],[\"维持\",{\"1\":{\"304\":1}}],[\"曾经实现过\",{\"1\":{\"1408\":1}}],[\"曾经采用的就是\",{\"1\":{\"143\":1}}],[\"虚拟机\",{\"1\":{\"1550\":1}}],[\"虚拟机进行的优化会导致一些让你头疼不已的问题\",{\"1\":{\"1408\":1}}],[\"虚线\",{\"1\":{\"83\":1}}],[\"针对\",{\"1\":{\"1408\":1}}],[\"众所周知\",{\"1\":{\"1408\":1}}],[\"抛开遮蔽效应\",{\"1\":{\"1676\":1}}],[\"抛开具体细节\",{\"1\":{\"1668\":1}}],[\"抛弃参数对象\",{\"0\":{\"1408\":1}}],[\"抛出的错误而会被\",{\"1\":{\"1344\":1}}],[\"抛出referenceerror\",{\"1\":{\"1065\":3}}],[\"抛出异常\",{\"1\":{\"1052\":2}}],[\"抛出一个对象\",{\"0\":{\"1048\":1}}],[\"阅读代码的人\",{\"1\":{\"1399\":1}}],[\"真正的返回值是这个对象\",{\"1\":{\"1477\":1}}],[\"真正的返回值还是那个新创建的实例对象\",{\"1\":{\"1477\":1}}],[\"真正的重载是不可能做到的\",{\"1\":{\"1390\":1}}],[\"真正被赋值的是变量\",{\"1\":{\"1218\":1}}],[\"真正被赋值的是后者\",{\"1\":{\"1218\":1}}],[\"次\",{\"1\":{\"1375\":1}}],[\"次方\",{\"1\":{\"1207\":1}}],[\"圆括号是可选的\",{\"1\":{\"1364\":1}}],[\"圆括号问题\",{\"0\":{\"1222\":1}}],[\"串行\",{\"1\":{\"1357\":1}}],[\"批量配置项\",{\"1\":{\"1355\":1}}],[\"承接上个实践方案\",{\"1\":{\"1355\":1}}],[\"综合上述\",{\"1\":{\"1353\":1}}],[\"综上所述\",{\"1\":{\"81\":1,\"1670\":1}}],[\"捕获所有\",{\"1\":{\"1587\":1}}],[\"捕获阶段\",{\"1\":{\"453\":2}}],[\"捕捉异常\",{\"0\":{\"1348\":1}}],[\"凡是在这个区域使用这些变量都会报错\",{\"1\":{\"1694\":1}}],[\"凡是在函数声明前添加\",{\"1\":{\"1340\":1}}],[\"凡是没有形参的构造函数调用都可以省略圆括号\",{\"1\":{\"1524\":1}}],[\"凡事能够从\",{\"1\":{\"1282\":1}}],[\"凡事涉及操作\",{\"1\":{\"1184\":1}}],[\"弹出\",{\"1\":{\"1335\":1}}],[\"弹性盒模型的规范中\",{\"1\":{\"329\":1}}],[\"弹性布局\",{\"1\":{\"44\":1,\"332\":1}}],[\"率先读取函数声明\",{\"1\":{\"1335\":1}}],[\"仍然需要传入一个占位值\",{\"1\":{\"1586\":1}}],[\"仍然必须使用花括号将其括起来\",{\"1\":{\"1329\":1}}],[\"仍可为该对象原型添加属性\",{\"1\":{\"538\":1}}],[\"花括号是必需\",{\"1\":{\"1329\":1}}],[\"括起来\",{\"1\":{\"1326\":1}}],[\"括号运算符调用才会执行\",{\"1\":{\"1454\":1}}],[\"括号可以省略\",{\"1\":{\"930\":1}}],[\"括号内代表\",{\"1\":{\"208\":1}}],[\"器\",{\"1\":{\"1322\":1}}],[\"偏函数实际上是返回了一个包含预处理参数的新函数\",{\"1\":{\"1504\":1}}],[\"偏函数通过设定预设值\",{\"1\":{\"1412\":1}}],[\"偏函数与柯里化十分相像\",{\"1\":{\"1411\":1}}],[\"偏函数\",{\"0\":{\"1411\":1},\"1\":{\"1312\":1,\"1411\":1,\"1413\":1}}],[\"偏移量\",{\"1\":{\"59\":8}}],[\"希望方法中的\",{\"1\":{\"1312\":1}}],[\"希儿排序\",{\"1\":{\"488\":1}}],[\"绑定例外\",{\"0\":{\"1585\":1}}],[\"绑定的优先级更高\",{\"1\":{\"1584\":1}}],[\"绑定的四条规则\",{\"1\":{\"1582\":1}}],[\"绑定和显式绑定谁的优先级更高呢\",{\"1\":{\"1584\":1}}],[\"绑定比隐式绑定优先级高\",{\"1\":{\"1584\":1}}],[\"绑定宿主环境\",{\"1\":{\"1580\":1}}],[\"绑定是非常常见的\",{\"1\":{\"1579\":1}}],[\"绑定问题就是被隐式绑定的函数会丢失绑定对象\",{\"1\":{\"1579\":1}}],[\"绑定对象\",{\"1\":{\"1577\":1}}],[\"绑定规则\",{\"0\":{\"1577\":1},\"1\":{\"1577\":1}}],[\"绑定\",{\"1\":{\"1375\":1,\"1584\":2}}],[\"绑定定义时所在的作用域\",{\"1\":{\"1375\":1}}],[\"绑定到\",{\"1\":{\"1580\":1,\"1589\":1}}],[\"绑定到了\",{\"1\":{\"1580\":1}}],[\"绑定到这个上下文对象\",{\"1\":{\"1579\":1}}],[\"绑定到全局对象或者\",{\"1\":{\"1579\":1}}],[\"绑定到全局对象\",{\"1\":{\"1511\":1}}],[\"绑定到一个属性并且该属性实际上具有一个值\",{\"1\":{\"1318\":1}}],[\"绑定到回调函数以便继续使用实例\",{\"1\":{\"1312\":1}}],[\"绑定函数被调用时\",{\"1\":{\"1311\":1}}],[\"绑定函数的目标函数\",{\"1\":{\"1311\":1}}],[\"绑定不受变量提升的约束\",{\"1\":{\"1067\":1}}],[\"造成内存泄漏\",{\"1\":{\"1288\":1}}],[\"造成系统崩溃\",{\"1\":{\"1279\":1}}],[\"闭包的常见应用场景\",{\"1\":{\"1710\":1}}],[\"闭包的作用\",{\"1\":{\"1708\":1}}],[\"闭包的定义\",{\"1\":{\"1708\":1}}],[\"闭包也会造成内存泄漏\",{\"1\":{\"1287\":1}}],[\"闭包\",{\"0\":{\"1287\":1,\"1707\":1},\"1\":{\"1284\":1,\"1613\":1,\"1691\":1}}],[\"闭包除外\",{\"1\":{\"1263\":1}}],[\"卡顿才能叫内存泄漏\",{\"1\":{\"1284\":1}}],[\"孤立\",{\"1\":{\"1282\":1}}],[\"孤立的对象\",{\"1\":{\"1282\":1}}],[\"孤立的对象就会被回收\",{\"1\":{\"1282\":1}}],[\"访达\",{\"1\":{\"1282\":1}}],[\"访问函数内部变量\",{\"1\":{\"1708\":1}}],[\"访问该变量都会导致报错\",{\"1\":{\"1694\":1}}],[\"访问自己所属的对象\",{\"1\":{\"1516\":1}}],[\"访问这个属性会抛出\",{\"1\":{\"1385\":1,\"1386\":2}}],[\"访问原型链中的原型对象\",{\"1\":{\"648\":1}}],[\"访问父类\",{\"0\":{\"620\":1}}],[\"访问对象的属性时\",{\"1\":{\"557\":1}}],[\"访问器属性也不能被重新定义\",{\"1\":{\"540\":1}}],[\"访问器属性不具可写性\",{\"1\":{\"532\":1}}],[\"访问器属性不包含数据值\",{\"1\":{\"532\":1}}],[\"访问器属性\",{\"0\":{\"532\":1,\"604\":1},\"1\":{\"527\":1,\"532\":1,\"706\":1}}],[\"访问ftp服务器\",{\"1\":{\"215\":1}}],[\"访问\",{\"1\":{\"187\":1}}],[\"沿着引用关系可以访达的对象被标记为活跃对象\",{\"1\":{\"1282\":1}}],[\"出现同名形参会抛出语法错误\",{\"1\":{\"1381\":1}}],[\"出现在右侧时进行\",{\"1\":{\"1670\":1}}],[\"出现在\",{\"1\":{\"503\":1}}],[\"出发\",{\"1\":{\"1282\":1}}],[\"销毁那些带标记的值并回收它们所占用的内存空间\",{\"1\":{\"1282\":1}}],[\"留存大小\",{\"1\":{\"1281\":1}}],[\"垃圾收集器在运行的时候会给存储在内存的中的\",{\"1\":{\"1282\":1}}],[\"垃圾收集器下次再运行时\",{\"1\":{\"1281\":1}}],[\"垃圾回收\",{\"0\":{\"1279\":1}}],[\"垃圾回收器机制\",{\"1\":{\"1276\":1}}],[\"垃圾回收机制通过垃圾收集器每隔固定的时间段\",{\"1\":{\"1279\":1}}],[\"垃圾回收机制\",{\"1\":{\"1271\":1}}],[\"周期性\",{\"1\":{\"1279\":1}}],[\"幸运的是\",{\"1\":{\"1279\":1}}],[\"序每次创建字符串\",{\"1\":{\"1279\":1}}],[\"序列号和确认号\",{\"1\":{\"301\":1}}],[\"序列号\",{\"1\":{\"299\":1}}],[\"释放内存空间\",{\"1\":{\"1271\":1}}],[\"均有实现\",{\"1\":{\"1413\":1}}],[\"均输出\",{\"1\":{\"1334\":1}}],[\"均输出undefined\",{\"1\":{\"1294\":1}}],[\"均为\",{\"1\":{\"1266\":1}}],[\"均不可配置\",{\"1\":{\"774\":1,\"823\":1}}],[\"遵循的是\",{\"1\":{\"1618\":2}}],[\"遵循的协议等等\",{\"1\":{\"152\":1}}],[\"遵循先进先出的原则\",{\"1\":{\"1541\":1}}],[\"遵循\",{\"1\":{\"1263\":1}}],[\"队列中并没有\",{\"1\":{\"1542\":1}}],[\"队列中的\",{\"1\":{\"1542\":1}}],[\"队列是一种先进先出\",{\"1\":{\"1262\":1}}],[\"队列数据结构\",{\"0\":{\"1262\":1}}],[\"队列为空\",{\"1\":{\"458\":1}}],[\"书中建议在\",{\"1\":{\"1543\":1}}],[\"书虽然也有序的存放在书架上\",{\"1\":{\"1264\":1}}],[\"书虽然也整齐的存放在书架上\",{\"1\":{\"1261\":1}}],[\"书签\",{\"1\":{\"130\":1}}],[\"乒乓球\",{\"1\":{\"1260\":3}}],[\"处于\",{\"1\":{\"1348\":1}}],[\"处于盒子顶层\",{\"1\":{\"1260\":1}}],[\"处于盒子中最顶层的\",{\"1\":{\"1260\":1}}],[\"处理了\",{\"1\":{\"1549\":1}}],[\"处理定时事件\",{\"1\":{\"1549\":1}}],[\"处理程序才开始执行\",{\"1\":{\"1542\":1}}],[\"处理程序\",{\"1\":{\"1541\":1}}],[\"处理程序多次添加到待执行队列\",{\"1\":{\"1540\":1}}],[\"处理程序读取完整请求并准备http响应\",{\"1\":{\"464\":1}}],[\"处理前面可能出现的错误\",{\"1\":{\"1348\":1}}],[\"处理起来相当麻烦\",{\"1\":{\"1222\":1}}],[\"处理\",{\"1\":{\"943\":1,\"1462\":1,\"1549\":2}}],[\"处理后的对象将不可扩展\",{\"1\":{\"825\":1}}],[\"处理传入的参数\",{\"1\":{\"392\":1,\"393\":1}}],[\"处理器类型之类的信息\",{\"1\":{\"215\":1}}],[\"处理请求\",{\"1\":{\"153\":2}}],[\"池\",{\"1\":{\"1259\":2}}],[\"放入栈中\",{\"1\":{\"1556\":1}}],[\"放在\",{\"1\":{\"1348\":1}}],[\"放在一条语句中\",{\"1\":{\"1248\":1}}],[\"放到\",{\"1\":{\"438\":1}}],[\"逗号运算符总是返回表达式中的最后一项\",{\"1\":{\"1249\":1}}],[\"逗号运算符还可以用于赋值\",{\"1\":{\"1249\":1}}],[\"逗号运算符最常用的场景是在\",{\"1\":{\"1248\":1}}],[\"逗号运算符\",{\"0\":{\"1246\":1},\"1\":{\"1243\":1,\"1246\":1}}],[\"逗号分隔\",{\"0\":{\"1091\":1},\"1\":{\"1091\":1}}],[\"幂\",{\"1\":{\"1243\":1}}],[\"汇总表\",{\"0\":{\"1243\":1}}],[\"余弦三个方法赋值到对应的变量上\",{\"1\":{\"1218\":1}}],[\"余数\",{\"1\":{\"1012\":1}}],[\"內部使用严格相等运算符\",{\"1\":{\"1217\":1}}],[\"乘法赋值\",{\"1\":{\"1238\":1}}],[\"乘法\",{\"1\":{\"1207\":1,\"1243\":1}}],[\"皆为\",{\"1\":{\"1203\":1}}],[\"项\",{\"1\":{\"1197\":1}}],[\"项目体积变大后难以维护\",{\"1\":{\"1608\":1}}],[\"项目占据的主轴空间\",{\"1\":{\"332\":1}}],[\"项目的属性\",{\"1\":{\"332\":1}}],[\"项目都排在一条线\",{\"1\":{\"332\":1}}],[\"项目默认沿主轴排列\",{\"1\":{\"332\":1}}],[\"项目\",{\"1\":{\"332\":1}}],[\"项目启动报错\",{\"0\":{\"161\":1}}],[\"项目中研发\",{\"1\":{\"143\":1}}],[\"赋什么值\",{\"1\":{\"1197\":1}}],[\"赋值部分保持原位置不动\",{\"1\":{\"1700\":1}}],[\"赋值还留着原地\",{\"1\":{\"1698\":1,\"1699\":1}}],[\"赋值操作还有其他几种形式\",{\"1\":{\"1670\":1}}],[\"赋值操作符的左侧或右侧\",{\"1\":{\"1670\":1}}],[\"赋值操作的目标是谁\",{\"1\":{\"1670\":1}}],[\"赋值操作的左侧或右侧\",{\"1\":{\"1670\":1}}],[\"赋值操作的右侧\",{\"1\":{\"1670\":1}}],[\"赋值操作执行后\",{\"1\":{\"1266\":1}}],[\"赋值了\",{\"1\":{\"1398\":1}}],[\"赋值式写法\",{\"0\":{\"1362\":1},\"1\":{\"1362\":1}}],[\"赋值运算符是右关联的\",{\"1\":{\"1242\":1}}],[\"赋值运算符\",{\"0\":{\"1238\":1},\"1\":{\"1238\":1,\"1243\":12}}],[\"赋值语句的非模式部分可以使用圆括号\",{\"1\":{\"1227\":1}}],[\"赋值语句的模式\",{\"0\":{\"1226\":1}}],[\"赋值语句会静默失效\",{\"1\":{\"529\":1}}],[\"赋值给子类型的原型\",{\"1\":{\"659\":1}}],[\"赋值给它\",{\"1\":{\"244\":2}}],[\"赋值检测\",{\"0\":{\"562\":1}}],[\"赋值为空对象的实例\",{\"1\":{\"394\":1}}],[\"赋值\",{\"1\":{\"242\":1,\"1197\":2,\"1238\":1,\"1616\":2,\"1698\":1,\"1709\":2}}],[\"唯一的原因是那里就是我们希望定义函数\",{\"1\":{\"1674\":1}}],[\"唯一的一个三元运算符\",{\"1\":{\"1197\":1}}],[\"唯一可能的三元组和为\",{\"1\":{\"476\":1}}],[\"唯一可能的三元组和不为\",{\"1\":{\"476\":1}}],[\"条件加载\",{\"0\":{\"1596\":1}}],[\"条件加载就不可能实现\",{\"1\":{\"1593\":1}}],[\"条件运算符的操作数可以是任意类型\",{\"1\":{\"1197\":1}}],[\"条件运算符\",{\"0\":{\"1197\":1},\"1\":{\"1197\":3,\"1243\":1}}],[\"条件语句用于基于不同的条件来执行不同的动作\",{\"1\":{\"1017\":1}}],[\"型对象和指针\",{\"1\":{\"1194\":1}}],[\"机器指令\",{\"1\":{\"1668\":1}}],[\"机器数\",{\"1\":{\"1160\":1}}],[\"机制相混淆\",{\"1\":{\"1677\":1}}],[\"机制\",{\"1\":{\"1589\":3}}],[\"机制来交换数据和进行通信\",{\"1\":{\"422\":1}}],[\"号\",{\"1\":{\"1160\":2}}],[\"奇数\",{\"1\":{\"1159\":1}}],[\"偶数\",{\"1\":{\"1159\":1}}],[\"译注\",{\"1\":{\"1150\":1}}],[\"填充\",{\"1\":{\"1150\":1}}],[\"拷贝最左侧的位以填充左侧\",{\"1\":{\"1149\":1}}],[\"拷贝目录\",{\"0\":{\"199\":1}}],[\"舍弃\",{\"1\":{\"1148\":1}}],[\"^=\",{\"1\":{\"1154\":3,\"1238\":3,\"1243\":1}}],[\"^\",{\"1\":{\"1146\":2,\"1151\":1,\"1154\":1,\"1156\":1,\"1158\":2,\"1238\":1,\"1243\":1,\"1581\":1}}],[\"长\",{\"1\":{\"1142\":1}}],[\"长度相等且相同字符在相同位置\",{\"1\":{\"1203\":1}}],[\"长度是n\",{\"1\":{\"494\":1}}],[\"长度单位可分为\",{\"1\":{\"23\":1}}],[\"长度单位\",{\"1\":{\"23\":1,\"24\":2,\"25\":1}}],[\"长度值的格式是\",{\"1\":{\"23\":1}}],[\"长度值表示为\",{\"1\":{\"23\":1}}],[\"长度值适用于\",{\"1\":{\"23\":1}}],[\"长度\",{\"0\":{\"23\":1}}],[\"宿主对象\",{\"1\":{\"1122\":1}}],[\"严格算也不是闭包\",{\"1\":{\"1710\":1}}],[\"严格意义上来说\",{\"1\":{\"1263\":1}}],[\"严格等于\",{\"1\":{\"1116\":1}}],[\"严格模式主要有以下限制\",{\"1\":{\"1620\":1}}],[\"严格模式下\",{\"1\":{\"1065\":1,\"1518\":1}}],[\"严格模式下为\",{\"1\":{\"669\":1}}],[\"严格模式下会抛出\",{\"1\":{\"564\":2}}],[\"严格模式下会抛出错误\",{\"1\":{\"538\":1}}],[\"严格模式\",{\"0\":{\"1620\":1},\"1\":{\"599\":1}}],[\"嵌套的函数不会从调用它的函数中继承\",{\"1\":{\"1518\":1}}],[\"嵌套的箭头函数\",{\"0\":{\"1376\":1}}],[\"嵌套数组\",{\"0\":{\"1092\":1}}],[\"嵌套捕获\",{\"0\":{\"1054\":1}}],[\"明确允许在块级作用域之中声明函数\",{\"1\":{\"1074\":1}}],[\"明度\",{\"1\":{\"110\":1}}],[\"界定\",{\"1\":{\"1073\":1}}],[\"拓展\",{\"1\":{\"1067\":1}}],[\"工具函数\",{\"1\":{\"1621\":1}}],[\"工作原理\",{\"1\":{\"1040\":1}}],[\"工厂内部封装了创建对象的逻辑\",{\"1\":{\"587\":1}}],[\"工厂的目的\",{\"1\":{\"584\":1}}],[\"工厂模式虽然解决了创建多个相似对象的问题\",{\"1\":{\"586\":1}}],[\"工厂模式根据抽象程度的不同可以分为三种\",{\"1\":{\"584\":1}}],[\"工厂模式常见于大型项目\",{\"1\":{\"584\":1}}],[\"工厂模式不暴露创建对象的具体逻辑\",{\"1\":{\"584\":1}}],[\"工厂模式\",{\"0\":{\"584\":1},\"1\":{\"584\":1}}],[\"死循环的另一种写法是\",{\"1\":{\"1014\":1}}],[\"涉及多个变量的循环\",{\"0\":{\"1013\":1}}],[\"涉及到内存保护和虚拟内存的切换\",{\"1\":{\"422\":1}}],[\"五位数的数字\",{\"1\":{\"1012\":1}}],[\"终止\",{\"1\":{\"1000\":1}}],[\"集合\",{\"0\":{\"999\":1}}],[\"集合成数组\",{\"1\":{\"380\":1}}],[\"迭代其他可迭代对象\",{\"0\":{\"1003\":1}}],[\"迭代生成器\",{\"0\":{\"1001\":1}}],[\"迭代器关闭\",{\"1\":{\"1000\":1}}],[\"迭代器将从第二个元素开始执行\",{\"1\":{\"352\":1}}],[\"迭代\",{\"0\":{\"993\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"999\":1},\"1\":{\"999\":1}}],[\"迭代的对象的变量值为\",{\"1\":{\"983\":1}}],[\"至作用域的顶部\",{\"1\":{\"1700\":1}}],[\"至此\",{\"1\":{\"1571\":1}}],[\"至少执行一次\",{\"1\":{\"974\":1}}],[\"至于其他方法\",{\"1\":{\"576\":1}}],[\"至于为什么使用一个空函数\",{\"1\":{\"394\":1}}],[\"减去\",{\"1\":{\"1406\":1}}],[\"减法赋值\",{\"1\":{\"1238\":1}}],[\"减法\",{\"1\":{\"1207\":1,\"1243\":1}}],[\"减法也是同理\",{\"1\":{\"955\":1}}],[\"减\",{\"1\":{\"1194\":4}}],[\"减少闭包的使用\",{\"1\":{\"1284\":1}}],[\"减少不必要的全局变量\",{\"1\":{\"1284\":1}}],[\"减少回流重绘\",{\"1\":{\"438\":1}}],[\"减少了全局变量\",{\"1\":{\"1612\":1}}],[\"减少了多余网络数据传输\",{\"1\":{\"432\":1}}],[\"减少了服务器的负担\",{\"1\":{\"432\":1}}],[\"减少延迟\",{\"1\":{\"310\":1}}],[\"停止下面的过程\",{\"1\":{\"951\":3}}],[\"停止iptables服务\",{\"1\":{\"217\":1}}],[\"事实上在嵌套的作用域中也可以使用\",{\"1\":{\"1680\":1}}],[\"事实上编译器会进行如下操作\",{\"1\":{\"1670\":1}}],[\"事实上是可以的\",{\"1\":{\"955\":1}}],[\"事实上\",{\"1\":{\"951\":1,\"1041\":1,\"1694\":1}}],[\"事件的监听函数之中\",{\"1\":{\"1595\":1}}],[\"事件的监听上\",{\"1\":{\"35\":1}}],[\"事件占用了线程\",{\"1\":{\"1540\":1}}],[\"事件排队\",{\"0\":{\"1538\":1}}],[\"事件回调阶段\",{\"1\":{\"1534\":1}}],[\"事件循环表现出的状态与浏览器中大致相同\",{\"1\":{\"1534\":1}}],[\"事件循环机制又会检测微任务队列\",{\"1\":{\"1533\":1}}],[\"事件循环机制会优先检测微任务队列中的事件并推至主线程执行\",{\"1\":{\"1533\":1}}],[\"事件循环机制\",{\"1\":{\"1532\":1}}],[\"事件循环\",{\"0\":{\"1532\":1}}],[\"事件循环是一种机制\",{\"1\":{\"457\":1}}],[\"事件监听\",{\"1\":{\"1462\":1}}],[\"事件监听函数的参数\",{\"1\":{\"289\":1}}],[\"事件又触发了则重新再等待设定的时间间隔\",{\"1\":{\"1446\":1}}],[\"事件处理程序内部如果尝试进行\",{\"1\":{\"1432\":1}}],[\"事件处理程序的时候容易发生\",{\"1\":{\"1432\":1}}],[\"事件在冒泡的过程中会传到父节点\",{\"1\":{\"456\":1}}],[\"事件捕获是事件从文档的根元素开始\",{\"1\":{\"454\":1}}],[\"事件冒泡是从自下而上\",{\"1\":{\"454\":1}}],[\"事件冒泡和事件捕获是两种不同的事件传播方式\",{\"1\":{\"454\":1}}],[\"事件冒泡和捕获的区别\",{\"0\":{\"454\":1}}],[\"事件从目标节点开始\",{\"1\":{\"453\":1}}],[\"事件从最外层的节点\",{\"1\":{\"453\":1}}],[\"事件到达目标节点\",{\"1\":{\"453\":1}}],[\"事件流分为三个阶段\",{\"1\":{\"453\":1}}],[\"事件流\",{\"0\":{\"453\":1}}],[\"事件\",{\"1\":{\"291\":1,\"464\":1,\"1436\":1,\"1438\":1,\"1534\":2,\"1549\":1}}],[\"事件发生\",{\"1\":{\"15\":1}}],[\"逻辑空\",{\"0\":{\"1256\":1}}],[\"逻辑或操作也属于短路操作\",{\"1\":{\"1254\":1}}],[\"逻辑或操作也可以应用于任何类型的操作数\",{\"1\":{\"1254\":1}}],[\"逻辑或运算符会在左侧操作数为假值时返回右侧操作数\",{\"1\":{\"1256\":1}}],[\"逻辑或运算符常用于为变量设置默认值\",{\"1\":{\"1254\":1}}],[\"逻辑或运算符也可以多个连用\",{\"1\":{\"1254\":1}}],[\"逻辑或运算符\",{\"1\":{\"1254\":1}}],[\"逻辑或\",{\"0\":{\"1254\":1},\"1\":{\"1243\":1,\"1252\":1,\"1254\":1}}],[\"逻辑与操作属于\",{\"1\":{\"1253\":1}}],[\"逻辑与操作可以应用于任何类型的操作数\",{\"1\":{\"1253\":1}}],[\"逻辑与的真值表\",{\"1\":{\"1253\":1}}],[\"逻辑与运算符常常用于回调函数使用中\",{\"1\":{\"1253\":1}}],[\"逻辑与运算符可以多个连用\",{\"1\":{\"1253\":1}}],[\"逻辑与运算符\",{\"1\":{\"1253\":1}}],[\"逻辑与\",{\"0\":{\"1253\":1},\"1\":{\"1243\":1}}],[\"逻辑非对操作数转为布尔类型的转换类型与\",{\"1\":{\"1255\":1}}],[\"逻辑非操作符首先会将它的操作数转换成一个布尔值\",{\"1\":{\"1255\":1}}],[\"逻辑非操作符\",{\"1\":{\"1255\":1}}],[\"逻辑非\",{\"0\":{\"1255\":1},\"1\":{\"1243\":1,\"1252\":1}}],[\"逻辑\",{\"1\":{\"1200\":1,\"1621\":2}}],[\"逻辑运算符分为逻辑与\",{\"1\":{\"1252\":1}}],[\"逻辑运算符将多个关系表达式组合起来组成一个更复杂的表达式\",{\"1\":{\"1252\":1}}],[\"逻辑运算符常用于对操作数进行布尔运算\",{\"1\":{\"1252\":1}}],[\"逻辑运算符\",{\"0\":{\"1252\":1},\"1\":{\"1243\":3}}],[\"逻辑运算\",{\"1\":{\"948\":1}}],[\"逻辑判断\",{\"1\":{\"948\":1}}],[\"逻辑上等价于其他程序设计语言中的类\",{\"1\":{\"930\":1}}],[\"搞定\",{\"1\":{\"941\":1}}],[\"搞懂原型对象和原型链其实就是搞懂\",{\"1\":{\"644\":1}}],[\"属于\",{\"1\":{\"936\":1}}],[\"属性创建作用域链\",{\"1\":{\"1572\":1}}],[\"属性初始化\",{\"1\":{\"1562\":1}}],[\"属性初始值\",{\"1\":{\"29\":1}}],[\"属性保存着调用当前函数的函数的引用\",{\"1\":{\"1386\":1}}],[\"属性显示形参的个数\",{\"1\":{\"1382\":1}}],[\"属性显示实参的个数\",{\"1\":{\"1382\":1}}],[\"属性时有问题\",{\"1\":{\"1334\":1}}],[\"属性都返回这个具名函数原本的名字\",{\"1\":{\"1295\":1}}],[\"属性会返回实际的函数名\",{\"1\":{\"1295\":1}}],[\"属性则表示函数希望接受形参个数\",{\"1\":{\"1293\":1}}],[\"属性表示实参个数\",{\"1\":{\"1293\":1}}],[\"属性表达式\",{\"0\":{\"605\":1}}],[\"属性再解构时会报错\",{\"1\":{\"1218\":1}}],[\"属性对应一个子对象\",{\"1\":{\"1218\":1}}],[\"属性等于\",{\"1\":{\"1218\":1,\"1406\":1}}],[\"属性从对象\",{\"1\":{\"1212\":1}}],[\"属性未有定义\",{\"1\":{\"1166\":1}}],[\"属性不能被移除\",{\"1\":{\"1101\":1}}],[\"属性访问表达式运算得到一个对象属性或一个数组元素的值\",{\"1\":{\"1086\":1}}],[\"属性访问器\",{\"0\":{\"1086\":1},\"1\":{\"556\":1,\"1243\":2}}],[\"属性已经被删除\",{\"1\":{\"1065\":1}}],[\"属性特性\",{\"1\":{\"852\":1}}],[\"属性查看会更清楚点\",{\"1\":{\"647\":1}}],[\"属性查询错误\",{\"0\":{\"560\":1}}],[\"属性查询一般有两种方法\",{\"1\":{\"556\":1}}],[\"属性查询在表达式层面也成为\",{\"1\":{\"556\":1}}],[\"属性查询\",{\"0\":{\"556\":1}}],[\"属性作用又是什么呢\",{\"1\":{\"645\":1}}],[\"属性指向自身\",{\"1\":{\"1561\":1}}],[\"属性指向\",{\"1\":{\"644\":2}}],[\"属性总是返回紧跟\",{\"1\":{\"599\":1}}],[\"属性上\",{\"1\":{\"599\":1}}],[\"属性是一种原型对象和构造函数的关系\",{\"1\":{\"1476\":1}}],[\"属性是一个不可配置\",{\"1\":{\"926\":1}}],[\"属性是一个特殊值\",{\"1\":{\"864\":1}}],[\"属性是一个识别名称\",{\"1\":{\"117\":1}}],[\"属性是一个用于设置各种单独的边界属性的简写属性\",{\"1\":{\"61\":1}}],[\"属性是否出现在对象的原型链中的任何位置\",{\"1\":{\"1114\":1}}],[\"属性是不可枚举的\",{\"1\":{\"578\":1}}],[\"属性回导致它的\",{\"1\":{\"578\":1}}],[\"属性所指向的\",{\"1\":{\"646\":1}}],[\"属性所在函数的指针\",{\"1\":{\"576\":1}}],[\"属性所设置的边框样式\",{\"1\":{\"62\":1}}],[\"属性继承\",{\"0\":{\"565\":1}}],[\"属性删除\",{\"0\":{\"564\":1}}],[\"属性操作\",{\"0\":{\"555\":1}}],[\"属性返回紧跟在\",{\"1\":{\"551\":1}}],[\"属性名表达式\",{\"1\":{\"1218\":1}}],[\"属性名通过字符串来表示\",{\"1\":{\"558\":1}}],[\"属性名用一个标识符来表示\",{\"1\":{\"557\":1}}],[\"属性名会自动转换成字符串\",{\"1\":{\"546\":1}}],[\"属性名可以是任意\",{\"1\":{\"546\":1}}],[\"属性名是字符串\",{\"1\":{\"799\":1}}],[\"属性名是\",{\"1\":{\"544\":1}}],[\"属性名称可以为\",{\"1\":{\"558\":1}}],[\"属性名称\",{\"1\":{\"117\":1}}],[\"属性无法被枚举出来\",{\"1\":{\"531\":1}}],[\"属性无法修改值\",{\"1\":{\"530\":1}}],[\"属性无效\",{\"1\":{\"45\":1}}],[\"属性和默认方法\",{\"1\":{\"1658\":1}}],[\"属性和\",{\"1\":{\"429\":1,\"430\":1,\"624\":1}}],[\"属性同名可简写\",{\"1\":{\"353\":1}}],[\"属性选择器\",{\"1\":{\"336\":1}}],[\"属性选择符\",{\"0\":{\"14\":1},\"1\":{\"11\":1,\"17\":1}}],[\"属性使用单关键字的预组合的语法\",{\"1\":{\"329\":1}}],[\"属性设置又称为属性赋值\",{\"1\":{\"561\":1}}],[\"属性设置\",{\"0\":{\"561\":1}}],[\"属性设置元素的内部和外部的显示类型\",{\"1\":{\"329\":1}}],[\"属性设置元素是否被视为块或者内联元素以及用于子元素的布局\",{\"1\":{\"329\":1}}],[\"属性设置为\",{\"1\":{\"37\":1}}],[\"属性定向裁剪区域\",{\"1\":{\"271\":1}}],[\"属性来指定要插入的内容\",{\"1\":{\"256\":2}}],[\"属性来指向需要加载的\",{\"1\":{\"131\":1}}],[\"属性到\",{\"1\":{\"132\":1}}],[\"属性将你的文档的字符集设置为\",{\"1\":{\"120\":1}}],[\"属性包含元素的额外信息\",{\"1\":{\"117\":1}}],[\"属性看起来像这样\",{\"1\":{\"117\":1}}],[\"属性说明\",{\"0\":{\"98\":1}}],[\"属性生效\",{\"1\":{\"87\":1}}],[\"属性必须包含\",{\"1\":{\"117\":1}}],[\"属性必须设置为\",{\"1\":{\"85\":1}}],[\"属性必须是\",{\"1\":{\"38\":1}}],[\"属性参数必须按照如上的排列书写\",{\"1\":{\"71\":1}}],[\"属性允许在元素的边框上绘制图像\",{\"1\":{\"62\":1}}],[\"属性默认为\",{\"1\":{\"50\":1}}],[\"属性为空\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"属性为类添加方法\",{\"1\":{\"603\":1}}],[\"属性为给定元素设置所有四个\",{\"1\":{\"55\":1}}],[\"属性为\",{\"1\":{\"40\":1}}],[\"属性为非\",{\"1\":{\"40\":1}}],[\"属性值设为\",{\"1\":{\"1564\":1}}],[\"属性值是\",{\"1\":{\"1562\":1}}],[\"属性值会加上\",{\"1\":{\"1296\":1}}],[\"属性值可以是任何类型的表达式\",{\"1\":{\"551\":1}}],[\"属性值可以是任意类型表达式\",{\"1\":{\"546\":1}}],[\"属性值包含这个\",{\"1\":{\"528\":1}}],[\"属性值不是\",{\"1\":{\"51\":1}}],[\"属性值为指向该函数所在内存地址的引用\",{\"1\":{\"1564\":1}}],[\"属性值为\",{\"1\":{\"51\":1,\"1564\":1}}],[\"属性值必须为\",{\"1\":{\"39\":1}}],[\"属性值\",{\"0\":{\"551\":1},\"1\":{\"35\":1,\"44\":1,\"47\":1,\"58\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"81\":2,\"82\":1,\"83\":2,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":2,\"105\":1,\"549\":1,\"1087\":1}}],[\"属性一起使用\",{\"1\":{\"16\":2}}],[\"属性并且以\",{\"1\":{\"14\":1}}],[\"属性且属性值为包含\",{\"1\":{\"14\":1}}],[\"属性且属性值为以\",{\"1\":{\"14\":3}}],[\"属性且属性值为一用空格分隔的字词列表\",{\"1\":{\"14\":1}}],[\"属性且属性值等于\",{\"1\":{\"14\":1}}],[\"属性的访问\",{\"1\":{\"1676\":1}}],[\"属性的作用\",{\"1\":{\"1476\":1}}],[\"属性的含义是\",{\"1\":{\"1406\":1}}],[\"属性的返回值\",{\"1\":{\"1406\":1}}],[\"属性的解构赋值之中\",{\"1\":{\"1218\":1}}],[\"属性的初始值就是\",{\"1\":{\"858\":1,\"926\":1}}],[\"属性的属性特性\",{\"1\":{\"852\":1}}],[\"属性的终点就是\",{\"1\":{\"647\":1}}],[\"属性的过程\",{\"1\":{\"576\":1}}],[\"属性的无序集合\",{\"1\":{\"544\":1}}],[\"属性的名字\",{\"1\":{\"246\":1}}],[\"属性的时候对\",{\"1\":{\"235\":1}}],[\"属性的区别是\",{\"1\":{\"108\":1}}],[\"属性的原点位置的背景相对区域\",{\"1\":{\"101\":1}}],[\"属性的\",{\"1\":{\"12\":2,\"14\":1,\"45\":1,\"464\":1,\"624\":1}}],[\"属性的值为\",{\"1\":{\"1296\":1}}],[\"属性的值或者设置了\",{\"1\":{\"38\":1}}],[\"属性的值\",{\"0\":{\"7\":1},\"1\":{\"745\":1}}],[\"属性\",{\"0\":{\"6\":1,\"802\":1,\"805\":1,\"1293\":1,\"1294\":1},\"1\":{\"40\":1,\"45\":3,\"118\":1,\"129\":1,\"171\":1,\"272\":1,\"329\":1,\"392\":1,\"429\":1,\"430\":5,\"551\":1,\"560\":1,\"570\":1,\"575\":1,\"576\":4,\"603\":1,\"624\":10,\"644\":1,\"646\":1,\"647\":1,\"648\":2,\"659\":2,\"828\":1,\"935\":1,\"937\":1,\"1004\":3,\"1219\":1,\"1220\":1,\"1294\":1,\"1295\":1,\"1311\":1,\"1334\":1,\"1386\":2,\"1394\":1,\"1395\":1,\"1406\":2,\"1561\":1,\"1613\":1}}],[\"适合多次事件一次响应的情况\",{\"1\":{\"1447\":1}}],[\"适合大量事件按时间做平均分配触发\",{\"1\":{\"1437\":1}}],[\"适合用于判断对象是否属于\",{\"1\":{\"935\":1}}],[\"适用范围\",{\"1\":{\"1673\":1}}],[\"适用场景\",{\"0\":{\"1594\":1}}],[\"适用性更广\",{\"1\":{\"1419\":1}}],[\"适用于东亚文档\",{\"1\":{\"85\":1}}],[\"→\",{\"1\":{\"929\":11}}],[\"里显然是不合理的\",{\"1\":{\"1502\":1}}],[\"里\",{\"1\":{\"1398\":1}}],[\"里面的属性包括\",{\"1\":{\"1566\":1}}],[\"里面的\",{\"1\":{\"1375\":1}}],[\"里面\",{\"1\":{\"1053\":1,\"1446\":1,\"1661\":1}}],[\"里面存放着各种需要共享的数据\",{\"1\":{\"412\":1}}],[\"里的\",{\"1\":{\"924\":1}}],[\"日期对象\",{\"1\":{\"917\":1}}],[\"日文\",{\"1\":{\"91\":1}}],[\"弱类型语言\",{\"1\":{\"917\":1}}],[\"弱类型校验\",{\"1\":{\"230\":1}}],[\"介于\",{\"1\":{\"913\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"谢天谢地\",{\"1\":{\"893\":1}}],[\"作用之一就是获取随后\",{\"1\":{\"1342\":1}}],[\"作用\",{\"0\":{\"1136\":1,\"1476\":1},\"1\":{\"1612\":1,\"1613\":1}}],[\"作用域下的\",{\"1\":{\"1709\":1}}],[\"作用域混乱多数是因为词法作用域和\",{\"1\":{\"1677\":1}}],[\"作用域查找始终从运行时所处的最内部作用域开始\",{\"1\":{\"1676\":1}}],[\"作用域查找会在找到第一个匹配的标识符时停止\",{\"1\":{\"1676\":1}}],[\"作用域气泡的结构和互相之间的位置关系给引擎提供了足够的位置信息\",{\"1\":{\"1675\":1}}],[\"作用域气泡由其对应的作用域代码写在哪里决定\",{\"1\":{\"1674\":1}}],[\"作用域共有两种主要的工作模式\",{\"1\":{\"1673\":1}}],[\"作用域是局部性的\",{\"1\":{\"1673\":1}}],[\"作用域是一套\",{\"1\":{\"1670\":1}}],[\"作用域就是变量\",{\"1\":{\"1673\":1}}],[\"作用域来决定\",{\"1\":{\"1589\":1}}],[\"作用域链的本质是一个指向变量对象的指针列表\",{\"1\":{\"1707\":1}}],[\"作用域链是由每层的变量对象使用链结构链接起来的\",{\"1\":{\"1707\":1}}],[\"作用域链顶端\",{\"1\":{\"1572\":1}}],[\"作用域链创建完毕\",{\"1\":{\"1571\":1}}],[\"作用域链\",{\"0\":{\"1569\":1},\"1\":{\"1555\":1,\"1677\":1,\"1707\":1}}],[\"作用域\",{\"1\":{\"1069\":1,\"1669\":1}}],[\"作用域不变\",{\"1\":{\"892\":1}}],[\"作为构造函数时的行为\",{\"1\":{\"1581\":1}}],[\"作为构造函数的语法糖\",{\"1\":{\"624\":1}}],[\"作为全局变量的宿主\",{\"1\":{\"1561\":1}}],[\"作为浏览器脚本语言\",{\"1\":{\"1551\":1}}],[\"作为返回值输出\",{\"0\":{\"1504\":1}}],[\"作为参数传递进去\",{\"1\":{\"1709\":1}}],[\"作为参数传递\",{\"0\":{\"1501\":1}}],[\"作为对象属性时被称为方法\",{\"1\":{\"1514\":1}}],[\"作为对象的模版\",{\"1\":{\"1473\":1}}],[\"作为对象存在于堆内存中\",{\"1\":{\"1264\":2}}],[\"作为对象时\",{\"1\":{\"621\":1,\"623\":1}}],[\"作为演示变量或表达式\",{\"1\":{\"1243\":1}}],[\"作为操作数进行运算并返回一个数值\",{\"1\":{\"1207\":1}}],[\"作为可迭代对象定义的迭代值\",{\"1\":{\"1004\":1}}],[\"作为尚未创建的对象\",{\"1\":{\"919\":1}}],[\"作为\",{\"1\":{\"858\":1,\"926\":1,\"1312\":1,\"1561\":1,\"1586\":1}}],[\"作为另一个对象的基础\",{\"1\":{\"640\":1}}],[\"作为函数调用时\",{\"1\":{\"621\":1}}],[\"作为中介\",{\"1\":{\"394\":1}}],[\"作为类声明的一部分来定义\",{\"1\":{\"229\":1}}],[\"作为一种弱类型的语言\",{\"1\":{\"941\":1}}],[\"作为一种新方法\",{\"1\":{\"228\":1}}],[\"作为一个基类\",{\"1\":{\"624\":1}}],[\"作为一个构造函数\",{\"1\":{\"624\":1}}],[\"作为一个对象\",{\"1\":{\"624\":1}}],[\"作为一个\",{\"1\":{\"136\":1}}],[\"静默逃逸的\",{\"0\":{\"859\":1}}],[\"静态作用域\",{\"0\":{\"1674\":1},\"1\":{\"1673\":2}}],[\"静态优化\",{\"1\":{\"1655\":1}}],[\"静态执行\",{\"0\":{\"1634\":1}}],[\"静态属性通过对象的属性访问器定义\",{\"1\":{\"628\":1}}],[\"静态属性\",{\"0\":{\"632\":1},\"1\":{\"628\":1}}],[\"静态成员继承只能通过派生类访问\",{\"1\":{\"1492\":1}}],[\"静态成员继承\",{\"0\":{\"1492\":1}}],[\"静态成员是指在方法名或属性名前面加上\",{\"1\":{\"1489\":1}}],[\"静态成员\",{\"0\":{\"628\":1,\"1489\":1}}],[\"静态方法定义在类的内部\",{\"1\":{\"628\":1}}],[\"静态方法\",{\"0\":{\"623\":1,\"629\":1},\"1\":{\"623\":1,\"628\":1,\"629\":1}}],[\"静态类型\",{\"1\":{\"230\":1}}],[\"静态绑定\",{\"1\":{\"229\":1}}],[\"静态ip\",{\"1\":{\"220\":1}}],[\"算术右移\",{\"1\":{\"1149\":1}}],[\"算术运算符使用数值\",{\"1\":{\"1207\":1}}],[\"算术运算符\",{\"0\":{\"1207\":1},\"1\":{\"951\":1,\"1243\":6}}],[\"算术运算符与不是数字或无法转换为数字的操作数一起使用\",{\"1\":{\"858\":1}}],[\"算法\",{\"0\":{\"1740\":1},\"2\":{\"469\":1,\"472\":1,\"475\":1,\"478\":1,\"481\":1,\"484\":1,\"487\":1,\"490\":1,\"493\":1,\"496\":1,\"499\":1,\"502\":1,\"505\":1,\"508\":1,\"511\":1,\"514\":1,\"517\":1,\"520\":1,\"523\":1,\"526\":1}}],[\"系列循环语句获取到的键名顺序一致\",{\"1\":{\"792\":1}}],[\"系统就会读取\",{\"1\":{\"1532\":1}}],[\"系统会自动为他们分配内存\",{\"1\":{\"1271\":1}}],[\"系统会自动为新的变量分配一个新值\",{\"1\":{\"1266\":1}}],[\"系统调用相关的回调\",{\"1\":{\"458\":1}}],[\"系统管理\",{\"0\":{\"216\":1}}],[\"系统管理命令\",{\"1\":{\"186\":1}}],[\"系统启动时启动此设置\",{\"1\":{\"220\":1}}],[\"系统启动时读取的文件\",{\"1\":{\"186\":1}}],[\"系统启动分区\",{\"1\":{\"186\":1}}],[\"系统常规命令\",{\"1\":{\"186\":1}}],[\"系统的文件结构\",{\"0\":{\"186\":1}}],[\"系统选择最近的匹配\",{\"1\":{\"75\":1}}],[\"系统颜色\",{\"1\":{\"28\":1}}],[\"互斥\",{\"1\":{\"1549\":1}}],[\"互不影响\",{\"1\":{\"1547\":1}}],[\"互逆的操作\",{\"1\":{\"711\":1}}],[\"互操作性\",{\"1\":{\"139\":1}}],[\"互操作性和可持续性\",{\"1\":{\"139\":1}}],[\"⭐️\",{\"1\":{\"698\":1,\"724\":1,\"841\":1}}],[\"复制函数\",{\"1\":{\"1572\":1}}],[\"复制到原型\",{\"1\":{\"678\":1}}],[\"复杂数据类型\",{\"1\":{\"917\":1}}],[\"复杂工厂\",{\"1\":{\"584\":1}}],[\"复杂动画使用定位脱离文当流\",{\"1\":{\"438\":1}}],[\"源代码\",{\"1\":{\"890\":1}}],[\"源对象\",{\"1\":{\"677\":1}}],[\"源码文本会被从左到右扫描\",{\"1\":{\"233\":1}}],[\"🔧\",{\"1\":{\"1285\":1}}],[\"📍\",{\"1\":{\"953\":1,\"1579\":1}}],[\"🔬\",{\"1\":{\"946\":1}}],[\"💡因此\",{\"1\":{\"1510\":1}}],[\"💡\",{\"1\":{\"936\":1,\"1446\":1,\"1561\":1,\"1579\":1,\"1670\":1}}],[\"📌\",{\"1\":{\"664\":1}}],[\"📖\",{\"1\":{\"548\":1}}],[\"紧接着通过一对小括号调用这个表达式\",{\"1\":{\"1485\":1}}],[\"紧接着又定义了它自己的属性\",{\"1\":{\"662\":1}}],[\"紧急指针\",{\"1\":{\"299\":1}}],[\"得到某某的值\",{\"1\":{\"1670\":1}}],[\"得到结果\",{\"1\":{\"1412\":1}}],[\"得到最终结果\",{\"1\":{\"1412\":1}}],[\"得到变量\",{\"1\":{\"1221\":1}}],[\"得到的值为16\",{\"1\":{\"1332\":1}}],[\"得到的值不为\",{\"1\":{\"1161\":1}}],[\"得到的结果按照前面的规则执行比较\",{\"1\":{\"953\":1}}],[\"得到的结果按照前面的规则进行比较\",{\"1\":{\"952\":1}}],[\"得到\",{\"1\":{\"1150\":1}}],[\"得到了\",{\"1\":{\"662\":1}}],[\"得到与父类同样的实例属性和方法\",{\"1\":{\"619\":1}}],[\"寄生组合式继承与组合继承相似\",{\"1\":{\"659\":1}}],[\"寄生组合式继承\",{\"0\":{\"659\":1},\"1\":{\"659\":1,\"664\":1}}],[\"寄生式继承也是一种有用的模式\",{\"1\":{\"656\":1}}],[\"寄生式继承\",{\"0\":{\"656\":1},\"1\":{\"656\":1}}],[\"寄生构造函数模式的基本思想是创建一个函数\",{\"1\":{\"571\":1}}],[\"寄生构造函数模式\",{\"0\":{\"571\":1}}],[\"显而易见\",{\"1\":{\"1684\":1}}],[\"显得很麻烦\",{\"1\":{\"1426\":1}}],[\"显式块级作用域\",{\"0\":{\"1695\":1},\"1\":{\"1695\":1}}],[\"显式绑定优先级更高\",{\"1\":{\"1583\":1}}],[\"显式绑定\",{\"0\":{\"1580\":1},\"1\":{\"1580\":1,\"1582\":1}}],[\"显式地设置假值\",{\"1\":{\"1382\":1}}],[\"显式类型转换\",{\"0\":{\"947\":1}}],[\"显式原型对象\",{\"1\":{\"645\":1,\"648\":1}}],[\"显式原型\",{\"0\":{\"645\":1}}],[\"显示页面\",{\"1\":{\"464\":1}}],[\"显示隐藏等改变了\",{\"1\":{\"439\":1}}],[\"显示远程主机上文件列表\",{\"1\":{\"215\":1}}],[\"显示文件系统的磁盘使用情况\",{\"1\":{\"215\":1}}],[\"显示当前系统中占用资源最多的一些进程\",{\"1\":{\"215\":1}}],[\"显示当前位置路径\",{\"1\":{\"201\":1}}],[\"显示运行过程\",{\"1\":{\"212\":1}}],[\"显示百分比\",{\"1\":{\"206\":1}}],[\"显示更多信息\",{\"1\":{\"195\":1}}],[\"显示离当前提交最近的标签\",{\"1\":{\"170\":1}}],[\"显示那么简单\",{\"1\":{\"50\":1}}],[\"显示分内部显示和外部显示\",{\"1\":{\"48\":1}}],[\"棕色箭头表示本身具有的\",{\"1\":{\"644\":1}}],[\"红色箭头表示\",{\"1\":{\"644\":1}}],[\"浅大小\",{\"1\":{\"1281\":1}}],[\"浅绿方块表示函数\",{\"1\":{\"644\":1}}],[\"浅拷贝\",{\"1\":{\"640\":1}}],[\"浅色看板\",{\"1\":{\"283\":1}}],[\"先要熟悉以下几点\",{\"1\":{\"1707\":1}}],[\"先输入后输出同一个模块\",{\"1\":{\"1639\":1}}],[\"先有模块化后有组件化\",{\"1\":{\"1621\":1}}],[\"先于模块内的其他语句执行\",{\"1\":{\"1593\":1}}],[\"先了解几组易混淆的概念\",{\"1\":{\"1547\":1}}],[\"先进先出原则可以理解为先排队的先执行\",{\"1\":{\"1539\":1}}],[\"先进先出原则\",{\"0\":{\"1539\":1}}],[\"先进后出\",{\"1\":{\"1260\":1,\"1268\":1}}],[\"先设定\",{\"1\":{\"1537\":1}}],[\"先计算这些实参表达式\",{\"1\":{\"1523\":1}}],[\"先将其转为数组\",{\"1\":{\"1393\":1}}],[\"先赋值\",{\"1\":{\"1192\":1,\"1193\":1,\"1194\":1}}],[\"先自减\",{\"1\":{\"1191\":1}}],[\"先自增后操作\",{\"1\":{\"1194\":1}}],[\"先自增\",{\"1\":{\"1190\":1,\"1194\":1}}],[\"先执行原函数\",{\"1\":{\"1505\":1}}],[\"先执行新函数\",{\"1\":{\"1505\":1}}],[\"先执行\",{\"1\":{\"1053\":2}}],[\"先检测确认该对象的值不是\",{\"1\":{\"983\":1}}],[\"先\",{\"1\":{\"955\":1}}],[\"先创建\",{\"1\":{\"640\":1}}],[\"先把只有一个平台才有的写到最前面\",{\"1\":{\"79\":1}}],[\"影响不到默认值变量\",{\"1\":{\"1407\":1}}],[\"影响性能\",{\"1\":{\"637\":1}}],[\"影响其内部元素的布局和排列方式\",{\"1\":{\"325\":1}}],[\"缺陷\",{\"0\":{\"637\":1,\"663\":1}}],[\"缺点\",{\"0\":{\"1475\":1},\"1\":{\"1398\":1,\"1425\":1,\"1426\":1,\"1427\":1,\"1711\":1}}],[\"缺点是它占用了函数的返回值\",{\"1\":{\"1496\":1}}],[\"缺点是很不直观\",{\"1\":{\"1142\":1}}],[\"缺点是对于网页代码的容错性不高\",{\"1\":{\"143\":1}}],[\"缺点就是为了达到很快的速度而丢掉了一部分网页兼容性\",{\"1\":{\"143\":1}}],[\"借用构造函数有一个很大的优势\",{\"1\":{\"636\":1}}],[\"借用构造函数\",{\"0\":{\"635\":1},\"1\":{\"635\":1}}],[\"虽\",{\"1\":{\"621\":1}}],[\"虽然这种技术可以解决一些问题\",{\"1\":{\"1684\":1}}],[\"虽然这两个对象的值时一样的\",{\"1\":{\"1204\":1}}],[\"虽然\",{\"1\":{\"1578\":1,\"1579\":1,\"1589\":1,\"1635\":1}}],[\"虽然有\",{\"1\":{\"1426\":1}}],[\"虽然不像\",{\"1\":{\"1425\":1}}],[\"虽然不及\",{\"1\":{\"143\":1}}],[\"虽然命名参数和对应\",{\"1\":{\"1383\":1}}],[\"虽然都可以定义函数\",{\"1\":{\"1335\":1}}],[\"虽然可以使用\",{\"1\":{\"1318\":1}}],[\"虽然可以通过对象实例访问保存在原型中的值\",{\"1\":{\"576\":1}}],[\"虽然变量\",{\"1\":{\"1266\":1}}],[\"虽然我们无法直接访问内置属性\",{\"1\":{\"650\":1}}],[\"虽然目前很多现代浏览器的\",{\"1\":{\"603\":1}}],[\"虽然两个实例中都拥有同名的方法函数\",{\"1\":{\"592\":1}}],[\"虽然在脚本中没有标准的方式访问\",{\"1\":{\"576\":1}}],[\"虽然分号不是必须的\",{\"1\":{\"253\":1}}],[\"虽然没有谁强制要求必须采用这种格式\",{\"1\":{\"246\":1}}],[\"虽然得出的内容是一样的但是调用的过程不一样\",{\"1\":{\"150\":1}}],[\"既然说到模块化\",{\"1\":{\"1621\":1}}],[\"既然\",{\"1\":{\"1418\":1}}],[\"既通过在原型上定义方法实现了函数复用\",{\"1\":{\"662\":1}}],[\"既可当作函数使用\",{\"1\":{\"621\":1}}],[\"既是类与类之间的关系也是对象与对象之间的关系\",{\"1\":{\"229\":1}}],[\"详细了解了这个过程之后\",{\"1\":{\"1557\":1}}],[\"详细介绍参考\",{\"1\":{\"615\":1}}],[\"详情参考\",{\"1\":{\"1070\":1}}],[\"详解\",{\"0\":{\"3\":1}}],[\"导出一个值作为源模块的默认导出\",{\"1\":{\"1652\":1}}],[\"导出前声明的值\",{\"1\":{\"1651\":1}}],[\"导出方式\",{\"0\":{\"1650\":1}}],[\"导出的复合写法\",{\"0\":{\"1639\":1}}],[\"导入\",{\"1\":{\"1642\":1}}],[\"导入源文件的默认导出\",{\"1\":{\"1628\":1}}],[\"导入方式\",{\"0\":{\"1625\":1}}],[\"导入外部样式使用\",{\"1\":{\"438\":1}}],[\"导致内部的\",{\"1\":{\"1375\":1,\"1589\":1}}],[\"导致报错\",{\"1\":{\"1226\":2}}],[\"导致默认值不会生效\",{\"1\":{\"1218\":1}}],[\"导致取不到值\",{\"1\":{\"1218\":1}}],[\"导致拿不到内部属性\",{\"1\":{\"625\":1}}],[\"导致第三方无法获取到它们\",{\"1\":{\"613\":1}}],[\"公有方法\",{\"1\":{\"612\":1,\"613\":1}}],[\"暂不考虑\",{\"1\":{\"1263\":1}}],[\"暂时性死区\",{\"0\":{\"1694\":1},\"1\":{\"1694\":1}}],[\"暂时性死区详解\",{\"1\":{\"1067\":1}}],[\"暂时的解决方案\",{\"1\":{\"611\":1}}],[\"暂存死区\",{\"1\":{\"1067\":1}}],[\"暂存性死区\",{\"0\":{\"1067\":1}}],[\"暂存区和工作目录\",{\"1\":{\"176\":1}}],[\"私有属性是实例中的属性\",{\"1\":{\"615\":1,\"1483\":1}}],[\"私有属性的提案\",{\"1\":{\"615\":1}}],[\"私有属性\",{\"0\":{\"615\":1},\"1\":{\"1483\":1}}],[\"私有方法移出模块\",{\"1\":{\"611\":1}}],[\"私有方法\",{\"0\":{\"611\":1},\"1\":{\"612\":1,\"613\":1}}],[\"私有方法和私有属性\",{\"1\":{\"610\":1}}],[\"私有成员\",{\"0\":{\"610\":1}}],[\"运算类型\",{\"1\":{\"1243\":1}}],[\"运算名称\",{\"1\":{\"1238\":1}}],[\"运算返回另一个字符串\",{\"1\":{\"1169\":1}}],[\"运算速度将更快\",{\"1\":{\"1158\":1}}],[\"运算仍然会返回\",{\"1\":{\"1110\":1}}],[\"运算\",{\"1\":{\"944\":1}}],[\"运算不同\",{\"1\":{\"762\":1}}],[\"运算时\",{\"1\":{\"653\":1}}],[\"运算符示例\",{\"1\":{\"1243\":1}}],[\"运算符优先级\",{\"0\":{\"1241\":1}}],[\"运算符认为每个\",{\"1\":{\"1203\":1}}],[\"运算符只是提供了一种简写形式\",{\"1\":{\"1197\":1}}],[\"运算符只能删除自有属性\",{\"1\":{\"564\":1}}],[\"运算符的优先级决定了表达式中运算执行的先后顺序\",{\"1\":{\"1241\":1}}],[\"运算符的功能类似于\",{\"1\":{\"1164\":1}}],[\"运算符的判定方式也不一样\",{\"1\":{\"762\":1}}],[\"运算符判断一个数的奇偶\",{\"1\":{\"1159\":1}}],[\"运算符使指定值的二进制数所有位都左移指定次数\",{\"1\":{\"1148\":1}}],[\"运算符是对位求反\",{\"1\":{\"1147\":1}}],[\"运算符与\",{\"1\":{\"1145\":1}}],[\"运算符通常只用于获取\",{\"1\":{\"1135\":1}}],[\"运算符能向期望一个表达式的值是\",{\"1\":{\"1135\":1}}],[\"运算符也会返回\",{\"1\":{\"1111\":1}}],[\"运算符对所删除属性返回\",{\"1\":{\"1110\":1}}],[\"运算符删除了一个属性\",{\"1\":{\"1110\":1}}],[\"运算符用于测试构造函数的\",{\"1\":{\"1114\":1}}],[\"运算符用于判断属性是否存在于对象中\",{\"1\":{\"1105\":1}}],[\"运算符用于检测一个对象在其\",{\"1\":{\"935\":1}}],[\"运算符创建的对象隐式转换为\",{\"1\":{\"948\":1}}],[\"运算符加上要实例化的对象的名字创建的\",{\"1\":{\"930\":1}}],[\"运算符\",{\"0\":{\"950\":1,\"1753\":1},\"1\":{\"762\":2,\"1138\":1,\"1151\":1,\"1201\":1,\"1202\":1,\"1207\":1}}],[\"运算符会对它两边的操作数做隐式类型转换\",{\"1\":{\"762\":1}}],[\"运算符不同\",{\"1\":{\"754\":1}}],[\"运算符可以删除对象属性\",{\"1\":{\"564\":1}}],[\"运行阶段\",{\"1\":{\"1668\":1}}],[\"运行在非严格模式下时\",{\"1\":{\"1578\":1}}],[\"运行机制\",{\"1\":{\"1532\":1}}],[\"运行时错误\",{\"1\":{\"1694\":1}}],[\"运行时\",{\"1\":{\"1375\":1}}],[\"运行时所在的环境\",{\"1\":{\"607\":1}}],[\"运行效率高\",{\"1\":{\"1268\":1}}],[\"运行\",{\"1\":{\"1040\":1,\"1677\":1}}],[\"运行环境就是单线程\",{\"1\":{\"1551\":1}}],[\"运行环境\",{\"0\":{\"949\":1,\"1548\":1}}],[\"运行环境的指向\",{\"0\":{\"607\":1}}],[\"运行的字符串代码被恶意方\",{\"1\":{\"893\":1}}],[\"拦截该属性的存取行为\",{\"1\":{\"604\":1}}],[\"挂载在\",{\"1\":{\"603\":1}}],[\"挂载一个文件系统\",{\"1\":{\"215\":1}}],[\"手动\",{\"1\":{\"1580\":1}}],[\"手动清除定时器\",{\"1\":{\"1288\":1}}],[\"手动释放内存\",{\"1\":{\"1282\":1}}],[\"手动临时挂载点\",{\"1\":{\"186\":2}}],[\"手工指定不可枚举属性\",{\"1\":{\"599\":1,\"1483\":1}}],[\"概念\",{\"1\":{\"596\":1}}],[\"概念层模型\",{\"0\":{\"318\":1}}],[\"况且有\",{\"1\":{\"592\":1}}],[\"像\",{\"1\":{\"590\":1,\"976\":1}}],[\"像素\",{\"1\":{\"25\":1,\"51\":2,\"54\":1}}],[\"故浏览器端一般会使用\",{\"1\":{\"1617\":1}}],[\"故与接口密不可分\",{\"1\":{\"584\":1}}],[\"故事名称\",{\"1\":{\"126\":1}}],[\"毕竟使用\",{\"1\":{\"1178\":1}}],[\"毕竟\",{\"1\":{\"581\":1}}],[\"兼容的浏览器\",{\"1\":{\"578\":1}}],[\"已编码的\",{\"1\":{\"869\":1,\"874\":1}}],[\"已经是一个工厂方法\",{\"1\":{\"584\":1}}],[\"已经无法确定对象的类型了\",{\"1\":{\"578\":1}}],[\"已有属性可写\",{\"1\":{\"541\":1}}],[\"亦即从执行上下文栈中被弹出\",{\"1\":{\"1709\":1}}],[\"亦即点对点\",{\"1\":{\"298\":1}}],[\"亦可理解为为了防止同名的变量属性被修改为\",{\"1\":{\"1564\":1}}],[\"亦称\",{\"1\":{\"1393\":1}}],[\"亦被覆盖\",{\"1\":{\"578\":1}}],[\"屏蔽\",{\"1\":{\"576\":1}}],[\"屏幕的一部分重画\",{\"1\":{\"158\":1}}],[\"理解对象\",{\"0\":{\"1741\":1}}],[\"理解成\",{\"1\":{\"1670\":1}}],[\"理解成一个代码块\",{\"1\":{\"1218\":1}}],[\"理解了\",{\"1\":{\"1264\":1}}],[\"理解原型对象\",{\"0\":{\"576\":1}}],[\"理想状态下\",{\"1\":{\"301\":1}}],[\"共用公用方法\",{\"1\":{\"575\":1}}],[\"共享文件夹\",{\"1\":{\"881\":2,\"887\":2}}],[\"共享进程的资源\",{\"1\":{\"423\":1}}],[\"共享内存等\",{\"1\":{\"422\":1}}],[\"稳妥构造函数遵循与寄生构造函数类似的模式\",{\"1\":{\"572\":1}}],[\"稳妥构造函数模式提供的这种安全性\",{\"1\":{\"572\":1}}],[\"稳妥构造函数模式\",{\"0\":{\"572\":1}}],[\"稳妥对象最适合在一些安全的环境中\",{\"1\":{\"572\":1}}],[\"稳妥对象\",{\"1\":{\"572\":1}}],[\"隐藏作用域中的变量和函数可以避免同名标识符之间的冲突\",{\"1\":{\"1682\":1}}],[\"隐藏\",{\"1\":{\"1681\":1,\"1684\":1}}],[\"隐藏内部实现\",{\"0\":{\"1681\":1}}],[\"隐藏节点的请求实际上是由客户发起的\",{\"1\":{\"1502\":1}}],[\"隐藏元素\",{\"1\":{\"44\":1}}],[\"隐式的进行了赋值操作\",{\"1\":{\"1670\":1}}],[\"隐式丢失\",{\"1\":{\"1579\":1}}],[\"隐式绑定和显式绑定\",{\"0\":{\"1583\":1}}],[\"隐式绑定到该对象上\",{\"1\":{\"1580\":1}}],[\"隐式绑定规则会把函数调用中的\",{\"1\":{\"1579\":1}}],[\"隐式绑定\",{\"0\":{\"1579\":1},\"1\":{\"1582\":1}}],[\"隐式实参\",{\"0\":{\"1517\":1}}],[\"隐式类型转换\",{\"0\":{\"948\":1},\"1\":{\"941\":1,\"948\":1}}],[\"隐式原型对象\",{\"1\":{\"648\":1}}],[\"隐式原型对象的作用在于\",{\"1\":{\"646\":1}}],[\"隐式原型\",{\"0\":{\"646\":1}}],[\"隐式转换成字符串再输出\",{\"1\":{\"558\":1}}],[\"程序的运行阶段分为\",{\"1\":{\"1698\":1}}],[\"程序的编译及执行过程\",{\"1\":{\"1669\":1}}],[\"程序的执行直接跳到循环结尾处\",{\"1\":{\"969\":1}}],[\"程序发出调用之后\",{\"1\":{\"1547\":1}}],[\"程序发出调用的时候\",{\"1\":{\"1547\":1}}],[\"程序间对象的引用关系形成了节点的图\",{\"1\":{\"1282\":1}}],[\"程序将会终止\",{\"1\":{\"1045\":1}}],[\"程序将跳转到这个标签所标识的语句块结束\",{\"1\":{\"960\":1}}],[\"程序中的一段源代码在执行之前会经历三个步骤\",{\"1\":{\"1665\":1}}],[\"程序中\",{\"1\":{\"557\":1,\"1556\":1}}],[\"程序使用\",{\"1\":{\"234\":1}}],[\"白\",{\"1\":{\"556\":5}}],[\"于是\",{\"1\":{\"1677\":1}}],[\"于是结束等待状态\",{\"1\":{\"1532\":1}}],[\"于是把隐藏节点的逻辑放在回调函数中\",{\"1\":{\"1502\":1}}],[\"于是把\",{\"1\":{\"1502\":1}}],[\"于是我们这个自定义的引用类型就丝毫没有封装性可言了\",{\"1\":{\"592\":1}}],[\"于是也可以叫做语法糖\",{\"1\":{\"546\":1}}],[\"于父级容器的\",{\"1\":{\"48\":1}}],[\"❎\",{\"1\":{\"541\":8}}],[\"倘若一个对象的属性是一个对象\",{\"1\":{\"540\":1}}],[\"错误也必须按\",{\"1\":{\"1426\":1}}],[\"错误的写法\",{\"1\":{\"1218\":1}}],[\"错误对象\",{\"1\":{\"917\":1}}],[\"错误原因\",{\"1\":{\"619\":1}}],[\"错误\",{\"1\":{\"540\":1,\"564\":2,\"874\":1,\"1385\":1,\"1386\":2,\"1616\":1}}],[\"冻结一个对象后该对象的原型也不能被修改\",{\"1\":{\"706\":1}}],[\"冻结了一个对象则不能向这个对象添加新的属性\",{\"1\":{\"706\":1}}],[\"冻结自身\",{\"1\":{\"540\":1}}],[\"冻结它\",{\"1\":{\"540\":1}}],[\"冻结对象不能设置原型对象\",{\"1\":{\"540\":1}}],[\"冻结对象不能添加新的属性\",{\"1\":{\"540\":1}}],[\"冻结对象不可扩展\",{\"1\":{\"540\":1}}],[\"冻结对象永远不可变\",{\"1\":{\"540\":1}}],[\"冻结对象具有以下特征\",{\"1\":{\"540\":1}}],[\"冻结特性\",{\"0\":{\"540\":1},\"1\":{\"537\":1,\"541\":1}}],[\"尝试删除一个密封对象的属性或者将某个密封对象的属性从数据属性转换成访问器属性\",{\"1\":{\"539\":1}}],[\"尝试滚动文字区域\",{\"1\":{\"105\":1}}],[\"密封对象无法添加新属性\",{\"1\":{\"539\":1}}],[\"密封对象不可扩展\",{\"1\":{\"539\":1,\"786\":1}}],[\"密封对象具有以下特性\",{\"1\":{\"539\":1}}],[\"密封特性\",{\"0\":{\"539\":1},\"1\":{\"537\":1,\"541\":1}}],[\"密封以及冻结三大特征\",{\"1\":{\"537\":1}}],[\"扩展\",{\"1\":{\"1652\":1}}],[\"扩展程序的权限下\",{\"1\":{\"893\":1}}],[\"扩展特性\",{\"0\":{\"538\":1},\"1\":{\"537\":1,\"541\":1}}],[\"扩展运算符内部调用的是数据结构的\",{\"1\":{\"1186\":1}}],[\"扩展运算符就会报错\",{\"1\":{\"1185\":1}}],[\"扩展运算符就无法将其转为真正的数组了\",{\"1\":{\"1185\":1}}],[\"扩展运算符可以将其转为真正的数组\",{\"1\":{\"1185\":1}}],[\"扩展运算符可以与解构赋值结合起来\",{\"1\":{\"1183\":1}}],[\"扩展运算符还可以将字符串转为真正的数组\",{\"1\":{\"1184\":1}}],[\"扩展运算符提供了数组合并的新写法\",{\"1\":{\"1181\":1}}],[\"扩展运算符提供了解决这个问题的一个变通方法\",{\"1\":{\"1179\":1}}],[\"扩展运算符允许一个表达式在期望多个参数\",{\"1\":{\"1172\":1}}],[\"扩展运算符\",{\"0\":{\"343\":1,\"1172\":1},\"1\":{\"1243\":1}}],[\"读取变量的定义\",{\"1\":{\"1698\":1}}],[\"读取与写入可能是写入一个变量或者一个对象的属性值\",{\"1\":{\"1275\":1}}],[\"读取只写属性总是返回\",{\"1\":{\"532\":1}}],[\"读取属性值的时候\",{\"1\":{\"528\":1}}],[\"枚举中\",{\"1\":{\"528\":1}}],[\"连用以创建一个伪属性\",{\"1\":{\"1322\":1}}],[\"连续事件的响应只需执行一次回调\",{\"1\":{\"1447\":1}}],[\"连续尝试进行过多的\",{\"1\":{\"1432\":1}}],[\"连续两个非操作可以将一个数强制转换为\",{\"1\":{\"948\":1}}],[\"连续子数组\",{\"1\":{\"524\":1}}],[\"连接的结果\",{\"1\":{\"1274\":1}}],[\"连接的两端都设有发送缓存和接收缓存\",{\"1\":{\"298\":1}}],[\"连接性\",{\"1\":{\"313\":1}}],[\"连接在收到一个\",{\"1\":{\"304\":1}}],[\"连接采取全双工的通信方式\",{\"1\":{\"304\":1}}],[\"连接需要四次挥手\",{\"1\":{\"304\":1}}],[\"连接需要三次握手\",{\"1\":{\"303\":1}}],[\"连接上仍然能够发送数据\",{\"1\":{\"304\":1}}],[\"连接是\",{\"1\":{\"304\":1}}],[\"连接时\",{\"1\":{\"304\":1}}],[\"连接时需要客户端和服务器端总共发送三个包以确认连接的建立\",{\"1\":{\"300\":1}}],[\"连接都将被一直保持下去\",{\"1\":{\"301\":1}}],[\"连接一旦建立\",{\"1\":{\"301\":1}}],[\"连接传送的数据\",{\"1\":{\"298\":1}}],[\"连接只能是一对一\",{\"1\":{\"298\":1}}],[\"连接只能有两个端点\",{\"1\":{\"298\":1}}],[\"连接导向\",{\"1\":{\"298\":1}}],[\"连接\",{\"1\":{\"152\":1,\"299\":1,\"304\":1,\"509\":1,\"943\":1,\"1593\":1}}],[\"连接成功\",{\"1\":{\"151\":1}}],[\"阶\",{\"1\":{\"518\":10}}],[\"阶你才能到达楼顶\",{\"1\":{\"518\":1}}],[\"阶段执行回调\",{\"1\":{\"458\":2}}],[\"阶段会停止并且进入到\",{\"1\":{\"458\":1}}],[\"阶段\",{\"1\":{\"458\":6}}],[\"爬楼梯\",{\"0\":{\"518\":1}}],[\"栈将其环境弹出\",{\"1\":{\"1707\":1}}],[\"栈堆实现分析\",{\"0\":{\"1557\":1}}],[\"栈底永远都是全局上下文\",{\"1\":{\"1556\":1}}],[\"栈中的代码调用各种外部\",{\"1\":{\"1532\":1}}],[\"栈区不会泄漏\",{\"1\":{\"1284\":1}}],[\"栈内存\",{\"1\":{\"1268\":1}}],[\"栈数据结构\",{\"0\":{\"1260\":1}}],[\"栈\",{\"1\":{\"1259\":2},\"2\":{\"514\":1}}],[\"跳过点号\",{\"1\":{\"509\":2}}],[\"跳转到转码步骤\",{\"1\":{\"464\":1}}],[\"修正\",{\"1\":{\"1505\":1}}],[\"修饰的方法不能在实例中访问\",{\"1\":{\"1489\":1}}],[\"修订号\",{\"1\":{\"509\":1}}],[\"修订号从左到右编号\",{\"1\":{\"509\":1}}],[\"修改变量对象的值\",{\"1\":{\"1565\":1}}],[\"修改起来比较麻烦\",{\"1\":{\"1469\":1}}],[\"修改其中一个变量\",{\"1\":{\"552\":1}}],[\"修改\",{\"1\":{\"394\":1,\"893\":1,\"1572\":1,\"1682\":1}}],[\"修改返回函数的\",{\"1\":{\"394\":1}}],[\"修改保存以后使用命令重启网卡\",{\"1\":{\"220\":1}}],[\"修改网络配置文件\",{\"1\":{\"220\":1}}],[\"修改ip\",{\"0\":{\"220\":1}}],[\"修改主机名\",{\"0\":{\"218\":1}}],[\"修改目录名\",{\"1\":{\"198\":1}}],[\"修改目录\",{\"0\":{\"198\":1}}],[\"修改为双冒号\",{\"1\":{\"16\":1}}],[\"写入类的定义之中\",{\"1\":{\"632\":1}}],[\"写入属性值的时候\",{\"1\":{\"528\":1}}],[\"写法知识让原型对象的写法更加清晰\",{\"1\":{\"1473\":1}}],[\"写法二函数参数的默认值是一个有具体属性的对象\",{\"1\":{\"1404\":1}}],[\"写法二\",{\"1\":{\"632\":1,\"1404\":1}}],[\"写法一函数参数的默认值是空对象\",{\"1\":{\"1404\":1}}],[\"写法一\",{\"1\":{\"632\":1,\"1404\":1}}],[\"写属性\",{\"1\":{\"532\":1}}],[\"写一个函数搜索\",{\"1\":{\"503\":1}}],[\"写权限\",{\"1\":{\"215\":1}}],[\"升序\",{\"1\":{\"503\":1}}],[\"另一条需要考虑的规则是调用位置是否有上下文对象\",{\"1\":{\"1579\":1}}],[\"另一种方法是\",{\"1\":{\"1348\":1}}],[\"另一种解决方法是使用\",{\"1\":{\"607\":1}}],[\"另一次是在子类型构造函数内部\",{\"1\":{\"663\":1}}],[\"另一个函数需要引用自身的例子\",{\"1\":{\"1685\":1}}],[\"另一个重要机制\",{\"1\":{\"1677\":1}}],[\"另一个线程删除了这个节点\",{\"1\":{\"1551\":1}}],[\"另一个不是\",{\"1\":{\"952\":1}}],[\"另一个操作值为数值\",{\"1\":{\"952\":1}}],[\"另一个需要注意的是\",{\"1\":{\"619\":1}}],[\"另一个对象\",{\"1\":{\"565\":1}}],[\"另一个也跟谁着等比例放大\",{\"1\":{\"104\":1}}],[\"另外一种避免冲突的办法和现代的模块机制很接近\",{\"1\":{\"1684\":1}}],[\"另外各个函数都是扁平的\",{\"1\":{\"1427\":1}}],[\"另外代码就变得非常简单干净\",{\"1\":{\"1426\":1}}],[\"另外\",{\"1\":{\"569\":1,\"893\":1,\"955\":1,\"1375\":1,\"1593\":1,\"1654\":1}}],[\"另有两个整数\",{\"1\":{\"500\":1}}],[\"到声明变量之间的这个区域被称作\",{\"1\":{\"1694\":1}}],[\"到项目中\",{\"1\":{\"1614\":1}}],[\"到底加载哪一个模块\",{\"1\":{\"1593\":1}}],[\"到底是什么关系\",{\"1\":{\"1566\":1}}],[\"到底省略了哪些参数\",{\"1\":{\"1405\":1}}],[\"到对象的绑定发生在调用的时候\",{\"1\":{\"1516\":1}}],[\"到另外一个函数之中\",{\"1\":{\"1505\":1}}],[\"到另一个对象或\",{\"1\":{\"828\":1}}],[\"到达原型链终点\",{\"1\":{\"648\":1}}],[\"到\",{\"1\":{\"497\":1,\"500\":1}}],[\"求积\",{\"1\":{\"1491\":1}}],[\"求余赋值\",{\"1\":{\"1238\":1}}],[\"求余\",{\"1\":{\"1207\":1}}],[\"求值的结果\",{\"1\":{\"1197\":1}}],[\"求对象初始化表达式的值的时候\",{\"1\":{\"1083\":1}}],[\"求幂赋值\",{\"1\":{\"1238\":1}}],[\"求幂时\",{\"1\":{\"859\":1}}],[\"求幂运算\",{\"0\":{\"365\":1}}],[\"求根节点到叶节点数字之和\",{\"0\":{\"497\":1}}],[\"评测系统内部使用整数\",{\"1\":{\"491\":1}}],[\"环境中定义的所有变量和函数都保存在这个对象中\",{\"1\":{\"1707\":1}}],[\"环境中访问\",{\"1\":{\"1562\":1}}],[\"环境中分配的内存一般有如下生命周期\",{\"1\":{\"1271\":1}}],[\"环境中获取全局对象需要不同的语句\",{\"1\":{\"848\":1}}],[\"环境\",{\"0\":{\"1534\":1},\"1\":{\"926\":1,\"1616\":1,\"1617\":1}}],[\"环境会返回方法名\",{\"1\":{\"551\":1}}],[\"环境会返回\",{\"1\":{\"551\":1}}],[\"环境的手段\",{\"1\":{\"317\":1}}],[\"环形链表\",{\"0\":{\"491\":1}}],[\"增强版的\",{\"1\":{\"1613\":1}}],[\"增强对象\",{\"1\":{\"659\":2}}],[\"增加了保留字\",{\"1\":{\"1620\":1}}],[\"增加了可计算属性名\",{\"1\":{\"559\":1}}],[\"增加或减少表意字和词间的空格\",{\"1\":{\"85\":1}}],[\"增量序列的个数\",{\"1\":{\"488\":1}}],[\"计时结束\",{\"1\":{\"1505\":2}}],[\"计时开始\",{\"1\":{\"1505\":2}}],[\"计数器变量更新\",{\"1\":{\"1009\":1}}],[\"计数排序\",{\"1\":{\"488\":1}}],[\"计算属性名\",{\"1\":{\"1319\":1}}],[\"计算结果\",{\"1\":{\"1441\":1}}],[\"计算结果是\",{\"1\":{\"1246\":1}}],[\"计算结果为真之前停止循环\",{\"1\":{\"1059\":1}}],[\"计算它们的和并同样以字符串形式返回\",{\"1\":{\"506\":1}}],[\"计算从根节点到叶节点生成的\",{\"1\":{\"497\":1}}],[\"计算主轴是否有多余空间\",{\"1\":{\"332\":1}}],[\"计算机网络体系\",{\"0\":{\"316\":1,\"1732\":1}}],[\"计算机网络\",{\"0\":{\"1733\":1},\"2\":{\"315\":1,\"320\":1}}],[\"计算出来\",{\"1\":{\"277\":1}}],[\"计算css样式\",{\"1\":{\"158\":1}}],[\"计算\",{\"1\":{\"82\":1,\"1207\":1}}],[\"计算值为\",{\"1\":{\"88\":1,\"89\":1}}],[\"计算值可以是\",{\"1\":{\"81\":1}}],[\"计算值的倍数\",{\"1\":{\"24\":1}}],[\"截取基准数据\",{\"1\":{\"488\":1}}],[\"贪心\",{\"2\":{\"487\":1,\"526\":1}}],[\"股票价格\",{\"1\":{\"485\":2}}],[\"卖出该股票\",{\"1\":{\"485\":1}}],[\"买入这只股票\",{\"1\":{\"485\":1}}],[\"买卖股票的最佳时机\",{\"0\":{\"485\":1}}],[\"某些代码不可以在没有间断的情况连续重复执行\",{\"1\":{\"1445\":1}}],[\"某个参数指定默认值以后\",{\"1\":{\"1406\":1}}],[\"某个被\",{\"1\":{\"15\":1}}],[\"某一天\",{\"1\":{\"485\":1}}],[\"天\",{\"1\":{\"485\":2}}],[\"天的价格\",{\"1\":{\"485\":1}}],[\"天内更新过的文件列出\",{\"1\":{\"215\":1}}],[\"堆快照可以直接告诉我们是否存在分离的\",{\"1\":{\"1286\":1}}],[\"堆栈溢出\",{\"0\":{\"1283\":1},\"1\":{\"1283\":1,\"1284\":1}}],[\"堆存取数据的方式\",{\"1\":{\"1264\":1}}],[\"堆数据结构是一种树状结构\",{\"1\":{\"1261\":1}}],[\"堆数据结构\",{\"0\":{\"1261\":1}}],[\"堆\",{\"1\":{\"1259\":2}}],[\"堆内存\",{\"1\":{\"1204\":1,\"1268\":1}}],[\"堆排序\",{\"1\":{\"488\":1}}],[\"堆化\",{\"1\":{\"482\":1}}],[\"堆叠顺序由元素在文档中的先后位置决定\",{\"1\":{\"56\":1}}],[\"替换为\",{\"1\":{\"1486\":1}}],[\"替换并堆化\",{\"1\":{\"482\":1}}],[\"替代数组的\",{\"1\":{\"1178\":1}}],[\"替代\",{\"0\":{\"1137\":1},\"1\":{\"1695\":1}}],[\"替代方法\",{\"1\":{\"893\":1}}],[\"替代动画\",{\"1\":{\"438\":1}}],[\"答案中不可以包含重复的三元组\",{\"1\":{\"476\":1}}],[\"满足\",{\"1\":{\"476\":1}}],[\"链式函数\",{\"1\":{\"1496\":1}}],[\"链式运算符\",{\"1\":{\"1164\":1}}],[\"链表中没有环\",{\"1\":{\"491\":1}}],[\"链表中有一个环\",{\"1\":{\"491\":2}}],[\"链表\",{\"2\":{\"475\":1}}],[\"链路层\",{\"1\":{\"152\":1}}],[\"反柯里化则是扩大适用范围\",{\"1\":{\"1419\":1}}],[\"反柯里化\",{\"0\":{\"1419\":1},\"1\":{\"1506\":1}}],[\"反码再加\",{\"1\":{\"1160\":1}}],[\"反码取反\",{\"1\":{\"1147\":1}}],[\"反转被操作数的位\",{\"1\":{\"1151\":1}}],[\"反转链表\",{\"0\":{\"473\":1}}],[\"反向所有被缩进作用的行\",{\"1\":{\"86\":1}}],[\"叶子节点\",{\"1\":{\"470\":1}}],[\"哈希\",{\"2\":{\"469\":1,\"493\":1,\"517\":1}}],[\"哈哈\",{\"1\":{\"381\":2}}],[\"题目\",{\"1\":{\"467\":1,\"470\":1,\"473\":1,\"476\":1,\"479\":1,\"482\":1,\"485\":1,\"488\":1,\"491\":1,\"494\":1,\"497\":1,\"500\":1,\"503\":1,\"506\":1,\"509\":1,\"512\":1,\"515\":1,\"518\":1,\"521\":1,\"524\":1}}],[\"禁止\",{\"1\":{\"1620\":1}}],[\"禁止扩展\",{\"1\":{\"769\":1}}],[\"禁止使用\",{\"1\":{\"464\":1}}],[\"禁止两端对齐\",{\"1\":{\"85\":1}}],[\"脚本创建多个线程\",{\"1\":{\"1551\":1}}],[\"脚本\",{\"1\":{\"1532\":1}}],[\"脚本会在它\",{\"1\":{\"464\":1}}],[\"脚本等脚本语言时\",{\"1\":{\"143\":1}}],[\"启动下载\",{\"1\":{\"464\":1}}],[\"词法化的过程会对源代码中的字符进行检查\",{\"1\":{\"1674\":1}}],[\"词法化\",{\"1\":{\"1674\":1}}],[\"词法单元\",{\"1\":{\"1666\":1}}],[\"词法分析\",{\"1\":{\"1665\":1,\"1666\":2}}],[\"词法分析将标记转换为对象并定义属性和规则\",{\"1\":{\"464\":1}}],[\"词法层面上的父级\",{\"1\":{\"1569\":1}}],[\"词法作用域是在\",{\"1\":{\"1677\":1}}],[\"词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的\",{\"1\":{\"1674\":1}}],[\"词法作用域最重要的特征是它的定义过程发生在代码的书写阶段\",{\"1\":{\"1677\":1}}],[\"词法作用域查找只会试图查找\",{\"1\":{\"1676\":1}}],[\"词法作用域查找只会查找一级标识符\",{\"1\":{\"1676\":1}}],[\"词法作用域就是定义在词法阶段的作用域\",{\"1\":{\"1674\":1}}],[\"词法作用域\",{\"0\":{\"1673\":1,\"1674\":1},\"1\":{\"1375\":1,\"1673\":2}}],[\"词法语法\",{\"0\":{\"233\":1}}],[\"格的先后顺序\",{\"1\":{\"464\":1}}],[\"格式的数据中\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"格式的字符串\",{\"1\":{\"878\":1}}],[\"格式化模型布局它的内容\",{\"1\":{\"329\":1}}],[\"格式化宽度仅在出现在\",{\"1\":{\"51\":1}}],[\"格式化宽度\",{\"0\":{\"51\":1},\"1\":{\"51\":1}}],[\"格式保存\",{\"1\":{\"130\":1}}],[\"足够新鲜直接提供给客户端\",{\"1\":{\"464\":1}}],[\"检测防抖的间隔频率\",{\"1\":{\"1446\":1}}],[\"检测类型\",{\"0\":{\"1115\":1}}],[\"检测\",{\"1\":{\"935\":1}}],[\"检测对象类型\",{\"0\":{\"838\":1}}],[\"检验新鲜通常有两个http头进行控制\",{\"1\":{\"464\":1}}],[\"检验是否足够新鲜\",{\"1\":{\"464\":1}}],[\"检查当前上下文中的变量声明\",{\"1\":{\"1564\":1}}],[\"检查当前上下文的函数声明\",{\"1\":{\"1564\":1}}],[\"检查当前上下文的参数\",{\"1\":{\"1564\":1}}],[\"检查阶段\",{\"1\":{\"1534\":1}}],[\"检查\",{\"1\":{\"1107\":1}}],[\"检查变量是否被声明\",{\"1\":{\"560\":1}}],[\"检查微任务\",{\"1\":{\"461\":1}}],[\"检查这次执行中是否产生新的微任务\",{\"1\":{\"457\":1}}],[\"检查缓存\",{\"0\":{\"149\":1}}],[\"循环的应用中\",{\"1\":{\"1692\":1}}],[\"循环的提前终止\",{\"1\":{\"1002\":1}}],[\"循环内部\",{\"1\":{\"1691\":1}}],[\"循环内调用\",{\"1\":{\"460\":1}}],[\"循环所属作用域中的\",{\"1\":{\"1682\":1}}],[\"循环写法\",{\"1\":{\"1357\":1}}],[\"循环通常具有多个循环变量\",{\"1\":{\"1248\":1}}],[\"循环遍历\",{\"1\":{\"1234\":1}}],[\"循环遍历该对象时返回的顺序一致\",{\"1\":{\"700\":1}}],[\"循环遍历该\",{\"1\":{\"528\":1}}],[\"循环计数器\",{\"1\":{\"1014\":1}}],[\"循环执行指定的一段代码\",{\"1\":{\"1058\":1}}],[\"循环执行语句\",{\"1\":{\"1009\":1}}],[\"循环执行语句执行后执行的计数器变量更新表达式\",{\"1\":{\"1009\":1}}],[\"循环执行代码块\",{\"1\":{\"982\":1}}],[\"循环条件判断\",{\"1\":{\"1009\":1}}],[\"循环之间的区别\",{\"1\":{\"1004\":1}}],[\"循环之间有两点语法方面的不同之处\",{\"1\":{\"976\":1}}],[\"循环和其他一些语句所使用的语句块是不同的\",{\"1\":{\"1329\":1}}],[\"循环和\",{\"1\":{\"1004\":1}}],[\"循环和普通\",{\"1\":{\"976\":1}}],[\"循环输出的属性名的顺序是不可预测的\",{\"1\":{\"983\":1}}],[\"循环语句将返回所有可枚举属性\",{\"1\":{\"983\":1}}],[\"循环将遍历对象本身的所有可枚举属性\",{\"1\":{\"983\":1}}],[\"循环只遍历可枚举属性\",{\"1\":{\"983\":1}}],[\"循环也不用使用分号做结尾\",{\"1\":{\"976\":1}}],[\"循环也枚举原型链中的属性\",{\"1\":{\"700\":1}}],[\"循环是用分号结尾的\",{\"1\":{\"976\":1}}],[\"循环不同\",{\"1\":{\"976\":1}}],[\"循环要求必须使用关键字\",{\"1\":{\"976\":1}}],[\"循环开始遍历下一个属性名\",{\"1\":{\"969\":1}}],[\"循环体会从头开始执行\",{\"1\":{\"969\":1}}],[\"循环可以遍历出该对象中所有可枚举属性\",{\"1\":{\"565\":1}}],[\"循环中的\",{\"1\":{\"1691\":1}}],[\"循环中的第一个逗号是\",{\"1\":{\"1248\":1}}],[\"循环中的三个表达式中的任何一个都可以忽略\",{\"1\":{\"1014\":1}}],[\"循环中使用\",{\"1\":{\"577\":1}}],[\"循环中\",{\"1\":{\"531\":1,\"969\":4,\"1248\":1}}],[\"循环\",{\"1\":{\"531\":1,\"983\":2,\"1013\":1}}],[\"循环会处理一个宏任务和所有这次循环中产生的微任务\",{\"1\":{\"457\":1}}],[\"轮询阶段\",{\"1\":{\"1534\":1}}],[\"轮询\",{\"1\":{\"458\":1}}],[\"遇到下面的这段代码了\",{\"1\":{\"1557\":1}}],[\"遇到以上三种情况\",{\"1\":{\"1556\":1}}],[\"遇到引用值\",{\"1\":{\"930\":1}}],[\"遇到宏任务或微任务\",{\"1\":{\"457\":1}}],[\"遇到异步任务时\",{\"1\":{\"457\":1}}],[\"压入执行栈中执行\",{\"1\":{\"457\":1}}],[\"宏任务的优先级高于微任务\",{\"1\":{\"1533\":1}}],[\"宏任务与微任务的优先级\",{\"1\":{\"1533\":1}}],[\"宏任务与微任务的区别在于队列中事件的执行优先级\",{\"1\":{\"1533\":1}}],[\"宏任务\",{\"1\":{\"457\":1,\"1533\":3}}],[\"宏观任务\",{\"1\":{\"457\":1}}],[\"微任务执行完毕后\",{\"1\":{\"457\":1}}],[\"微任务中产生了新的微任务不会推迟到下一个循环中\",{\"1\":{\"457\":1}}],[\"微任务\",{\"1\":{\"457\":1,\"1533\":2}}],[\"微观任务\",{\"1\":{\"457\":1}}],[\"微软也很长时间没有更新\",{\"1\":{\"143\":1}}],[\"异同对比\",{\"0\":{\"1194\":1}}],[\"异或还经常被用于加密\",{\"1\":{\"1154\":1}}],[\"异常处理等\",{\"1\":{\"1505\":1}}],[\"异常处理\",{\"0\":{\"1347\":1}}],[\"异常标识符\",{\"0\":{\"1055\":1}}],[\"异常没有抛出\",{\"1\":{\"1054\":1}}],[\"异常\",{\"1\":{\"683\":1,\"935\":1}}],[\"异常元素\",{\"1\":{\"329\":1}}],[\"异步加载\",{\"1\":{\"1618\":2}}],[\"异步加载依赖的模块\",{\"1\":{\"1617\":1}}],[\"异步模块定义\",{\"1\":{\"1618\":1}}],[\"异步模块定\",{\"1\":{\"1618\":1}}],[\"异步执行的运行机制\",{\"1\":{\"1552\":1}}],[\"异步\",{\"1\":{\"1547\":1,\"1549\":1}}],[\"异步请求的过程中\",{\"1\":{\"1502\":1}}],[\"异步编程\",{\"1\":{\"1462\":1}}],[\"异步并行遍历\",{\"0\":{\"1358\":1}}],[\"异步并发\",{\"0\":{\"1354\":1},\"1\":{\"1353\":1}}],[\"异步串行遍历\",{\"0\":{\"1357\":1}}],[\"异步添加选中饮料到购物车\",{\"1\":{\"1353\":1}}],[\"异步添加选中披萨到购物车\",{\"1\":{\"1353\":1}}],[\"异步获取饮料数据\",{\"1\":{\"1353\":1}}],[\"异步获取披萨数据\",{\"1\":{\"1353\":1}}],[\"异步非阻塞\",{\"0\":{\"1353\":1}}],[\"异步阻塞\",{\"0\":{\"1352\":1},\"1\":{\"1353\":1}}],[\"异步语句都不会执行\",{\"1\":{\"1348\":1}}],[\"异步语句返回的\",{\"1\":{\"1348\":1}}],[\"异步语句返回值\",{\"0\":{\"1342\":1,\"1346\":1}}],[\"异步语句\",{\"1\":{\"1346\":1}}],[\"异步语句命令\",{\"1\":{\"1338\":1}}],[\"异步函数中只要有一个\",{\"1\":{\"1348\":1}}],[\"异步函数的模块导入\",{\"0\":{\"1603\":1}}],[\"异步函数的语句\",{\"0\":{\"1341\":1}}],[\"异步函数的声明\",{\"0\":{\"1340\":1}}],[\"异步函数\",{\"0\":{\"1338\":1},\"1\":{\"1356\":1}}],[\"异步脚本禁止使用\",{\"1\":{\"464\":1}}],[\"异步任务执行一部分后\",{\"1\":{\"1552\":1}}],[\"异步任务会在主线程先执行一部分\",{\"1\":{\"1552\":1}}],[\"异步任务\",{\"1\":{\"457\":1,\"1552\":1}}],[\"执行环境中\",{\"1\":{\"1709\":1}}],[\"执行环境定义了变量或函数有权访问的其他数据\",{\"1\":{\"1707\":1}}],[\"执行流继续执行\",{\"1\":{\"1709\":1}}],[\"执行流执行完\",{\"1\":{\"1709\":1}}],[\"执行流执行代码\",{\"1\":{\"1709\":1}}],[\"执行流执行\",{\"1\":{\"1709\":4}}],[\"执行流遇到\",{\"1\":{\"1670\":1}}],[\"执行阶段\",{\"0\":{\"1762\":1},\"1\":{\"1698\":1}}],[\"执行对象类的构造函数\",{\"1\":{\"1581\":2}}],[\"执行对应的任务\",{\"1\":{\"1534\":1}}],[\"执行过程分析\",{\"0\":{\"1709\":1}}],[\"执行过程\",{\"0\":{\"1563\":1},\"1\":{\"1572\":1}}],[\"执行其他代码\",{\"1\":{\"1555\":1}}],[\"执行结束\",{\"1\":{\"1542\":1}}],[\"执行栈\",{\"1\":{\"1532\":2}}],[\"执行栈为空\",{\"1\":{\"457\":1}}],[\"执行前类型判断\",{\"0\":{\"1456\":1}}],[\"执行间隔\",{\"1\":{\"1433\":1}}],[\"执行时\",{\"1\":{\"1375\":1}}],[\"执行的时候就是闭包\",{\"1\":{\"1710\":1}}],[\"执行的\",{\"1\":{\"1357\":1}}],[\"执行函数时\",{\"1\":{\"1302\":1}}],[\"执行一次释放占用内存的操作\",{\"1\":{\"1279\":1}}],[\"执行一些关闭回调\",{\"1\":{\"458\":1}}],[\"执行上下文可以理解为当前代码的执行环境\",{\"1\":{\"1556\":1}}],[\"执行上下文会分别进行以下操作\",{\"1\":{\"1555\":1}}],[\"执行上下文栈\",{\"0\":{\"1555\":1},\"1\":{\"1552\":1,\"1557\":2,\"1707\":1,\"1709\":1}}],[\"执行上下文的变量对象中查找\",{\"1\":{\"1569\":1}}],[\"执行上下文的代码会分成两个阶段进行处理\",{\"1\":{\"1563\":1}}],[\"执行上下文的问题可以通过\",{\"1\":{\"1457\":1}}],[\"执行上下文的执行顺序借用了栈数据结构的存取方式\",{\"1\":{\"1260\":1}}],[\"执行上下文中的变量\",{\"1\":{\"1282\":1}}],[\"执行上下文中的变量都会被标记为\",{\"1\":{\"1282\":1}}],[\"执行上下文\",{\"1\":{\"1260\":1,\"1263\":1,\"1560\":1}}],[\"执行后返回的是一个遍历器对象\",{\"1\":{\"1186\":1}}],[\"执行完毕\",{\"1\":{\"1557\":3}}],[\"执行完毕后再把标记设置为\",{\"1\":{\"1438\":1}}],[\"执行完毕后执行计数器变量更新语句\",{\"1\":{\"1009\":1}}],[\"执行完处理程序的内容后\",{\"1\":{\"1543\":1}}],[\"执行完函数以后\",{\"1\":{\"392\":1}}],[\"执行循环语句前的判断语句\",{\"1\":{\"1009\":1}}],[\"执行与\",{\"1\":{\"711\":1}}],[\"执行回调函数的\",{\"1\":{\"668\":1}}],[\"执行js脚本\",{\"1\":{\"464\":1}}],[\"执行\",{\"1\":{\"458\":1,\"1411\":1,\"1563\":1,\"1571\":1,\"1572\":1}}],[\"执行timer\",{\"1\":{\"458\":1}}],[\"执行宏任务中的代码\",{\"1\":{\"457\":1}}],[\"执行宏任务中的同步代码\",{\"1\":{\"457\":1}}],[\"执行顺序\",{\"1\":{\"457\":1}}],[\"执行任务队列中的宏任务\",{\"1\":{\"457\":1}}],[\"执行父元素上的事件处理\",{\"1\":{\"454\":1}}],[\"冒泡排序\",{\"1\":{\"488\":1}}],[\"冒泡阶段\",{\"1\":{\"453\":2}}],[\"冒号后面即属性的值\",{\"1\":{\"7\":1}}],[\"利用公式可以简单表述为\",{\"1\":{\"1566\":1}}],[\"利用闭包保存定时器和上次执行时间\",{\"1\":{\"1433\":1}}],[\"利用函数剩余参数\",{\"1\":{\"1393\":1}}],[\"利用浏览器事件冒泡机制\",{\"1\":{\"456\":1}}],[\"利用\",{\"1\":{\"450\":1,\"597\":2,\"613\":1,\"1009\":1}}],[\"利拉德\",{\"1\":{\"355\":1,\"375\":2}}],[\"体积大\",{\"1\":{\"445\":1}}],[\"体积相对较大\",{\"1\":{\"444\":1}}],[\"体系结构中\",{\"1\":{\"318\":1}}],[\"存使用\",{\"0\":{\"1275\":1}}],[\"存储了在上下文中定义的\",{\"1\":{\"1560\":1}}],[\"存储了大量数据\",{\"1\":{\"1288\":1}}],[\"存储的值大小不定\",{\"1\":{\"1268\":1}}],[\"存储的值大小固定\",{\"1\":{\"1268\":1}}],[\"存储引用数据类型\",{\"1\":{\"1268\":1}}],[\"存储基础数据类型\",{\"1\":{\"1268\":1}}],[\"存储在硬盘中\",{\"1\":{\"445\":1}}],[\"存储在内存中\",{\"1\":{\"444\":1}}],[\"存放常量\",{\"1\":{\"1259\":1}}],[\"存放复杂对象\",{\"1\":{\"1259\":1}}],[\"存放变量\",{\"1\":{\"1259\":1}}],[\"存值函数\",{\"0\":{\"1320\":1},\"1\":{\"604\":1}}],[\"存在的问题\",{\"1\":{\"1614\":1}}],[\"存在的话就执行它\",{\"1\":{\"381\":1}}],[\"存在的话就取索引为1的值\",{\"1\":{\"381\":1}}],[\"存在返回缓存的值\",{\"1\":{\"1441\":1}}],[\"存在于变量对象中\",{\"1\":{\"1264\":2}}],[\"存在\",{\"1\":{\"924\":1}}],[\"存在一个非常好的\",{\"1\":{\"893\":1}}],[\"存在暂时性死区\",{\"1\":{\"341\":1}}],[\"容我再来介绍下全局对象\",{\"1\":{\"1561\":1}}],[\"容易被劫持\",{\"1\":{\"443\":1}}],[\"容器的属性\",{\"1\":{\"332\":1}}],[\"容器默认存在两根轴\",{\"1\":{\"332\":1}}],[\"容器\",{\"1\":{\"104\":1,\"136\":1,\"332\":1}}],[\"跨模块常量\",{\"0\":{\"1661\":1}}],[\"跨域问题其实就是浏览器的同源策略造成的\",{\"1\":{\"449\":1}}],[\"跨域问题\",{\"0\":{\"448\":1}}],[\"跨域不能共享\",{\"1\":{\"443\":1}}],[\"跨站请求伪造\",{\"0\":{\"418\":1}}],[\"跨站脚本攻击\",{\"0\":{\"417\":1}}],[\"脱离执行环境\",{\"1\":{\"1282\":1}}],[\"脱离标准文档流\",{\"1\":{\"439\":1}}],[\"脱离文档流\",{\"0\":{\"37\":1},\"1\":{\"35\":2}}],[\"布局\",{\"1\":{\"439\":2}}],[\"布尔类型表示一个逻辑实体\",{\"1\":{\"921\":1}}],[\"布尔对象\",{\"1\":{\"917\":1}}],[\"布尔值比较可以按这种方式强制执行\",{\"1\":{\"1203\":1}}],[\"布尔值\",{\"0\":{\"921\":1},\"1\":{\"852\":1,\"917\":1,\"1115\":1,\"1302\":1,\"1306\":1}}],[\"布尔值等\",{\"1\":{\"408\":1}}],[\"布尔值字面量\",{\"1\":{\"248\":1,\"1080\":1}}],[\"布尔直接量\",{\"1\":{\"245\":1}}],[\"布尔属性只能有一个值\",{\"1\":{\"118\":1}}],[\"布尔属性\",{\"0\":{\"118\":1}}],[\"优缺点\",{\"0\":{\"1711\":1}}],[\"优势\",{\"0\":{\"1609\":1}}],[\"优点和使用场景\",{\"0\":{\"1460\":1}}],[\"优点\",{\"0\":{\"1461\":1},\"1\":{\"1399\":1,\"1425\":1,\"1426\":2,\"1427\":1,\"1711\":1}}],[\"优化\",{\"1\":{\"438\":2}}],[\"优先使用\",{\"1\":{\"1691\":2}}],[\"优先调用该方法\",{\"1\":{\"946\":1,\"951\":1}}],[\"优先于\",{\"1\":{\"430\":1}}],[\"优先级高于\",{\"1\":{\"1533\":1}}],[\"优先级高的运算符最先被执行\",{\"1\":{\"1241\":1}}],[\"优先级\",{\"0\":{\"1582\":1},\"1\":{\"1243\":1}}],[\"优先级很高\",{\"1\":{\"1194\":1}}],[\"优先级规则\",{\"0\":{\"337\":1}}],[\"优先级是根据由每种选择符类型构成的级连字符串计算而成的\",{\"1\":{\"18\":1}}],[\"优先级是基于不同种类选择器组成的匹配规则\",{\"1\":{\"16\":1}}],[\"优先级顺序\",{\"0\":{\"17\":1}}],[\"合并在\",{\"1\":{\"1661\":1}}],[\"合并结果是\",{\"1\":{\"500\":3}}],[\"合并两个有序数组\",{\"0\":{\"500\":1}}],[\"合并\",{\"1\":{\"437\":1,\"500\":1}}],[\"合并指定分支到当前分支\",{\"1\":{\"167\":1}}],[\"猎豹浏览器内核\",{\"1\":{\"436\":1}}],[\"俗称\",{\"1\":{\"436\":1}}],[\"却没有改变\",{\"1\":{\"430\":1}}],[\"命名导出\",{\"0\":{\"1651\":1},\"1\":{\"1650\":1}}],[\"命名导入\",{\"0\":{\"1626\":1},\"1\":{\"1625\":1,\"1661\":1}}],[\"命名模块重命名转发\",{\"1\":{\"1646\":2}}],[\"命名模块改默认模块\",{\"0\":{\"1644\":1}}],[\"命名模块导入\",{\"0\":{\"1601\":1}}],[\"命名空间\",{\"1\":{\"1683\":1}}],[\"命名空间导入\",{\"0\":{\"1627\":1},\"1\":{\"1625\":1,\"1661\":1}}],[\"命名空间冲突\",{\"1\":{\"1608\":1}}],[\"命名表达式\",{\"1\":{\"1484\":1}}],[\"命名参数或\",{\"1\":{\"1388\":1}}],[\"命名为\",{\"1\":{\"611\":1}}],[\"命名区别\",{\"0\":{\"612\":1},\"1\":{\"611\":1}}],[\"命中协商缓存条件\",{\"1\":{\"430\":1}}],[\"命令也是如此\",{\"1\":{\"1655\":1}}],[\"命令可以出现在模块的任何位置\",{\"1\":{\"1655\":1}}],[\"命令其实只是输出一个叫做\",{\"1\":{\"1652\":1}}],[\"命令用于规定模块的对外接口\",{\"1\":{\"1649\":1}}],[\"命令用于输入其他模块提供的功能\",{\"1\":{\"1624\":1}}],[\"命令和\",{\"1\":{\"1636\":1}}],[\"命令是编译阶段执行的\",{\"1\":{\"1633\":1}}],[\"命令无论写在文件中的哪一行\",{\"1\":{\"1633\":1}}],[\"命令无法取代\",{\"1\":{\"1593\":1}}],[\"命令具有提升效果\",{\"1\":{\"1633\":1}}],[\"命令输入的变量都是只读的\",{\"1\":{\"1631\":1}}],[\"命令能够接受什么参数\",{\"1\":{\"1593\":1}}],[\"命令做不到这一点\",{\"1\":{\"1593\":1}}],[\"命令要取代\",{\"1\":{\"1593\":1}}],[\"命令只能在模块的顶层\",{\"1\":{\"1593\":1}}],[\"命令只能用在\",{\"1\":{\"1342\":1}}],[\"命令叫做\",{\"1\":{\"1593\":1}}],[\"命令会被\",{\"1\":{\"1593\":1}}],[\"命令必须在\",{\"1\":{\"1341\":1}}],[\"命令的参数\",{\"1\":{\"1341\":1}}],[\"命令的语法糖\",{\"1\":{\"1338\":1}}],[\"命令的用法\",{\"1\":{\"191\":1}}],[\"命令就是内部\",{\"1\":{\"1338\":1}}],[\"命令后面是一个\",{\"1\":{\"1346\":1}}],[\"命令后面的\",{\"1\":{\"1345\":1}}],[\"命令后面则可以是\",{\"1\":{\"1338\":1}}],[\"命令后面只能是\",{\"1\":{\"1338\":1}}],[\"命令来表示异步\",{\"1\":{\"1338\":1}}],[\"命令模式\",{\"1\":{\"205\":2}}],[\"命令\",{\"1\":{\"188\":1,\"1074\":1,\"1374\":2,\"1636\":1}}],[\"命令组成\",{\"0\":{\"188\":1}}],[\"命令行含义\",{\"0\":{\"187\":1}}],[\"过去代码组织方式\",{\"1\":{\"1608\":1}}],[\"过去\",{\"1\":{\"625\":1,\"632\":1}}],[\"过程如下\",{\"1\":{\"453\":1,\"464\":1}}],[\"过期时间\",{\"1\":{\"429\":1}}],[\"过滤数组\",{\"1\":{\"349\":1}}],[\"仅当源模块只有一个导出时\",{\"1\":{\"1652\":1}}],[\"仅在内部使用\",{\"1\":{\"1534\":1}}],[\"仅在特定的布局模式下有用\",{\"1\":{\"329\":1}}],[\"仅仅只是引用类型的一个地址指针\",{\"1\":{\"1267\":1}}],[\"仅仅是为了确保合并结果可以顺利存放到\",{\"1\":{\"500\":1}}],[\"仅仅是为了标识链表的实际情况\",{\"1\":{\"491\":1}}],[\"仅获取自有\",{\"0\":{\"736\":1}}],[\"仅第一个对象实例化时初始化原型\",{\"1\":{\"570\":1}}],[\"仅浏览器可以缓存\",{\"1\":{\"429\":1}}],[\"头信息中的\",{\"1\":{\"429\":1}}],[\"头部大小\",{\"1\":{\"313\":1}}],[\"头部包含\",{\"1\":{\"126\":1}}],[\"头部\",{\"0\":{\"126\":1}}],[\"协商缓存命中返回\",{\"1\":{\"431\":1}}],[\"协商缓存不论命中与否都会发送一次请求\",{\"1\":{\"431\":1}}],[\"协商缓存\",{\"0\":{\"430\":1}}],[\"协商缓存和强缓存\",{\"0\":{\"428\":1}}],[\"协议等等\",{\"1\":{\"318\":1}}],[\"协议的有\",{\"1\":{\"311\":1}}],[\"协议的传输层协议\",{\"1\":{\"298\":1}}],[\"协议查询它的\",{\"1\":{\"152\":1}}],[\"协议\",{\"1\":{\"148\":1,\"318\":2,\"449\":1}}],[\"速度较快\",{\"1\":{\"423\":1}}],[\"线程还能做其他的事情\",{\"1\":{\"1547\":1}}],[\"线程是进程下的执行者\",{\"1\":{\"1547\":1}}],[\"线程是进程的子任务\",{\"1\":{\"423\":1}}],[\"线程共享所属进程的资源\",{\"1\":{\"424\":1}}],[\"线程的切换开销较小\",{\"1\":{\"423\":1}}],[\"线程间的通信和数据交换比进程间的通信更加方便\",{\"1\":{\"423\":1}}],[\"线程\",{\"0\":{\"423\":1},\"1\":{\"1547\":1}}],[\"消息必须等待其它消息处理完\",{\"1\":{\"1543\":1}}],[\"消息会被马上处理\",{\"1\":{\"1543\":1}}],[\"消息队列\",{\"1\":{\"422\":1}}],[\"消息传递\",{\"1\":{\"229\":2}}],[\"限制\",{\"1\":{\"418\":1}}],[\"避免全局变量的污染\",{\"1\":{\"1711\":1}}],[\"避免阻塞\",{\"1\":{\"1547\":1}}],[\"避免重复代码\",{\"1\":{\"1461\":1}}],[\"避免短时间内多次触发动画引起性能问题\",{\"1\":{\"1437\":1}}],[\"避免死循环的发生\",{\"1\":{\"1284\":1}}],[\"避免\",{\"1\":{\"1218\":1,\"1476\":1}}],[\"避免对环境产生依赖\",{\"1\":{\"603\":1}}],[\"避免设置多层内联样式\",{\"1\":{\"439\":1}}],[\"避免使用\",{\"1\":{\"439\":1,\"923\":1}}],[\"避免频繁操作\",{\"1\":{\"438\":1}}],[\"避免频繁操作样式\",{\"1\":{\"438\":1}}],[\"避免方式\",{\"1\":{\"417\":1,\"418\":1}}],[\"避免不必要的历史混乱\",{\"1\":{\"175\":1}}],[\"深冻结函数\",{\"1\":{\"540\":1}}],[\"深度监听需要一次性递归\",{\"1\":{\"401\":1}}],[\"深色看板\",{\"1\":{\"283\":1}}],[\"响应式的实现\",{\"0\":{\"403\":1}}],[\"响应式原理区别\",{\"0\":{\"400\":1}}],[\"响应头的\",{\"1\":{\"130\":1}}],[\"ƒ\",{\"1\":{\"394\":1}}],[\"获得对原型对象的引用\",{\"1\":{\"565\":1}}],[\"获得结果\",{\"1\":{\"393\":1}}],[\"获取函数调用的堆栈\",{\"1\":{\"1620\":1}}],[\"获取输出接口\",{\"1\":{\"1599\":1}}],[\"获取\",{\"1\":{\"1319\":1}}],[\"获取键值\",{\"1\":{\"1234\":1}}],[\"获取键名\",{\"1\":{\"1234\":1}}],[\"获取指定对象的自身属性描述符\",{\"1\":{\"1486\":1}}],[\"获取指定对象的自身可枚举\",{\"1\":{\"803\":1}}],[\"获取指定对象的原型对象\",{\"1\":{\"803\":1}}],[\"获取指定对象\",{\"1\":{\"803\":1}}],[\"获取指定对象某个自有\",{\"1\":{\"803\":3}}],[\"获取指定对象可枚举\",{\"1\":{\"803\":1}}],[\"获取到的数组中键名顺序与使用\",{\"1\":{\"792\":1}}],[\"获取对象的原型\",{\"1\":{\"650\":1}}],[\"获取方法的时候\",{\"1\":{\"607\":1}}],[\"获取当前进行对比的剩余数量值\",{\"1\":{\"488\":1}}],[\"获取基准数据的下标\",{\"1\":{\"488\":1}}],[\"获取div四个顶点和中心的坐标可以用\",{\"1\":{\"277\":1}}],[\"记录的属性是\",{\"1\":{\"1004\":1}}],[\"记得删除掉这个\",{\"1\":{\"392\":1}}],[\"记法\",{\"1\":{\"28\":4}}],[\"报的错是\",{\"1\":{\"1694\":1}}],[\"报错\",{\"1\":{\"383\":1,\"623\":1,\"923\":1,\"1109\":1,\"1183\":2,\"1218\":2,\"1225\":2,\"1226\":1,\"1335\":1,\"1401\":1,\"1613\":1,\"1634\":3,\"1700\":1}}],[\"报文最大生存时间\",{\"1\":{\"304\":1}}],[\"报文段回复服务端\",{\"1\":{\"304\":1}}],[\"报文段后\",{\"1\":{\"304\":1}}],[\"报文段进行确认\",{\"1\":{\"301\":1}}],[\"报文段\",{\"1\":{\"301\":4,\"304\":4}}],[\"报文后\",{\"1\":{\"153\":1}}],[\"报文\",{\"1\":{\"152\":1,\"302\":3}}],[\"甚至传递函数的参数\",{\"1\":{\"1275\":1}}],[\"甚至可以将另一个\",{\"1\":{\"1018\":1}}],[\"甚至不包括基础方法\",{\"1\":{\"548\":1}}],[\"甚至不是标记语言\",{\"1\":{\"2\":1}}],[\"甚至我们都不确定obj是否存在\",{\"1\":{\"381\":1}}],[\"麦科勒姆\",{\"1\":{\"375\":2}}],[\"安全控制\",{\"1\":{\"1505\":1}}],[\"安东尼\",{\"1\":{\"375\":2}}],[\"安装插件命令\",{\"1\":{\"215\":1}}],[\"詹姆斯\",{\"1\":{\"375\":2}}],[\"二者之间最主要的区别在于\",{\"1\":{\"1692\":1}}],[\"二元运算符\",{\"1\":{\"1246\":1}}],[\"二\",{\"1\":{\"1161\":1}}],[\"二级权限表示为\",{\"1\":{\"1161\":1}}],[\"二级用第\",{\"1\":{\"1161\":1}}],[\"二级管理员操作\",{\"1\":{\"1161\":1}}],[\"二级\",{\"1\":{\"1161\":1}}],[\"二是不使用\",{\"1\":{\"572\":1}}],[\"二分查找\",{\"0\":{\"503\":1}}],[\"二叉树\",{\"2\":{\"481\":1}}],[\"二叉树的层序遍历\",{\"0\":{\"479\":1}}],[\"二维数组变一维数组\",{\"1\":{\"374\":1}}],[\"二进制表示为开头是\",{\"1\":{\"245\":1}}],[\"二进制\",{\"1\":{\"245\":1}}],[\"二进制文件\",{\"1\":{\"186\":1}}],[\"失真\",{\"1\":{\"1476\":1}}],[\"失败喽\",{\"1\":{\"372\":1}}],[\"失效\",{\"1\":{\"40\":1}}],[\"失效场景\",{\"0\":{\"40\":1}}],[\"成熟的第三方模块社区\",{\"1\":{\"1616\":1}}],[\"成为了一个难以复用的函数\",{\"1\":{\"1502\":1}}],[\"成功删除的时候回返回\",{\"1\":{\"1101\":1}}],[\"成功喽\",{\"1\":{\"372\":1}}],[\"成员\",{\"1\":{\"229\":1,\"230\":1}}],[\"毫无疑问\",{\"1\":{\"1582\":1}}],[\"毫秒\",{\"1\":{\"1542\":1}}],[\"毫秒处才开始执行\",{\"1\":{\"1541\":1}}],[\"毫秒处执行的\",{\"1\":{\"1541\":1}}],[\"毫秒处结束执行\",{\"1\":{\"1541\":1}}],[\"毫秒处\",{\"1\":{\"1540\":1,\"1541\":1,\"1542\":1}}],[\"毫秒时的\",{\"1\":{\"1538\":1}}],[\"毫秒中只能执行这段代码块\",{\"1\":{\"1538\":1}}],[\"毫秒延迟的定时器\",{\"1\":{\"1537\":1}}],[\"毫秒的代码块要执行\",{\"1\":{\"1538\":1}}],[\"毫秒的时候再次触发\",{\"1\":{\"1542\":1}}],[\"毫秒的时候完成执行\",{\"1\":{\"1542\":1}}],[\"毫秒的时候代码块结束执行\",{\"1\":{\"1539\":1}}],[\"毫秒的时候\",{\"1\":{\"1538\":1,\"1542\":2}}],[\"毫秒的时候有一个发生了鼠标单击事件\",{\"1\":{\"1537\":1}}],[\"毫秒的时候有一个持续\",{\"1\":{\"1537\":1}}],[\"毫秒的时候设了两个\",{\"1\":{\"1537\":1}}],[\"毫秒的\",{\"1\":{\"1537\":1}}],[\"毫秒就执行\",{\"1\":{\"1446\":1}}],[\"毫秒执行\",{\"1\":{\"1446\":1}}],[\"毫秒之后再次点击才会再次执行\",{\"1\":{\"1435\":1}}],[\"毫秒内频繁点击按钮也不会再次执行\",{\"1\":{\"1435\":1}}],[\"毫秒后\",{\"1\":{\"1375\":1}}],[\"毫秒后我失败啦\",{\"1\":{\"380\":1,\"383\":2}}],[\"毫秒后我成功啦\",{\"1\":{\"371\":1,\"380\":1,\"383\":2}}],[\"毫米\",{\"1\":{\"25\":2}}],[\"跟\",{\"1\":{\"1693\":1}}],[\"跟踪记录每个值被引用的次数\",{\"1\":{\"1281\":1}}],[\"跟indexof有区别\",{\"1\":{\"364\":1}}],[\"跟正常流有什么不同\",{\"0\":{\"36\":1}}],[\"传统写法\",{\"1\":{\"1416\":1}}],[\"传值\",{\"1\":{\"1253\":2}}],[\"传递的只是函数的定义并不会立即执行\",{\"1\":{\"1454\":1}}],[\"传递异常对象到错误处理\",{\"1\":{\"1048\":1}}],[\"传递要检查的对象作为第一个参数\",{\"1\":{\"936\":1}}],[\"传递给绑定函数的参数跟在它们后面\",{\"1\":{\"1412\":1}}],[\"传递给绑定函数的参数会跟在它们的后面\",{\"1\":{\"1312\":1}}],[\"传递给\",{\"1\":{\"892\":1}}],[\"传递参数\",{\"0\":{\"636\":1}}],[\"传递一个参数表示降维的次数\",{\"1\":{\"374\":1}}],[\"传参\",{\"1\":{\"625\":1}}],[\"传入剩余参数\",{\"1\":{\"1412\":1}}],[\"传入的实参都写入一个单独的对象之中\",{\"1\":{\"1382\":1}}],[\"传入任何对象\",{\"1\":{\"1254\":1}}],[\"传入参数\",{\"1\":{\"662\":1}}],[\"传入指定的this值\",{\"1\":{\"392\":1,\"393\":1}}],[\"传入元素\",{\"1\":{\"364\":1}}],[\"传输速度\",{\"1\":{\"313\":1}}],[\"传输控制协议\",{\"1\":{\"297\":1,\"298\":1}}],[\"传输报文\",{\"1\":{\"152\":1}}],[\"传输层协议\",{\"0\":{\"297\":1}}],[\"传输层会发起一条到达服务器的\",{\"1\":{\"152\":1}}],[\"传输层\",{\"1\":{\"152\":1,\"297\":1,\"317\":1,\"318\":1}}],[\"罗斯\",{\"1\":{\"355\":1,\"375\":2}}],[\"科比\",{\"1\":{\"355\":4,\"375\":2}}],[\"找出那些不再需要继续使用的变量\",{\"1\":{\"1279\":1}}],[\"找到并赋值为\",{\"1\":{\"1677\":2}}],[\"找到这个变量后\",{\"1\":{\"1676\":1}}],[\"找到\",{\"1\":{\"494\":1}}],[\"找到恰当的cssom规则并应用\",{\"1\":{\"464\":1}}],[\"找到返回被找元素索引\",{\"1\":{\"355\":1}}],[\"找到返回被找元素\",{\"1\":{\"355\":1}}],[\"找不到返回\",{\"1\":{\"355\":2}}],[\"乱序解构\",{\"1\":{\"354\":1}}],[\"睡觉\",{\"1\":{\"354\":2}}],[\"张就会显得很浪费资源\",{\"1\":{\"1431\":1}}],[\"张就可以满足人类视觉需求的时候\",{\"1\":{\"1431\":1}}],[\"张或更多呢\",{\"1\":{\"1431\":1}}],[\"张的速度播放的\",{\"1\":{\"1431\":1}}],[\"张以上的图片时\",{\"1\":{\"1431\":1}}],[\"张飞\",{\"1\":{\"352\":1}}],[\"张三\",{\"1\":{\"341\":1,\"342\":1,\"343\":5,\"345\":1,\"352\":2,\"353\":2,\"354\":2,\"367\":2,\"368\":2,\"377\":5,\"378\":3}}],[\"王五\",{\"1\":{\"352\":1}}],[\"试想当\",{\"1\":{\"1557\":1}}],[\"试图查询这个不存在的对象的属性会报错\",{\"1\":{\"560\":1}}],[\"试图访问页面上不存在的\",{\"1\":{\"131\":1}}],[\"试数组中是否至少有一个元素通过了由提供的函数实现的测试\",{\"1\":{\"350\":1}}],[\"返回后函数执行完毕\",{\"1\":{\"1572\":1}}],[\"返回包含了原函数和新函数的\",{\"1\":{\"1505\":1}}],[\"返回缺省值\",{\"0\":{\"1370\":1}}],[\"返回结果\",{\"1\":{\"1355\":1}}],[\"返回该对象的结果\",{\"1\":{\"1346\":1}}],[\"返回该对象是否含有指定\",{\"1\":{\"753\":1}}],[\"返回第一个布尔值为\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"返回操作数的负值\",{\"1\":{\"1207\":1}}],[\"返回相除后余值\",{\"1\":{\"1207\":1}}],[\"返回比较\",{\"1\":{\"1203\":6}}],[\"返回语句特点\",{\"0\":{\"1033\":1}}],[\"返回链表的最后一个节点对象\",{\"1\":{\"1014\":1}}],[\"返回了\",{\"1\":{\"926\":1}}],[\"返回转换后的整数\",{\"1\":{\"913\":1}}],[\"返回转换后的浮点数\",{\"1\":{\"909\":1}}],[\"返回正常数字\",{\"1\":{\"910\":1}}],[\"返回表示该对象的字符串\",{\"1\":{\"834\":1}}],[\"返回表示指定\",{\"1\":{\"817\":1}}],[\"返回设置原型后的对象\",{\"1\":{\"829\":1}}],[\"返回处理后的对象\",{\"1\":{\"811\":1,\"824\":1}}],[\"返回创建实例对象的\",{\"1\":{\"805\":1}}],[\"返回对应类型的对象\",{\"1\":{\"800\":1}}],[\"返回对象所有可枚举\",{\"1\":{\"791\":1}}],[\"返回对象\",{\"1\":{\"572\":1}}],[\"返回boolean类型的值表示用于检测的对象是否可扩展\",{\"1\":{\"785\":1}}],[\"返回boolean类型的值表示用于检测的对象是否被冻结\",{\"1\":{\"773\":1}}],[\"返回指定对象的原始值\",{\"1\":{\"806\":1}}],[\"返回指定对象是否位于目标对象原型链上的\",{\"1\":{\"780\":1}}],[\"返回指定原型对象和可枚举属性的新对象\",{\"1\":{\"683\":1}}],[\"返回判断表达式的结果\",{\"1\":{\"761\":1}}],[\"返回一个\",{\"1\":{\"1593\":1}}],[\"返回一个箭头函数\",{\"1\":{\"1589\":1}}],[\"返回一个包裹了正确逻辑的函数\",{\"1\":{\"1470\":1}}],[\"返回一个函数\",{\"1\":{\"1446\":1}}],[\"返回一个对象\",{\"1\":{\"1230\":1}}],[\"返回一个数组\",{\"1\":{\"1230\":1}}],[\"返回一个编码后的\",{\"1\":{\"885\":1}}],[\"返回一个已经解码的\",{\"1\":{\"869\":1,\"874\":1}}],[\"返回一个表示该对象的字符串\",{\"1\":{\"806\":1}}],[\"返回一个给定对象自己的所有可枚举\",{\"1\":{\"803\":1}}],[\"返回一个迭代器对象\",{\"1\":{\"711\":1}}],[\"返回一个由该迭代对象条目提供对应属性的新对象\",{\"1\":{\"710\":1}}],[\"返回一个新的通过测试的成员的集合的数组\",{\"1\":{\"668\":1}}],[\"返回被冻结的对象\",{\"1\":{\"705\":1}}],[\"返回变更后的对象\",{\"1\":{\"688\":1,\"693\":1}}],[\"返回目标对象的原型对象\",{\"1\":{\"746\":1}}],[\"返回目标对象\",{\"1\":{\"677\":1,\"741\":1}}],[\"返回值由\",{\"1\":{\"1477\":1}}],[\"返回值为变量\",{\"1\":{\"1407\":1}}],[\"返回值状态变化\",{\"0\":{\"1345\":1}}],[\"返回值类型\",{\"0\":{\"1344\":1}}],[\"返回值是复杂数据类型\",{\"1\":{\"1477\":1}}],[\"返回值是基本数据类型的话\",{\"1\":{\"1477\":1}}],[\"返回值是\",{\"1\":{\"1338\":1}}],[\"返回值\",{\"0\":{\"1035\":1,\"1100\":1,\"1122\":1},\"1\":{\"668\":1,\"688\":1,\"699\":1,\"730\":1,\"746\":1,\"829\":1,\"1197\":1}}],[\"返回这个对象\",{\"1\":{\"656\":1}}],[\"返回的字符串\",{\"1\":{\"1504\":1}}],[\"返回的值\",{\"1\":{\"1449\":1}}],[\"返回的\",{\"1\":{\"1348\":1}}],[\"返回的函数\",{\"1\":{\"1296\":1}}],[\"返回的数组中键值的顺序与使用循环语句获取的键值组合一致\",{\"1\":{\"842\":1}}],[\"返回的是\",{\"1\":{\"648\":1}}],[\"返回的对象与构造函数或者与构造函数的原型属性之间没有关系\",{\"1\":{\"571\":1}}],[\"返回新实例对象\",{\"1\":{\"640\":1}}],[\"返回答案\",{\"1\":{\"521\":1}}],[\"返回其右侧操作数\",{\"1\":{\"1256\":1}}],[\"返回其本身\",{\"1\":{\"800\":1,\"807\":1}}],[\"返回其最大和\",{\"1\":{\"524\":1}}],[\"返回其\",{\"1\":{\"521\":1}}],[\"返回其节点值的\",{\"1\":{\"479\":1}}],[\"返回规则如下\",{\"1\":{\"509\":1}}],[\"返回你可以从这笔交易中获取的最大利润\",{\"1\":{\"485\":1}}],[\"返回堆顶元素\",{\"1\":{\"482\":1}}],[\"返回304等对应状态码\",{\"1\":{\"464\":1}}],[\"返回304状态\",{\"1\":{\"430\":1}}],[\"返回代理对象\",{\"1\":{\"407\":1}}],[\"返回result\",{\"1\":{\"392\":1}}],[\"返回最快那个成功\",{\"1\":{\"383\":1}}],[\"返回\",{\"1\":{\"380\":1,\"470\":2,\"485\":1,\"491\":1,\"509\":2,\"515\":1,\"564\":4,\"577\":1,\"646\":1,\"730\":1,\"767\":1,\"858\":1,\"898\":1,\"910\":1,\"943\":1,\"1036\":1,\"1116\":1,\"1201\":1,\"1202\":1,\"1203\":14}}],[\"返回数组中的所有素数\",{\"1\":{\"349\":1}}],[\"返回http响应\",{\"0\":{\"154\":1},\"1\":{\"147\":1}}],[\"配合定时器\",{\"1\":{\"1312\":1}}],[\"配合变量的解构赋值获取键名和键值就非常方便\",{\"1\":{\"1234\":1}}],[\"配合箭头函数\",{\"1\":{\"347\":1,\"348\":1}}],[\"配置文件\",{\"1\":{\"1632\":1}}],[\"配置使用的模块路径\",{\"1\":{\"1617\":1}}],[\"配置数据属性\",{\"1\":{\"541\":1}}],[\"配置忽略文件\",{\"1\":{\"171\":1}}],[\"配置\",{\"1\":{\"171\":1}}],[\"索引赋值\",{\"0\":{\"1094\":1}}],[\"索引从\",{\"1\":{\"491\":1}}],[\"索引\",{\"1\":{\"347\":1,\"348\":1}}],[\"遍历\",{\"0\":{\"1234\":1}}],[\"遍历对象\",{\"1\":{\"695\":1}}],[\"遍历对象所有的属性\",{\"1\":{\"402\":1}}],[\"遍历劫持对象的所有属性\",{\"1\":{\"695\":1}}],[\"遍历的元素范围在第一次调用回调函数之前就已经确定了\",{\"1\":{\"669\":1}}],[\"遍历到\",{\"1\":{\"669\":1}}],[\"遍历到叶子节点\",{\"1\":{\"470\":1}}],[\"遍历到null节点\",{\"1\":{\"470\":1}}],[\"遍历顺序有可能不是按照实际数组的内部顺序\",{\"1\":{\"388\":1}}],[\"遍历方法\",{\"1\":{\"356\":2}}],[\"遍历项\",{\"1\":{\"347\":1,\"348\":1}}],[\"遍历数组\",{\"1\":{\"347\":1}}],[\"箭头函数的调用\",{\"1\":{\"1590\":1}}],[\"箭头函数的绑定无法被修改\",{\"1\":{\"1589\":1}}],[\"箭头函数可以像\",{\"1\":{\"1589\":1}}],[\"箭头函数可以让\",{\"1\":{\"1375\":2}}],[\"箭头函数拥有静态的上下文\",{\"1\":{\"1589\":1}}],[\"箭头函数不使用\",{\"1\":{\"1589\":1}}],[\"箭头函数不可作为构造函数\",{\"1\":{\"346\":1}}],[\"箭头函数并不是使用\",{\"1\":{\"1589\":1}}],[\"箭头函数内部\",{\"1\":{\"1376\":1}}],[\"箭头函数内部的变量\",{\"1\":{\"1375\":1}}],[\"箭头函数转成\",{\"1\":{\"1375\":1}}],[\"箭头函数导致\",{\"1\":{\"1375\":1}}],[\"箭头函数中的\",{\"0\":{\"1375\":1}}],[\"箭头函数写法\",{\"1\":{\"1373\":2}}],[\"箭头函数会帮你\",{\"1\":{\"1370\":1}}],[\"箭头函数参数\",{\"0\":{\"1363\":1}}],[\"箭头函数只能用\",{\"1\":{\"1362\":1}}],[\"箭头函数表达式更适用于那些本来需要匿名函数的业务场景\",{\"1\":{\"1361\":1}}],[\"箭头函数表达式的语法比函数表达式更短\",{\"1\":{\"1361\":1}}],[\"箭头函数没有自己的\",{\"1\":{\"1375\":1}}],[\"箭头函数没有自己的this\",{\"1\":{\"346\":1}}],[\"箭头函数没有原型对象\",{\"1\":{\"346\":1}}],[\"箭头函数没有arguments对象\",{\"1\":{\"346\":1}}],[\"箭头函数\",{\"0\":{\"346\":1,\"1361\":1,\"1589\":1},\"1\":{\"607\":1,\"1375\":1}}],[\"箭头丝带\",{\"0\":{\"262\":1}}],[\"男\",{\"1\":{\"345\":1,\"367\":2,\"368\":2,\"377\":5}}],[\"剩下的实参没有办法直接获得\",{\"1\":{\"1382\":1}}],[\"剩下的形参都将设置为\",{\"1\":{\"1382\":1}}],[\"剩下的其它所有数按位非都不为\",{\"1\":{\"1160\":1}}],[\"剩下的每个单词的首字母大写\",{\"1\":{\"246\":1}}],[\"剩余的属性便是不可枚举的属性\",{\"1\":{\"737\":1}}],[\"剩余参数搭配的变量是一个\",{\"1\":{\"1393\":1}}],[\"剩余参数\",{\"0\":{\"1365\":1,\"1393\":1},\"1\":{\"343\":1,\"1382\":1,\"1393\":1,\"1394\":1}}],[\"李四\",{\"1\":{\"342\":1,\"352\":2}}],[\"兄弟选择器\",{\"1\":{\"336\":1}}],[\"兄弟选择符\",{\"1\":{\"13\":1}}],[\"轴线占满整个交叉轴\",{\"1\":{\"332\":1}}],[\"轴线之间的间隔比轴线与边框的间隔大一倍\",{\"1\":{\"332\":1}}],[\"轴线之间的间隔平均分布\",{\"1\":{\"332\":1}}],[\"轴线\",{\"1\":{\"332\":1}}],[\"轴方向移了一层\",{\"1\":{\"37\":1}}],[\"交互需要占用更多的内存空间和消耗更多的\",{\"1\":{\"1432\":1}}],[\"交叉轴的开始位置叫做cross\",{\"1\":{\"332\":1}}],[\"交换变量的值\",{\"0\":{\"1229\":1}}],[\"交换数据进行排序\",{\"1\":{\"488\":1}}],[\"交换\",{\"1\":{\"301\":1,\"482\":1}}],[\"预编译阶段进行变量声明提升和函数声明提升后\",{\"1\":{\"1700\":1}}],[\"预编译阶段\",{\"1\":{\"1698\":1}}],[\"预先设置一些参数\",{\"1\":{\"1586\":1}}],[\"预期传入的参数个数就不包括这个参数了\",{\"1\":{\"1406\":1}}],[\"预组合\",{\"1\":{\"329\":1}}],[\"预定义全局函数和全局属性\",{\"1\":{\"1561\":1}}],[\"预定义了很多全局变量和函数\",{\"1\":{\"251\":1}}],[\"预定义变量和函数\",{\"0\":{\"251\":1}}],[\"特性规范\",{\"0\":{\"1630\":1,\"1653\":1}}],[\"特性\",{\"1\":{\"1538\":1}}],[\"特性被设置为\",{\"1\":{\"578\":1}}],[\"特殊要注意的是\",{\"1\":{\"1207\":1}}],[\"特殊的\",{\"0\":{\"1132\":1}}],[\"特别是当我们不知道变量的数量的时候\",{\"1\":{\"1178\":1}}],[\"特别是在创建多列布局或类似网格的布局时非常有用\",{\"1\":{\"325\":1}}],[\"特定类型的所有实例共享的属性和方法\",{\"1\":{\"575\":1}}],[\"特点\",{\"0\":{\"310\":1,\"1329\":1,\"1474\":1},\"1\":{\"1616\":2,\"1617\":1,\"1618\":1,\"1619\":1}}],[\"清除定时器\",{\"1\":{\"1446\":1}}],[\"清除数组空字符\",{\"0\":{\"673\":1}}],[\"清除浮动\",{\"1\":{\"325\":1}}],[\"清屏\",{\"1\":{\"224\":1}}],[\"面试相关\",{\"0\":{\"1735\":1}}],[\"面板定位问题发生的位置\",{\"1\":{\"1285\":1}}],[\"面板录制页面内存占用情况随时间变化的图像\",{\"1\":{\"1285\":1}}],[\"面经\",{\"2\":{\"322\":1,\"327\":1,\"330\":1,\"333\":1,\"338\":1,\"360\":1,\"386\":1,\"389\":1,\"395\":1,\"398\":1,\"404\":1,\"409\":1,\"414\":1,\"420\":1,\"427\":1,\"434\":1,\"441\":1,\"447\":1,\"452\":1,\"463\":1,\"466\":1,\"468\":1,\"471\":1,\"474\":1,\"477\":1,\"480\":1,\"483\":1,\"486\":1,\"489\":1,\"492\":1,\"495\":1,\"498\":1,\"501\":1,\"504\":1,\"507\":1,\"510\":1,\"513\":1,\"516\":1,\"519\":1,\"522\":1,\"525\":1}}],[\"面向切面编程\",{\"0\":{\"1505\":1}}],[\"面向有连接是指在数据通信开始之前先做好两端之间的准备工作\",{\"1\":{\"300\":1}}],[\"面向字节流\",{\"1\":{\"298\":1}}],[\"面向连接\",{\"1\":{\"298\":2,\"300\":1,\"313\":1}}],[\"面向对象程序设计中的概念主要包括\",{\"1\":{\"229\":1}}],[\"面向对象程序设计\",{\"1\":{\"228\":1}}],[\"面向对象编程\",{\"0\":{\"228\":1}}],[\"透明传送比特流\",{\"1\":{\"318\":1}}],[\"透明背景色\",{\"1\":{\"99\":1}}],[\"段\",{\"1\":{\"317\":1}}],[\"段落分割符\",{\"1\":{\"238\":1}}],[\"七层模型\",{\"0\":{\"317\":1}}],[\"高阶函数\",{\"0\":{\"1500\":1},\"1\":{\"1500\":1}}],[\"高级语言解释器嵌入了\",{\"1\":{\"1276\":1}}],[\"高位移出\",{\"1\":{\"1148\":1}}],[\"高版本浏览器下为\",{\"1\":{\"1137\":1}}],[\"高\",{\"1\":{\"313\":1}}],[\"高度是由\",{\"1\":{\"93\":1}}],[\"低位的空位补零\",{\"1\":{\"1148\":1}}],[\"低位补\",{\"1\":{\"1148\":1}}],[\"低\",{\"1\":{\"313\":1}}],[\"低则逐渐变灰\",{\"1\":{\"110\":1}}],[\"量级\",{\"1\":{\"313\":1}}],[\"快\",{\"1\":{\"313\":1}}],[\"快速排序\",{\"1\":{\"488\":1}}],[\"快速清屏\",{\"0\":{\"224\":1}}],[\"快速生成工具\",{\"1\":{\"59\":1}}],[\"慢\",{\"1\":{\"313\":1}}],[\"半双工数据传输允许数据在两个方向上传输\",{\"1\":{\"312\":1}}],[\"半方大的空白\",{\"1\":{\"121\":1}}],[\"拥塞控制\",{\"1\":{\"313\":1}}],[\"拥塞控制机制\",{\"0\":{\"306\":1}}],[\"拥有\",{\"1\":{\"1579\":1}}],[\"拥有两个元素的数组\",{\"1\":{\"1091\":1}}],[\"拥有者所在的组\",{\"1\":{\"208\":1}}],[\"拥有者的权限\",{\"1\":{\"208\":1}}],[\"拥有更大优先级的声明将会被采用\",{\"1\":{\"19\":1}}],[\"信息\",{\"1\":{\"304\":1}}],[\"断开连接\",{\"1\":{\"304\":2}}],[\"怕服务器端不知道要关闭\",{\"1\":{\"304\":1}}],[\"准备工作做完\",{\"1\":{\"1572\":1}}],[\"准备好关闭连接了\",{\"1\":{\"304\":1}}],[\"准确\",{\"1\":{\"1142\":1}}],[\"准确地说\",{\"1\":{\"157\":1,\"864\":1}}],[\"准确说应该是http服务器\",{\"1\":{\"153\":1}}],[\"好比在\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"好处是速度极快\",{\"1\":{\"1142\":1}}],[\"好了\",{\"1\":{\"304\":1}}],[\"好在有一个专门用来处理最后一行对齐的属性\",{\"1\":{\"81\":1}}],[\"加强代码可读性\",{\"1\":{\"1461\":1}}],[\"加强代码可维护性\",{\"1\":{\"1461\":1}}],[\"加入形参\",{\"1\":{\"1572\":1}}],[\"加入函数节流之后\",{\"1\":{\"1438\":1}}],[\"加入模块的指定方法\",{\"0\":{\"1235\":1}}],[\"加括号的函数体返回对象字面表达式\",{\"1\":{\"1371\":1}}],[\"加法赋值\",{\"1\":{\"1238\":1}}],[\"加法\",{\"1\":{\"1207\":1,\"1243\":1}}],[\"加号表示\",{\"1\":{\"1169\":1}}],[\"加号运算符\",{\"0\":{\"951\":1}}],[\"加了私有属性\",{\"1\":{\"615\":1}}],[\"加了会报错\",{\"1\":{\"599\":1}}],[\"加速\",{\"1\":{\"439\":1}}],[\"加载上面模块的写法如下\",{\"1\":{\"1658\":1}}],[\"加载模块代码\",{\"1\":{\"1629\":1}}],[\"加载模块成功以后\",{\"1\":{\"1599\":1}}],[\"加载模块时\",{\"1\":{\"1235\":1}}],[\"加载不同的模块\",{\"1\":{\"1596\":1,\"1597\":1}}],[\"加载\",{\"1\":{\"438\":1}}],[\"加载方式\",{\"1\":{\"438\":1}}],[\"加快了客户端网页的加载速度\",{\"1\":{\"432\":1}}],[\"加密和压缩\",{\"1\":{\"317\":1}}],[\"加\",{\"1\":{\"304\":1}}],[\"加上\",{\"1\":{\"629\":1}}],[\"加上子类自己的实例属性和方法\",{\"1\":{\"619\":1}}],[\"加上分号也会在某些情况下增进代码的性能\",{\"1\":{\"253\":1}}],[\"加上一些专家学者公开自己认为\",{\"1\":{\"143\":1}}],[\"意为\",{\"1\":{\"332\":1}}],[\"意思是说\",{\"1\":{\"304\":1}}],[\"意味着\",{\"1\":{\"1670\":1,\"1684\":1}}],[\"意味着运算过程是可延续的\",{\"1\":{\"1504\":1}}],[\"意味着已有属性不可删除\",{\"1\":{\"539\":1,\"540\":1}}],[\"意味着元件的几何尺寸变了\",{\"1\":{\"158\":1}}],[\"意味着该\",{\"1\":{\"128\":1}}],[\"携带了\",{\"1\":{\"303\":1}}],[\"攻击的本质是利用\",{\"1\":{\"418\":1}}],[\"攻击的常见方法\",{\"1\":{\"417\":1}}],[\"攻击者通过在网站注入恶意脚本\",{\"1\":{\"417\":1}}],[\"攻击指的是跨站脚本攻击\",{\"1\":{\"417\":1}}],[\"攻击\",{\"1\":{\"303\":1}}],[\"肯定接收到第二次\",{\"1\":{\"303\":1}}],[\"往往组件的组成就是以上四个方面\",{\"1\":{\"1621\":1}}],[\"往往都保存在栈内存中\",{\"1\":{\"1263\":1}}],[\"往往需要指定输入的方法\",{\"1\":{\"1235\":1}}],[\"往往由于网络传输的不稳定原因丢失了数据包\",{\"1\":{\"303\":1}}],[\"往上翻可以查看历史操作\",{\"1\":{\"224\":1}}],[\"握手报文\",{\"0\":{\"302\":1}}],[\"握手过程中传送的包里\",{\"1\":{\"301\":1}}],[\"握手的目标\",{\"0\":{\"301\":1}}],[\"随着函数的执行\",{\"1\":{\"1572\":1}}],[\"随后初始化活动对象\",{\"1\":{\"1572\":1}}],[\"随后表达式的值会与结构中的每个\",{\"1\":{\"1040\":1}}],[\"随后子类构造函数又自定义自身的属性\",{\"1\":{\"662\":1}}],[\"随后客户端与服务器端之间可以开始传输数据了\",{\"1\":{\"301\":1}}],[\"随机产生一个序列号码\",{\"1\":{\"301\":1}}],[\"状态的\",{\"1\":{\"1338\":1}}],[\"状态\",{\"1\":{\"301\":3,\"303\":2,\"304\":5,\"1344\":1,\"1348\":2}}],[\"客户端\",{\"0\":{\"1138\":1}}],[\"客户端等待了\",{\"1\":{\"304\":1}}],[\"客户端收到\",{\"1\":{\"304\":1}}],[\"客户端收到服务端的\",{\"1\":{\"301\":1}}],[\"客户端设置\",{\"1\":{\"304\":1}}],[\"客户端也没有一个确认说要关闭还是要创建这个请求\",{\"1\":{\"303\":1}}],[\"客户端可能设置了超时时间关闭了连接创建\",{\"1\":{\"303\":1}}],[\"客户端一直没有收到服务端返回的数据包\",{\"1\":{\"303\":1}}],[\"客户端与服务器才正式开始传送数据\",{\"1\":{\"301\":1}}],[\"客户端和服务器端进入\",{\"1\":{\"301\":1}}],[\"客户端进入\",{\"1\":{\"301\":1,\"304\":1}}],[\"客户端发送连接请求报文段\",{\"1\":{\"301\":1}}],[\"客户端发送一个带有syn标志的数据包给服务端\",{\"1\":{\"151\":1}}],[\"置为\",{\"1\":{\"301\":1}}],[\"编译的一部分工作就是找到所有的声明\",{\"1\":{\"1698\":1}}],[\"编译引擎执行时根据查找的目的进行\",{\"1\":{\"1670\":1}}],[\"编译过程详解\",{\"0\":{\"1670\":1}}],[\"编译过程中的关键角色\",{\"1\":{\"1669\":1}}],[\"编译过程\",{\"0\":{\"1669\":1}}],[\"编译\",{\"1\":{\"1665\":1}}],[\"编译结果也不能在分布式系统中进行移植\",{\"1\":{\"1665\":1}}],[\"编译成\",{\"1\":{\"1619\":1}}],[\"编译原理\",{\"0\":{\"1665\":1},\"1\":{\"1552\":1}}],[\"编译阶段\",{\"0\":{\"1664\":1,\"1764\":1},\"1\":{\"1550\":1,\"1668\":1}}],[\"编译器可以在代码生成的同时处理声明和值的定义\",{\"1\":{\"1670\":1}}],[\"编译器在作用域声明变量\",{\"1\":{\"1670\":1}}],[\"编译器会忽略该声明\",{\"1\":{\"1670\":1}}],[\"编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中\",{\"1\":{\"1670\":1}}],[\"编译器会优化掉这项额外的工作\",{\"1\":{\"1194\":1}}],[\"编译器首先会将这段代码分解成词法单元\",{\"1\":{\"1670\":1}}],[\"编译器\",{\"1\":{\"1669\":1}}],[\"编译器自动转换\",{\"1\":{\"948\":1}}],[\"编码\",{\"1\":{\"887\":1}}],[\"编码uri\",{\"1\":{\"881\":1}}],[\"编码格式转化成\",{\"1\":{\"878\":1}}],[\"编码的内容\",{\"1\":{\"869\":1}}],[\"编码中很少直接使用到\",{\"1\":{\"858\":1,\"926\":1}}],[\"编程中\",{\"1\":{\"301\":1,\"304\":1}}],[\"编辑\",{\"0\":{\"205\":1}}],[\"窗口比例因子\",{\"1\":{\"301\":1}}],[\"窗口大小信息\",{\"1\":{\"301\":1}}],[\"初始的时候置为空对象\",{\"1\":{\"1616\":1}}],[\"初始化的结果是一个新创建的数组\",{\"1\":{\"1090\":1}}],[\"初始化表达式\",{\"1\":{\"1009\":1}}],[\"初始化一个新的\",{\"1\":{\"165\":1}}],[\"初始序列号\",{\"1\":{\"301\":1}}],[\"确定其作用域\",{\"1\":{\"1698\":1}}],[\"确定当前执行的代码对这些标识符的访问权限\",{\"1\":{\"1669\":1}}],[\"确定\",{\"1\":{\"1555\":1}}],[\"确定机械及电气规范\",{\"1\":{\"317\":1}}],[\"确保你的回调函数使用指定的\",{\"1\":{\"1580\":1}}],[\"确保父元素包含浮动子元素的高度\",{\"1\":{\"325\":1}}],[\"确保计算机通信的数据及时传送\",{\"1\":{\"318\":1}}],[\"确保用户在不同平台上都能获得一致的体验\",{\"1\":{\"139\":1}}],[\"确认后\",{\"1\":{\"301\":1}}],[\"确认后设置确认号码\",{\"1\":{\"301\":1}}],[\"确认序号有效\",{\"1\":{\"299\":1}}],[\"流量控制机制\",{\"0\":{\"307\":1}}],[\"流量缓冲\",{\"1\":{\"298\":1}}],[\"流\",{\"1\":{\"298\":1}}],[\"丢弃被移出的所有位\",{\"1\":{\"1151\":2}}],[\"丢弃高位\",{\"1\":{\"1148\":1}}],[\"丢包后数据丢失\",{\"1\":{\"313\":1}}],[\"丢包时通过重传机制进而增加时延实现可靠性\",{\"1\":{\"298\":1}}],[\"丢失\",{\"1\":{\"292\":1}}],[\"简洁的代码\",{\"1\":{\"1689\":1}}],[\"简而言之\",{\"1\":{\"1677\":1}}],[\"简化逻辑\",{\"1\":{\"1462\":1}}],[\"简写的操作符\",{\"1\":{\"1238\":1}}],[\"简写操作符\",{\"1\":{\"1169\":1}}],[\"简单对象封装\",{\"1\":{\"1612\":1}}],[\"简单来说就是有某种方法可以将\",{\"1\":{\"1668\":1}}],[\"简单来说就是管理数据的\",{\"1\":{\"412\":1}}],[\"简单来说\",{\"1\":{\"1431\":1,\"1438\":1,\"1444\":1,\"1666\":1,\"1674\":1}}],[\"简单记忆\",{\"1\":{\"1147\":1}}],[\"简单工厂\",{\"1\":{\"584\":1}}],[\"简单文件传输协议\",{\"1\":{\"311\":1}}],[\"简单网络管理协议\",{\"1\":{\"311\":1}}],[\"简单说就是它的父元素的内容框\",{\"1\":{\"36\":1}}],[\"简称数据报\",{\"1\":{\"318\":1}}],[\"简称\",{\"1\":{\"298\":1,\"332\":2,\"1621\":1}}],[\"尽量避免使用\",{\"1\":{\"1589\":1}}],[\"尽量使用前置操作符\",{\"1\":{\"1194\":1}}],[\"尽量使用异步加载js资源\",{\"1\":{\"438\":1}}],[\"尽可能在\",{\"1\":{\"439\":1}}],[\"尽可能屏蔽掉具体传输介质和物理设备的差异\",{\"1\":{\"318\":1}}],[\"尽可能快地将数据送往接收进程\",{\"1\":{\"299\":1}}],[\"尽最大努力交付\",{\"1\":{\"310\":1}}],[\"尽最大努力的数据传输服务\",{\"1\":{\"297\":1}}],[\"尽管函数作用域是最常见的作用域单元\",{\"1\":{\"1689\":1}}],[\"尽管此处修改的对象属性\",{\"1\":{\"1631\":1}}],[\"尽管构造函数看起来像一个方法调用\",{\"1\":{\"1525\":1}}],[\"尽管应该在类的构造函数中创建自己属性\",{\"1\":{\"1486\":1}}],[\"尽管应该在类的构造函数中创建自己的属性\",{\"1\":{\"604\":1}}],[\"尽管他们相互独立\",{\"1\":{\"1267\":1}}],[\"尽管单独的语句块是合法的语句\",{\"1\":{\"1075\":1}}],[\"尽管括号不是必需的\",{\"1\":{\"930\":1}}],[\"尽管它是规范允许的\",{\"1\":{\"1652\":1}}],[\"尽管它们可能被覆盖\",{\"1\":{\"804\":1}}],[\"尽管它实现的语言被正式地称作为\",{\"1\":{\"144\":1}}],[\"尽管可以这样做\",{\"1\":{\"580\":1}}],[\"尽管\",{\"1\":{\"235\":1,\"578\":1,\"1124\":1}}],[\"延迟\",{\"1\":{\"1427\":1}}],[\"延迟脚本能访问完整文档树\",{\"1\":{\"464\":1}}],[\"延迟节流\",{\"0\":{\"293\":1},\"1\":{\"293\":1,\"294\":1}}],[\"延迟防抖最好用定时器实现\",{\"1\":{\"289\":1}}],[\"延迟防抖\",{\"0\":{\"289\":1},\"1\":{\"289\":1}}],[\"播放事件等\",{\"1\":{\"291\":1}}],[\"让我们来看看如何处理上面这段代码\",{\"1\":{\"1557\":1}}],[\"让我们来剖析一下红色段落文字的\",{\"1\":{\"3\":1}}],[\"让我们类比执行上下文栈是一个数组\",{\"1\":{\"1557\":1}}],[\"让我们看看这里发生了什么事情\",{\"1\":{\"1537\":1}}],[\"让函数继续返回一个可执行的函数\",{\"1\":{\"1504\":1}}],[\"让变量\",{\"1\":{\"1282\":1}}],[\"让浏览器使用本地缓存\",{\"1\":{\"430\":1}}],[\"让服务端和客户端能及时察觉到网络原因导致的网络连接的关闭的问题\",{\"1\":{\"303\":1}}],[\"让\",{\"1\":{\"289\":1,\"1260\":1}}],[\"立即调用函数表达式\",{\"1\":{\"1613\":1}}],[\"立即开始执行\",{\"1\":{\"1542\":1}}],[\"立即执行函数表达式\",{\"0\":{\"1686\":1},\"1\":{\"1686\":1}}],[\"立即执行\",{\"1\":{\"288\":1}}],[\"立刻重启\",{\"1\":{\"190\":1}}],[\"立刻关机\",{\"1\":{\"190\":1}}],[\"短路操作\",{\"1\":{\"1253\":1}}],[\"短\",{\"1\":{\"1142\":1}}],[\"短信验证码\",{\"1\":{\"287\":1}}],[\"短横线\",{\"1\":{\"54\":1}}],[\"节流\",{\"0\":{\"286\":1,\"291\":1}}],[\"节点上添加内容\",{\"1\":{\"1551\":1}}],[\"节点都设置为隐藏\",{\"1\":{\"1502\":1}}],[\"节点添加事件的函数\",{\"1\":{\"1466\":1}}],[\"节点放到点击节点的回调中\",{\"1\":{\"1286\":1}}],[\"节点在\",{\"1\":{\"1286\":1}}],[\"节点的内存被回收要满足两点\",{\"1\":{\"1286\":1}}],[\"节点的背景\",{\"1\":{\"63\":1}}],[\"节点创建cssom树\",{\"1\":{\"464\":1}}],[\"节点到\",{\"1\":{\"16\":1}}],[\"节点\",{\"1\":{\"15\":1,\"1286\":3,\"1502\":1}}],[\"防止函数调用应用默认绑定规则\",{\"1\":{\"1587\":1}}],[\"防止多次点击提交按钮\",{\"1\":{\"1447\":1}}],[\"防止超高频次触发位置变动\",{\"1\":{\"1437\":1}}],[\"防止报错\",{\"1\":{\"1253\":1}}],[\"防止外边距重叠\",{\"1\":{\"325\":1}}],[\"防抖完整版\",{\"1\":{\"290\":1}}],[\"防抖\",{\"0\":{\"286\":1,\"287\":1}}],[\"防火墙操作\",{\"0\":{\"217\":1},\"1\":{\"217\":1}}],[\"管理和终止会话\",{\"1\":{\"317\":1}}],[\"管理看板\",{\"1\":{\"283\":1}}],[\"管理远程仓库\",{\"1\":{\"168\":1}}],[\"登录界面\",{\"0\":{\"280\":1}}],[\"去找foo这个值\",{\"1\":{\"1670\":1}}],[\"去掉\",{\"1\":{\"1282\":1}}],[\"去掉括号会报错\",{\"1\":{\"1249\":1}}],[\"去重\",{\"1\":{\"476\":3}}],[\"去辅助实现了\",{\"1\":{\"277\":1}}],[\"去除尾部空格\",{\"1\":{\"378\":1}}],[\"去除首部空格\",{\"1\":{\"378\":1}}],[\"去除\",{\"1\":{\"40\":1,\"1407\":1}}],[\"总是返回一个字符串\",{\"1\":{\"1125\":1}}],[\"总是在任意代码执行之前处理的\",{\"1\":{\"1065\":1}}],[\"总是在一段一段的链路上传送的\",{\"1\":{\"318\":1}}],[\"总是指向函数定义生效时所在的对象\",{\"1\":{\"1375\":1}}],[\"总是指向\",{\"1\":{\"624\":2,\"1375\":1}}],[\"总是被优先调用\",{\"1\":{\"460\":1}}],[\"总是相对于小的那个\",{\"1\":{\"24\":1}}],[\"总是相对于大的那个\",{\"1\":{\"24\":1}}],[\"总结起来就是\",{\"1\":{\"1670\":1}}],[\"总结一些结论了\",{\"1\":{\"1557\":1}}],[\"总结\",{\"0\":{\"277\":1,\"541\":1,\"1036\":1,\"1151\":1,\"1268\":1},\"1\":{\"653\":1,\"1407\":1,\"1437\":1,\"1447\":1,\"1565\":1,\"1616\":1,\"1700\":1}}],[\"依赖模糊\",{\"1\":{\"1614\":1}}],[\"依次经历了以下几个过程\",{\"1\":{\"1564\":1}}],[\"依次执行那些事件所对应的回调函数\",{\"1\":{\"1532\":1}}],[\"依次处理剩余的参数\",{\"1\":{\"1416\":1}}],[\"依次为\",{\"1\":{\"1326\":1}}],[\"依此类推\",{\"1\":{\"927\":1}}],[\"依然会让\",{\"1\":{\"1709\":1}}],[\"依然不受影响\",{\"1\":{\"1407\":1}}],[\"依然可以拿到它们\",{\"1\":{\"613\":1}}],[\"依然是将\",{\"1\":{\"274\":1}}],[\"依据各自语言的规则\",{\"1\":{\"91\":1}}],[\"依据对象树的逻辑结构\",{\"1\":{\"16\":2}}],[\"种\",{\"1\":{\"272\":1}}],[\"种情况尺寸都不会主动超过父级容器宽度\",{\"1\":{\"48\":1}}],[\"倾斜再旋转一定角度实现\",{\"1\":{\"272\":1}}],[\"纯css实现\",{\"0\":{\"270\":1}}],[\"纯粹的\",{\"1\":{\"136\":1}}],[\"绚丽流动边框\",{\"0\":{\"265\":1}}],[\"悬挂标签\",{\"0\":{\"264\":1}}],[\"炫酷丝带效果\",{\"0\":{\"259\":1}}],[\"巧用伪元素before和after制作绚丽效果\",{\"0\":{\"256\":1}}],[\"`export\",{\"1\":{\"1639\":1}}],[\"`bar\",{\"1\":{\"1611\":1,\"1612\":2,\"1613\":1,\"1614\":1}}],[\"`boolean`\",{\"1\":{\"753\":1}}],[\"`hi\",{\"1\":{\"1490\":1,\"1491\":2}}],[\"`https\",{\"1\":{\"1449\":2}}],[\"`hello\",{\"1\":{\"1080\":1}}],[\"`rgb\",{\"1\":{\"1156\":1}}],[\"`lamborghini\",{\"1\":{\"986\":1}}],[\"`your\",{\"1\":{\"928\":1}}],[\"`uri`\",{\"1\":{\"869\":1}}],[\"`property`\",{\"1\":{\"753\":1}}],[\"`my\",{\"1\":{\"607\":1}}],[\"`i\",{\"1\":{\"570\":1,\"571\":1,\"586\":1}}],[\"`fs`\",{\"1\":{\"1627\":1}}],[\"`foo\",{\"1\":{\"530\":1,\"1611\":2,\"1612\":2,\"1613\":1,\"1614\":1}}],[\"`fifteen\",{\"1\":{\"344\":1}}],[\"`value\",{\"1\":{\"408\":1}}],[\"`set\",{\"1\":{\"604\":1}}],[\"`setting\",{\"1\":{\"408\":2}}],[\"`string\",{\"1\":{\"245\":1}}],[\"`$\",{\"1\":{\"371\":1,\"380\":2,\"383\":4,\"701\":2,\"734\":1,\"1492\":1}}],[\"`\",{\"1\":{\"344\":1,\"371\":1,\"380\":2,\"383\":4,\"408\":3,\"570\":1,\"571\":1,\"586\":1,\"603\":2,\"604\":1,\"607\":1,\"701\":2,\"734\":1,\"928\":1,\"986\":1,\"1080\":1,\"1156\":1,\"1490\":1,\"1491\":3,\"1492\":1,\"1593\":1,\"1611\":3,\"1612\":4,\"1613\":2,\"1614\":2}}],[\"`continue\",{\"1\":{\"253\":1}}],[\"带参数列表\",{\"1\":{\"1243\":1}}],[\"带\",{\"1\":{\"253\":1}}],[\"未赋值状态\",{\"1\":{\"1700\":1}}],[\"未进入执行阶段之前\",{\"1\":{\"1566\":1}}],[\"未免有点个性化\",{\"1\":{\"1502\":1}}],[\"未被传值的参数默认为\",{\"1\":{\"1398\":1}}],[\"未被当成变量\",{\"1\":{\"253\":1}}],[\"未知数量的异步并发\",{\"0\":{\"1355\":1}}],[\"未修改的值为表达式的结果\",{\"1\":{\"1194\":1}}],[\"未能声明变量将很可能导致意想不到的结果\",{\"1\":{\"1065\":1}}],[\"未定义值\",{\"0\":{\"920\":1},\"1\":{\"920\":1}}],[\"未定义\",{\"1\":{\"917\":1,\"1407\":1}}],[\"未指定参数\",{\"1\":{\"807\":1}}],[\"未来的某一个不同的日子\",{\"1\":{\"485\":1}}],[\"未来保留字\",{\"0\":{\"250\":1},\"1\":{\"247\":1,\"248\":1}}],[\"未连接队列\",{\"1\":{\"303\":1}}],[\"才建议使用此做法\",{\"1\":{\"1652\":1}}],[\"才执行代码一次\",{\"1\":{\"1444\":1}}],[\"才是变量\",{\"1\":{\"1218\":1}}],[\"才能执行后面的操作\",{\"1\":{\"1617\":1}}],[\"才能执行下一个任务\",{\"1\":{\"457\":1,\"1552\":1}}],[\"才能对他们进行动态的存储分配\",{\"1\":{\"1279\":1}}],[\"才能解决这个问题\",{\"1\":{\"1218\":1}}],[\"才能得到这个负数对应的\",{\"1\":{\"1147\":1}}],[\"才返回数组索引为\",{\"1\":{\"1319\":1}}],[\"才返回\",{\"1\":{\"899\":1}}],[\"才可以使用\",{\"1\":{\"619\":1}}],[\"才可使粘性定位生效\",{\"1\":{\"38\":1}}],[\"才会加载这个模块\",{\"1\":{\"1595\":1}}],[\"才会被清空\",{\"1\":{\"1557\":1}}],[\"才会被解释执行\",{\"1\":{\"1335\":1}}],[\"才会去检测宏任务队列中的事件\",{\"1\":{\"1533\":1}}],[\"才会关闭电梯门\",{\"1\":{\"1444\":1}}],[\"才会取到默认值\",{\"1\":{\"1403\":1}}],[\"才会通过解构赋值生成\",{\"1\":{\"1403\":1}}],[\"才会执行该事件\",{\"1\":{\"1444\":1}}],[\"才会执行一次判断逻辑\",{\"1\":{\"1438\":1}}],[\"才会执行\",{\"1\":{\"1345\":2}}],[\"才会发生状态改变\",{\"1\":{\"1345\":1}}],[\"才会将它添加到原型中\",{\"1\":{\"570\":1}}],[\"才会填补分号\",{\"1\":{\"252\":1,\"253\":1}}],[\"才做某些操作\",{\"1\":{\"381\":1}}],[\"规避命名冲突\",{\"0\":{\"1682\":1}}],[\"规范则是非同步加载模块\",{\"1\":{\"1617\":1}}],[\"规范就出来了\",{\"1\":{\"1617\":1}}],[\"规范加载模块是同步的\",{\"1\":{\"1617\":1}}],[\"规范\",{\"1\":{\"1606\":1,\"1617\":1,\"1618\":2}}],[\"规范中的模块化方案提供了两种导出模块的方式\",{\"1\":{\"1650\":1}}],[\"规范中的模块化方案提供了四种引入模块的方式\",{\"1\":{\"1625\":1}}],[\"规范中内置的\",{\"1\":{\"1311\":1}}],[\"规范中定义的\",{\"1\":{\"1203\":1}}],[\"规范中定义了\",{\"1\":{\"329\":1}}],[\"规范中对\",{\"1\":{\"946\":1}}],[\"规范中已实现\",{\"1\":{\"249\":1}}],[\"规定一个单位时间\",{\"1\":{\"1431\":1}}],[\"规定\",{\"1\":{\"622\":1,\"625\":1}}],[\"规则优先级\",{\"1\":{\"1577\":1}}],[\"规则树\",{\"1\":{\"437\":1}}],[\"规则生成\",{\"1\":{\"437\":1}}],[\"规则的语句有\",{\"1\":{\"253\":1}}],[\"规则的声明被应用到相同的元素上时\",{\"1\":{\"19\":1}}],[\"规则相同\",{\"1\":{\"59\":1}}],[\"规则时\",{\"1\":{\"19\":1}}],[\"规则集通常简称规则\",{\"1\":{\"3\":1}}],[\"规则集\",{\"0\":{\"3\":1},\"1\":{\"3\":1}}],[\"键\",{\"1\":{\"1218\":1}}],[\"键对应的值是\",{\"1\":{\"1218\":1}}],[\"键名是否可枚举的\",{\"1\":{\"817\":1}}],[\"键名为\",{\"1\":{\"803\":1}}],[\"键名数组\",{\"1\":{\"737\":1}}],[\"键名组成的数组集合\",{\"1\":{\"803\":1}}],[\"键名组成的数组\",{\"1\":{\"730\":1}}],[\"键名的目标对象\",{\"1\":{\"730\":1,\"741\":1}}],[\"键名字符串\",{\"1\":{\"693\":1,\"817\":1}}],[\"键名可以是中文\",{\"1\":{\"556\":1}}],[\"键名\",{\"0\":{\"550\":1},\"1\":{\"549\":1}}],[\"键值对中间用冒号分隔\",{\"1\":{\"546\":1}}],[\"键字\",{\"1\":{\"248\":1}}],[\"键退出\",{\"1\":{\"191\":1}}],[\"貌似保留字和关键字是分开的\",{\"1\":{\"247\":1}}],[\"美元符号或数字\",{\"1\":{\"246\":1}}],[\"模块管理\",{\"0\":{\"1684\":1}}],[\"模块之间也可以继承\",{\"1\":{\"1658\":1}}],[\"模块之中\",{\"1\":{\"1620\":1}}],[\"模块继承\",{\"0\":{\"1658\":1}}],[\"模块顶层输出\",{\"0\":{\"1655\":1}}],[\"模块导出\",{\"0\":{\"1649\":1},\"1\":{\"1652\":1}}],[\"模块导入的接口重命名\",{\"1\":{\"1642\":1}}],[\"模块导入\",{\"0\":{\"1624\":1,\"1639\":1},\"1\":{\"1641\":1,\"1652\":1}}],[\"模块部分重命名转发\",{\"0\":{\"1642\":1}}],[\"模块部分接口转发\",{\"0\":{\"1641\":1}}],[\"模块整体导入后\",{\"1\":{\"1640\":1}}],[\"模块整体转发\",{\"0\":{\"1640\":1}}],[\"模块提升\",{\"0\":{\"1633\":1}}],[\"模块\",{\"1\":{\"1621\":3,\"1658\":2}}],[\"模块路径\",{\"1\":{\"1619\":2}}],[\"模块暴露的内容\",{\"1\":{\"1619\":2}}],[\"模块暴露内容\",{\"1\":{\"1617\":3,\"1618\":1}}],[\"模块名\",{\"1\":{\"1617\":3,\"1618\":1}}],[\"模块文件一般都已经存在于本地硬盘\",{\"1\":{\"1617\":1}}],[\"模块的默认方法加载为\",{\"1\":{\"1658\":1}}],[\"模块的所有模块和方法\",{\"1\":{\"1658\":1}}],[\"模块的设计初衷\",{\"1\":{\"1655\":1}}],[\"模块的\",{\"1\":{\"1616\":1,\"1636\":2,\"1658\":1}}],[\"模块依赖于\",{\"1\":{\"1613\":1}}],[\"模块化隔离\",{\"0\":{\"1636\":1}}],[\"模块化更加倾向于功能或者数据的封装\",{\"1\":{\"1621\":1}}],[\"模块化是组件化的基石\",{\"1\":{\"1621\":1}}],[\"模块化与组合化\",{\"0\":{\"1621\":1}}],[\"模块化的引入方式使用\",{\"1\":{\"1616\":1}}],[\"模块化方案\",{\"0\":{\"1615\":1}}],[\"模块化进化史\",{\"0\":{\"1610\":1}}],[\"模块化趋势\",{\"0\":{\"1607\":1}}],[\"模块化编程\",{\"1\":{\"1606\":1}}],[\"模块化\",{\"0\":{\"1606\":1,\"1763\":1},\"1\":{\"1606\":1,\"1618\":1}}],[\"模块约定\",{\"1\":{\"1338\":1}}],[\"模块实现\",{\"0\":{\"593\":1}}],[\"模式增强\",{\"0\":{\"1614\":1},\"1\":{\"1614\":1}}],[\"模式\",{\"0\":{\"1613\":1},\"1\":{\"1613\":1,\"1635\":1}}],[\"模式编程\",{\"1\":{\"1459\":1}}],[\"模式不能使用圆括号\",{\"1\":{\"1224\":1}}],[\"模式匹配\",{\"1\":{\"1213\":1}}],[\"模式缺陷\",{\"0\":{\"641\":1}}],[\"模版字面量\",{\"1\":{\"1080\":1}}],[\"模版字符串\",{\"0\":{\"344\":1}}],[\"模拟过程\",{\"1\":{\"1581\":1}}],[\"模拟实现\",{\"0\":{\"1116\":1}}],[\"模拟\",{\"2\":{\"508\":1}}],[\"模板字面量直接将其表达式强制转换为字符串\",{\"1\":{\"344\":1}}],[\"模板字符串直接量\",{\"1\":{\"245\":1}}],[\"模型中\",{\"1\":{\"309\":1}}],[\"模型是用来反映现实世界中事物特征的\",{\"1\":{\"228\":1}}],[\"©\",{\"1\":{\"245\":2}}],[\"八进制或十六进制数\",{\"1\":{\"1142\":1}}],[\"八进制或十六进制表示\",{\"1\":{\"929\":1}}],[\"八进制在严格模式下\",{\"1\":{\"923\":1}}],[\"八进制的56\",{\"1\":{\"923\":1}}],[\"八进制\",{\"1\":{\"245\":1,\"923\":1}}],[\"十六进制的31\",{\"1\":{\"923\":1}}],[\"十六进制转义序列\",{\"1\":{\"245\":1}}],[\"十六进制表示为开头是\",{\"1\":{\"245\":1}}],[\"十六进制\",{\"1\":{\"245\":1,\"923\":1}}],[\"十六进制记法\",{\"1\":{\"28\":1}}],[\"十进制转二进制\",{\"0\":{\"1155\":1}}],[\"十进制数字\",{\"1\":{\"1142\":1}}],[\"十进制数值直接量可以以\",{\"1\":{\"245\":1}}],[\"十进制\",{\"1\":{\"245\":1,\"923\":3}}],[\"又触发了\",{\"1\":{\"1541\":1}}],[\"又有人来了\",{\"1\":{\"1444\":1}}],[\"又译为卡瑞化或加里化\",{\"1\":{\"1416\":1}}],[\"又传入参数\",{\"1\":{\"1412\":1}}],[\"又名直接量\",{\"1\":{\"1080\":1}}],[\"又名字面量\",{\"1\":{\"245\":1}}],[\"又可以使用相同的方法\",{\"1\":{\"662\":1}}],[\"又得到了\",{\"1\":{\"662\":1}}],[\"又能够保证每个实例都有它自己的属性\",{\"1\":{\"662\":1}}],[\"又称部分求值\",{\"1\":{\"1416\":1}}],[\"又称原生构造函数\",{\"1\":{\"625\":1}}],[\"又称\",{\"1\":{\"332\":1,\"1686\":1}}],[\"又称使用者资料包协定\",{\"1\":{\"309\":1}}],[\"又叫十六进制颜色模式\",{\"1\":{\"109\":1}}],[\"位的\",{\"1\":{\"1184\":1}}],[\"位的无符号整数值的元素\",{\"1\":{\"927\":1}}],[\"位带符号的整数\",{\"1\":{\"1142\":1}}],[\"位带符号的整数进行运算的\",{\"1\":{\"1142\":1}}],[\"位浮点数的形式储存\",{\"1\":{\"1142\":1}}],[\"位元的二进制串\",{\"1\":{\"1142\":1}}],[\"位运算只对整数起作用\",{\"1\":{\"1142\":1}}],[\"位运算直接处理每一个比特位\",{\"1\":{\"1142\":1}}],[\"位运算直接对二进制位进行计算\",{\"1\":{\"1142\":1}}],[\"位运算符\",{\"0\":{\"1143\":1}}],[\"位运算符就是在这个二进制表示上执行运算\",{\"1\":{\"1142\":1}}],[\"位运算符将它的操作数视为\",{\"1\":{\"1142\":1}}],[\"位运算移位运算符\",{\"0\":{\"1142\":1}}],[\"位数的整倍循环\",{\"0\":{\"1012\":1}}],[\"位开始遍历数组\",{\"1\":{\"482\":1}}],[\"位长的序列号\",{\"1\":{\"301\":2}}],[\"位\",{\"1\":{\"239\":1,\"1142\":1,\"1151\":3,\"1161\":3,\"1184\":2}}],[\"非函数表达式\",{\"1\":{\"1698\":1}}],[\"非左侧\",{\"1\":{\"1670\":1}}],[\"非模块的脚本也可以使用\",{\"1\":{\"1593\":1}}],[\"非阻塞是指等待的过程\",{\"1\":{\"1547\":1}}],[\"非阻塞\",{\"1\":{\"1547\":1}}],[\"非阻塞机制之前\",{\"1\":{\"1547\":1}}],[\"非严格模式下\",{\"1\":{\"1510\":1,\"1518\":1}}],[\"非严格模式返回\",{\"1\":{\"1100\":1}}],[\"非常麻烦\",{\"1\":{\"1425\":1}}],[\"非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"非全等号\",{\"1\":{\"1243\":1}}],[\"非等号\",{\"1\":{\"1243\":1}}],[\"非声明变量是可配置的\",{\"1\":{\"1065\":1}}],[\"非空字符串\",{\"1\":{\"948\":1}}],[\"非\",{\"1\":{\"948\":2,\"1107\":1,\"1533\":1}}],[\"非必需\",{\"1\":{\"532\":1}}],[\"非递减顺序\",{\"1\":{\"500\":2}}],[\"非原型\",{\"1\":{\"403\":1}}],[\"非中断空格符\",{\"1\":{\"237\":1}}],[\"非衬线字体\",{\"1\":{\"71\":1}}],[\"空的导入\",{\"0\":{\"1629\":1},\"1\":{\"1625\":1}}],[\"空对象关联构造函数的原型对象\",{\"1\":{\"1581\":1}}],[\"空对象的实例赋值给\",{\"1\":{\"394\":1}}],[\"空间大\",{\"1\":{\"1268\":1}}],[\"空间小\",{\"1\":{\"1268\":1}}],[\"空间复杂度\",{\"1\":{\"509\":2,\"524\":1}}],[\"空数组\",{\"1\":{\"1091\":1}}],[\"空数组转为空字符串\",{\"1\":{\"943\":1}}],[\"空数组执行reduce如果不指定初始值会报错\",{\"1\":{\"352\":1}}],[\"空值合并运算符\",{\"1\":{\"1256\":1}}],[\"空值\",{\"0\":{\"919\":1},\"1\":{\"917\":1,\"919\":1}}],[\"空字符转为\",{\"1\":{\"944\":1}}],[\"空字符串\",{\"1\":{\"943\":1,\"948\":1}}],[\"空字符串被转换成0\",{\"1\":{\"905\":1}}],[\"空字面量\",{\"1\":{\"248\":1}}],[\"空字面量和布尔值字面量\",{\"1\":{\"247\":1}}],[\"空直接量\",{\"1\":{\"245\":1}}],[\"空白字符\",{\"0\":{\"237\":1}}],[\"空格是否会被当作词法单元\",{\"1\":{\"1666\":1}}],[\"空格符\",{\"1\":{\"237\":1}}],[\"空格查看下一页\",{\"1\":{\"206\":1}}],[\"空格\",{\"0\":{\"236\":1},\"1\":{\"89\":1,\"92\":1}}],[\"没创建一个函数\",{\"1\":{\"578\":1}}],[\"没区别\",{\"1\":{\"235\":1}}],[\"没有初始化报错\",{\"1\":{\"1693\":1}}],[\"没有初始化提升\",{\"1\":{\"341\":2}}],[\"没有找到\",{\"1\":{\"1677\":2}}],[\"没有对应的复合写法\",{\"1\":{\"1646\":1}}],[\"没有缓存\",{\"1\":{\"1619\":1}}],[\"没有改变\",{\"1\":{\"1613\":1}}],[\"没有实参\",{\"1\":{\"1564\":1}}],[\"没有结果之前不会返回\",{\"1\":{\"1547\":1}}],[\"没有作用域的限制\",{\"1\":{\"1518\":1}}],[\"没有形成进程阻塞\",{\"1\":{\"1425\":1}}],[\"没有重新声明\",{\"1\":{\"1407\":1}}],[\"没有默认值\",{\"1\":{\"1406\":1}}],[\"没有第二个参数时\",{\"1\":{\"1403\":1}}],[\"没有使用函数参数的默认值\",{\"1\":{\"1403\":1}}],[\"没有被传递的参数可由感知到的默认参数进行填充\",{\"1\":{\"1398\":1}}],[\"没有被清除的定时器\",{\"1\":{\"1284\":1}}],[\"没有变化\",{\"1\":{\"1388\":1}}],[\"没有的话叫做匿名函数\",{\"1\":{\"1330\":1}}],[\"没有足够的内存提供了\",{\"1\":{\"1283\":1}}],[\"没有办法从一开始就知道\",{\"1\":{\"1222\":1}}],[\"没有区别\",{\"1\":{\"1194\":1,\"1579\":1}}],[\"没有块级作用域\",{\"1\":{\"1074\":1}}],[\"没有静态属性\",{\"1\":{\"632\":1}}],[\"没有\",{\"1\":{\"590\":1,\"1069\":1,\"1426\":1}}],[\"没有显式地创建对象\",{\"1\":{\"590\":1}}],[\"没有别的方式可以访问其数据成员\",{\"1\":{\"572\":1}}],[\"没有其他办法访问\",{\"1\":{\"572\":1}}],[\"没有数组元素可以被添加或移除\",{\"1\":{\"540\":1,\"706\":1}}],[\"没有设置\",{\"1\":{\"533\":1}}],[\"没有指定下标为\",{\"1\":{\"509\":1}}],[\"没有交易完成\",{\"1\":{\"485\":1}}],[\"没有拥塞控制\",{\"1\":{\"310\":1}}],[\"没有直接的模块化支持\",{\"1\":{\"230\":1}}],[\"没有则向\",{\"1\":{\"150\":1}}],[\"没有则调用系统库函数进行查询\",{\"1\":{\"150\":1}}],[\"没有阻止访问图标\",{\"1\":{\"130\":1}}],[\"没有理由不对它进行设置\",{\"1\":{\"120\":1}}],[\"没有包含关闭标签是一个常见的初学者错误\",{\"1\":{\"116\":1}}],[\"没有定位\",{\"1\":{\"35\":1}}],[\"控制权还给全局执行环境\",{\"1\":{\"1709\":1}}],[\"控制着变量的可见性\",{\"1\":{\"1673\":1}}],[\"控制台顺利地返回了执行结果\",{\"1\":{\"1505\":1}}],[\"控制台打印\",{\"0\":{\"1289\":1}}],[\"控制立即转向\",{\"1\":{\"1052\":2}}],[\"控制位\",{\"1\":{\"299\":1}}],[\"控制\",{\"1\":{\"235\":1}}],[\"控制符\",{\"1\":{\"233\":1}}],[\"函数属性\",{\"0\":{\"1749\":1}}],[\"函数属于\",{\"1\":{\"890\":1}}],[\"函数里面的函数能够保证外面的函数的作用域不会被销毁\",{\"1\":{\"1710\":1}}],[\"函数里使用\",{\"1\":{\"1341\":1}}],[\"函数依然可以通过\",{\"1\":{\"1709\":1}}],[\"函数依然可以读取到\",{\"1\":{\"1709\":1}}],[\"函数上下文已经被销毁了\",{\"1\":{\"1709\":1}}],[\"函数上下文从执行上下文栈中弹出\",{\"1\":{\"1572\":1}}],[\"函数foo被创建\",{\"1\":{\"1709\":1}}],[\"函数后\",{\"1\":{\"1709\":1}}],[\"函数为当前执行流所在的执行环境\",{\"1\":{\"1709\":1}}],[\"函数为当前执行流所在执行环境\",{\"1\":{\"1709\":1}}],[\"函数赋值给\",{\"1\":{\"1709\":1}}],[\"函数已经执行完毕\",{\"1\":{\"1709\":1}}],[\"函数这时就会访问函数外层的变量\",{\"1\":{\"1708\":1}}],[\"函数覆盖\",{\"0\":{\"1701\":1}}],[\"函数却报了错\",{\"1\":{\"1694\":1}}],[\"函数内存在\",{\"1\":{\"1691\":1}}],[\"函数内的变量若是带\",{\"1\":{\"1691\":1}}],[\"函数内部声明的变量是局部的\",{\"1\":{\"1708\":1}}],[\"函数内部的同名变量或参数优先级高于全局同名变量\",{\"1\":{\"1698\":1}}],[\"函数内部的\",{\"1\":{\"1477\":2}}],[\"函数内部的异步操作执行完\",{\"1\":{\"1345\":1}}],[\"函数内部设置了两个定时器\",{\"1\":{\"1375\":1}}],[\"函数内部抛出异常\",{\"1\":{\"1344\":1}}],[\"函数内部\",{\"0\":{\"1756\":1},\"1\":{\"1302\":1,\"1344\":1}}],[\"函数内部执行\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"函数之中\",{\"1\":{\"1603\":1}}],[\"函数就能接受什么参数\",{\"1\":{\"1593\":1}}],[\"函数就是自动执行器\",{\"1\":{\"1350\":1}}],[\"函数通过\",{\"1\":{\"1590\":1}}],[\"函数本身\",{\"1\":{\"1579\":1}}],[\"函数别名\",{\"1\":{\"1579\":1}}],[\"函数直接使用不带任何修饰的函数引用进行调用\",{\"1\":{\"1578\":1}}],[\"函数并不立刻执行\",{\"1\":{\"1572\":1}}],[\"函数并传入新值\",{\"1\":{\"532\":1}}],[\"函数被覆盖\",{\"1\":{\"1700\":1}}],[\"函数被创建\",{\"1\":{\"1572\":1}}],[\"函数被调用\",{\"1\":{\"1446\":1}}],[\"函数创建时\",{\"1\":{\"1570\":1}}],[\"函数时\",{\"1\":{\"1561\":1,\"1578\":1}}],[\"函数时的上下文一样\",{\"1\":{\"892\":1}}],[\"函数和类必须遵守这种书写方法\",{\"1\":{\"1654\":1}}],[\"函数和\",{\"1\":{\"1613\":1}}],[\"函数和属性\",{\"1\":{\"1561\":1}}],[\"函数和自动执行器\",{\"1\":{\"1350\":1}}],[\"函数执行的时候\",{\"1\":{\"1709\":1}}],[\"函数执行的语句\",{\"1\":{\"1326\":1}}],[\"函数执行环境中\",{\"1\":{\"1709\":1}}],[\"函数执行时传入的参数和\",{\"1\":{\"1566\":1}}],[\"函数执行上下文维护了一个作用域链\",{\"1\":{\"1709\":1}}],[\"函数执行上下文被压入执行上下文栈\",{\"1\":{\"1572\":1}}],[\"函数执行上下文的变量对象初始化只包括\",{\"1\":{\"1565\":1}}],[\"函数执行上下文\",{\"0\":{\"1562\":1},\"1\":{\"1560\":1,\"1572\":1,\"1709\":1}}],[\"函数环境\",{\"1\":{\"1556\":1}}],[\"函数引用了\",{\"1\":{\"1709\":1}}],[\"函数引用\",{\"1\":{\"1555\":1}}],[\"函数方法中的\",{\"0\":{\"1518\":1}}],[\"函数当作返回值输出的应用场景也有很多\",{\"1\":{\"1504\":1}}],[\"函数作为返回值返回\",{\"1\":{\"1709\":1}}],[\"函数作为构造函数调用\",{\"1\":{\"1590\":1}}],[\"函数作为对象方法调用\",{\"1\":{\"1590\":1}}],[\"函数作为方法调用\",{\"0\":{\"1515\":1}}],[\"函数作为参数传递的另一个常见场景是数组排序函数\",{\"1\":{\"1503\":1}}],[\"函数作用域在函数定义的时候就决定了\",{\"1\":{\"1570\":1}}],[\"函数作用域\",{\"0\":{\"1680\":1},\"1\":{\"1074\":1,\"1680\":1}}],[\"函数传入\",{\"1\":{\"1485\":1}}],[\"函数在第一次调用时\",{\"1\":{\"1469\":1}}],[\"函数重写\",{\"0\":{\"1467\":1}}],[\"函数重载\",{\"0\":{\"1390\":1}}],[\"函数每次调用的时候都要走一遍\",{\"1\":{\"1466\":1}}],[\"函数嵌套\",{\"0\":{\"1459\":1},\"1\":{\"1710\":1}}],[\"函数特点\",{\"0\":{\"1453\":1}}],[\"函数了\",{\"1\":{\"1449\":1}}],[\"函数防抖应用场景\",{\"1\":{\"1447\":1}}],[\"函数防抖规定函数再次执行需要满足两个条件\",{\"1\":{\"1444\":1}}],[\"函数防抖\",{\"0\":{\"1444\":1},\"1\":{\"1444\":1,\"1506\":1}}],[\"函数记忆\",{\"0\":{\"1441\":1},\"1\":{\"1441\":1}}],[\"函数节流就是用来节流函数从而一定程度上优化性能的\",{\"1\":{\"1432\":1}}],[\"函数节流\",{\"0\":{\"1431\":1},\"1\":{\"1431\":1,\"1506\":1}}],[\"函数睡眠\",{\"0\":{\"1422\":1}}],[\"函数提取出一个新的函数\",{\"1\":{\"1419\":1}}],[\"函数先引入一个新参数\",{\"1\":{\"1417\":1}}],[\"函数柯里化的用途可以理解为\",{\"1\":{\"1418\":1}}],[\"函数柯里化\",{\"0\":{\"1416\":1},\"1\":{\"1506\":1}}],[\"函数可以用在任何地方\",{\"1\":{\"1593\":1}}],[\"函数可以作为返回值输出\",{\"1\":{\"1500\":1}}],[\"函数可以作为参数被传递\",{\"1\":{\"1500\":1}}],[\"函数可以让我们传入一个或多个预设的参数\",{\"1\":{\"1412\":1}}],[\"函数可以做到局部应用\",{\"1\":{\"1411\":1}}],[\"函数可把\",{\"1\":{\"878\":1}}],[\"函数没有参数的情况\",{\"1\":{\"1404\":1}}],[\"函数没有签名\",{\"1\":{\"1390\":1}}],[\"函数剩余参数之后不能再有其他参数\",{\"1\":{\"1395\":1}}],[\"函数剩余参数就不存在这个问题\",{\"1\":{\"1393\":1}}],[\"函数接收到的始终都是这个数组\",{\"1\":{\"1382\":1}}],[\"函数生成时\",{\"1\":{\"1375\":1}}],[\"函数都可以写成上面的第二种形式\",{\"1\":{\"1350\":1}}],[\"函数都会中断执行\",{\"1\":{\"1348\":1}}],[\"函数中也可以访问到外部函数\",{\"1\":{\"1710\":1}}],[\"函数中找到\",{\"1\":{\"1709\":1}}],[\"函数中存在自由变量\",{\"1\":{\"1709\":1}}],[\"函数中查找\",{\"1\":{\"1677\":2}}],[\"函数中可以出现同名形参\",{\"1\":{\"1381\":1}}],[\"函数中\",{\"1\":{\"1342\":1}}],[\"函数中的所有操作都将基于这个对象\",{\"1\":{\"1517\":1}}],[\"函数中的应用\",{\"0\":{\"1178\":1}}],[\"函数中的\",{\"1\":{\"1030\":1}}],[\"函数与所加载的模块没有静态连接关系\",{\"1\":{\"1593\":1}}],[\"函数与\",{\"1\":{\"1338\":1}}],[\"函数完全可以看作多个异步操作\",{\"1\":{\"1338\":1}}],[\"函数或者全局\",{\"1\":{\"1589\":1}}],[\"函数或\",{\"1\":{\"1338\":1}}],[\"函数自带执行器\",{\"1\":{\"1338\":1}}],[\"函数是一个求和函数\",{\"1\":{\"1393\":1}}],[\"函数是\",{\"1\":{\"1338\":1}}],[\"函数定义表达式特别适合用来定义那些只会使用一次的函数\",{\"1\":{\"1330\":1}}],[\"函数定义了一个非标准的\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"函数表达式可以是匿名的\",{\"1\":{\"1685\":1}}],[\"函数表达式也可以提供函数名\",{\"1\":{\"1333\":1}}],[\"函数表达式也能分配内存\",{\"1\":{\"1273\":1}}],[\"函数表达式要素与函数声明语句基本一致\",{\"1\":{\"1331\":1}}],[\"函数表达式要素\",{\"1\":{\"1330\":1}}],[\"函数表达式\",{\"0\":{\"1330\":1},\"1\":{\"1670\":1,\"1685\":1,\"1700\":2}}],[\"函数名之后的圆括号中是参数列表\",{\"1\":{\"1328\":1}}],[\"函数名称\",{\"0\":{\"1334\":1},\"1\":{\"1328\":1,\"1334\":1}}],[\"函数名\",{\"1\":{\"1327\":1,\"1330\":1}}],[\"函数名和所有的标识符\",{\"1\":{\"235\":1}}],[\"函数体内部的局部变量\",{\"1\":{\"1407\":1}}],[\"函数体内的\",{\"1\":{\"1374\":1}}],[\"函数体\",{\"0\":{\"1368\":1},\"1\":{\"1326\":1,\"1327\":1,\"1328\":2,\"1330\":1,\"1331\":1}}],[\"函数存取器\",{\"0\":{\"1315\":1,\"1486\":1}}],[\"函数存在一定的安全隐患\",{\"1\":{\"892\":1}}],[\"函数原型对象方法\",{\"0\":{\"1299\":1}}],[\"函数原型对象属性\",{\"0\":{\"1292\":1}}],[\"函数原型在内的一切都是对象\",{\"1\":{\"230\":1}}],[\"函数只能返回一个值\",{\"1\":{\"1230\":1}}],[\"函数只不过是在特定环境中执行代码的对象\",{\"1\":{\"635\":1}}],[\"函数参数也是局部变量\",{\"1\":{\"1673\":1}}],[\"函数参数也属于变量声明\",{\"1\":{\"1225\":1}}],[\"函数参数形成的单独作用域里面\",{\"1\":{\"1407\":1}}],[\"函数参数的默认值就会生效\",{\"1\":{\"1403\":1}}],[\"函数参数的默认值都是undefined\",{\"1\":{\"1398\":1}}],[\"函数参数的默认值\",{\"0\":{\"1233\":1}}],[\"函数参数的定义\",{\"0\":{\"1231\":1}}],[\"函数参数的解构也可以使用默认值\",{\"1\":{\"1221\":1}}],[\"函数参数的解构赋值\",{\"0\":{\"1221\":1}}],[\"函数参数\",{\"0\":{\"1225\":1,\"1379\":1,\"1758\":1}}],[\"函数运行后会返回一个遍历器对象\",{\"1\":{\"1186\":1}}],[\"函数调用栈\",{\"1\":{\"1556\":1}}],[\"函数调用模式\",{\"0\":{\"1509\":1},\"1\":{\"1509\":1}}],[\"函数调用时应用了\",{\"1\":{\"1578\":1}}],[\"函数调用时\",{\"1\":{\"1407\":1}}],[\"函数调用者不需要传递所有可能存在的参数\",{\"1\":{\"1398\":1}}],[\"函数调用甚至不检查传入形参的个数\",{\"1\":{\"1380\":1}}],[\"函数调用也未对传入的实参值做任何类型检查\",{\"1\":{\"1380\":1}}],[\"函数调用结果分配对象内存\",{\"1\":{\"1274\":1}}],[\"函数调用分配\",{\"0\":{\"1274\":1}}],[\"函数调用\",{\"0\":{\"1174\":1,\"1760\":1},\"1\":{\"1243\":1}}],[\"函数类型\",{\"0\":{\"1759\":1},\"1\":{\"1115\":1}}],[\"函数声明覆盖\",{\"0\":{\"1704\":1}}],[\"函数声明会覆盖变量声明\",{\"1\":{\"1701\":1}}],[\"函数声明和变量声明都会被提升\",{\"1\":{\"1701\":1}}],[\"函数声明必须有名称\",{\"1\":{\"1685\":1}}],[\"函数声明\",{\"0\":{\"1757\":1},\"1\":{\"1560\":1,\"1564\":1,\"1565\":1,\"1572\":1,\"1685\":2,\"1700\":3}}],[\"函数声明初始化时\",{\"1\":{\"1407\":1}}],[\"函数声明提升优先于变量声明提升\",{\"1\":{\"1698\":1}}],[\"函数声明提升\",{\"0\":{\"1700\":1},\"1\":{\"1335\":1,\"1698\":2,\"1700\":2}}],[\"函数声明优先\",{\"0\":{\"1335\":1,\"1703\":1}}],[\"函数声明要素\",{\"1\":{\"1328\":1}}],[\"函数声明语句创建的变量无法删除\",{\"1\":{\"1329\":1}}],[\"函数声明语句的组成要素\",{\"1\":{\"1327\":1}}],[\"函数声明语句的行为类似于\",{\"1\":{\"1074\":1}}],[\"函数声明语句\",{\"0\":{\"1327\":1}}],[\"函数声明定义\",{\"0\":{\"1326\":1}}],[\"函数声明同样被限制在声明它的语句块内\",{\"1\":{\"1077\":1}}],[\"函数声明类似于\",{\"1\":{\"1074\":1}}],[\"函数声明可以被提升\",{\"1\":{\"599\":1,\"1483\":1}}],[\"函数立即返回而不再执行余下的语句\",{\"1\":{\"1034\":1}}],[\"函数终止执行\",{\"1\":{\"1034\":1,\"1036\":1}}],[\"函数进行声明初始化时\",{\"1\":{\"1407\":1}}],[\"函数进行判断\",{\"1\":{\"861\":1}}],[\"函数进程\",{\"0\":{\"1034\":1}}],[\"函数将字符串转换为数值\",{\"1\":{\"952\":1}}],[\"函数将会根据参数\",{\"1\":{\"913\":1}}],[\"函数构造器\",{\"1\":{\"935\":1}}],[\"函数对象也可以包含方法\",{\"1\":{\"1529\":1}}],[\"函数对象\",{\"1\":{\"917\":1,\"935\":1,\"1122\":1}}],[\"函数返回的\",{\"1\":{\"1345\":1,\"1349\":1}}],[\"函数返回的是\",{\"1\":{\"1341\":1}}],[\"函数返回一个\",{\"1\":{\"1340\":1,\"1344\":1}}],[\"函数返回\",{\"1\":{\"903\":1}}],[\"函数会创建一个新函数\",{\"1\":{\"1311\":1}}],[\"函数会将这一部分字符串转化为整数\",{\"1\":{\"913\":1}}],[\"函数会将这一部分字符串转化为数字\",{\"1\":{\"909\":1}}],[\"函数会将其强制转换为\",{\"1\":{\"903\":1}}],[\"函数会编码所有的字符\",{\"1\":{\"880\":1,\"886\":1}}],[\"函数等等\",{\"1\":{\"1204\":1}}],[\"函数等\",{\"1\":{\"898\":1,\"1271\":1}}],[\"函数使\",{\"1\":{\"890\":1}}],[\"函数用于调用当前函数\",{\"1\":{\"1300\":1,\"1304\":1}}],[\"函数用于\",{\"1\":{\"913\":1}}],[\"函数用于将字符串转换为浮点数并返回\",{\"1\":{\"908\":1}}],[\"函数用于判断指定数字是否是非数字值\",{\"1\":{\"902\":1}}],[\"函数用于判断指定数字是否是有限值\",{\"1\":{\"897\":1}}],[\"函数用于计算并执行以字符串表示的\",{\"1\":{\"890\":1}}],[\"函数用于对统一资源标识符\",{\"1\":{\"873\":1,\"884\":1}}],[\"函数用于对已编码的统一资源标识符\",{\"1\":{\"868\":1}}],[\"函数编码后的\",{\"1\":{\"886\":1}}],[\"函数编码的\",{\"1\":{\"880\":1}}],[\"函数不能有同名参数\",{\"1\":{\"1401\":1}}],[\"函数不能像传统意义上那样实现重载\",{\"1\":{\"1390\":1}}],[\"函数不会执行代码\",{\"1\":{\"891\":1}}],[\"函数不编码字符有\",{\"1\":{\"880\":1}}],[\"函数不是必需的\",{\"1\":{\"656\":1}}],[\"函数的环境就会被推入到一个环境栈中\",{\"1\":{\"1707\":1}}],[\"函数的两种创建方式\",{\"1\":{\"1700\":1}}],[\"函数的地方\",{\"1\":{\"1677\":1}}],[\"函数的作用域链找到它\",{\"1\":{\"1709\":1}}],[\"函数的作用域链\",{\"1\":{\"1709\":1}}],[\"函数的作用域气泡开始查找\",{\"1\":{\"1675\":1}}],[\"函数的作用域是在函数调用的时候才决定的\",{\"1\":{\"1673\":1}}],[\"函数的普通调用\",{\"1\":{\"1590\":1}}],[\"函数的激活\",{\"0\":{\"1571\":1}}],[\"函数的创建\",{\"0\":{\"1570\":1}}],[\"函数的所有形参\",{\"1\":{\"1564\":1}}],[\"函数的执行环境中找到\",{\"1\":{\"1709\":2}}],[\"函数的执行环境中找到变量\",{\"1\":{\"1709\":1}}],[\"函数的执行环境被销毁\",{\"1\":{\"1709\":1}}],[\"函数的执行过程中调用位置决定\",{\"1\":{\"1577\":1}}],[\"函数的执行上下文的个数没有限制\",{\"1\":{\"1557\":1}}],[\"函数的执行必须靠执行器\",{\"1\":{\"1338\":1}}],[\"函数的时候\",{\"1\":{\"1466\":1}}],[\"函数的节流就是通过闭包保存一个标记\",{\"1\":{\"1438\":1}}],[\"函数的长度属性\",{\"0\":{\"1406\":1}}],[\"函数的实现原理\",{\"1\":{\"1350\":1}}],[\"函数的对比\",{\"1\":{\"1338\":1}}],[\"函数的\",{\"1\":{\"1338\":1,\"1375\":1,\"1382\":1,\"1386\":2,\"1395\":1,\"1406\":1}}],[\"函数的改进在于以下四点\",{\"1\":{\"1338\":1}}],[\"函数的语法糖\",{\"1\":{\"1338\":1}}],[\"函数的局部作用域将会包含一个绑定到函数对象的名称\",{\"1\":{\"1334\":1}}],[\"函数的重复声明会覆盖前面的声明\",{\"1\":{\"1329\":1}}],[\"函数的名称将成为函数内部的一个局部变量\",{\"1\":{\"1334\":1}}],[\"函数的名称\",{\"1\":{\"1326\":1}}],[\"函数的函数\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"函数的调用结果仍为数组\",{\"1\":{\"946\":1}}],[\"函数的返回值就是调用表达式的值\",{\"1\":{\"1509\":1}}],[\"函数的返回值为\",{\"1\":{\"913\":1}}],[\"函数的返回值\",{\"0\":{\"1179\":1},\"1\":{\"904\":1,\"1709\":2}}],[\"函数的返回值是任意类型\",{\"1\":{\"891\":1}}],[\"函数的返回值是\",{\"1\":{\"869\":1,\"874\":1,\"885\":1,\"898\":1,\"903\":1,\"1338\":2}}],[\"函数的代码执行时所在的上下文和调用\",{\"1\":{\"892\":1}}],[\"函数的参数不能有同名属性\",{\"1\":{\"1620\":1}}],[\"函数的参数列表\",{\"1\":{\"1326\":1}}],[\"函数的参数也可以使用解构赋值\",{\"1\":{\"1221\":1}}],[\"函数的参数\",{\"1\":{\"668\":1}}],[\"函数更健壮的版本\",{\"1\":{\"861\":1}}],[\"函数也是对象\",{\"1\":{\"648\":1}}],[\"函数独有\",{\"1\":{\"648\":1}}],[\"函数仅能在构造函数中执行\",{\"1\":{\"621\":1}}],[\"函数默认参数\",{\"0\":{\"342\":1}}],[\"函数\",{\"0\":{\"1186\":1},\"1\":{\"246\":1,\"352\":1,\"532\":2,\"578\":1,\"586\":1,\"606\":1,\"621\":1,\"644\":1,\"880\":2,\"886\":2,\"1186\":1,\"1221\":2,\"1271\":1,\"1302\":1,\"1338\":2,\"1345\":1,\"1373\":2,\"1374\":1,\"1375\":1,\"1403\":1,\"1407\":5,\"1411\":1,\"1416\":2,\"1417\":1,\"1435\":3,\"1446\":1,\"1502\":1,\"1504\":4,\"1505\":2,\"1543\":1,\"1572\":1,\"1593\":1,\"1613\":1,\"1708\":2,\"1709\":3}}],[\"具名输入\",{\"1\":{\"1601\":1}}],[\"具名函数表达式\",{\"1\":{\"1685\":1}}],[\"具名函数\",{\"0\":{\"1333\":1}}],[\"具有相同的函数体\",{\"1\":{\"1311\":1}}],[\"具有唯一性\",{\"1\":{\"1066\":1,\"1068\":1,\"1692\":1,\"1693\":1}}],[\"具有实例的原型person的所有属性和方法\",{\"1\":{\"656\":1}}],[\"具有\",{\"1\":{\"561\":1}}],[\"具有一些反射特性\",{\"1\":{\"230\":1}}],[\"具体做法可以将里面函数当做返回值返回后通过两次的括号调用\",{\"1\":{\"1710\":1}}],[\"具体由\",{\"1\":{\"1548\":1}}],[\"具体变化如下图所示\",{\"1\":{\"1266\":1}}],[\"具体过程是\",{\"1\":{\"1242\":1}}],[\"具体参考\",{\"1\":{\"1207\":2}}],[\"具体可以参考\",{\"1\":{\"946\":1}}],[\"具体来说\",{\"1\":{\"531\":1,\"983\":1,\"1552\":1}}],[\"具体长度\",{\"1\":{\"102\":1}}],[\"支持剩余参数和默认参数\",{\"1\":{\"1365\":1}}],[\"支持电子邮件的\",{\"1\":{\"318\":1}}],[\"支持万维网应用的\",{\"1\":{\"318\":1}}],[\"支持一对一\",{\"1\":{\"310\":1}}],[\"支持方法级的重写和重载机制\",{\"1\":{\"230\":1}}],[\"支持静态方法和实例\",{\"1\":{\"230\":1}}],[\"提出补上这三种复合写法\",{\"1\":{\"1646\":1}}],[\"提出\",{\"1\":{\"1551\":1}}],[\"提出了一个修复\",{\"1\":{\"1132\":1}}],[\"提取\",{\"0\":{\"1232\":1}}],[\"提取到不同的变量中\",{\"1\":{\"1212\":1}}],[\"提取实例自身属性\",{\"0\":{\"986\":1}}],[\"提升就像是把所有的变量声明移动到函数或者全局代码的开头位置\",{\"1\":{\"1065\":1}}],[\"提高代码复用性\",{\"1\":{\"1609\":1}}],[\"提高代码可读性\",{\"1\":{\"1496\":1}}],[\"提高了性能\",{\"1\":{\"1466\":1}}],[\"提高了网站的性能\",{\"1\":{\"432\":1}}],[\"提高适用性\",{\"1\":{\"1418\":1}}],[\"提高网络的吞吐能力\",{\"1\":{\"156\":1}}],[\"提供的\",{\"1\":{\"1311\":1}}],[\"提供了\",{\"1\":{\"1580\":1}}],[\"提供了以下转型函数\",{\"1\":{\"947\":1}}],[\"提供了一个标准的方式来获取不同环境下的全局\",{\"1\":{\"848\":1}}],[\"提供了叫做字面量的快捷方式\",{\"1\":{\"546\":1}}],[\"提供端到端的可靠报文传递和错误恢复\",{\"1\":{\"317\":1}}],[\"提供\",{\"1\":{\"300\":1}}],[\"提供无连接的\",{\"1\":{\"297\":1}}],[\"提供面向连接的\",{\"1\":{\"297\":1}}],[\"提供包提供模块化支持\",{\"1\":{\"230\":1}}],[\"提供丰富的反射特性\",{\"1\":{\"230\":1}}],[\"提供丰富的继承机制\",{\"1\":{\"230\":1}}],[\"构建一个小顶堆\",{\"1\":{\"482\":1}}],[\"构建cssom树\",{\"1\":{\"464\":1}}],[\"构建dom树\",{\"1\":{\"464\":1}}],[\"构造调用\",{\"1\":{\"1581\":1}}],[\"构造调用绑定和隐式绑定\",{\"0\":{\"1584\":1}}],[\"构造调用绑定\",{\"0\":{\"1581\":1},\"1\":{\"1582\":1}}],[\"构造函数当\",{\"1\":{\"1581\":1}}],[\"构造函数只是使用\",{\"1\":{\"1581\":1}}],[\"构造函数实例化的一个对象\",{\"1\":{\"1561\":1}}],[\"构造函数通常不使用\",{\"1\":{\"1526\":1}}],[\"构造函数调用\",{\"1\":{\"1581\":1}}],[\"构造函数调用表达式的计算结果就是这个新对象的值\",{\"1\":{\"1526\":1}}],[\"构造函数调用的语法是允许省略实参列表和圆括号的\",{\"1\":{\"1524\":1}}],[\"构造函数调用模式的特征\",{\"1\":{\"1521\":1}}],[\"构造函数调用模式\",{\"0\":{\"1521\":1},\"1\":{\"1521\":1}}],[\"构造函数中的\",{\"1\":{\"1521\":1}}],[\"构造函数内部会创建一个新的对象\",{\"1\":{\"1477\":1}}],[\"构造函数一般是首字母大写\",{\"1\":{\"1477\":1}}],[\"构造函数返回的函数实例\",{\"1\":{\"1296\":1}}],[\"构造函数返回的对象与构造函数外部创建的对象没有什么不同\",{\"1\":{\"571\":1}}],[\"构造函数创建的字符串\",{\"1\":{\"1109\":1}}],[\"构造函数时传入了\",{\"1\":{\"662\":1}}],[\"构造函数在调用\",{\"1\":{\"662\":1}}],[\"构造函数定义了\",{\"1\":{\"662\":1}}],[\"构造函数得来\",{\"1\":{\"647\":1}}],[\"构造函数替换成\",{\"1\":{\"640\":1}}],[\"构造函数会忽略参数\",{\"1\":{\"625\":1}}],[\"构造函数的返回语句\",{\"0\":{\"1526\":1}}],[\"构造函数的返回值\",{\"1\":{\"1477\":1}}],[\"构造函数的首字母一般要大写\",{\"1\":{\"1521\":1}}],[\"构造函数的首字母必须大写\",{\"1\":{\"1474\":1}}],[\"构造函数的引用\",{\"1\":{\"805\":1}}],[\"构造函数的原型\",{\"1\":{\"640\":1}}],[\"构造函数的环境下调用\",{\"1\":{\"635\":1}}],[\"构造函数的行为\",{\"1\":{\"625\":1}}],[\"构造函数的继承\",{\"1\":{\"624\":1}}],[\"构造函数的问题\",{\"0\":{\"592\":1}}],[\"构造函数毕竟也是函数\",{\"1\":{\"591\":1}}],[\"构造函数与其他函数的唯一区别\",{\"1\":{\"591\":1}}],[\"构造函数始终都应该以一个大写字母开头\",{\"1\":{\"590\":1}}],[\"构造函数模式与工厂模式实现过程的区别\",{\"1\":{\"590\":1}}],[\"构造函数模式\",{\"0\":{\"590\":1}}],[\"构造函数模式用于定义实例属性\",{\"1\":{\"569\":1}}],[\"构造函数来初始化一个新创建的对象\",{\"1\":{\"547\":1}}],[\"构造函数\",{\"0\":{\"547\":1,\"602\":1,\"647\":1,\"801\":1,\"1296\":1,\"1473\":1},\"1\":{\"545\":1,\"569\":1,\"572\":1,\"576\":1,\"599\":1,\"602\":1,\"621\":1,\"648\":2,\"659\":1,\"800\":1,\"929\":1,\"1477\":1}}],[\"构造cssom树\",{\"1\":{\"464\":1}}],[\"构造器\",{\"1\":{\"653\":3}}],[\"构造器方式\",{\"0\":{\"651\":1}}],[\"构造器也是一个函数\",{\"1\":{\"230\":1}}],[\"构造器时特殊的方法\",{\"1\":{\"230\":1}}],[\"构件dom树\",{\"1\":{\"464\":1}}],[\"构成的链表就叫做作用域链\",{\"1\":{\"1569\":1}}],[\"构成的链条查找相关属性和方法直到结束\",{\"1\":{\"646\":1}}],[\"构成原型链\",{\"1\":{\"648\":1}}],[\"构成\",{\"1\":{\"36\":1}}],[\"覆盖同名的全局变量\",{\"1\":{\"1691\":1}}],[\"覆盖\",{\"1\":{\"229\":1}}],[\"创建空对象\",{\"1\":{\"1581\":1}}],[\"创建全新的空对象\",{\"1\":{\"1581\":1}}],[\"创建活动对象\",{\"1\":{\"1572\":1}}],[\"创建过程\",{\"1\":{\"1572\":1}}],[\"创建完成之后\",{\"1\":{\"1555\":1}}],[\"创建阶段\",{\"1\":{\"1555\":2}}],[\"创建出来的这个对象\",{\"1\":{\"1521\":1}}],[\"创建\",{\"1\":{\"1486\":4,\"1555\":1,\"1569\":1,\"1571\":1,\"1572\":1}}],[\"创建对象\",{\"0\":{\"1742\":1},\"1\":{\"659\":2}}],[\"创建对象的方法\",{\"1\":{\"545\":1}}],[\"创建一个叫做\",{\"1\":{\"1668\":1}}],[\"创建一个定时器\",{\"1\":{\"1445\":1}}],[\"创建一个应用范围更广的函数\",{\"1\":{\"1419\":1}}],[\"创建一个针对性更强的函数\",{\"1\":{\"1419\":1}}],[\"创建一个新对象\",{\"1\":{\"803\":1}}],[\"创建一个仅用于封装继承过程的函数\",{\"1\":{\"656\":1}}],[\"创建一个空函数\",{\"1\":{\"394\":1}}],[\"创建两个完全同样任务的\",{\"1\":{\"592\":1}}],[\"创建了自定义的构造函数之后\",{\"1\":{\"576\":1}}],[\"创建要返回的对象\",{\"1\":{\"572\":1}}],[\"创建的对象\",{\"1\":{\"548\":1}}],[\"创建和销毁线程的开销较小\",{\"1\":{\"424\":1}}],[\"创建目录\",{\"0\":{\"196\":1}}],[\"创造出一个新的类型的过程\",{\"1\":{\"229\":1}}],[\"封装成几个块\",{\"1\":{\"1606\":1}}],[\"封装\",{\"1\":{\"229\":1}}],[\"毛皮颜色和吠叫的能力\",{\"1\":{\"229\":1}}],[\"狗\",{\"1\":{\"229\":1}}],[\"名词解释\",{\"0\":{\"229\":1,\"1547\":1}}],[\"名称\",{\"1\":{\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"299\":1,\"1621\":1}}],[\"任何在暂时性死区内访问变量的企图都会导致\",{\"1\":{\"1694\":1}}],[\"任何一对花括号中的语句集都属于一个块\",{\"1\":{\"1689\":1}}],[\"任何一个\",{\"1\":{\"1348\":1}}],[\"任何一个构造函数都有一个\",{\"1\":{\"935\":1}}],[\"任何一个子类都有构造函数\",{\"1\":{\"619\":1}}],[\"任何一个容器都可以指定为flex布局\",{\"1\":{\"332\":1}}],[\"任何一个模型都不可能反映客观事物的一切具体特征\",{\"1\":{\"228\":1}}],[\"任何库都无需将标识符加入到全局作用域中\",{\"1\":{\"1684\":1}}],[\"任何部署了\",{\"1\":{\"1234\":1}}],[\"任何\",{\"1\":{\"1185\":1}}],[\"任何其他对象\",{\"1\":{\"1122\":1}}],[\"任何用\",{\"1\":{\"1101\":1}}],[\"任何使用\",{\"1\":{\"1101\":1}}],[\"任何对象都有\",{\"1\":{\"937\":1}}],[\"任何数值\",{\"1\":{\"853\":1}}],[\"任何能够返回新对象的函数都适用于此模式\",{\"1\":{\"656\":1}}],[\"任何函数可以作为任何对象的方法来调用\",{\"1\":{\"1529\":1}}],[\"任何函数只要作为方法调用实际上都会传入一个隐式的实参\",{\"1\":{\"1517\":1}}],[\"任何函数在创建的时候\",{\"1\":{\"645\":1}}],[\"任何函数\",{\"1\":{\"591\":1}}],[\"任务队列\",{\"0\":{\"1552\":1},\"1\":{\"1532\":3}}],[\"任务队列中的任务分为宏任务和微任务\",{\"1\":{\"457\":1}}],[\"任务队列类似于缓冲区\",{\"1\":{\"457\":1}}],[\"任务下一步会被移到执行栈然后主线程执行调用栈的任务\",{\"1\":{\"457\":1}}],[\"任意类型\",{\"1\":{\"982\":1}}],[\"任意精度格式的整数\",{\"1\":{\"917\":1}}],[\"任意一个\",{\"1\":{\"893\":1}}],[\"任意一方都可以发起关闭请求\",{\"1\":{\"156\":1}}],[\"任意数量的阴影\",{\"1\":{\"59\":1}}],[\"远程主机\",{\"0\":{\"225\":1},\"1\":{\"225\":1}}],[\"远程仓库\",{\"0\":{\"168\":1}}],[\"杀死该pid的进程\",{\"1\":{\"222\":1}}],[\"备用dns\",{\"1\":{\"220\":1}}],[\"永不执行\",{\"1\":{\"1065\":1}}],[\"永远不能释放\",{\"1\":{\"1282\":1}}],[\"永远不要使用\",{\"0\":{\"893\":1}}],[\"永远不要在你的插件中使用\",{\"1\":{\"19\":1}}],[\"永远不要再全站范围的\",{\"1\":{\"19\":1}}],[\"永远写死obj作为apply的第一个参数\",{\"1\":{\"394\":1}}],[\"永久禁止防火墙服务\",{\"1\":{\"217\":1}}],[\"音乐\",{\"1\":{\"215\":1}}],[\"卸载\",{\"1\":{\"215\":2}}],[\"添加这一行\",{\"1\":{\"1684\":1}}],[\"添加这个属性只会阻止我们访问原型中的那个属性值\",{\"1\":{\"576\":1}}],[\"添加\",{\"1\":{\"1348\":1}}],[\"添加属性和存取描述符\",{\"1\":{\"694\":1}}],[\"添加或修改\",{\"1\":{\"688\":1}}],[\"添加或删除属性均为静默失败不抛出错误\",{\"1\":{\"538\":1}}],[\"添加方法或属性\",{\"1\":{\"1616\":1}}],[\"添加方法\",{\"1\":{\"572\":1}}],[\"添加到作用域链的前端\",{\"1\":{\"1571\":1}}],[\"添加到新创建对象的可枚举属性\",{\"1\":{\"548\":1,\"683\":1}}],[\"添加到fstab中进行自动挂载\",{\"1\":{\"215\":1}}],[\"添加新属性\",{\"1\":{\"541\":1}}],[\"添加验证码验证\",{\"1\":{\"418\":1}}],[\"添加作者和描述\",{\"0\":{\"129\":1}}],[\"输出结果为\",{\"1\":{\"1702\":1}}],[\"输出变量\",{\"1\":{\"1699\":1}}],[\"输出变量a\",{\"1\":{\"1699\":1}}],[\"输出应该是\",{\"1\":{\"1694\":1}}],[\"输出接口\",{\"1\":{\"1600\":1}}],[\"输出顺序\",{\"1\":{\"1052\":1,\"1053\":2,\"1054\":2}}],[\"输出属性名和属性值\",{\"1\":{\"734\":1}}],[\"输出的顺序和三元组的顺序并不重要\",{\"1\":{\"476\":1}}],[\"输出\",{\"1\":{\"383\":1,\"408\":2,\"467\":3,\"470\":3,\"473\":3,\"476\":3,\"479\":3,\"482\":2,\"485\":2,\"488\":2,\"491\":3,\"494\":2,\"497\":2,\"500\":3,\"503\":2,\"506\":3,\"509\":3,\"512\":3,\"515\":3,\"518\":2,\"524\":3,\"1427\":1,\"1503\":2,\"1700\":1}}],[\"输出成功匹配的行\",{\"1\":{\"215\":1}}],[\"输入路径\",{\"0\":{\"1632\":1}}],[\"输入需要检测的对象作为第一参数\",{\"1\":{\"838\":1}}],[\"输入url到显示页面的全过程\",{\"0\":{\"464\":1}}],[\"输入\",{\"1\":{\"205\":4,\"467\":3,\"470\":3,\"473\":3,\"476\":3,\"479\":3,\"482\":2,\"485\":2,\"488\":2,\"491\":3,\"494\":2,\"497\":2,\"500\":3,\"503\":2,\"506\":3,\"509\":3,\"512\":3,\"515\":3,\"518\":2,\"524\":3,\"1286\":1}}],[\"输入过程中可以使用tab键快速补全\",{\"1\":{\"194\":1}}],[\"输入后回车需要输入该用户的密码\",{\"1\":{\"192\":1}}],[\"输入域名是通过域名解析服务器指向对应的主机的ip地址\",{\"1\":{\"150\":1}}],[\"输入ip地址是直接从主机上调用内容\",{\"1\":{\"150\":1}}],[\"输入标签时既可以使用大写字母也可以使用小写字母\",{\"1\":{\"115\":1}}],[\"$\",{\"1\":{\"215\":1,\"245\":1,\"246\":1,\"344\":2,\"408\":5,\"570\":1,\"571\":1,\"584\":2,\"586\":1,\"603\":2,\"604\":1,\"607\":1,\"701\":2,\"734\":1,\"880\":1,\"928\":1,\"986\":2,\"1080\":1,\"1156\":3,\"1438\":8,\"1449\":10,\"1458\":1,\"1490\":2,\"1491\":4,\"1492\":1,\"1496\":1,\"1502\":1,\"1581\":1,\"1593\":1,\"1611\":3,\"1612\":4,\"1613\":2,\"1614\":4}}],[\"亲自执行\",{\"1\":{\"215\":1}}],[\"经常和\",{\"1\":{\"1322\":1}}],[\"经常和关系运算符一样配合使用\",{\"1\":{\"1252\":1}}],[\"经常在\",{\"1\":{\"1138\":1}}],[\"经典试题\",{\"0\":{\"955\":1}}],[\"经由\",{\"1\":{\"215\":1}}],[\"经验法则\",{\"1\":{\"19\":1}}],[\"调试\",{\"1\":{\"1606\":1}}],[\"调试路径\",{\"1\":{\"1286\":1}}],[\"调试方式\",{\"1\":{\"1285\":1,\"1287\":1}}],[\"调整月份数字到数组索引\",{\"1\":{\"1048\":1}}],[\"调整文本无词间空格的行\",{\"1\":{\"85\":1}}],[\"调用内部对象\",{\"1\":{\"1709\":1}}],[\"调用这个函数才能运行其中的代码\",{\"1\":{\"1684\":1}}],[\"调用的是\",{\"1\":{\"1666\":1}}],[\"调用的是重写后的\",{\"1\":{\"936\":1}}],[\"调用回调函数的函数可能会修改\",{\"1\":{\"1579\":1}}],[\"调用栈\",{\"1\":{\"1577\":1,\"1677\":1}}],[\"调用位置会使用\",{\"1\":{\"1579\":1}}],[\"调用位置就是函数在代码中被调用的位置\",{\"1\":{\"1576\":1}}],[\"调用位置\",{\"0\":{\"1576\":1},\"1\":{\"1577\":1,\"1579\":1}}],[\"调用上下文并不是\",{\"1\":{\"1525\":1}}],[\"调用上下文\",{\"0\":{\"1525\":1}}],[\"调用它的对象\",{\"1\":{\"1518\":1}}],[\"调用母体\",{\"0\":{\"1510\":1}}],[\"调用类的表达式\",{\"1\":{\"1485\":1}}],[\"调用时\",{\"1\":{\"1407\":1}}],[\"调用时没提供参数\",{\"1\":{\"1403\":1}}],[\"调用函数\",{\"1\":{\"1407\":1}}],[\"调用方式与普通函数一致\",{\"1\":{\"1338\":1}}],[\"调用方法\",{\"1\":{\"393\":1}}],[\"调用\",{\"1\":{\"1312\":1,\"1412\":1,\"1578\":1,\"1580\":1,\"1670\":1,\"1700\":1,\"1708\":1,\"1709\":1}}],[\"调用构造函数\",{\"1\":{\"1036\":1}}],[\"调用表达式的结果是\",{\"1\":{\"1034\":1}}],[\"调用自定义迭代钩子\",{\"1\":{\"989\":1}}],[\"调用实例的\",{\"1\":{\"951\":2}}],[\"调用父类的静态方法时\",{\"1\":{\"623\":1}}],[\"调用父类的方法时\",{\"1\":{\"622\":1,\"623\":2}}],[\"调用func\",{\"1\":{\"392\":1}}],[\"调用gzip压缩命令进行压缩\",{\"1\":{\"212\":1}}],[\"打印\",{\"1\":{\"392\":4,\"393\":4,\"1065\":3}}],[\"打包文件\",{\"1\":{\"212\":1}}],[\"打包压缩后的文件名\",{\"1\":{\"212\":1}}],[\"打包\",{\"0\":{\"212\":1}}],[\"打包与解压\",{\"0\":{\"210\":1}}],[\"打开⼀个\",{\"1\":{\"464\":1}}],[\"打开的文件等\",{\"1\":{\"423\":1}}],[\"打开文件并跳到第10行\",{\"1\":{\"205\":1}}],[\"打开需要编辑的文件\",{\"1\":{\"205\":1}}],[\"打开命令说明后\",{\"1\":{\"191\":1}}],[\"组件中可依赖\",{\"1\":{\"1621\":1}}],[\"组件的容器\",{\"1\":{\"1621\":1}}],[\"组件的访问器的属性\",{\"1\":{\"774\":1}}],[\"组件化更加倾向于\",{\"1\":{\"1621\":1}}],[\"组件化和模块化的思想都是\",{\"1\":{\"1621\":1}}],[\"组件化是建立在模块化思想上的一次演进\",{\"1\":{\"1621\":1}}],[\"组件字符串进行解码\",{\"1\":{\"886\":1}}],[\"组件字符串\",{\"1\":{\"885\":2}}],[\"组件\",{\"1\":{\"873\":1,\"874\":1,\"887\":3,\"1621\":1}}],[\"组合继承优化示例二\",{\"1\":{\"664\":1}}],[\"组合继承优化示例一\",{\"1\":{\"664\":1}}],[\"组合继承优化\",{\"0\":{\"664\":1}}],[\"组合继承\",{\"0\":{\"662\":1},\"1\":{\"662\":1}}],[\"组合使用构造函数模式和原型模式\",{\"0\":{\"569\":1}}],[\"组合描述了\",{\"1\":{\"229\":1}}],[\"组合\",{\"1\":{\"229\":1}}],[\"组员的权限\",{\"1\":{\"208\":1}}],[\"组成的一系列查询\",{\"1\":{\"1669\":1}}],[\"组成的键名数组\",{\"1\":{\"790\":1}}],[\"组成的数组\",{\"1\":{\"729\":1,\"741\":1}}],[\"组成\",{\"1\":{\"93\":1,\"509\":1,\"549\":1,\"1142\":1}}],[\"权威指南\",{\"1\":{\"1279\":1,\"1673\":1}}],[\"权限为\",{\"1\":{\"587\":2}}],[\"权限说明\",{\"0\":{\"208\":1}}],[\"权重为0\",{\"1\":{\"336\":4}}],[\"权重为1\",{\"1\":{\"336\":2}}],[\"权重为10\",{\"1\":{\"336\":3}}],[\"权重为100\",{\"1\":{\"336\":1}}],[\"权重值比较规则\",{\"0\":{\"18\":1}}],[\"权重值\",{\"1\":{\"17\":1}}],[\"回溯\",{\"2\":{\"523\":1}}],[\"回文子串长度是偶数\",{\"1\":{\"494\":1}}],[\"回文子串长度是奇数\",{\"1\":{\"494\":1}}],[\"回调函数会保留当前外层的作用域\",{\"1\":{\"1710\":1}}],[\"回调函数丢失\",{\"1\":{\"1579\":1}}],[\"回调函数当作参数传入\",{\"1\":{\"1502\":1}}],[\"回调函数使用得非常频繁\",{\"1\":{\"1502\":1}}],[\"回调函数是一个闭包\",{\"1\":{\"1455\":1}}],[\"回调函数是一段可执行的代码段\",{\"1\":{\"1452\":1}}],[\"回调函数在函调用函数数中也要通过\",{\"1\":{\"1454\":1}}],[\"回调函数作为参数传递给一个函数的时候\",{\"1\":{\"1454\":1}}],[\"回调函数才会执行\",{\"1\":{\"1446\":1}}],[\"回调函数实现\",{\"0\":{\"1424\":1}}],[\"回调函数运行时\",{\"1\":{\"1375\":1}}],[\"回调函数\",{\"0\":{\"1373\":1,\"1452\":1,\"1502\":1},\"1\":{\"1452\":2,\"1710\":1}}],[\"回调函数的应用不仅只在异步请求中\",{\"1\":{\"1502\":1}}],[\"回调函数的\",{\"1\":{\"669\":1}}],[\"回调函数只会在已经赋值的索引上被调用\",{\"1\":{\"669\":1}}],[\"回调\",{\"1\":{\"458\":1}}],[\"回调需要执行\",{\"1\":{\"458\":2}}],[\"回流必将引起重绘\",{\"1\":{\"439\":1}}],[\"回流\",{\"1\":{\"439\":1}}],[\"回流与重绘\",{\"0\":{\"439\":1}}],[\"回流发生在这个阶段\",{\"1\":{\"437\":1}}],[\"回复\",{\"1\":{\"304\":1}}],[\"回车符加换行符在一起被解析成一个单行结束符\",{\"1\":{\"238\":1}}],[\"回车符\",{\"1\":{\"238\":1}}],[\"回车查看下一行\",{\"1\":{\"206\":1}}],[\"回车\",{\"1\":{\"205\":2}}],[\"回传一个带有syn\",{\"1\":{\"151\":1}}],[\"保持函数在环境中一直存在\",{\"1\":{\"1708\":1}}],[\"保证至少一次报文的往返时间内端口是不可复用\",{\"1\":{\"304\":1}}],[\"保留了一些标识符为自己所用\",{\"1\":{\"247\":1}}],[\"保留字包括关键字\",{\"1\":{\"247\":1}}],[\"保留字\",{\"0\":{\"248\":1},\"1\":{\"246\":1}}],[\"保留更改\",{\"1\":{\"176\":1}}],[\"保存作用域链到函数内部属性\",{\"1\":{\"1709\":1}}],[\"保存作用域链到内部属性\",{\"1\":{\"1572\":1}}],[\"保存着\",{\"1\":{\"1709\":1}}],[\"保存到这个变量\",{\"1\":{\"1670\":1}}],[\"保存在该目录下\",{\"1\":{\"1661\":1}}],[\"保存原函数的引用\",{\"1\":{\"1505\":1}}],[\"保存的是指向堆内存中的另一个对象的指针\",{\"1\":{\"1204\":1}}],[\"保存\",{\"1\":{\"292\":1}}],[\"保存文件\",{\"1\":{\"205\":1}}],[\"保存并退出编辑\",{\"1\":{\"205\":1}}],[\"保存并退出\",{\"1\":{\"205\":1}}],[\"强缓存返回\",{\"1\":{\"431\":1}}],[\"强缓存优先级高于协商缓存\",{\"1\":{\"431\":1}}],[\"强缓存策略可以通过两种方式来设置\",{\"1\":{\"429\":1}}],[\"强缓存\",{\"0\":{\"429\":1}}],[\"强类型校验\",{\"1\":{\"230\":1}}],[\"强制绑定到指定的对象\",{\"1\":{\"1587\":1}}],[\"强制绑定到触发事件的\",{\"1\":{\"1579\":1}}],[\"强制类型转换\",{\"1\":{\"941\":1}}],[\"强制杀死该进程\",{\"1\":{\"222\":1}}],[\"强制退出\",{\"1\":{\"205\":1}}],[\"强调边框重复填充\",{\"1\":{\"65\":1}}],[\"强调边框拉伸\",{\"1\":{\"65\":1}}],[\"退出主线程的执行上下文栈\",{\"1\":{\"1552\":1}}],[\"退出查看\",{\"1\":{\"206\":3}}],[\"退出编辑\",{\"1\":{\"205\":1}}],[\"退出当前用户\",{\"1\":{\"192\":1}}],[\"按理说\",{\"1\":{\"1709\":1}}],[\"按需加载\",{\"0\":{\"1595\":1},\"1\":{\"1619\":1}}],[\"按需求赋值\",{\"1\":{\"1398\":1}}],[\"按钮提交场景\",{\"1\":{\"1447\":1}}],[\"按引用访问\",{\"1\":{\"1268\":1}}],[\"按以上相等之定义\",{\"1\":{\"1203\":1}}],[\"按位右移\",{\"1\":{\"1243\":1}}],[\"按位左移\",{\"1\":{\"1243\":1}}],[\"按位异赋值\",{\"1\":{\"1238\":1}}],[\"按位异或\",{\"0\":{\"1146\":1},\"1\":{\"1146\":1,\"1151\":1,\"1243\":1}}],[\"按位非之后就变成了\",{\"1\":{\"1160\":1}}],[\"按位非\",{\"0\":{\"1147\":1},\"1\":{\"1147\":1,\"1151\":1,\"1243\":1}}],[\"按位或赋值\",{\"1\":{\"1238\":1}}],[\"按位或\",{\"0\":{\"1145\":1},\"1\":{\"1145\":1,\"1151\":1,\"1243\":1}}],[\"按位与赋值\",{\"1\":{\"1238\":1}}],[\"按位与\",{\"0\":{\"1144\":1},\"1\":{\"1144\":1,\"1151\":1,\"1243\":1}}],[\"按值访问\",{\"1\":{\"917\":1,\"1268\":1}}],[\"按任意顺序\",{\"1\":{\"521\":1}}],[\"按对角线切割成\",{\"1\":{\"274\":1}}],[\"按\",{\"1\":{\"205\":7}}],[\"按照对应位置对应变量赋值\",{\"1\":{\"1213\":1}}],[\"按照惯例\",{\"1\":{\"246\":1,\"590\":1}}],[\"按照内存大小查看\",{\"1\":{\"215\":1}}],[\"按照底线对齐\",{\"1\":{\"94\":1}}],[\"按照\",{\"1\":{\"94\":1}}],[\"刚进入文件就是命令模式\",{\"1\":{\"205\":1}}],[\"插件进程\",{\"1\":{\"425\":1}}],[\"插件安装命令\",{\"1\":{\"215\":1}}],[\"插入排序\",{\"1\":{\"488\":1}}],[\"插入\",{\"1\":{\"205\":1}}],[\"插入模式\",{\"1\":{\"205\":2}}],[\"插页\",{\"1\":{\"59\":1}}],[\"操作数据的函数\",{\"1\":{\"1611\":1,\"1613\":1,\"1614\":1}}],[\"操作数可以是数字\",{\"1\":{\"1200\":1}}],[\"操作的对象就会在执行完一个函数后继续调用往后的方法\",{\"1\":{\"1497\":1}}],[\"操作比起非\",{\"1\":{\"1432\":1}}],[\"操作成功\",{\"1\":{\"1349\":1}}],[\"操作中断\",{\"0\":{\"1349\":1}}],[\"操作后会返回副本的值给表达式\",{\"1\":{\"1194\":1}}],[\"操作就不正确\",{\"1\":{\"1184\":1}}],[\"操作值位于运算符两侧\",{\"1\":{\"1169\":1}}],[\"操作只能由一级和二级操作\",{\"1\":{\"1161\":1}}],[\"操作只会在自身的属性上起作用\",{\"1\":{\"1101\":1}}],[\"操作权限分为一级\",{\"1\":{\"1161\":1}}],[\"操作删除的\",{\"1\":{\"1101\":1}}],[\"操作不能删除任何在全局作用域中的函数\",{\"1\":{\"1101\":1}}],[\"操作\",{\"1\":{\"946\":2,\"1432\":1,\"1621\":1}}],[\"操作符是为了实现该过程的一种语法糖\",{\"1\":{\"1581\":1}}],[\"操作符时被调用的函数\",{\"1\":{\"1581\":1}}],[\"操作符创建对象\",{\"1\":{\"1311\":1}}],[\"操作符与直接释放内存无关\",{\"1\":{\"1100\":1}}],[\"操作符用于删除对象的某个属性\",{\"1\":{\"1097\":1}}],[\"操作符适合对\",{\"1\":{\"934\":1}}],[\"操作符会从某个对象上移除指定属性\",{\"1\":{\"1101\":1}}],[\"操作符会递归查找\",{\"1\":{\"653\":1}}],[\"操作符会在通过对象能够访问给定属性时返回\",{\"1\":{\"577\":1}}],[\"操作符左边是\",{\"1\":{\"653\":1}}],[\"操作符可以确定原型与实例的关系\",{\"1\":{\"653\":1}}],[\"操作符可以判断属性在不在该对象上\",{\"1\":{\"565\":1}}],[\"操作符来调用\",{\"1\":{\"591\":2}}],[\"操作符来确定对象类型\",{\"1\":{\"571\":1}}],[\"操作符还能返回正确的结果\",{\"1\":{\"578\":1}}],[\"操作符返回一个字符串\",{\"1\":{\"934\":1,\"1119\":1}}],[\"操作符返回\",{\"1\":{\"577\":1}}],[\"操作符只要通过对象能够访问到属性就返回\",{\"1\":{\"577\":1}}],[\"操作符\",{\"1\":{\"577\":2,\"934\":1,\"1200\":1}}],[\"操作符则可以完全删除实例属性\",{\"1\":{\"576\":1}}],[\"操作符对这种对象也没有意义\",{\"1\":{\"572\":1}}],[\"操作符删除\",{\"1\":{\"1318\":1}}],[\"操作符删除不可配置的属性时\",{\"1\":{\"564\":1}}],[\"操作符删除不存在的属性或非左值时\",{\"1\":{\"564\":1}}],[\"操作符删除变量时\",{\"1\":{\"564\":1}}],[\"操作符删除对象属性或数组元素删除成功时\",{\"1\":{\"564\":1}}],[\"操作符的返回值是个布尔值\",{\"1\":{\"564\":1}}],[\"操作符调用的普通函数而已\",{\"1\":{\"1581\":1}}],[\"操作符调用绑定函数时\",{\"1\":{\"1310\":1}}],[\"操作符调用构造函数\",{\"1\":{\"572\":1}}],[\"操作符调用\",{\"1\":{\"547\":1}}],[\"操作符相同的基本过程\",{\"1\":{\"546\":1}}],[\"操作步骤示例\",{\"1\":{\"205\":1}}],[\"操作界面有三种模式\",{\"1\":{\"205\":1}}],[\"操作系统也有自己的\",{\"1\":{\"150\":1}}],[\"操作系统缓存\",{\"1\":{\"150\":1}}],[\"操作系统和设备能够正确地解析和显示web内容\",{\"1\":{\"139\":1}}],[\"查询和赋值的形式并不合适\",{\"1\":{\"1670\":1}}],[\"查询则是试图找到变量的容器本身\",{\"1\":{\"1670\":1}}],[\"查询与简单的查找某个变量的值毫无二致\",{\"1\":{\"1670\":1}}],[\"查询是什么呢\",{\"1\":{\"1670\":1}}],[\"查询\",{\"1\":{\"1670\":6,\"1709\":1}}],[\"查询数组中是否存在某值\",{\"1\":{\"1418\":1}}],[\"查询一个不存在的属性不会报错\",{\"1\":{\"560\":1}}],[\"查找的过程由作用域进行协助\",{\"1\":{\"1670\":1}}],[\"查找到\",{\"1\":{\"1572\":1}}],[\"查找索引的\",{\"1\":{\"859\":1}}],[\"查找前目录中文件属主具有读\",{\"1\":{\"215\":1}}],[\"查找\",{\"0\":{\"1675\":1},\"1\":{\"200\":1,\"215\":1}}],[\"查看当前系统端口\",{\"1\":{\"223\":1}}],[\"查看当前目录\",{\"0\":{\"201\":1}}],[\"查看当前目录下的所有目录和文件\",{\"1\":{\"195\":2}}],[\"查看与此ip地址的连接情况\",{\"1\":{\"223\":1}}],[\"查看链接\",{\"0\":{\"223\":1}}],[\"查看进程\",{\"0\":{\"221\":1}}],[\"查看网络\",{\"0\":{\"219\":1}}],[\"查看防火墙状态\",{\"1\":{\"217\":1}}],[\"查看iptables服务的状态\",{\"1\":{\"217\":1}}],[\"查看所有正在运行的进程\",{\"1\":{\"221\":1}}],[\"查看所有内存的汇总\",{\"1\":{\"215\":1}}],[\"查看所有服务状态\",{\"1\":{\"215\":1}}],[\"查看服务状态\",{\"1\":{\"215\":1}}],[\"查看指定端口\",{\"1\":{\"223\":1}}],[\"查看指定目录下的所有目录和文件\",{\"1\":{\"195\":1}}],[\"查看指令\",{\"1\":{\"215\":1}}],[\"查看文件的后100行\",{\"1\":{\"206\":1}}],[\"查看文件最后一屏内容\",{\"1\":{\"206\":1}}],[\"查看目录\",{\"0\":{\"195\":1}}],[\"查看\",{\"0\":{\"206\":1},\"1\":{\"191\":1,\"213\":1,\"1100\":1}}],[\"查看工作目录和暂存区的文件差异\",{\"1\":{\"166\":1}}],[\"查看工作目录和暂存区的状态\",{\"1\":{\"166\":1}}],[\"查看提交历史\",{\"1\":{\"166\":1}}],[\"查看和比较\",{\"0\":{\"166\":1}}],[\"查看不同背景的设置\",{\"1\":{\"105\":1}}],[\"搜索框根据输入的一部分值进行联想搜索\",{\"1\":{\"287\":1}}],[\"搜索目录\",{\"0\":{\"200\":1}}],[\"搜索引擎优化\",{\"1\":{\"129\":1}}],[\"递归原型链\",{\"1\":{\"1116\":1}}],[\"递归\",{\"1\":{\"473\":1,\"1417\":1},\"2\":{\"472\":1,\"475\":1,\"505\":1,\"520\":1,\"523\":1}}],[\"递归剪复制目录中所有文件和文件夹\",{\"1\":{\"199\":1}}],[\"递归剪切目录中所有文件和文件夹\",{\"1\":{\"198\":1}}],[\"递归删除当前目录下此名的目录\",{\"1\":{\"197\":2}}],[\"慎用\",{\"1\":{\"197\":1}}],[\"删除对象的取值函数\",{\"1\":{\"1319\":1}}],[\"删除数组元素时\",{\"1\":{\"564\":1}}],[\"删除已有属性\",{\"1\":{\"541\":1}}],[\"删除属性\",{\"1\":{\"403\":1,\"530\":2}}],[\"删除该条目\",{\"1\":{\"303\":1}}],[\"删除apache\",{\"1\":{\"215\":2}}],[\"删除当前整行\",{\"1\":{\"205\":1}}],[\"删除当前目录的的文件\",{\"1\":{\"197\":1,\"204\":1}}],[\"删除当前目录下的文件\",{\"1\":{\"197\":1,\"204\":1}}],[\"删除\",{\"0\":{\"204\":1},\"1\":{\"528\":1}}],[\"删除目录和文件\",{\"0\":{\"197\":1}}],[\"效果一样\",{\"1\":{\"195\":1}}],[\"效果等同于\",{\"1\":{\"81\":1}}],[\"直至增量为\",{\"1\":{\"488\":1}}],[\"直到作用域链终点即全局执行环境\",{\"1\":{\"1707\":1}}],[\"直到遇见第一个匹配的标识符为止\",{\"1\":{\"1676\":1}}],[\"直到遇到非数字字符为止\",{\"1\":{\"909\":1,\"913\":1}}],[\"直到定时器的回调函数在时间间隔后开始执行\",{\"1\":{\"1446\":1}}],[\"直到事件在设定的时间间隔内事件不被触发\",{\"1\":{\"1446\":1}}],[\"直到事件的目标节点上\",{\"1\":{\"453\":1}}],[\"直到最后一次触发后过去设定时间后才执行\",{\"1\":{\"1444\":1}}],[\"直到那个表达式不为\",{\"1\":{\"1058\":1}}],[\"直到\",{\"1\":{\"974\":1,\"1435\":1}}],[\"直到找到为止或全局作用域查找完毕\",{\"1\":{\"1708\":1}}],[\"直到找到了或者到达顶层为止\",{\"1\":{\"653\":1}}],[\"直到找到属性或方法为止\",{\"1\":{\"646\":1}}],[\"直到队列为空或者达到系统限制\",{\"1\":{\"458\":1}}],[\"直到微任务执行完毕\",{\"1\":{\"457\":1}}],[\"直到到达最外层节点\",{\"1\":{\"453\":1}}],[\"直到这一方向也发送了\",{\"1\":{\"304\":1}}],[\"直到图片完全包含在容器内\",{\"1\":{\"104\":1}}],[\"直线ab\",{\"1\":{\"274\":2}}],[\"直接加载\",{\"1\":{\"1661\":1}}],[\"直接完整导出\",{\"1\":{\"1640\":1}}],[\"直接使用\",{\"1\":{\"1619\":1}}],[\"直接使用缓存内容\",{\"1\":{\"430\":1}}],[\"直接进入所支持的分支代码\",{\"1\":{\"1468\":1}}],[\"直接进入第四次挥手\",{\"1\":{\"304\":1}}],[\"直接返回对象\",{\"0\":{\"1371\":1}}],[\"直接将其传入构造函数\",{\"1\":{\"1179\":1}}],[\"直接将属性和方法赋给了\",{\"1\":{\"590\":1}}],[\"直接调用\",{\"1\":{\"392\":1,\"393\":1}}],[\"直接量\",{\"0\":{\"245\":1},\"1\":{\"239\":1,\"245\":1}}],[\"直接切换到目标目录\",{\"1\":{\"194\":1}}],[\"切换时不需要切换内存页表\",{\"1\":{\"423\":1}}],[\"切换到本目录下的名为xx的文件目录\",{\"1\":{\"194\":1}}],[\"切换到上次访问的目录\",{\"1\":{\"194\":1}}],[\"切换到上一级目录\",{\"1\":{\"194\":1}}],[\"切换到home目录\",{\"1\":{\"194\":1}}],[\"切换到根目录下的bin目录\",{\"1\":{\"194\":1}}],[\"切换到根目录\",{\"1\":{\"194\":1}}],[\"切换目录\",{\"0\":{\"194\":1}}],[\"切换为用户\",{\"1\":{\"192\":1}}],[\"切换用户\",{\"0\":{\"192\":1}}],[\"切换分支或还原文件\",{\"1\":{\"167\":1}}],[\"两者都是指向同一个对象\",{\"1\":{\"1616\":1}}],[\"两者区别主要是后者为动态加载\",{\"1\":{\"1593\":1}}],[\"两者的差异如下\",{\"1\":{\"401\":1}}],[\"两边操作数不相等或类型不同时返回\",{\"1\":{\"1202\":1}}],[\"两边操作数相等且类型相同时返回\",{\"1\":{\"1202\":1}}],[\"两边数据不统一\",{\"1\":{\"948\":1}}],[\"两个标识符可能具有相同的名字但用途却不一样\",{\"1\":{\"1682\":1}}],[\"两个阶段来剖析作用域链是如何创建和变化的\",{\"1\":{\"1569\":1}}],[\"两个阶段\",{\"1\":{\"1555\":1}}],[\"两个处理程序\",{\"1\":{\"1538\":1}}],[\"两个方法都可以指定调用的实参\",{\"1\":{\"1529\":1}}],[\"两个不同的\",{\"1\":{\"1203\":1}}],[\"两个不相同则返回\",{\"1\":{\"1151\":1}}],[\"两个操作数会调用\",{\"1\":{\"951\":1}}],[\"两个值指向同一个对象\",{\"1\":{\"762\":1}}],[\"两个值是由相同个数的字符按照相同顺序组成的字符串\",{\"1\":{\"762\":1}}],[\"两个值都是数字并且\",{\"1\":{\"762\":1}}],[\"两个值都是\",{\"1\":{\"762\":1}}],[\"两个值均为\",{\"1\":{\"762\":2}}],[\"两个属性\",{\"1\":{\"662\":2}}],[\"两个实例访问\",{\"1\":{\"576\":1}}],[\"两个\",{\"1\":{\"515\":1}}],[\"两个协议\",{\"1\":{\"318\":1}}],[\"两数之和\",{\"0\":{\"515\":1}}],[\"两台主机之间的数据传输\",{\"1\":{\"318\":1}}],[\"两条语句用一行书写\",{\"1\":{\"252\":1}}],[\"两条语句用两行书写\",{\"1\":{\"252\":1}}],[\"两分钟后重启\",{\"1\":{\"190\":1}}],[\"两分钟后关机\",{\"1\":{\"190\":1}}],[\"两端的标签可以使内容变成超链接\",{\"1\":{\"115\":1}}],[\"参数复用\",{\"1\":{\"1418\":1}}],[\"参数形成一个单独的作用域\",{\"1\":{\"1407\":1}}],[\"参数会形成一个单独的作用域\",{\"1\":{\"1407\":2}}],[\"参数作用域出线的变量名率先寻找参数作用域内先声明的参数\",{\"1\":{\"1407\":1}}],[\"参数作用域\",{\"0\":{\"1407\":1}}],[\"参数也不会计入\",{\"1\":{\"1406\":1}}],[\"参数默认值的位置\",{\"0\":{\"1405\":1}}],[\"参数默认值是惰性求值的\",{\"1\":{\"1402\":1}}],[\"参数默认值不是传值的\",{\"1\":{\"1402\":1}}],[\"参数命名冲突\",{\"0\":{\"1401\":1}}],[\"参数变量是\",{\"1\":{\"1400\":1}}],[\"参数对象\",{\"1\":{\"1394\":1}}],[\"参数传递其实是一种隐式赋值\",{\"1\":{\"1579\":1}}],[\"参数传递\",{\"0\":{\"1387\":1}}],[\"参数数量\",{\"0\":{\"1382\":1}}],[\"参数代替\",{\"1\":{\"1374\":1}}],[\"参数之间使用逗号分隔\",{\"1\":{\"1328\":1}}],[\"参数列表\",{\"1\":{\"1328\":1}}],[\"参数列表中的入参都可以使用扩展语法\",{\"1\":{\"1178\":1}}],[\"参数是一组无次序的值\",{\"1\":{\"1231\":1}}],[\"参数是一组有次序的值\",{\"1\":{\"1231\":1}}],[\"参数不是\",{\"1\":{\"683\":1}}],[\"参数\",{\"0\":{\"960\":1,\"968\":1,\"982\":1,\"991\":1,\"1009\":1,\"1099\":1,\"1107\":1,\"1121\":1,\"1302\":1,\"1306\":1,\"1310\":1},\"1\":{\"548\":1,\"662\":1,\"668\":1,\"669\":1,\"730\":1,\"746\":1,\"791\":1,\"800\":1,\"829\":1,\"891\":1,\"913\":5,\"960\":1,\"968\":1,\"982\":1,\"991\":1,\"1018\":1,\"1099\":1,\"1107\":1,\"1121\":1,\"1302\":1,\"1306\":1,\"1310\":1,\"1317\":1,\"1321\":1,\"1327\":1,\"1382\":1,\"1393\":1,\"1407\":3,\"1441\":1,\"1587\":1,\"1593\":1}}],[\"参数为\",{\"1\":{\"946\":2}}],[\"参数为原始类型\",{\"1\":{\"547\":1}}],[\"参数为函数\",{\"1\":{\"547\":1}}],[\"参数为对象\",{\"1\":{\"547\":2}}],[\"参数说明\",{\"1\":{\"212\":1,\"668\":1,\"730\":1,\"746\":1,\"791\":1,\"829\":1}}],[\"参数值\",{\"1\":{\"188\":1}}],[\"参数名\",{\"1\":{\"188\":1}}],[\"临时性死区\",{\"1\":{\"1067\":1}}],[\"临时性的构造函数\",{\"1\":{\"640\":1}}],[\"临时文件\",{\"1\":{\"186\":1}}],[\"临时设备的默认挂载点\",{\"1\":{\"186\":1}}],[\"进一步说\",{\"1\":{\"1338\":1}}],[\"进一步说明\",{\"1\":{\"1160\":1}}],[\"进制颜色值之间的转换\",{\"1\":{\"1156\":1}}],[\"进制值\",{\"1\":{\"1147\":1}}],[\"进制数\",{\"0\":{\"923\":1}}],[\"进制表示为开头是\",{\"1\":{\"245\":1}}],[\"进而可以获得对应key的value\",{\"1\":{\"345\":1}}],[\"进程是系统资源分配和调度的单元\",{\"1\":{\"1547\":1}}],[\"进程是计算机中正在运行的程序的实例\",{\"1\":{\"422\":1}}],[\"进程之间资源相互隔离\",{\"1\":{\"424\":1}}],[\"进程之间通过进程间通信\",{\"1\":{\"422\":1}}],[\"进程的切换开销较大\",{\"1\":{\"422\":1}}],[\"进程和线程的概念以及关系\",{\"1\":{\"1547\":1}}],[\"进程和线程都可以实现并发执行\",{\"1\":{\"424\":1}}],[\"进程和线程\",{\"0\":{\"421\":1}}],[\"进程\",{\"0\":{\"422\":1},\"1\":{\"318\":1,\"1547\":1}}],[\"进程信息及硬件信息\",{\"1\":{\"186\":1}}],[\"进入函数上下文\",{\"1\":{\"1571\":1}}],[\"进入宿主环境中用于处理定时器的线程\",{\"1\":{\"1538\":1}}],[\"进入整体代码\",{\"1\":{\"1533\":1}}],[\"进入执行上下文阶段的变量对象\",{\"0\":{\"1564\":1}}],[\"进入执行上下文\",{\"1\":{\"1563\":1}}],[\"进入执行上下文执行\",{\"1\":{\"1552\":1}}],[\"进入执行栈\",{\"1\":{\"1532\":1}}],[\"进入执行环境\",{\"1\":{\"1282\":1}}],[\"进入环境\",{\"1\":{\"1282\":1}}],[\"进入到下一个阶段之前立即执行\",{\"1\":{\"459\":1}}],[\"进入底行模式\",{\"1\":{\"205\":2}}],[\"进入后\",{\"1\":{\"205\":1}}],[\"进行编译\",{\"1\":{\"1616\":1}}],[\"进行提前编译打包\",{\"1\":{\"1616\":1}}],[\"进行柯里化\",{\"1\":{\"1586\":1}}],[\"进行清除\",{\"1\":{\"1446\":1}}],[\"进行\",{\"1\":{\"953\":1,\"1670\":2,\"1709\":1}}],[\"进行解码\",{\"1\":{\"868\":1}}],[\"进行解释\",{\"1\":{\"240\":1}}],[\"进行基准数据赋值\",{\"1\":{\"488\":1}}],[\"进行缓存\",{\"1\":{\"464\":1}}],[\"进行同源检测\",{\"1\":{\"418\":1}}],[\"进行查找\",{\"1\":{\"205\":1,\"1709\":1}}],[\"进行定位\",{\"1\":{\"35\":2}}],[\"普通的做法就是监听\",{\"1\":{\"1438\":1}}],[\"普通函数遵照小驼峰式命名法\",{\"1\":{\"1477\":1}}],[\"普通函数\",{\"1\":{\"1375\":1,\"1477\":1}}],[\"普通函数写法\",{\"1\":{\"1373\":2}}],[\"普通函数和箭头函数的区别\",{\"1\":{\"346\":1}}],[\"普通对象\",{\"1\":{\"943\":1,\"1130\":1}}],[\"普通方法\",{\"0\":{\"622\":1},\"1\":{\"623\":1}}],[\"普通浏览器\",{\"1\":{\"455\":1}}],[\"普通授权\",{\"1\":{\"209\":1}}],[\"普通用户为$\",{\"1\":{\"187\":1}}],[\"普通用户的家目录\",{\"1\":{\"186\":1}}],[\"普通空格\",{\"1\":{\"54\":1}}],[\"区分数组\",{\"1\":{\"1130\":1}}],[\"区分大小写\",{\"0\":{\"235\":1},\"1\":{\"235\":1}}],[\"区别主要是前者是异步加载\",{\"1\":{\"1593\":1}}],[\"区别是\",{\"1\":{\"1404\":1}}],[\"区别在于\",{\"1\":{\"700\":1}}],[\"区别\",{\"0\":{\"424\":1,\"431\":1}}],[\"区别总结\",{\"0\":{\"178\":1}}],[\"区域开始显示背景图像\",{\"1\":{\"101\":1}}],[\"区域\",{\"1\":{\"101\":2}}],[\"移除\",{\"1\":{\"1408\":1}}],[\"移除未跟踪的文件\",{\"1\":{\"169\":1}}],[\"移出方向判断\",{\"0\":{\"276\":1}}],[\"移入方向判断\",{\"0\":{\"275\":1}}],[\"移动端\",{\"1\":{\"1621\":1}}],[\"移动\",{\"1\":{\"176\":2}}],[\"告诉客户端\",{\"1\":{\"304\":2}}],[\"告诉\",{\"1\":{\"171\":1,\"1632\":1}}],[\"撤销本次修改并退出编辑\",{\"1\":{\"205\":1}}],[\"撤销之前的提交\",{\"1\":{\"178\":1}}],[\"撤销指定的提交\",{\"1\":{\"169\":1}}],[\"撤销和重置\",{\"0\":{\"169\":1}}],[\"拉取远程仓库的变更并合并\",{\"1\":{\"168\":1}}],[\"拉取远程分支并合并到当前分支\",{\"1\":{\"167\":1}}],[\"拉伸图片以填充边框\",{\"1\":{\"65\":1}}],[\"列入标准\",{\"0\":{\"1295\":1}}],[\"列表页\",{\"1\":{\"1621\":1}}],[\"列表元素\",{\"1\":{\"329\":1}}],[\"列表查看\",{\"1\":{\"195\":1}}],[\"列表查看当前目录下的所有目录和文件\",{\"1\":{\"195\":1}}],[\"列表中显示\",{\"1\":{\"130\":1}}],[\"列出目前的权限\",{\"1\":{\"215\":1}}],[\"列出或创建标签\",{\"1\":{\"170\":1}}],[\"列出本地分支\",{\"1\":{\"167\":1}}],[\"仓库\",{\"1\":{\"165\":1}}],[\"基本语法\",{\"0\":{\"1727\":1}}],[\"基本不用\",{\"1\":{\"1619\":1}}],[\"基本数据类型的值保存在栈中\",{\"1\":{\"1284\":1}}],[\"基本数据类型\",{\"0\":{\"1266\":1},\"1\":{\"1329\":1}}],[\"基本规则\",{\"0\":{\"942\":1}}],[\"基本上够我们使用\",{\"1\":{\"925\":1}}],[\"基本类型值\",{\"0\":{\"1388\":1}}],[\"基本类型\",{\"1\":{\"917\":1,\"934\":1}}],[\"基本示例\",{\"0\":{\"748\":1}}],[\"基本用法\",{\"0\":{\"671\":1,\"713\":1,\"756\":1,\"776\":1,\"819\":1,\"837\":1,\"1214\":1,\"1339\":1,\"1399\":1},\"1\":{\"1303\":1,\"1319\":1,\"1323\":1}}],[\"基本写法\",{\"0\":{\"597\":1}}],[\"基准数据和右边数组进行拼接成一个完整的数组\",{\"1\":{\"488\":1}}],[\"基于那个对象的方法可以执行多种操作\",{\"1\":{\"1517\":1}}],[\"基于语义的字符或者字符串相等的定义以及\",{\"1\":{\"1203\":1}}],[\"基于父类实例\",{\"1\":{\"619\":1}}],[\"基于proxy来做数据大劫持代理\",{\"1\":{\"403\":1}}],[\"基于proxy和reflect\",{\"1\":{\"401\":1}}],[\"基于object\",{\"1\":{\"401\":1}}],[\"基于\",{\"1\":{\"298\":1,\"311\":1}}],[\"基础上提出的\",{\"1\":{\"1618\":1}}],[\"基础操作\",{\"0\":{\"189\":1}}],[\"基础知识\",{\"0\":{\"185\":1}}],[\"基础命令\",{\"0\":{\"165\":1}}],[\"基线和底线之间有距离的\",{\"1\":{\"94\":1}}],[\"常规性是用\",{\"1\":{\"1691\":1}}],[\"常常使用逻辑或运算符给省略的参数设置一个合理的默认值\",{\"1\":{\"1382\":1}}],[\"常量可以定义成数组\",{\"1\":{\"1068\":1}}],[\"常量可以定义成对象\",{\"1\":{\"1068\":1}}],[\"常量要求一个初始值\",{\"1\":{\"1068\":1}}],[\"常量的值就不能改变\",{\"1\":{\"1068\":1}}],[\"常用于返回一个处理过后的新数组\",{\"1\":{\"348\":1}}],[\"常用命令\",{\"0\":{\"164\":1,\"181\":1}}],[\"常见的为\",{\"1\":{\"1466\":1}}],[\"常见的高频触发监听事件的应用场景\",{\"1\":{\"1437\":1}}],[\"常见的内存泄漏的原因\",{\"1\":{\"1284\":1}}],[\"常见的ipc方式包括管道\",{\"1\":{\"422\":1}}],[\"常见浏览器所用内核\",{\"0\":{\"436\":1}}],[\"常见javascript引擎\",{\"1\":{\"144\":1}}],[\"常见元素\",{\"0\":{\"135\":1}}],[\"渲染线程在执行任务的时候\",{\"1\":{\"1549\":1}}],[\"渲染线程和\",{\"1\":{\"1549\":1}}],[\"渲染\",{\"1\":{\"1532\":1}}],[\"渲染进程负责解析html\",{\"1\":{\"425\":1}}],[\"渲染进程\",{\"1\":{\"425\":1}}],[\"渲染页面等主要任务\",{\"1\":{\"425\":1}}],[\"渲染树构建完成后\",{\"1\":{\"437\":1}}],[\"渲染树中并没有head\",{\"1\":{\"157\":1}}],[\"渲染树与dom树不同\",{\"1\":{\"157\":1}}],[\"渲染引擎线程\",{\"1\":{\"1549\":1}}],[\"渲染引擎\",{\"0\":{\"143\":1},\"1\":{\"143\":1,\"1550\":2}}],[\"完全采用\",{\"1\":{\"1589\":1}}],[\"完全覆盖\",{\"1\":{\"104\":1}}],[\"完美写法\",{\"1\":{\"664\":1}}],[\"完成三次握手\",{\"1\":{\"301\":1}}],[\"完成一次\",{\"1\":{\"156\":1}}],[\"76\",{\"1\":{\"716\":1}}],[\"768\",{\"1\":{\"309\":1}}],[\"77\",{\"1\":{\"506\":1}}],[\"777\",{\"1\":{\"209\":1}}],[\"7\",{\"0\":{\"154\":1,\"218\":1,\"347\":1,\"453\":1,\"518\":1},\"1\":{\"209\":1,\"349\":2,\"374\":4,\"470\":1,\"479\":2,\"485\":3,\"515\":1,\"524\":1,\"701\":3,\"923\":1,\"1004\":6,\"1091\":1,\"1092\":1,\"1143\":1,\"1221\":1,\"1243\":1,\"1509\":1,\"1581\":1}}],[\"700\",{\"1\":{\"75\":2}}],[\"框架举例\",{\"1\":{\"153\":1}}],[\"语义非常清晰\",{\"1\":{\"1229\":1}}],[\"语义更好\",{\"1\":{\"632\":1}}],[\"语言和宿主环境中许多新的内置函数\",{\"1\":{\"1580\":1}}],[\"语言中\",{\"1\":{\"1284\":1,\"1473\":1}}],[\"语言那样要定义好数据类型\",{\"1\":{\"941\":1}}],[\"语言\",{\"1\":{\"590\":1}}],[\"语言的相似\",{\"1\":{\"930\":1}}],[\"语言的\",{\"1\":{\"153\":1}}],[\"语句输出的接口\",{\"1\":{\"1654\":1}}],[\"语句写在一起\",{\"1\":{\"1639\":1}}],[\"语句放在\",{\"1\":{\"1593\":1}}],[\"语句是\",{\"1\":{\"1635\":1}}],[\"语句是在编译阶段\",{\"1\":{\"1593\":1}}],[\"语句是例外\",{\"1\":{\"1034\":1}}],[\"语句返回一个对象\",{\"1\":{\"1526\":1}}],[\"语句返回的值\",{\"1\":{\"1344\":1}}],[\"语句但没有指定返回值\",{\"1\":{\"1526\":1}}],[\"语句决定\",{\"1\":{\"1477\":1}}],[\"语句了\",{\"1\":{\"1469\":1}}],[\"语句捕捉\",{\"1\":{\"1349\":1}}],[\"语句退出循环\",{\"1\":{\"1349\":1}}],[\"语句后面的\",{\"1\":{\"1348\":1}}],[\"语句后的所有语句都不执行\",{\"1\":{\"1034\":1}}],[\"语句或者抛出错误\",{\"1\":{\"1345\":1}}],[\"语句里的\",{\"1\":{\"1329\":1}}],[\"语句打印调试信息\",{\"1\":{\"1289\":1}}],[\"语句具有同样表达效果\",{\"1\":{\"1197\":1}}],[\"语句也会带来同样的效果\",{\"1\":{\"1197\":1}}],[\"语句块不会生成一个新的作用域\",{\"1\":{\"1075\":1}}],[\"语句块中声明的变量将成为语句块所在代码段的局部变量\",{\"1\":{\"1069\":1}}],[\"语句块\",{\"1\":{\"1069\":2}}],[\"语句循环中\",{\"1\":{\"1066\":1}}],[\"语句所声明的变量有如下特征\",{\"1\":{\"1066\":1}}],[\"语句声明一个块级作用域的本地变量\",{\"1\":{\"1066\":1}}],[\"语句的每个分支都会为\",{\"1\":{\"1469\":1}}],[\"语句的一部分\",{\"1\":{\"1248\":1}}],[\"语句的代码是等价的\",{\"1\":{\"1197\":1}}],[\"语句的\",{\"1\":{\"1054\":1}}],[\"语句的区别在于\",{\"1\":{\"969\":1}}],[\"语句没有\",{\"1\":{\"1054\":1}}],[\"语句指定的值\",{\"1\":{\"1052\":1}}],[\"语句包含了由一个或者多个语句组成的\",{\"1\":{\"1051\":1}}],[\"语句包含一个可选的标签\",{\"1\":{\"960\":1}}],[\"语句将能引发错误的代码放在\",{\"1\":{\"1051\":1}}],[\"语句允许一个程序求一个表达式的值并且尝试去匹配表达式的值到一个\",{\"1\":{\"1039\":1}}],[\"语句可单独使用而不必带有表达式\",{\"1\":{\"1036\":1}}],[\"语句可以与\",{\"1\":{\"1639\":1}}],[\"语句可以在某个条件表达式为真的前提下\",{\"1\":{\"1058\":1}}],[\"语句可以单独使用而不必带有表达式\",{\"1\":{\"1035\":1}}],[\"语句可以包含一个可选的标号以控制程序跳转到指定循环的下一次迭代\",{\"1\":{\"969\":1}}],[\"语句可用来使函数提前返回\",{\"1\":{\"1034\":1}}],[\"语句经常作为函数内的最后一条语句出现\",{\"1\":{\"1034\":1}}],[\"语句时\",{\"1\":{\"1034\":1}}],[\"语句只能出现在函数体内\",{\"1\":{\"1033\":1,\"1036\":1}}],[\"语句用来返回函数调用后的返回值\",{\"1\":{\"1030\":1}}],[\"语句用于创建一个常量\",{\"1\":{\"1068\":1}}],[\"语句用于声明一个变量\",{\"1\":{\"1065\":1}}],[\"语句用于遍历数组或者对象的属性\",{\"1\":{\"980\":1}}],[\"语句用于结束当前\",{\"1\":{\"966\":1}}],[\"语句用于立即退出最内层的循环或\",{\"1\":{\"958\":1}}],[\"语句来指示程序是否中断循环或继续执行\",{\"1\":{\"1025\":1}}],[\"语句一起使用\",{\"1\":{\"1023\":1}}],[\"语句嵌套七种\",{\"1\":{\"1018\":1}}],[\"语句else可选\",{\"1\":{\"1018\":1}}],[\"语句执行一个语句\",{\"1\":{\"1017\":1}}],[\"语句除外\",{\"1\":{\"1009\":1}}],[\"语句遍历可迭代对象定义要迭代的数据\",{\"1\":{\"1004\":1}}],[\"语句以原始插入顺序迭代对象的可枚举属性\",{\"1\":{\"1004\":1}}],[\"语句都是迭代一些东西\",{\"1\":{\"1004\":1}}],[\"语句在\",{\"1\":{\"1053\":1,\"1059\":1}}],[\"语句在可迭代对象\",{\"1\":{\"989\":1}}],[\"语句在对应的循环内部\",{\"1\":{\"969\":1}}],[\"语句不相同\",{\"1\":{\"1593\":1}}],[\"语句不必每次都执行\",{\"1\":{\"1466\":1}}],[\"语句不会阻止\",{\"1\":{\"1034\":1,\"1036\":1}}],[\"语句不抛出错误\",{\"1\":{\"983\":1}}],[\"语句不在一个循环或\",{\"1\":{\"960\":1}}],[\"语句创建一个执行指定语句的循环\",{\"1\":{\"974\":1}}],[\"语句和声明\",{\"0\":{\"1751\":1}}],[\"语句和\",{\"1\":{\"969\":1}}],[\"语句和标签一块使用时\",{\"1\":{\"960\":1}}],[\"语句带不带标签\",{\"1\":{\"969\":1}}],[\"语句需要内嵌在引用的标签中\",{\"1\":{\"960\":1}}],[\"语句中实现\",{\"1\":{\"1052\":1}}],[\"语句中的执行操作成功\",{\"1\":{\"1052\":1}}],[\"语句中使用它\",{\"1\":{\"1048\":1}}],[\"语句中使用\",{\"1\":{\"971\":2}}],[\"语句中\",{\"1\":{\"960\":1}}],[\"语句\",{\"0\":{\"958\":1,\"963\":1,\"966\":1,\"974\":1,\"980\":1,\"989\":1,\"1007\":1,\"1017\":1,\"1023\":1,\"1030\":1,\"1039\":1,\"1045\":1,\"1051\":1,\"1058\":1},\"1\":{\"571\":1,\"590\":1,\"731\":1,\"958\":1,\"1007\":1,\"1017\":4,\"1033\":1,\"1034\":1,\"1036\":2,\"1041\":1,\"1045\":1,\"1054\":3,\"1197\":1,\"1348\":1,\"1349\":1,\"1477\":1,\"1593\":1,\"1620\":1,\"1635\":1}}],[\"语法分析\",{\"1\":{\"1665\":1,\"1667\":1}}],[\"语法编译成能让浏览器识别的语法\",{\"1\":{\"1619\":1}}],[\"语法存在兼容性问题\",{\"1\":{\"1427\":1}}],[\"语法的多重嵌套函数\",{\"1\":{\"1376\":1}}],[\"语法时请注意\",{\"1\":{\"1322\":1}}],[\"语法时应注意以下问题\",{\"1\":{\"1318\":1}}],[\"语法将对象属性绑定到要调用的函数\",{\"1\":{\"1320\":1}}],[\"语法将对象属性绑定到查询该属性时将被调用的函数\",{\"1\":{\"1316\":1}}],[\"语法是一个\",{\"1\":{\"1212\":1}}],[\"语法\",{\"0\":{\"668\":1,\"677\":1,\"683\":1,\"688\":1,\"693\":1,\"699\":1,\"705\":1,\"710\":1,\"720\":1,\"725\":1,\"730\":1,\"741\":1,\"746\":1,\"753\":1,\"761\":1,\"767\":1,\"773\":1,\"780\":1,\"785\":1,\"791\":1,\"800\":1,\"811\":1,\"817\":1,\"824\":1,\"829\":1,\"834\":1,\"842\":1,\"847\":1,\"869\":1,\"874\":1,\"879\":1,\"885\":1,\"891\":1,\"898\":1,\"903\":1,\"909\":1,\"959\":1,\"967\":1,\"975\":1,\"981\":1,\"990\":1,\"1008\":1,\"1024\":1,\"1031\":1,\"1040\":1,\"1046\":1,\"1059\":1,\"1087\":1,\"1098\":1,\"1106\":1,\"1120\":1,\"1165\":1,\"1173\":1,\"1301\":1,\"1305\":1,\"1309\":1,\"1317\":1,\"1321\":1,\"1328\":1,\"1331\":1,\"1343\":1},\"1\":{\"59\":1,\"60\":1,\"61\":1,\"71\":1,\"83\":1,\"98\":1,\"101\":1,\"102\":1,\"548\":1,\"668\":1,\"693\":1,\"730\":1,\"746\":1,\"753\":1,\"767\":1,\"773\":1,\"785\":1,\"791\":1,\"811\":1,\"817\":1,\"824\":1,\"829\":1,\"913\":1}}],[\"语法如\",{\"1\":{\"28\":1}}],[\"重点是\",{\"1\":{\"1547\":1}}],[\"重要的是要指出嵌套在\",{\"1\":{\"1067\":1}}],[\"重设构造函数\",{\"1\":{\"578\":1}}],[\"重复声明无效\",{\"0\":{\"1702\":1}}],[\"重复加载\",{\"0\":{\"1635\":1}}],[\"重复执行步骤\",{\"1\":{\"457\":1}}],[\"重复的数据\",{\"1\":{\"403\":1}}],[\"重绘\",{\"1\":{\"439\":1}}],[\"重绘发生在这个阶段\",{\"1\":{\"437\":1}}],[\"重传机制\",{\"0\":{\"305\":1},\"1\":{\"313\":1}}],[\"重置定时器\",{\"1\":{\"289\":1}}],[\"重置当前分支的\",{\"1\":{\"169\":1}}],[\"重定义\",{\"1\":{\"229\":1}}],[\"重定向\",{\"1\":{\"153\":2}}],[\"重启iptables服务\",{\"1\":{\"217\":1}}],[\"重启服务\",{\"1\":{\"215\":1}}],[\"重写现象\",{\"0\":{\"1511\":1}}],[\"重写add方法\",{\"1\":{\"1491\":1}}],[\"重写对象和上面一样会失败\",{\"1\":{\"1068\":1}}],[\"重写原型对象切断了现有原型与任何之前已经存在的对象实例之间的联系\",{\"1\":{\"579\":1}}],[\"重写数组原型的方法\",{\"1\":{\"402\":1}}],[\"重写规则\",{\"1\":{\"153\":1}}],[\"重写\",{\"1\":{\"153\":1}}],[\"重新赋值声明导致报错\",{\"1\":{\"1693\":1}}],[\"重新指向新的对象\",{\"1\":{\"1616\":1}}],[\"重新执行逻辑\",{\"1\":{\"1444\":1}}],[\"重新执行上面的过程\",{\"1\":{\"153\":1}}],[\"重新渲染元素的外观\",{\"1\":{\"439\":1}}],[\"重新定义数组原型\",{\"1\":{\"402\":1}}],[\"重新发送\",{\"1\":{\"153\":1}}],[\"假若在等待的时间内\",{\"1\":{\"1446\":1}}],[\"假定\",{\"1\":{\"1551\":1}}],[\"假定电梯没有容量限制\",{\"1\":{\"1444\":1}}],[\"假定其仍是默认值\",{\"1\":{\"1135\":1}}],[\"假值等效值\",{\"1\":{\"1020\":1}}],[\"假设上面两行代码的功能完全一样\",{\"1\":{\"1517\":1}}],[\"假设你正在乘电梯上楼\",{\"1\":{\"1444\":1}}],[\"假设你正在爬楼梯\",{\"1\":{\"518\":1}}],[\"假设这个函数是用于求和\",{\"1\":{\"1416\":1}}],[\"假设有一个\",{\"1\":{\"1411\":1,\"1658\":1}}],[\"假设\",{\"1\":{\"653\":1}}],[\"假设资源为html文档\",{\"1\":{\"464\":1}}],[\"假设它是一个非替换元素\",{\"1\":{\"329\":1}}],[\"假设该\",{\"1\":{\"51\":1}}],[\"假如服务器配置了\",{\"1\":{\"153\":1}}],[\"身份信息等\",{\"1\":{\"153\":1}}],[\"验证内部的\",{\"1\":{\"1613\":1}}],[\"验证\",{\"1\":{\"418\":1}}],[\"验证该用户可以使用该方法\",{\"1\":{\"153\":1}}],[\"验证虚拟主机是否接受此方法\",{\"1\":{\"153\":1}}],[\"验证是否配置虚拟主机\",{\"1\":{\"153\":1}}],[\"路径直接使用模块名称\",{\"1\":{\"1616\":1}}],[\"路径\",{\"1\":{\"1616\":1}}],[\"路径总和\",{\"0\":{\"470\":1}}],[\"路径等\",{\"1\":{\"153\":1}}],[\"路由信息协议\",{\"1\":{\"311\":1}}],[\"路由器也有自己的缓存\",{\"1\":{\"150\":1}}],[\"路由器缓存\",{\"1\":{\"150\":1,\"464\":1}}],[\"域名必须一致\",{\"1\":{\"449\":1}}],[\"域名系统\",{\"1\":{\"311\":1}}],[\"域名\",{\"1\":{\"153\":1}}],[\"大部分情况下时这样的\",{\"1\":{\"1674\":1}}],[\"大部分标准语言编译器的第一个工作阶段叫作\",{\"1\":{\"1674\":1}}],[\"大部分浏览器将开启最大兼容模式来解析网页\",{\"1\":{\"321\":1}}],[\"大大改善了\",{\"1\":{\"1621\":1}}],[\"大于等于\",{\"1\":{\"1201\":1,\"1243\":1}}],[\"大于\",{\"1\":{\"1201\":1,\"1243\":1}}],[\"大于任何值\",{\"1\":{\"853\":1}}],[\"大整数\",{\"0\":{\"929\":1},\"1\":{\"929\":1}}],[\"大小只有4kb\",{\"1\":{\"443\":1}}],[\"大多数内存管理的问题都在这个阶段\",{\"1\":{\"1276\":1}}],[\"大多数平台下值为\",{\"1\":{\"1132\":1}}],[\"大多数其他类型的值无法强制转换为\",{\"1\":{\"903\":1}}],[\"大多数浏览器的\",{\"1\":{\"624\":1}}],[\"大多数浏览器支持更通用的格式\",{\"1\":{\"130\":1}}],[\"大多数配置文件\",{\"1\":{\"186\":1}}],[\"大致流程\",{\"1\":{\"153\":1}}],[\"诸如apache\",{\"1\":{\"153\":1}}],[\"帧\",{\"1\":{\"152\":1,\"317\":1}}],[\"目的是对数组进行排序\",{\"1\":{\"1503\":1}}],[\"目的是频繁触发中只执行一次\",{\"1\":{\"1446\":1}}],[\"目的是频繁触发中缩减频率\",{\"1\":{\"1433\":1}}],[\"目的是只有在执行函数的请求停止了一段时间之后才执行\",{\"1\":{\"1445\":1}}],[\"目的\",{\"0\":{\"1432\":1}}],[\"目前阶段\",{\"1\":{\"1636\":1}}],[\"目前最为流行的浏览器为\",{\"1\":{\"1549\":1}}],[\"目前有一个静态属性提案\",{\"1\":{\"632\":1}}],[\"目前\",{\"1\":{\"615\":1}}],[\"目标平台等息息相关\",{\"1\":{\"1668\":1}}],[\"目标方法才被执行\",{\"1\":{\"1446\":1}}],[\"目标对象的\",{\"1\":{\"720\":1}}],[\"目标对象\",{\"1\":{\"677\":1,\"746\":1,\"780\":1}}],[\"目标阶段\",{\"1\":{\"453\":2}}],[\"目标地址\",{\"1\":{\"152\":1}}],[\"目录\",{\"1\":{\"1661\":1}}],[\"目录下www目录中的\",{\"1\":{\"215\":1}}],[\"目录操作\",{\"0\":{\"193\":1}}],[\"目录路径\",{\"1\":{\"148\":1}}],[\"代理\",{\"1\":{\"1505\":1}}],[\"代理跨域\",{\"1\":{\"450\":1}}],[\"代替\",{\"1\":{\"993\":1}}],[\"代表右侧\",{\"1\":{\"1670\":1}}],[\"代表左侧\",{\"1\":{\"1670\":1}}],[\"代表的是空指针\",{\"1\":{\"1132\":1}}],[\"代表的是其他用户的权限\",{\"1\":{\"208\":1}}],[\"代表了父类\",{\"1\":{\"621\":1}}],[\"代表父类的构造函数\",{\"1\":{\"621\":1}}],[\"代表数字\",{\"1\":{\"497\":5}}],[\"代表是文件夹\",{\"1\":{\"208\":1}}],[\"代表执行权限\",{\"1\":{\"208\":1}}],[\"代表可以抽离出一部分容易变化的业务逻辑\",{\"1\":{\"1501\":1}}],[\"代表可写\",{\"1\":{\"208\":1}}],[\"代表可读\",{\"1\":{\"208\":1}}],[\"代表握手结束\",{\"1\":{\"151\":1}}],[\"代码生成\",{\"0\":{\"1668\":1},\"1\":{\"1665\":1,\"1668\":1}}],[\"代码引用\",{\"1\":{\"1561\":1}}],[\"代码中声明的所有变量都将成为全局对象的属性\",{\"1\":{\"1561\":1}}],[\"代码中\",{\"1\":{\"1561\":1}}],[\"代码中的任何地方都是有定义的\",{\"1\":{\"1673\":1}}],[\"代码中的\",{\"1\":{\"1138\":1}}],[\"代码运行起来会首先进入该环境\",{\"1\":{\"1556\":1}}],[\"代码运行的环境不同\",{\"1\":{\"1547\":1}}],[\"代码执行流进入全局执行环境\",{\"1\":{\"1709\":1}}],[\"代码执行\",{\"1\":{\"1563\":1}}],[\"代码执行阶段的变量对象\",{\"0\":{\"1565\":1}}],[\"代码执行阶段\",{\"1\":{\"1555\":2}}],[\"代码执行就会继续进入下一个\",{\"1\":{\"1041\":1}}],[\"代码在执行\",{\"1\":{\"1551\":1}}],[\"代码的解析和执行\",{\"1\":{\"1550\":1}}],[\"代码的来源是可信的\",{\"1\":{\"892\":1}}],[\"代码分析后去调用对应的\",{\"1\":{\"1534\":1}}],[\"代码重写如下\",{\"1\":{\"1469\":1}}],[\"代码可以运行的更快一些\",{\"1\":{\"1466\":1}}],[\"代码会难以阅读和维护\",{\"1\":{\"1459\":1}}],[\"代码更加清爽易读\",{\"1\":{\"1427\":1}}],[\"代码实现\",{\"0\":{\"1417\":1,\"1423\":1,\"1433\":1,\"1446\":1}}],[\"代码块之中毫无意义\",{\"1\":{\"1593\":1}}],[\"代码块要执行\",{\"1\":{\"1537\":1}}],[\"代码块\",{\"1\":{\"1018\":1,\"1596\":1}}],[\"代码决定\",{\"1\":{\"891\":1}}],[\"代码不合法\",{\"1\":{\"891\":1}}],[\"代码和数据\",{\"1\":{\"422\":1}}],[\"代码注入攻击\",{\"1\":{\"417\":1}}],[\"代码片段\",{\"0\":{\"1730\":1},\"2\":{\"268\":1,\"279\":1,\"282\":1,\"285\":1,\"296\":1}}],[\"代码行结尾处没有分号会导致压缩错误\",{\"1\":{\"253\":1}}],[\"代码编译为不同\",{\"1\":{\"144\":1}}],[\"代码示例\",{\"0\":{\"670\":1,\"679\":1,\"684\":1,\"689\":1,\"701\":1,\"712\":1,\"721\":1,\"726\":1,\"732\":1,\"742\":1,\"747\":1,\"755\":1,\"763\":1,\"769\":1,\"781\":1,\"787\":1,\"793\":1,\"813\":1,\"818\":1,\"825\":1,\"830\":1,\"836\":1,\"843\":1,\"962\":1,\"971\":1,\"985\":1,\"1109\":1,\"1418\":1},\"1\":{\"105\":1,\"235\":1,\"252\":1,\"253\":2,\"531\":1,\"561\":2,\"648\":1,\"919\":1,\"1114\":1,\"1266\":1,\"1267\":1,\"1271\":1,\"1281\":1,\"1312\":1,\"1502\":1,\"1533\":1,\"1564\":1,\"1570\":1,\"1578\":1,\"1579\":3,\"1580\":1,\"1674\":1,\"1676\":1,\"1681\":2,\"1682\":1,\"1686\":1,\"1691\":3,\"1700\":2,\"1701\":1}}],[\"代码\",{\"0\":{\"775\":1},\"1\":{\"3\":1,\"890\":1,\"1452\":1}}],[\"代码选择了所有的段落文字\",{\"1\":{\"2\":1}}],[\"服务端验证场景\",{\"1\":{\"1447\":1}}],[\"服务端会通过这个属性和资源最后一次修改时间进行对比\",{\"1\":{\"430\":1}}],[\"服务端渲染\",{\"1\":{\"417\":1}}],[\"服务端拼接后返回\",{\"1\":{\"417\":1}}],[\"服务端不知道这个连接已经创建失败了\",{\"1\":{\"303\":1}}],[\"服务端的端口就一直开着\",{\"1\":{\"303\":1}}],[\"服务端是不知道客户端到底有没有接收到服务端返回给他的数据的\",{\"1\":{\"303\":1}}],[\"服务端进入\",{\"1\":{\"301\":1}}],[\"服务端将上述所有信息放到一个报文段\",{\"1\":{\"301\":1}}],[\"服务端收到数据包后需要对标志位\",{\"1\":{\"301\":1}}],[\"服务端收到\",{\"1\":{\"301\":1}}],[\"服务端收到后\",{\"1\":{\"151\":1}}],[\"服务器将响应报文通过tcp连接发送回浏览器\",{\"1\":{\"464\":1}}],[\"服务器检查http请求头是否包含缓存验证信息\",{\"1\":{\"464\":1}}],[\"服务器接受请求并解析\",{\"1\":{\"464\":1}}],[\"服务器开启跨域资源共享\",{\"1\":{\"450\":1}}],[\"服务器会通过这个属性和最后修改时间来进行比较\",{\"1\":{\"430\":1}}],[\"服务器会将请求转发到互联网上的根域\",{\"1\":{\"150\":1}}],[\"服务器通过在响应头上添加\",{\"1\":{\"430\":1}}],[\"服务器在返回资源的时候\",{\"1\":{\"430\":1}}],[\"服务器端也使用\",{\"1\":{\"1619\":1}}],[\"服务器端进入\",{\"1\":{\"304\":1}}],[\"服务器端收到\",{\"1\":{\"304\":2}}],[\"服务器端收到请求后\",{\"1\":{\"153\":1}}],[\"服务器进入\",{\"1\":{\"303\":1}}],[\"服务器维护一个未连接队列\",{\"1\":{\"303\":1}}],[\"服务器并不是马上断开与客户端的连接\",{\"1\":{\"156\":1}}],[\"服务器\",{\"1\":{\"150\":1}}],[\"服务器发送查询请求\",{\"1\":{\"150\":1}}],[\"服务器处理请求\",{\"0\":{\"153\":1},\"1\":{\"147\":1}}],[\"建立了一一对应的关系\",{\"1\":{\"1654\":1}}],[\"建立\",{\"1\":{\"317\":1,\"1555\":1,\"1564\":1}}],[\"建立链接后\",{\"1\":{\"304\":1}}],[\"建立连接\",{\"1\":{\"301\":1}}],[\"建立tcp连接\",{\"0\":{\"151\":1}}],[\"建议引入\",{\"1\":{\"1593\":1}}],[\"建议\",{\"1\":{\"1194\":1}}],[\"建议始终声明变量\",{\"1\":{\"1065\":1}}],[\"建议始终添加引号\",{\"1\":{\"119\":1}}],[\"建议使用\",{\"1\":{\"983\":1}}],[\"建议使用此方式保持高清效果\",{\"1\":{\"65\":1}}],[\"建议处理这方面问题使用专用的数字处理类\",{\"1\":{\"924\":1}}],[\"建议在构造函数中创建所有私有属性\",{\"1\":{\"615\":1}}],[\"本应有的方式\",{\"1\":{\"1695\":1}}],[\"本身没有定义\",{\"1\":{\"1407\":1}}],[\"本身为对象\",{\"1\":{\"800\":1}}],[\"本身拥有或继承而来\",{\"1\":{\"647\":1}}],[\"本质上它也添加在\",{\"1\":{\"1616\":1}}],[\"本质上是降低通用性\",{\"1\":{\"1418\":1}}],[\"本质上\",{\"1\":{\"659\":1,\"1197\":1,\"1213\":1,\"1652\":1}}],[\"本机缓存\",{\"1\":{\"464\":1}}],[\"本节定义的这些\",{\"1\":{\"329\":1}}],[\"本意\",{\"1\":{\"253\":1}}],[\"本地\",{\"1\":{\"150\":1}}],[\"本例时\",{\"1\":{\"1375\":1}}],[\"本例为\",{\"1\":{\"116\":1}}],[\"本例中就是段落的文本\",{\"1\":{\"116\":1}}],[\"本例中\",{\"1\":{\"6\":1}}],[\"缓存中的数据\",{\"1\":{\"1441\":1}}],[\"缓存起来\",{\"1\":{\"1441\":1}}],[\"缓存\",{\"1\":{\"150\":2}}],[\"再来看一个示例\",{\"1\":{\"1700\":1}}],[\"再来区分单线程和多线程的区别\",{\"1\":{\"1547\":1}}],[\"再举例说明两者区别\",{\"1\":{\"1616\":1}}],[\"再加载某个模块\",{\"1\":{\"1595\":1}}],[\"再将事件推至主线程中执行\",{\"1\":{\"1533\":1}}],[\"再通过\",{\"1\":{\"1505\":1}}],[\"再通过相应的这些资源文件处理用户请求和参数\",{\"1\":{\"153\":1}}],[\"再检查是否支持\",{\"1\":{\"1466\":1}}],[\"再过\",{\"1\":{\"1446\":1}}],[\"再用这个函数去处理变化的参数\",{\"1\":{\"1418\":1}}],[\"再看下面的例子\",{\"1\":{\"1407\":1}}],[\"再等于默认值\",{\"1\":{\"1398\":1}}],[\"再接着执行函数体内后面的语句\",{\"1\":{\"1340\":1}}],[\"再使用\",{\"1\":{\"1284\":1}}],[\"再取子属性就会报错\",{\"1\":{\"1218\":1}}],[\"再取一次反\",{\"1\":{\"1147\":1}}],[\"再自减\",{\"1\":{\"1193\":1}}],[\"再自增\",{\"1\":{\"1192\":1}}],[\"再赋值\",{\"1\":{\"1190\":1,\"1191\":1}}],[\"再执行新函数\",{\"1\":{\"1505\":1}}],[\"再执行原函数\",{\"1\":{\"1505\":1}}],[\"再执行\",{\"1\":{\"1053\":2}}],[\"再\",{\"1\":{\"955\":1}}],[\"再进行比较\",{\"1\":{\"953\":1}}],[\"再转为\",{\"1\":{\"951\":1}}],[\"再往下操作\",{\"1\":{\"951\":1}}],[\"再调用\",{\"1\":{\"946\":1}}],[\"再添加子类型构造函数中定义的属性\",{\"1\":{\"636\":1}}],[\"再实现原型方法\",{\"1\":{\"599\":1,\"1483\":1}}],[\"再记录移出方向目前想到的只可使用\",{\"1\":{\"277\":1}}],[\"再从主机调用网站的内容\",{\"1\":{\"150\":1}}],[\"再次触发\",{\"1\":{\"1542\":1}}],[\"再次调用时\",{\"1\":{\"1441\":1}}],[\"再次调用observer监听方法\",{\"1\":{\"402\":1}}],[\"再次声明\",{\"1\":{\"1400\":1}}],[\"再次用proxy代理\",{\"1\":{\"407\":1}}],[\"再次\",{\"1\":{\"81\":1}}],[\"譬如有http\",{\"1\":{\"148\":1}}],[\"判断构造函数的运行结果是否对象类型\",{\"1\":{\"1581\":1}}],[\"判断对象\",{\"1\":{\"1441\":1}}],[\"判断对象是否存在再取值\",{\"1\":{\"1253\":1}}],[\"判断完标记后立即把这个标记设为\",{\"1\":{\"1438\":1}}],[\"判断内存是否可回收的依据是可达性\",{\"1\":{\"1282\":1}}],[\"判断一个位置是否有值\",{\"1\":{\"1217\":1}}],[\"判断一个变量是否有定义\",{\"1\":{\"1197\":1}}],[\"判断索引是否存在\",{\"0\":{\"1160\":1}}],[\"判断奇偶\",{\"0\":{\"1159\":1}}],[\"判断符号是否相同\",{\"0\":{\"1158\":1}}],[\"判断正负\",{\"0\":{\"1157\":1}}],[\"判断当前环境是否有\",{\"1\":{\"849\":1}}],[\"判断指定对象是否处于密封状态\",{\"1\":{\"803\":1}}],[\"判断指定对象是否处于冻结状态\",{\"1\":{\"803\":1}}],[\"判断指定对象是否处于可扩展状态\",{\"1\":{\"803\":1}}],[\"判断下列任何一项成立\",{\"1\":{\"762\":1}}],[\"判断方法\",{\"1\":{\"565\":1}}],[\"判断方向算法\",{\"0\":{\"274\":1}}],[\"判断字符串是否有效\",{\"1\":{\"512\":1}}],[\"判断链表中是否有环\",{\"1\":{\"491\":1}}],[\"判断该树中是否存在\",{\"1\":{\"470\":1}}],[\"判断如果是数组类型\",{\"1\":{\"402\":1}}],[\"判断两点是否位于直线同一侧\",{\"1\":{\"274\":1}}],[\"判断鼠标进入方向\",{\"1\":{\"270\":1}}],[\"判断目标地址是否与当前地址处于同一网络中\",{\"1\":{\"152\":1}}],[\"判断是否滚动到底部的逻辑\",{\"1\":{\"1438\":2}}],[\"判断是否存在三元组\",{\"1\":{\"476\":1}}],[\"判断是否是一个对象\",{\"1\":{\"407\":1}}],[\"判断是否为单词的依据是单词间是否有单词分割符\",{\"1\":{\"89\":1}}],[\"判断是对象还是数组\",{\"1\":{\"402\":1}}],[\"判断是直接使用缓存内容还是重新向服务器请求资源\",{\"1\":{\"149\":1}}],[\"判断你输入的是一个合法的\",{\"1\":{\"148\":1}}],[\"解耦\",{\"1\":{\"1609\":1}}],[\"解剖内部操作后\",{\"1\":{\"1581\":1}}],[\"解构也可以用于嵌套解构的对象\",{\"1\":{\"1218\":1}}],[\"解构不仅可以用于数组\",{\"1\":{\"1218\":1}}],[\"解构不成功\",{\"0\":{\"1215\":1}}],[\"解构赋值输出模块导入\",{\"0\":{\"1599\":1}}],[\"解构赋值使得输入语句非常清晰\",{\"1\":{\"1235\":1}}],[\"解构赋值对提取\",{\"1\":{\"1232\":1}}],[\"解构赋值可以方便地将一组参数与变量名对应起来\",{\"1\":{\"1231\":1}}],[\"解构赋值虽然很方便\",{\"1\":{\"1222\":1}}],[\"解构赋值的规则是\",{\"1\":{\"1220\":1}}],[\"解构赋值时\",{\"1\":{\"1220\":1}}],[\"解构赋值允许等号左边的模式之中不放置任何变量名\",{\"1\":{\"1218\":1}}],[\"解构赋值允许指定默认值\",{\"1\":{\"1217\":1}}],[\"解构赋值\",{\"0\":{\"354\":1,\"1212\":1,\"1367\":1},\"1\":{\"1212\":1}}],[\"解码\",{\"1\":{\"887\":1}}],[\"解码uri\",{\"1\":{\"881\":1}}],[\"解答\",{\"1\":{\"467\":1,\"500\":1,\"506\":1}}],[\"解释器就会通过事件循环机制检查任务队列中是否存在等待执行的事件\",{\"1\":{\"1552\":1}}],[\"解释器会执行一次事件循环\",{\"1\":{\"1552\":1}}],[\"解释器可以说是\",{\"1\":{\"1550\":1}}],[\"解释器都必须分配内存来存储那个实体\",{\"1\":{\"1279\":1}}],[\"解释器将\",{\"1\":{\"893\":1}}],[\"解释器\",{\"1\":{\"893\":1,\"1534\":1,\"1550\":2}}],[\"解释\",{\"1\":{\"467\":3,\"470\":3,\"476\":3,\"485\":2,\"491\":3,\"494\":1,\"497\":2,\"500\":3,\"503\":2,\"509\":3,\"515\":1,\"518\":2,\"524\":1}}],[\"解决的方案就是称之为\",{\"1\":{\"1466\":1}}],[\"解决问题\",{\"0\":{\"1466\":1}}],[\"解决办法\",{\"1\":{\"1288\":1}}],[\"解决两次调用的方法是使用寄生组合式继承\",{\"1\":{\"659\":1}}],[\"解决多组件数据通信\",{\"1\":{\"412\":1}}],[\"解决速度不匹配问题\",{\"1\":{\"298\":1}}],[\"解决方式\",{\"1\":{\"161\":1}}],[\"解决方案\",{\"1\":{\"94\":1}}],[\"解决方法\",{\"1\":{\"40\":1,\"46\":1,\"1284\":1,\"1285\":1,\"1348\":1}}],[\"解包至当前目录\",{\"1\":{\"213\":1}}],[\"解压\",{\"0\":{\"213\":1},\"1\":{\"213\":1}}],[\"解析和语法分析\",{\"0\":{\"1667\":1}}],[\"解析引擎\",{\"1\":{\"1550\":1}}],[\"解析器执行到它所在的代码行\",{\"1\":{\"1335\":1}}],[\"解析器会\",{\"1\":{\"1335\":1}}],[\"解析过程中遇到图片\",{\"1\":{\"464\":1}}],[\"解析html文档\",{\"1\":{\"464\":1}}],[\"解析\",{\"1\":{\"437\":1,\"438\":1,\"1665\":1,\"1700\":1}}],[\"解析文档\",{\"1\":{\"437\":1}}],[\"解析为\",{\"1\":{\"253\":1}}],[\"解析css\",{\"1\":{\"157\":1}}],[\"解析url\",{\"0\":{\"148\":1}}],[\"四次挥手流程图\",{\"1\":{\"304\":1}}],[\"四次挥手即终止\",{\"1\":{\"304\":1}}],[\"四次挥手\",{\"0\":{\"304\":1},\"1\":{\"147\":1}}],[\"四个阈\",{\"1\":{\"38\":1}}],[\"发生了一个鼠标单击事件\",{\"1\":{\"1538\":1}}],[\"发生的内容\",{\"1\":{\"16\":2}}],[\"发布可视节点的内容和计算样式\",{\"1\":{\"464\":1}}],[\"发起新请求\",{\"1\":{\"464\":1}}],[\"发送一个\",{\"1\":{\"304\":2}}],[\"发送方完成发送任务\",{\"1\":{\"299\":1}}],[\"发送\",{\"1\":{\"152\":1}}],[\"发送http请求\",{\"0\":{\"152\":1},\"1\":{\"147\":1}}],[\"三种\",{\"1\":{\"1252\":1}}],[\"三元条件表达式\",{\"1\":{\"1197\":2}}],[\"三元运算符\",{\"1\":{\"1197\":1}}],[\"三个变量的引用\",{\"1\":{\"1675\":1}}],[\"三个属性的解构赋值\",{\"1\":{\"1218\":1}}],[\"三个操作数\",{\"1\":{\"1197\":1}}],[\"三个参数\",{\"1\":{\"347\":1,\"348\":1}}],[\"三级权限表示为\",{\"1\":{\"1161\":1}}],[\"三级用第\",{\"1\":{\"1161\":1}}],[\"三级较低\",{\"1\":{\"1161\":1}}],[\"三级管理员操作\",{\"1\":{\"1161\":1}}],[\"三级管理员\",{\"1\":{\"1161\":1}}],[\"三数之和\",{\"0\":{\"476\":1}}],[\"三次握手中的第一次握手可以携带数据吗\",{\"1\":{\"303\":1}}],[\"三次握手流程图\",{\"1\":{\"301\":1}}],[\"三次握手的目的\",{\"1\":{\"301\":1}}],[\"三次握手是指建立一个\",{\"1\":{\"300\":1}}],[\"三次握手\",{\"0\":{\"300\":1},\"1\":{\"147\":1,\"151\":2,\"152\":1,\"464\":1}}],[\"三原色的色光以不同的比例相加\",{\"1\":{\"108\":1}}],[\"分词和词法分析\",{\"0\":{\"1666\":1}}],[\"分词\",{\"1\":{\"1665\":1,\"1666\":1}}],[\"分而治之\",{\"1\":{\"1621\":1}}],[\"分治思想\",{\"1\":{\"1609\":1}}],[\"分析调用位置来获知\",{\"1\":{\"1578\":1}}],[\"分析调用栈\",{\"1\":{\"1576\":1}}],[\"分析\",{\"1\":{\"1563\":1}}],[\"分辨原型对象到底是哪个构造函数\",{\"1\":{\"1476\":1}}],[\"分离专职的函数\",{\"1\":{\"1461\":1}}],[\"分离的\",{\"0\":{\"1286\":1}}],[\"分组表达式\",{\"1\":{\"1243\":1}}],[\"分解含义\",{\"1\":{\"1238\":1}}],[\"分为前自减和后自减\",{\"1\":{\"1207\":1}}],[\"分为前自增和后自增\",{\"1\":{\"1207\":1}}],[\"分为四层\",{\"1\":{\"152\":1}}],[\"分配给\",{\"1\":{\"1670\":1}}],[\"分配给未声明的变量会引发错误\",{\"1\":{\"1065\":1}}],[\"分配内存\",{\"1\":{\"1668\":1}}],[\"分配内存以及垃圾回收等\",{\"1\":{\"144\":1}}],[\"分配新变量或新对象\",{\"1\":{\"1274\":1}}],[\"分配\",{\"1\":{\"1274\":2}}],[\"分别暴露\",{\"1\":{\"1619\":2}}],[\"分别使用了箭头函数和普通函数\",{\"1\":{\"1375\":1}}],[\"分别表示\",{\"1\":{\"500\":1}}],[\"分别对各子序列进行直接插入排序\",{\"1\":{\"488\":1}}],[\"分别放入对应的任务队列\",{\"1\":{\"457\":1}}],[\"分别是对\",{\"1\":{\"1218\":1}}],[\"分别是\",{\"1\":{\"297\":1,\"429\":1}}],[\"分号\",{\"0\":{\"252\":1}}],[\"分隔符\",{\"1\":{\"187\":1}}],[\"分隔的字符串的\",{\"1\":{\"14\":1}}],[\"分支管理\",{\"0\":{\"167\":1}}],[\"分道扬镳\",{\"1\":{\"143\":1}}],[\"称将与苹果的开源浏览器核心\",{\"1\":{\"143\":1}}],[\"称为绑定函数\",{\"1\":{\"1311\":1}}],[\"称为flex项目\",{\"1\":{\"332\":1}}],[\"称为flex容器\",{\"1\":{\"332\":1}}],[\"称为\",{\"1\":{\"48\":1,\"1282\":1,\"1676\":1}}],[\"谷歌在\",{\"1\":{\"143\":1}}],[\"小于等于\",{\"1\":{\"1201\":1,\"1243\":1}}],[\"小于\",{\"1\":{\"1201\":1,\"1243\":1}}],[\"小于版本\",{\"1\":{\"509\":1}}],[\"小数精度的最大位数是\",{\"1\":{\"1142\":1}}],[\"小\",{\"1\":{\"245\":1}}],[\"小组的khtml\",{\"1\":{\"143\":1}}],[\"小型的大些字母字体\",{\"1\":{\"76\":1}}],[\"采用的是词法作用域\",{\"1\":{\"1673\":1}}],[\"采用的内核\",{\"1\":{\"143\":1}}],[\"采用\",{\"1\":{\"1673\":1}}],[\"采用扩展运算符就没有这个问题\",{\"1\":{\"1184\":1}}],[\"采用集中式存储管理应用的所有组件的状态\",{\"1\":{\"412\":1}}],[\"采用flex布局的元素\",{\"1\":{\"332\":1}}],[\"采用web标准可以使开发者更轻松地编写\",{\"1\":{\"139\":1}}],[\"倍左右\",{\"1\":{\"143\":1}}],[\"丰富\",{\"1\":{\"143\":1}}],[\"占用空闲内存\",{\"1\":{\"1284\":1}}],[\"占了两份内存空间\",{\"1\":{\"1204\":1}}],[\"占据的交叉轴空间叫做cross\",{\"1\":{\"332\":1}}],[\"占据一行\",{\"1\":{\"37\":1}}],[\"占有大量的市场份额\",{\"1\":{\"143\":1}}],[\"主模块\",{\"1\":{\"1617\":1}}],[\"主线程运行期间将不断重复上面第四步\",{\"1\":{\"1552\":1}}],[\"主线程运行时候\",{\"1\":{\"1532\":1}}],[\"主线程的执行上下文栈中的所有任务执行完毕后\",{\"1\":{\"1552\":1}}],[\"主线程\",{\"1\":{\"1547\":1}}],[\"主线程不断重复上面的第三步\",{\"1\":{\"1532\":1}}],[\"主线程之外\",{\"1\":{\"1532\":1}}],[\"主线程就会通过事件循环机制读取任务队列\",{\"1\":{\"1532\":1}}],[\"主进程\",{\"1\":{\"425\":1}}],[\"主轴的开始位置\",{\"1\":{\"332\":1}}],[\"主机\",{\"1\":{\"464\":1}}],[\"主机中正在运行的程序\",{\"1\":{\"318\":1}}],[\"主机名\",{\"1\":{\"215\":1,\"218\":1}}],[\"主机名称\",{\"1\":{\"187\":1}}],[\"主机域名或ip地址\",{\"1\":{\"148\":1}}],[\"主流浏览器内核\",{\"1\":{\"143\":1}}],[\"主要用来存放对象\",{\"1\":{\"1268\":1}}],[\"主要用来执行程序\",{\"1\":{\"1268\":1}}],[\"主要用于服务器编程\",{\"1\":{\"1617\":1}}],[\"主要用于\",{\"1\":{\"35\":1}}],[\"主要是用在浏览器\",{\"1\":{\"1619\":1}}],[\"主要是在浏览器使用的\",{\"1\":{\"1617\":1}}],[\"主要是在服务器端使用的\",{\"1\":{\"1616\":1}}],[\"主要是因为\",{\"1\":{\"1431\":1}}],[\"主要是为了区别于\",{\"1\":{\"590\":1}}],[\"主要是为了防止服务端开启无用的连接\",{\"1\":{\"303\":1}}],[\"主要是先通过将\",{\"1\":{\"270\":1}}],[\"主要修改以下配置\",{\"1\":{\"220\":1}}],[\"主要有以下几种直接量\",{\"1\":{\"245\":1}}],[\"主要有三种模式\",{\"1\":{\"176\":1}}],[\"主要有两种用途\",{\"1\":{\"175\":1}}],[\"主要包括以下几个基本步骤\",{\"1\":{\"147\":1}}],[\"主要包含\",{\"1\":{\"139\":1}}],[\"更符合逻辑\",{\"1\":{\"1695\":1}}],[\"更使用的设计会将这些私有的具体内容隐藏在\",{\"1\":{\"1681\":1}}],[\"更准确的说是\",{\"1\":{\"1670\":1}}],[\"更准确的感知颜色联系\",{\"1\":{\"110\":1}}],[\"更多参数\",{\"1\":{\"1417\":1}}],[\"更广的适用性\",{\"1\":{\"1338\":1}}],[\"更加语义\",{\"1\":{\"1427\":1}}],[\"更加语义化\",{\"1\":{\"1338\":1}}],[\"更加准确\",{\"1\":{\"430\":1}}],[\"更好的语义\",{\"1\":{\"1338\":1}}],[\"更简明\",{\"1\":{\"1164\":1}}],[\"更简单的原型语法\",{\"0\":{\"578\":1}}],[\"更接近原型链中对象的属性覆盖原型属性\",{\"1\":{\"983\":1}}],[\"更详细信息请查阅\",{\"1\":{\"934\":1,\"935\":1}}],[\"更重要的是\",{\"1\":{\"893\":1}}],[\"更推荐使用number\",{\"1\":{\"899\":1}}],[\"更推荐使用\",{\"1\":{\"861\":1}}],[\"更容易明白每个实例都包含一个不同的\",{\"1\":{\"592\":1}}],[\"更常见并且更出乎意料的情况发生在传入回调函数时\",{\"1\":{\"1579\":1}}],[\"更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象\",{\"1\":{\"578\":1}}],[\"更常用\",{\"1\":{\"557\":1}}],[\"更深刻地描述客体的特征\",{\"1\":{\"228\":1}}],[\"更集中\",{\"1\":{\"228\":1}}],[\"更新表达式\",{\"1\":{\"1243\":4}}],[\"更新运算符包括\",{\"1\":{\"1189\":1}}],[\"更新运算符\",{\"0\":{\"1189\":1},\"1\":{\"1207\":4}}],[\"更新循环计数器\",{\"1\":{\"1009\":1}}],[\"更新apache\",{\"1\":{\"215\":1}}],[\"更新和维护网页和应用程序\",{\"1\":{\"139\":1}}],[\"软件的的界面状态\",{\"1\":{\"1621\":1}}],[\"软件开发者\",{\"1\":{\"139\":1}}],[\"软绑定\",{\"0\":{\"1587\":1}}],[\"软换行不受影响\",{\"1\":{\"86\":1}}],[\"制定的技术规范和指南\",{\"1\":{\"139\":1}}],[\"然而在函数内声明的变量只在函数体内有定义\",{\"1\":{\"1673\":1}}],[\"然而和布尔值直接量不同\",{\"1\":{\"1083\":1}}],[\"然而\",{\"1\":{\"136\":1,\"581\":1,\"592\":1,\"1445\":1,\"1578\":1,\"1579\":1,\"1670\":1,\"1694\":1}}],[\"然后回调到另一个地方执行\",{\"1\":{\"1710\":1}}],[\"然后我们就可以访问到他的变量了\",{\"1\":{\"1708\":1}}],[\"然后建立作用域将其关联起来\",{\"1\":{\"1698\":1}}],[\"然后用这个作用域来隐藏它们\",{\"1\":{\"1681\":1}}],[\"然后用函数声明对它进行包装\",{\"1\":{\"1681\":1}}],[\"然后用于某些用途\",{\"1\":{\"129\":1}}],[\"然后系统允许你为它取任意名字\",{\"1\":{\"1652\":1}}],[\"然后解释多条规则都可用时它们的优先级如何排列\",{\"1\":{\"1577\":1}}],[\"然后判断需要应用下面四条规则中的哪一条\",{\"1\":{\"1577\":1}}],[\"然后开始进行执行阶段的操作\",{\"1\":{\"1566\":1}}],[\"然后开启一个子进程去处理这个请求\",{\"1\":{\"153\":1}}],[\"然后退出主线程至专用线程中执行\",{\"1\":{\"1552\":1}}],[\"然后队列中的\",{\"1\":{\"1542\":1}}],[\"然后把这些\",{\"1\":{\"1502\":1}}],[\"然后把外部传入的函数的执行包在一个\",{\"1\":{\"1438\":1}}],[\"然后又创建一个新的\",{\"1\":{\"1449\":1}}],[\"然后这个方法是一个事件的回调函数\",{\"1\":{\"1446\":1}}],[\"然后上楼\",{\"1\":{\"1444\":1}}],[\"然后等他进电梯\",{\"1\":{\"1444\":1}}],[\"然后传入函数内\",{\"1\":{\"1523\":1}}],[\"然后传入\",{\"1\":{\"1417\":1}}],[\"然后产生另一个更小元的函数\",{\"1\":{\"1411\":1}}],[\"然后声明了变量\",{\"1\":{\"1407\":1}}],[\"然后才是解构赋值的默认值生效\",{\"1\":{\"1403\":1}}],[\"然后才进行相等性比较\",{\"1\":{\"762\":1}}],[\"然后同样使用\",{\"1\":{\"1355\":1}}],[\"然后计算右操作数\",{\"1\":{\"1246\":1}}],[\"然后符号位不动\",{\"1\":{\"1160\":1}}],[\"然后加上负号\",{\"1\":{\"1147\":1}}],[\"然后有异常被抛出\",{\"1\":{\"1051\":1}}],[\"然后可以在\",{\"1\":{\"1048\":1}}],[\"然后使用\",{\"1\":{\"1025\":1,\"1487\":1,\"1707\":1}}],[\"然后进行加法算术运算\",{\"1\":{\"951\":1}}],[\"然后进入下一轮循环\",{\"1\":{\"1349\":1}}],[\"然后进入\",{\"1\":{\"304\":1}}],[\"然后在函数体中写入判断是否滚动到底部的逻辑\",{\"1\":{\"1438\":1}}],[\"然后在\",{\"1\":{\"1285\":1,\"1537\":1,\"1709\":1}}],[\"然后在根据转换后的原始类型按照上面的规则处理\",{\"1\":{\"944\":1}}],[\"然后在各个标签页中连接到该sharedworker\",{\"1\":{\"397\":1}}],[\"然后是\",{\"1\":{\"923\":2}}],[\"然后实现构造函数\",{\"1\":{\"599\":1,\"1483\":1}}],[\"然后再向里面添加代码\",{\"1\":{\"1681\":1}}],[\"然后再调用\",{\"1\":{\"1312\":1}}],[\"然后再对其求反\",{\"1\":{\"1255\":1}}],[\"然后再对其进行加工\",{\"1\":{\"619\":1}}],[\"然后再赋值给对应的变量\",{\"1\":{\"1218\":1}}],[\"然后再从堆内存中取得我们需要的数据\",{\"1\":{\"1264\":1}}],[\"然后再从\",{\"1\":{\"1204\":1}}],[\"然后再次执行判断语句\",{\"1\":{\"969\":1}}],[\"然后再将结果指定给子类型的原型\",{\"1\":{\"659\":1}}],[\"然后再根据具体需求对得到的对象加以修改即可\",{\"1\":{\"640\":1}}],[\"然后再用子类的构造函数修饰\",{\"1\":{\"625\":1}}],[\"然后再来为原型添加方法\",{\"1\":{\"603\":1}}],[\"然后再返回新创建的对象\",{\"1\":{\"571\":1}}],[\"然后再判断\",{\"1\":{\"36\":1}}],[\"然后从左到右比较两个版本号的相同下标的修订号\",{\"1\":{\"509\":1}}],[\"然后执行行内或外部脚本\",{\"1\":{\"464\":1}}],[\"然后根据情况选择关闭tcp连接或者保留重用\",{\"1\":{\"464\":1}}],[\"然后根据动态语言的脚本\",{\"1\":{\"153\":1}}],[\"然后立即执行\",{\"1\":{\"458\":1}}],[\"然后给对象添加proxy以监听其属性的更改\",{\"1\":{\"408\":1}}],[\"然后将值\",{\"1\":{\"1670\":1}}],[\"然后将词法单元解构成一个树结构\",{\"1\":{\"1670\":1}}],[\"然后将传入的对象作为这个\",{\"1\":{\"640\":1}}],[\"然后将\",{\"1\":{\"301\":1}}],[\"然后将这个文件系统挂载到这个目录上\",{\"1\":{\"215\":1}}],[\"然后通过判断鼠标事件中移入的点是否在三角形内来确定方向\",{\"1\":{\"274\":1}}],[\"然后通过dom树和css规则树生成渲染树\",{\"1\":{\"157\":1}}],[\"然后即可为这\",{\"1\":{\"270\":1}}],[\"然后\",{\"1\":{\"155\":1,\"1242\":1,\"1542\":1,\"1658\":1,\"1661\":1}}],[\"然后让路由所定义的方法去处理请求\",{\"1\":{\"153\":1}}],[\"然后会查看\",{\"1\":{\"153\":1}}],[\"请看下面的例子\",{\"1\":{\"1407\":1}}],[\"请看下面的代码\",{\"1\":{\"1218\":1}}],[\"请问下面的代码之中有几个this\",{\"1\":{\"1375\":1}}],[\"请不要混淆原始的布尔值\",{\"1\":{\"1020\":1}}],[\"请勿使用以下代码\",{\"1\":{\"1020\":1}}],[\"请记住\",{\"1\":{\"929\":1}}],[\"请自行确认\",{\"1\":{\"892\":1}}],[\"请使用本函数\",{\"1\":{\"880\":1}}],[\"请使用\",{\"1\":{\"880\":1,\"886\":2,\"1040\":1}}],[\"请按从左到右的顺序依次比较它们的修订号\",{\"1\":{\"509\":1}}],[\"请返回数组中第\",{\"1\":{\"482\":1}}],[\"请你找出一个具有最大和的连续子数组\",{\"1\":{\"524\":1}}],[\"请你找出其中不含有重复字符的\",{\"1\":{\"467\":1}}],[\"请你在该数组中找出\",{\"1\":{\"515\":1}}],[\"请你比较它们\",{\"1\":{\"509\":1}}],[\"请你\",{\"1\":{\"500\":1}}],[\"请你将该数组升序排列\",{\"1\":{\"488\":1}}],[\"请你返回所有和为\",{\"1\":{\"476\":1}}],[\"请你反转链表\",{\"1\":{\"473\":1}}],[\"请注意\",{\"1\":{\"329\":1,\"467\":1,\"482\":1}}],[\"请求过多\",{\"1\":{\"1614\":1}}],[\"请求线程\",{\"1\":{\"1549\":1}}],[\"请求报文\",{\"1\":{\"464\":1}}],[\"请求报头\",{\"1\":{\"152\":1}}],[\"请求信息\",{\"1\":{\"301\":1}}],[\"请求后\",{\"1\":{\"156\":1}}],[\"请求主体\",{\"1\":{\"152\":1}}],[\"请求方法\",{\"1\":{\"152\":1,\"153\":1}}],[\"请求\",{\"1\":{\"152\":1,\"153\":1,\"450\":1,\"1538\":1,\"1549\":1}}],[\"请阅读脚本加载策略\",{\"1\":{\"131\":1}}],[\"请先检查它们之间的\",{\"1\":{\"39\":1}}],[\"收到一个\",{\"1\":{\"304\":2}}],[\"收藏夹\",{\"1\":{\"130\":1}}],[\"收缩到最小\",{\"1\":{\"48\":1}}],[\"收缩到合适\",{\"1\":{\"48\":1}}],[\"收缩与包裹\",{\"1\":{\"48\":1}}],[\"许多场合不能够使用\",{\"1\":{\"1142\":1}}],[\"许多\",{\"1\":{\"129\":1}}],[\"官方的\",{\"1\":{\"127\":1}}],[\"新建一个类\",{\"1\":{\"1485\":1}}],[\"新建一个构造函数\",{\"1\":{\"1481\":1}}],[\"新建构造函数\",{\"1\":{\"1483\":1}}],[\"新创建的实例对象\",{\"1\":{\"1477\":1}}],[\"新创建的\",{\"1\":{\"1477\":1}}],[\"新创建对象指向的原型对象\",{\"1\":{\"548\":1,\"683\":1}}],[\"新的\",{\"1\":{\"1473\":1}}],[\"新手经常犯的一个错误是将一个方法从对象中拿出来\",{\"1\":{\"1312\":1}}],[\"新函数与被调函数\",{\"1\":{\"1311\":1}}],[\"新数组有四个元素\",{\"1\":{\"1274\":1}}],[\"新内容将会通过\",{\"1\":{\"893\":1}}],[\"新特性\",{\"1\":{\"698\":1,\"724\":1,\"841\":1}}],[\"新写法是显式声明\",{\"1\":{\"632\":1}}],[\"新写法允许直接在类中列出\",{\"1\":{\"632\":1}}],[\"新提案提供了关键字\",{\"1\":{\"628\":1}}],[\"新实例的机制仍然是相同的\",{\"1\":{\"592\":1}}],[\"新对象的这些属性和方法是由所有实例共享的\",{\"1\":{\"575\":1}}],[\"新增的\",{\"1\":{\"544\":1}}],[\"新增\",{\"0\":{\"203\":1},\"1\":{\"1613\":1}}],[\"新增加的色彩模式\",{\"1\":{\"108\":1}}],[\"新目录名\",{\"1\":{\"198\":1}}],[\"新闻摘要等等\",{\"1\":{\"126\":1}}],[\"注\",{\"1\":{\"1550\":1}}],[\"注册实时验证\",{\"0\":{\"1449\":1}}],[\"注释可用于阻止其中一条代码行的执行\",{\"1\":{\"243\":1}}],[\"注释1\",{\"1\":{\"242\":2}}],[\"注释和空白符\",{\"1\":{\"233\":1}}],[\"注释\",{\"0\":{\"122\":1,\"240\":1}}],[\"注意这里的用词是规则\",{\"1\":{\"1670\":1}}],[\"注意我们是如何从调用栈中分析出真正的调用位置\",{\"1\":{\"1576\":1}}],[\"注意在回调函数调用时\",{\"1\":{\"1457\":1}}],[\"注意事项\",{\"0\":{\"1374\":1,\"1395\":1,\"1598\":1}}],[\"注意遍历执行的匿名函数也要设置为\",{\"1\":{\"1356\":1}}],[\"注意块级作用域里的常量声明\",{\"1\":{\"1076\":1}}],[\"注意根据题目要求\",{\"1\":{\"509\":1}}],[\"注意此处m\",{\"1\":{\"494\":1}}],[\"注意利润不能是\",{\"1\":{\"485\":1}}],[\"注意一定要有单位\",{\"1\":{\"23\":1}}],[\"注意\",{\"1\":{\"19\":1,\"27\":1,\"115\":1,\"130\":1,\"131\":1,\"429\":1,\"439\":1,\"457\":1,\"476\":2,\"491\":1,\"500\":1,\"506\":1,\"572\":1,\"805\":1,\"999\":1,\"1059\":1,\"1218\":1,\"1221\":1,\"1633\":1}}],[\"注意了\",{\"1\":{\"16\":1}}],[\"注意其他重要的语法\",{\"1\":{\"7\":1}}],[\"注意各个部分的名称\",{\"1\":{\"3\":1}}],[\"符号位传播右移\",{\"1\":{\"1149\":1}}],[\"符号位没有被改变\",{\"1\":{\"1149\":1}}],[\"符号位\",{\"1\":{\"1147\":1}}],[\"符号\",{\"0\":{\"928\":1},\"1\":{\"121\":1,\"917\":1,\"928\":1,\"1160\":1,\"1238\":1}}],[\"想要将这两个函数暴露出去\",{\"1\":{\"1616\":1}}],[\"想要在文本中显示这些特殊字符我们必须使用字符引用\",{\"1\":{\"121\":1}}],[\"想在页面中创建\",{\"1\":{\"1502\":1}}],[\"想代理多层的解决办法是\",{\"1\":{\"407\":1}}],[\"想办法让它们变成多行文本\",{\"1\":{\"81\":1}}],[\"游戏\",{\"1\":{\"120\":1}}],[\"页面滚动事件\",{\"0\":{\"1438\":1}}],[\"页面\",{\"1\":{\"1122\":1,\"1621\":1}}],[\"页面关闭\",{\"1\":{\"444\":1}}],[\"页面添加网页图标的方式有\",{\"1\":{\"130\":1}}],[\"页面可以显示任意的语言\",{\"1\":{\"128\":1}}],[\"页面在浏览器加载后它的内容不会在浏览器中显示\",{\"1\":{\"126\":1}}],[\"页面标题也被用来描述该页面\",{\"1\":{\"120\":1}}],[\"页面现在可以处理它可能包含的任何文本内容\",{\"1\":{\"120\":1}}],[\"页面中显示的内容\",{\"1\":{\"120\":1}}],[\"页面中但不在\",{\"1\":{\"120\":1}}],[\"元函数\",{\"1\":{\"1411\":1}}],[\"元函数转换成一个\",{\"1\":{\"1411\":1}}],[\"元函数转换成\",{\"1\":{\"1411\":1}}],[\"元是指函数参数的个数\",{\"1\":{\"1411\":1}}],[\"元数据就是描述数据的数据\",{\"1\":{\"127\":1}}],[\"元数据\",{\"0\":{\"127\":1}}],[\"元信息\",{\"0\":{\"125\":1}}],[\"元相关元素表示的元数据\",{\"1\":{\"120\":1}}],[\"元素集合\",{\"1\":{\"999\":1}}],[\"元素中\",{\"1\":{\"131\":1}}],[\"元素看起来像一个空元素\",{\"1\":{\"131\":1}}],[\"元素而产生错误\",{\"1\":{\"131\":1}}],[\"元素包含了\",{\"1\":{\"129\":1}}],[\"元素包含的\",{\"1\":{\"13\":1}}],[\"元素是一项元数据\",{\"1\":{\"126\":1}}],[\"元素并不相同\",{\"1\":{\"126\":1}}],[\"元素内容不同\",{\"1\":{\"126\":1}}],[\"元素也可以为文档添加标题\",{\"1\":{\"126\":1}}],[\"元素也可以拥有属性\",{\"1\":{\"117\":1}}],[\"元素也不会有滚动然后固定的情况\",{\"1\":{\"38\":1}}],[\"元素属性\",{\"0\":{\"117\":1}}],[\"元素本身\",{\"1\":{\"105\":1}}],[\"元素效果\",{\"1\":{\"92\":1}}],[\"元素最近的具有定位特性的祖先元素的宽度是\",{\"1\":{\"51\":1}}],[\"元素或\",{\"1\":{\"48\":1}}],[\"元素来说\",{\"1\":{\"47\":1}}],[\"元素前后会带有换行符\",{\"1\":{\"44\":1}}],[\"元素前后没有换行符\",{\"1\":{\"44\":1}}],[\"元素没有设置\",{\"1\":{\"40\":1}}],[\"元素上\",{\"1\":{\"39\":1,\"1579\":1}}],[\"元素表现为\",{\"1\":{\"38\":1}}],[\"元素脱离了普通流\",{\"1\":{\"37\":1}}],[\"元素在语义上不表示任何特定类型的内容\",{\"1\":{\"136\":1}}],[\"元素在页面加载完毕时显示在页面中\",{\"1\":{\"126\":1}}],[\"元素在设置\",{\"1\":{\"40\":1}}],[\"元素在跨越特定阈值前为相对定位\",{\"1\":{\"35\":1}}],[\"元素在文档的根元素\",{\"1\":{\"15\":1}}],[\"元素出现在正常的文档流中\",{\"1\":{\"35\":1}}],[\"元素被创建在文档流外\",{\"1\":{\"16\":1}}],[\"元素所有兄弟元素\",{\"1\":{\"13\":1}}],[\"元素之后\",{\"1\":{\"13\":1}}],[\"元素作为选择符\",{\"1\":{\"12\":2}}],[\"元素选择符\",{\"0\":{\"12\":1},\"1\":{\"11\":1}}],[\"元素的行为类似于内联元素并且它的内容根据网格盒模型布局\",{\"1\":{\"329\":1}}],[\"元素的行为类似于内联元素并且它的内容根据弹性盒模型布局\",{\"1\":{\"329\":1}}],[\"元素的类型\",{\"1\":{\"129\":1}}],[\"元素的内容\",{\"1\":{\"105\":1,\"116\":1,\"126\":1}}],[\"元素的宽度根据其内部的图文表现\",{\"1\":{\"54\":1}}],[\"元素的宽度是\",{\"1\":{\"51\":1}}],[\"元素的宽度表现为\",{\"1\":{\"51\":1}}],[\"元素的宽度由原来的\",{\"1\":{\"37\":1}}],[\"元素的任意父节点定位设置为\",{\"1\":{\"38\":2}}],[\"元素的任意父节点的\",{\"1\":{\"38\":1}}],[\"元素的子元素\",{\"1\":{\"13\":1}}],[\"元素的属性\",{\"1\":{\"6\":1}}],[\"元素的名称位于规则集开始\",{\"1\":{\"4\":1}}],[\"元素样式的途径\",{\"1\":{\"6\":1}}],[\"元素\",{\"0\":{\"116\":1,\"127\":1},\"1\":{\"4\":1,\"13\":2,\"14\":7,\"15\":2,\"24\":1,\"36\":1,\"39\":1,\"45\":1,\"48\":1,\"127\":1,\"136\":1,\"329\":15,\"1274\":1}}],[\"元素添加样式\",{\"1\":{\"2\":1}}],[\"样式表\",{\"1\":{\"464\":1}}],[\"样式少\",{\"1\":{\"438\":1}}],[\"样式\",{\"1\":{\"120\":1,\"1621\":2}}],[\"现代\",{\"1\":{\"893\":1}}],[\"现有的所有\",{\"1\":{\"825\":1}}],[\"现在只需要假设每一个函数都会创建一个新的作用域气泡就好了\",{\"1\":{\"1674\":1}}],[\"现在有提案\",{\"1\":{\"1646\":1}}],[\"现在有个后台管理系统\",{\"1\":{\"1161\":1}}],[\"现在前端开发都是基于模块化和组件化的开发\",{\"1\":{\"1621\":1}}],[\"现在指向的内存地址和\",{\"1\":{\"1616\":1}}],[\"现在更推荐使用不定参数和默认参数\",{\"1\":{\"1408\":1}}],[\"现在我们已经看到了\",{\"1\":{\"1408\":1}}],[\"现在已经登陆的某权限的用户要进行某个操作\",{\"1\":{\"1161\":1}}],[\"现在已知存在的\",{\"1\":{\"919\":1}}],[\"现在是\",{\"1\":{\"436\":1}}],[\"现在\",{\"1\":{\"120\":1,\"632\":1,\"1557\":1,\"1681\":1}}],[\"现象\",{\"1\":{\"93\":1}}],[\"剖析\",{\"0\":{\"120\":1}}],[\"剖析一个\",{\"0\":{\"116\":1}}],[\"双指针\",{\"1\":{\"473\":1,\"509\":1},\"2\":{\"469\":1,\"478\":1,\"493\":1,\"502\":1,\"508\":1}}],[\"双内核\",{\"1\":{\"436\":1}}],[\"双向数据绑定\",{\"1\":{\"401\":1}}],[\"双工性\",{\"1\":{\"313\":1}}],[\"双边丝带\",{\"0\":{\"260\":1}}],[\"双引号\",{\"1\":{\"119\":1}}],[\"双线\",{\"1\":{\"83\":1}}],[\"你应当对\",{\"1\":{\"1695\":1}}],[\"你\",{\"1\":{\"1586\":1}}],[\"你必须找到调用位置\",{\"1\":{\"1577\":1}}],[\"你必须设计并实现时间复杂度为\",{\"1\":{\"482\":1}}],[\"你会继续开门\",{\"1\":{\"1444\":1}}],[\"你会按下开门开关\",{\"1\":{\"1444\":1}}],[\"你会看到第一段是错误的\",{\"1\":{\"121\":1}}],[\"你可能需要等待几分钟\",{\"1\":{\"1444\":1}}],[\"你可能需要显式地把\",{\"1\":{\"1312\":1}}],[\"你可以理解\",{\"1\":{\"1570\":1}}],[\"你可以指定使用\",{\"1\":{\"1109\":1}}],[\"你可以用\",{\"1\":{\"1338\":1}}],[\"你可以用这个标识符来获取关于被抛出异常的信息\",{\"1\":{\"1055\":1}}],[\"你可以用for\",{\"1\":{\"388\":1}}],[\"你可以嵌套一个或者更多的\",{\"1\":{\"1054\":1}}],[\"你可以在语句块外面访问到它\",{\"1\":{\"1075\":1}}],[\"你可以在抛出异常时指定一个对象\",{\"1\":{\"1048\":1}}],[\"你可以在元数据中添加对自定义图标的引用\",{\"1\":{\"130\":1}}],[\"你可以抛出任意表达式而不是特定一种类型的表达式\",{\"1\":{\"1047\":1}}],[\"你可以安心的使用\",{\"1\":{\"848\":1}}],[\"你可以\",{\"1\":{\"521\":1}}],[\"你可以按任意顺序返回答案\",{\"1\":{\"515\":1}}],[\"你可以假设每种输入只会对应一个答案\",{\"1\":{\"515\":1}}],[\"你可以将其分配给表单输入元素\",{\"1\":{\"118\":1}}],[\"你想控制接下来发生的事情\",{\"1\":{\"1052\":1}}],[\"你想让\",{\"1\":{\"1052\":1}}],[\"你还可以迭代显式实现可迭代协议的对象\",{\"1\":{\"1003\":1}}],[\"你还可以迭代一个生成器\",{\"1\":{\"1001\":1}}],[\"你最终可能会在你的网页\",{\"1\":{\"893\":1}}],[\"你好javascript\",{\"1\":{\"870\":1,\"875\":1}}],[\"你只需要记住\",{\"1\":{\"848\":1}}],[\"你只能选择\",{\"1\":{\"485\":1}}],[\"你也可以使用\",{\"1\":{\"848\":1}}],[\"你有多少种不同的方法可以爬到楼顶呢\",{\"1\":{\"518\":1}}],[\"你不能使用任何內建的用于处理大整数的库\",{\"1\":{\"506\":1}}],[\"你不能在买入前卖出股票\",{\"1\":{\"485\":1}}],[\"你一个二叉树的根节点\",{\"1\":{\"497\":1}}],[\"你的答案必须是\",{\"1\":{\"467\":1}}],[\"你的请求我收到了\",{\"1\":{\"304\":1}}],[\"你需要做的就是找到函数的调用位置并判断应用哪条规则\",{\"1\":{\"1582\":1}}],[\"你需要找的是数组排序后的第\",{\"1\":{\"482\":1}}],[\"你需要确认\",{\"1\":{\"130\":1}}],[\"你需要将其用特殊的记号\",{\"1\":{\"122\":1}}],[\"你对一个元素所设置的\",{\"1\":{\"58\":1}}],[\"考虑下面这个表达式\",{\"1\":{\"1242\":1}}],[\"考虑\",{\"1\":{\"118\":1,\"820\":1}}],[\"引入模块使用\",{\"1\":{\"1619\":1}}],[\"引入模块\",{\"1\":{\"1616\":1,\"1618\":1}}],[\"引入依赖\",{\"1\":{\"1614\":1}}],[\"引入的js必须有一定顺序\",{\"1\":{\"1614\":1}}],[\"引入\",{\"1\":{\"1614\":1,\"1616\":1}}],[\"引入了一种新方式\",{\"1\":{\"1398\":1}}],[\"引入了块级作用域\",{\"1\":{\"1074\":1}}],[\"引进给变量\",{\"1\":{\"893\":1}}],[\"引用箭头函数\",{\"1\":{\"1589\":1}}],[\"引用全局对象\",{\"1\":{\"1561\":1}}],[\"引用类的实例\",{\"1\":{\"1312\":1}}],[\"引用类型值\",{\"0\":{\"1389\":1}}],[\"引用类型值的属性始终都会共享相应的值\",{\"1\":{\"641\":1}}],[\"引用类型的拷贝同样也会为新的变量自动分配一个新的值保存在变量对象中\",{\"1\":{\"1267\":1}}],[\"引用类型的值都是按引用访问的\",{\"1\":{\"1264\":1}}],[\"引用类型的值是保存在内存中的对象\",{\"1\":{\"917\":1}}],[\"引用类型通常叫做类\",{\"1\":{\"930\":1}}],[\"引用类型\",{\"1\":{\"917\":1}}],[\"引用的内存泄漏示例\",{\"1\":{\"1286\":1}}],[\"引用\",{\"0\":{\"1286\":1},\"1\":{\"1286\":1,\"1561\":1,\"1670\":7,\"1685\":1}}],[\"引用计数法无法解决循环引用问题\",{\"1\":{\"1281\":1}}],[\"引用计数法\",{\"0\":{\"1281\":1},\"1\":{\"1280\":1,\"1281\":1}}],[\"引用地址\",{\"1\":{\"1264\":1}}],[\"引用它将会导致\",{\"1\":{\"1067\":1}}],[\"引用数据类型保存在堆中\",{\"1\":{\"1284\":1}}],[\"引用数据类型的值是保存在堆内存中的对象\",{\"1\":{\"1264\":1}}],[\"引用数据类型与堆内存\",{\"0\":{\"1264\":1}}],[\"引用数据类型间比较\",{\"0\":{\"1204\":1}}],[\"引用数据类型\",{\"0\":{\"930\":1,\"1267\":1},\"1\":{\"917\":1}}],[\"引用错误\",{\"1\":{\"619\":1}}],[\"引用外部方法\",{\"0\":{\"614\":1}}],[\"引用对象\",{\"0\":{\"552\":1}}],[\"引用远程字体有问题的话\",{\"1\":{\"79\":1}}],[\"引擎提升了当前作用域的顶部\",{\"1\":{\"1698\":1}}],[\"引擎提升到当前作用域的顶部\",{\"1\":{\"1698\":1}}],[\"引擎检视下面的代码块有变量声明时\",{\"1\":{\"1694\":1}}],[\"引擎在\",{\"1\":{\"1675\":1}}],[\"引擎在运行这些代码时查找该变量\",{\"1\":{\"1670\":1}}],[\"引擎无法在这里找到\",{\"1\":{\"1675\":1}}],[\"引擎执行\",{\"1\":{\"1675\":1}}],[\"引擎执行运行时所需的代码时\",{\"1\":{\"1670\":1}}],[\"引擎利用这些信息来查找标识符的位置\",{\"1\":{\"1675\":1}}],[\"引擎就会继续查找该变量\",{\"1\":{\"1670\":1}}],[\"引擎就会使用这个变量\",{\"1\":{\"1670\":1}}],[\"引擎就是\",{\"1\":{\"143\":1}}],[\"引擎运行时会首先询问作用域\",{\"1\":{\"1670\":1}}],[\"引擎该模块的位置\",{\"1\":{\"1632\":1}}],[\"引擎处理\",{\"1\":{\"1593\":1}}],[\"引擎静态分析\",{\"1\":{\"1593\":1}}],[\"引擎是单线程的\",{\"1\":{\"1557\":1}}],[\"引擎通过创建\",{\"1\":{\"1557\":1}}],[\"引擎会做一件事情\",{\"1\":{\"1698\":1}}],[\"引擎会为变量\",{\"1\":{\"1670\":1}}],[\"引擎会以栈的方式来处理它们\",{\"1\":{\"1556\":1}}],[\"引擎会将\",{\"1\":{\"1218\":1}}],[\"引擎包含\",{\"1\":{\"1550\":1}}],[\"引擎线程会被挂起\",{\"1\":{\"1549\":1}}],[\"引擎线程是\",{\"1\":{\"1549\":1}}],[\"引擎线程\",{\"1\":{\"1549\":1}}],[\"引擎线程无法挂起\",{\"1\":{\"1422\":1}}],[\"引擎去解析和运行\",{\"1\":{\"1548\":1}}],[\"引擎中\",{\"1\":{\"1534\":1}}],[\"引擎中都提供了这个私有属性\",{\"1\":{\"603\":1}}],[\"引擎驱动\",{\"1\":{\"1534\":1}}],[\"引擎将\",{\"1\":{\"1534\":1}}],[\"引擎作为\",{\"1\":{\"1534\":1}}],[\"引擎实现\",{\"1\":{\"1532\":1}}],[\"引擎的垃圾回收机制是标记清除法\",{\"1\":{\"1282\":1}}],[\"引擎进行优化\",{\"1\":{\"893\":1}}],[\"引擎而存在的\",{\"1\":{\"527\":1}}],[\"引擎\",{\"1\":{\"143\":1,\"144\":2,\"1534\":1,\"1550\":1,\"1669\":1}}],[\"引起来\",{\"1\":{\"117\":1}}],[\"最普遍的设计方法\",{\"1\":{\"1689\":1}}],[\"最小权限原则\",{\"1\":{\"1681\":1}}],[\"最重要的是要\",{\"1\":{\"1576\":1}}],[\"最底部永远有个\",{\"1\":{\"1557\":1}}],[\"最先遇到的就是全局代码\",{\"1\":{\"1557\":1}}],[\"最初函数的第一个参数\",{\"1\":{\"1416\":1}}],[\"最初的实现中\",{\"1\":{\"1132\":1}}],[\"最简单的用法是创建一个函数\",{\"1\":{\"1312\":1}}],[\"最多为\",{\"1\":{\"1142\":1}}],[\"最佳实践\",{\"0\":{\"1010\":1,\"1152\":1,\"1351\":1}}],[\"最终在控制台显示\",{\"1\":{\"1709\":1}}],[\"最终在\",{\"1\":{\"1709\":1}}],[\"最终会在第\",{\"1\":{\"1541\":1}}],[\"最终返回的结果是\",{\"1\":{\"1483\":1}}],[\"最终都要释放这些内存以便他们能够被再用\",{\"1\":{\"1279\":1}}],[\"最终表达式的结果就是属性值的结果\",{\"1\":{\"551\":1}}],[\"最终完成了四次握手\",{\"1\":{\"304\":1}}],[\"最大限度地节省了内存\",{\"1\":{\"569\":1}}],[\"最大子数组和\",{\"0\":{\"524\":1}}],[\"最大利润\",{\"1\":{\"485\":1}}],[\"最左边的修订号下标为\",{\"1\":{\"509\":1}}],[\"最长回文子串\",{\"0\":{\"494\":1}}],[\"最长子串\",{\"1\":{\"467\":1}}],[\"最好都用扩展运算符改写\",{\"1\":{\"1184\":1}}],[\"最好用整数索引去进行\",{\"1\":{\"983\":1}}],[\"最好使用\",{\"1\":{\"1354\":1}}],[\"最好使用括号\",{\"1\":{\"930\":1}}],[\"最好使用其他方式\",{\"1\":{\"408\":1}}],[\"最好仅使用小写字母\",{\"1\":{\"115\":1}}],[\"最常见的\",{\"1\":{\"153\":1}}],[\"最常见的用例为\",{\"1\":{\"130\":1}}],[\"最后则由\",{\"1\":{\"1534\":1}}],[\"最后在\",{\"1\":{\"1438\":1}}],[\"最后在添加一个处理\",{\"1\":{\"1417\":1}}],[\"最后得到\",{\"1\":{\"1406\":1}}],[\"最后垃圾收集器完成内存清除工作\",{\"1\":{\"1282\":1}}],[\"最后等于\",{\"1\":{\"1218\":1}}],[\"最后返回右操作数的值\",{\"1\":{\"1246\":1}}],[\"最后返回\",{\"1\":{\"1053\":1}}],[\"最后返回调用程序\",{\"1\":{\"1034\":1}}],[\"最后返回这个临时构造函数的一个实例\",{\"1\":{\"640\":1}}],[\"最后一步便是调用了新赋函数\",{\"1\":{\"1469\":1}}],[\"最后一步\",{\"1\":{\"659\":1}}],[\"最后一个对\",{\"1\":{\"1218\":1}}],[\"最后一个单词不添加\",{\"1\":{\"89\":1}}],[\"最后一个单词也会被添加\",{\"1\":{\"88\":1}}],[\"最后一个元素不添加边框\",{\"1\":{\"15\":1}}],[\"最后面\",{\"1\":{\"438\":1}}],[\"最后将其结果汇总为单个返回值\",{\"1\":{\"352\":1}}],[\"最后将这个闭包函数返回作为包装后的事件监听函数\",{\"1\":{\"289\":1}}],[\"最后将结果通过web服务器返回给浏览器客户端\",{\"1\":{\"153\":1}}],[\"最后浏览器绘制各个节点\",{\"1\":{\"158\":1}}],[\"最后客户端再回传一个带ack标志的数据包\",{\"1\":{\"151\":1}}],[\"超出边界并引发异常\",{\"1\":{\"1048\":1}}],[\"超出容器限制\",{\"1\":{\"48\":1}}],[\"超类型构造函数\",{\"1\":{\"659\":1}}],[\"超级工厂\",{\"1\":{\"584\":1}}],[\"超时调用定时器按固定间隔触发周期性定时器\",{\"0\":{\"1543\":1}}],[\"超时\",{\"1\":{\"458\":1}}],[\"超文本标记语言\",{\"1\":{\"115\":1}}],[\"亮度\",{\"1\":{\"110\":1}}],[\"越高色彩越纯\",{\"1\":{\"110\":1}}],[\"饱和度\",{\"1\":{\"110\":1}}],[\"色调\",{\"1\":{\"110\":2}}],[\"色彩空间中点的两种有关系的表示\",{\"1\":{\"110\":1}}],[\"色彩空间又称\",{\"1\":{\"108\":1}}],[\"色彩空间\",{\"1\":{\"108\":2,\"109\":1,\"110\":2}}],[\"色彩模式\",{\"0\":{\"107\":1}}],[\"形成一个\",{\"1\":{\"1532\":1,\"1552\":1}}],[\"形成一个单独作用域\",{\"1\":{\"1407\":1}}],[\"形成一个单独的作用域\",{\"1\":{\"1407\":1}}],[\"形参只是提供便利\",{\"1\":{\"1382\":1}}],[\"形参\",{\"1\":{\"1334\":1}}],[\"形如\",{\"1\":{\"109\":1}}],[\"形式上\",{\"1\":{\"329\":1}}],[\"形式\",{\"1\":{\"84\":2}}],[\"能充分利用\",{\"1\":{\"1680\":1}}],[\"能看到的是\",{\"1\":{\"1616\":1}}],[\"能看到的只有\",{\"1\":{\"1616\":1}}],[\"能直接修改模块内部的数据\",{\"1\":{\"1612\":1}}],[\"能实现多任务运行的过程就是并发\",{\"1\":{\"1547\":1}}],[\"能正常运行\",{\"1\":{\"1335\":1}}],[\"能取到值\",{\"1\":{\"1217\":1}}],[\"能不能为\",{\"1\":{\"955\":1}}],[\"能将对象标记为不可扩展\",{\"1\":{\"812\":1}}],[\"能自定义需要继承的属性\",{\"1\":{\"636\":1}}],[\"能够让希望一个变量长期驻扎在内存之中成为可能\",{\"1\":{\"1711\":1}}],[\"能够正确识别\",{\"1\":{\"1184\":1}}],[\"能够根据接受的参数来构建一个包含所有必要信息的\",{\"1\":{\"586\":1}}],[\"能够立即在所有实例中得到反映\",{\"1\":{\"570\":1}}],[\"能够通过\",{\"1\":{\"531\":1}}],[\"能影响到其子元素透明度\",{\"1\":{\"108\":1}}],[\"能命中所有后代元素\",{\"1\":{\"13\":1}}],[\"蓝色方块表示对象\",{\"1\":{\"644\":1}}],[\"蓝\",{\"1\":{\"108\":1}}],[\"绿色箭头表示\",{\"1\":{\"644\":1}}],[\"绿\",{\"1\":{\"108\":1}}],[\"由元素逐级嵌套所组成\",{\"1\":{\"1667\":1}}],[\"由多个页面组成\",{\"1\":{\"1621\":1}}],[\"由名称和对应值组成的一个变量对象的属性被创建\",{\"1\":{\"1564\":1}}],[\"由上下文确定\",{\"1\":{\"1375\":1}}],[\"由上到下地去匹配路由\",{\"1\":{\"153\":1}}],[\"由开发者通过代码进行分配\",{\"1\":{\"1268\":1}}],[\"由系统自动分配内存空间\",{\"1\":{\"1268\":1}}],[\"由系统自动分配存储空间\",{\"1\":{\"1263\":1}}],[\"由两个竖线\",{\"1\":{\"1254\":1}}],[\"由两个和号\",{\"1\":{\"1253\":1}}],[\"由此导致\",{\"1\":{\"1621\":1}}],[\"由此带来的问题是\",{\"1\":{\"1222\":1}}],[\"由此可知\",{\"1\":{\"645\":1}}],[\"由函数所独有\",{\"1\":{\"645\":1}}],[\"由\",{\"1\":{\"549\":1,\"1271\":1}}],[\"由poll阶段控制\",{\"1\":{\"458\":1}}],[\"由父节点的监听函数统一处理多个子元素的事件\",{\"1\":{\"456\":1}}],[\"由操作系统动态随机选取一个\",{\"1\":{\"301\":2}}],[\"由于函数声明提升优先于变量声明提升\",{\"1\":{\"1703\":1}}],[\"由于函数声明提升优先于函数表达式的变量声明提升\",{\"1\":{\"1329\":1}}],[\"由于一个线程在同一时间只能处理一件事情\",{\"1\":{\"1547\":1}}],[\"由于一个函数可以返回另一个函数\",{\"1\":{\"1467\":1}}],[\"由于所有对象都会继承其原型对象的属性和方法\",{\"1\":{\"1497\":1}}],[\"由于不是同一个作用域\",{\"1\":{\"1407\":1}}],[\"由于暂时性死区的原因\",{\"1\":{\"1407\":1}}],[\"由于箭头函数没有自己的\",{\"1\":{\"1375\":1}}],[\"由于字符串\",{\"1\":{\"1279\":1}}],[\"由于数组本质是特殊的对象\",{\"1\":{\"1218\":1}}],[\"由于后自增\",{\"1\":{\"1194\":1}}],[\"由于新的最左侧的位总是和以前相同\",{\"1\":{\"1149\":1}}],[\"由于第一位\",{\"1\":{\"1147\":1}}],[\"由于变量声明\",{\"1\":{\"1065\":1}}],[\"由于变量不可以以数字开头\",{\"1\":{\"557\":1}}],[\"由于这三个差异\",{\"1\":{\"1065\":1}}],[\"由于继承和原型链\",{\"1\":{\"1004\":1}}],[\"由于对象\",{\"1\":{\"769\":1}}],[\"由于对象的方法就是函数\",{\"1\":{\"551\":1}}],[\"由于其比较简单\",{\"1\":{\"557\":1}}],[\"由于原生继承的属性默认不可枚举\",{\"1\":{\"531\":1}}],[\"由于树是空的\",{\"1\":{\"470\":1}}],[\"由于object\",{\"1\":{\"402\":1}}],[\"由于vue会在初始化实例时对属性执行getter\",{\"1\":{\"401\":1}}],[\"由于网络层使用\",{\"1\":{\"318\":1}}],[\"由于\",{\"1\":{\"304\":2,\"530\":1,\"531\":1,\"557\":1,\"563\":1,\"577\":1,\"1033\":1,\"1132\":1,\"1137\":1,\"1220\":1,\"1341\":1,\"1476\":1,\"1538\":1,\"1589\":1,\"1617\":1,\"1634\":1,\"1661\":1,\"1709\":1}}],[\"由于在原型中查找值的过程是一次搜索\",{\"1\":{\"579\":1}}],[\"由于在\",{\"1\":{\"253\":1,\"632\":1}}],[\"由于好多参考书的误导\",{\"1\":{\"247\":1}}],[\"由于可以在代码中随意使用空格和换行\",{\"1\":{\"236\":1}}],[\"由于示例设置了\",{\"1\":{\"105\":1}}],[\"由web服务器\",{\"1\":{\"153\":1}}],[\"由互联网技术领域的各种利益相关者组成\",{\"1\":{\"139\":1}}],[\"由一个叹号\",{\"1\":{\"1255\":1}}],[\"由一对引号\",{\"1\":{\"117\":1}}],[\"由一系列的元素组成\",{\"1\":{\"115\":1}}],[\"由编写人员决定修改哪个属性以改变规则\",{\"1\":{\"6\":1}}],[\"需要通过\",{\"1\":{\"1709\":1}}],[\"需要通过作用域链到\",{\"1\":{\"1709\":1}}],[\"需要被更改\",{\"1\":{\"1695\":1}}],[\"需要受到保护的变量\",{\"1\":{\"1695\":1}}],[\"需要调用对\",{\"1\":{\"1670\":1}}],[\"需要特别注意的是\",{\"1\":{\"1654\":1}}],[\"需要借助\",{\"1\":{\"1616\":1}}],[\"需要额外的操作才能得到预期的结果是为异步\",{\"1\":{\"1547\":1}}],[\"需要执行\",{\"1\":{\"1542\":1}}],[\"需要执行的函数\",{\"1\":{\"1446\":1}}],[\"需要将\",{\"1\":{\"1518\":1}}],[\"需要将字符串转换成整数进行比较\",{\"1\":{\"509\":1}}],[\"需要一个存放任意多个参数的数组\",{\"1\":{\"1417\":1}}],[\"需要手动清除\",{\"1\":{\"1284\":1}}],[\"需要手动来管理内存的\",{\"1\":{\"1279\":1}}],[\"需要手动指定\",{\"1\":{\"1178\":1}}],[\"需要手动解决冲突后再提交\",{\"1\":{\"177\":1}}],[\"需要以\",{\"1\":{\"936\":1}}],[\"需要转换为整数的字符串\",{\"1\":{\"913\":1}}],[\"需要转换为浮点数的字符串\",{\"1\":{\"909\":1}}],[\"需要编码的\",{\"1\":{\"879\":1,\"885\":1}}],[\"需要使用即将提到的\",{\"1\":{\"1382\":1}}],[\"需要使用\",{\"1\":{\"838\":1,\"1284\":1,\"1616\":1}}],[\"需要检测的\",{\"1\":{\"753\":1,\"817\":1}}],[\"需要查找的目标对象\",{\"1\":{\"720\":1}}],[\"需要定义的\",{\"1\":{\"693\":1}}],[\"需要在关键字\",{\"1\":{\"1486\":1}}],[\"需要在离上次执行时间间隔设定时间后再出发才能执行\",{\"1\":{\"1431\":1}}],[\"需要在类的构造函数中定义实例属性\",{\"1\":{\"632\":1}}],[\"需要在记录移入方向的同时\",{\"1\":{\"277\":1}}],[\"需要传入\",{\"1\":{\"548\":1}}],[\"需要\",{\"1\":{\"518\":1,\"607\":1,\"1312\":1,\"1394\":1}}],[\"需要合并的数组是\",{\"1\":{\"500\":1}}],[\"需要合并\",{\"1\":{\"500\":2}}],[\"需要重写构建\",{\"1\":{\"439\":1}}],[\"需要重新定义数组的原型来达到响应式\",{\"1\":{\"401\":1}}],[\"需要处理\",{\"1\":{\"402\":1}}],[\"需要注意的是\",{\"1\":{\"397\":1,\"1218\":1,\"1302\":1,\"1306\":1,\"1670\":1}}],[\"需要注意跨域问题\",{\"1\":{\"79\":1}}],[\"需要客户端和服务端总共发送\",{\"1\":{\"304\":1}}],[\"需要同时用到\",{\"1\":{\"272\":1}}],[\"需要给所有变量声明类型\",{\"1\":{\"230\":1}}],[\"需要输入用户名和密码\",{\"1\":{\"225\":1}}],[\"需要输入自己账户密码\",{\"1\":{\"215\":1}}],[\"需要先创建一个目录\",{\"1\":{\"215\":1}}],[\"需要4次握手\",{\"1\":{\"156\":1}}],[\"需要包含它才能使其他东西正常工作\",{\"1\":{\"120\":1}}],[\"需要滚动浏览器滚动条方可滚动\",{\"1\":{\"105\":1}}],[\"有助于防止某些类型的错误\",{\"1\":{\"1695\":1}}],[\"有很多原因促成了这种基于作用域的隐藏方法\",{\"1\":{\"1681\":1}}],[\"有状态的解析规则\",{\"1\":{\"1666\":1}}],[\"有缓存\",{\"1\":{\"1616\":1,\"1618\":1}}],[\"有引入和暴露两个方面\",{\"1\":{\"1614\":1}}],[\"有详细解读\",{\"1\":{\"1550\":1}}],[\"有三个任务在排队等待执行\",{\"1\":{\"1539\":1}}],[\"有三种方法可以爬到楼顶\",{\"1\":{\"518\":1}}],[\"有异步事件触发时\",{\"1\":{\"1538\":1}}],[\"有以下两种情况\",{\"1\":{\"1500\":1}}],[\"有默认值\",{\"1\":{\"1406\":1}}],[\"有值\",{\"1\":{\"1404\":1}}],[\"有严格的默认参数格式\",{\"1\":{\"1398\":1}}],[\"有利于将来的代码优化\",{\"1\":{\"1399\":1}}],[\"有利于封装回调函数\",{\"1\":{\"1375\":1}}],[\"有利于代码的封装\",{\"1\":{\"610\":1}}],[\"有两个任务\",{\"1\":{\"1541\":1}}],[\"有两个操作数\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"有两种实现惰性载入的方式\",{\"1\":{\"1468\":1}}],[\"有两种策略实现垃圾回收机制\",{\"1\":{\"1280\":1}}],[\"有两种方式使用\",{\"1\":{\"577\":1}}],[\"有两种方法可以爬到楼顶\",{\"1\":{\"518\":1}}],[\"有了解构赋值\",{\"1\":{\"1230\":1}}],[\"有了扩展运算符后则有了更好的方式\",{\"1\":{\"1178\":1}}],[\"有了这个设置\",{\"1\":{\"120\":1}}],[\"有符号右移和无符号右移总是返回相同的结果\",{\"1\":{\"1150\":1}}],[\"有关类型和原始值的更多信息\",{\"1\":{\"1122\":1}}],[\"有自己特色的闭包特性\",{\"1\":{\"1066\":1,\"1692\":1}}],[\"有一项提案\",{\"1\":{\"615\":1}}],[\"有一点需要说明\",{\"1\":{\"571\":1}}],[\"有一个提案\",{\"1\":{\"1593\":1}}],[\"有一个默认的返回值\",{\"1\":{\"1477\":1}}],[\"有一个行为差异\",{\"1\":{\"625\":1}}],[\"有一个例外\",{\"1\":{\"530\":1}}],[\"有一个缺点\",{\"1\":{\"394\":1}}],[\"有一个复杂的内置结构\",{\"1\":{\"329\":1}}],[\"有一个\",{\"1\":{\"127\":1}}],[\"有效覆盖了原函数\",{\"1\":{\"1469\":1}}],[\"有效地解决了函数参数过多和参数先后顺序的问题\",{\"1\":{\"1382\":1}}],[\"有效字符串需满足\",{\"1\":{\"512\":1}}],[\"有效的括号\",{\"0\":{\"512\":1}}],[\"有哪些方法\",{\"0\":{\"397\":1}}],[\"有初始化提升\",{\"1\":{\"341\":1}}],[\"有消息边界\",{\"1\":{\"313\":1}}],[\"有沾包情况\",{\"1\":{\"313\":1}}],[\"有界性\",{\"1\":{\"313\":1}}],[\"有序\",{\"1\":{\"313\":1}}],[\"有序性\",{\"1\":{\"313\":1}}],[\"有可能\",{\"1\":{\"277\":1}}],[\"有区别\",{\"1\":{\"235\":1}}],[\"有\",{\"1\":{\"153\":1,\"229\":1,\"313\":1,\"706\":1,\"1197\":1,\"1427\":1}}],[\"有时\",{\"1\":{\"1348\":1}}],[\"有时需要允许访问返回动态计算值的属性\",{\"1\":{\"1318\":1}}],[\"有时直接称做\",{\"1\":{\"1197\":1}}],[\"有时候你可能会用到第三方库\",{\"1\":{\"1578\":1}}],[\"有时候甚至会崩溃\",{\"1\":{\"1432\":1}}],[\"有时候会不是很方便很准确\",{\"1\":{\"1178\":1}}],[\"有时候会通过将变量保存在数组中\",{\"1\":{\"1178\":1}}],[\"有时候也被认为是不可靠的数据报协议\",{\"1\":{\"309\":1}}],[\"有时被称为根元素\",{\"1\":{\"120\":1}}],[\"有时你会看到没有值的属性\",{\"1\":{\"118\":1}}],[\"有任何一个属性超出了容器的范围\",{\"1\":{\"104\":1}}],[\"有任何一个属性如果没有覆盖到容器范围\",{\"1\":{\"104\":1}}],[\"有些操作只允许一\",{\"1\":{\"1161\":2}}],[\"有些浏览器还不支持\",{\"1\":{\"401\":1}}],[\"有些地方则不能省略分号\",{\"1\":{\"252\":1}}],[\"有些地方可以省略分号\",{\"1\":{\"252\":1}}],[\"有些字体可能没有设计所有的字重\",{\"1\":{\"75\":1}}],[\"有些特性支持负的长度值\",{\"1\":{\"23\":1}}],[\"我不确定它存不存在\",{\"1\":{\"381\":1}}],[\"我要取一个可能不存在的值\",{\"1\":{\"381\":1}}],[\"我是finally\",{\"1\":{\"372\":2}}],[\"我客户端也可以关闭连接了\",{\"1\":{\"304\":1}}],[\"我客户端没有数据要发给你了\",{\"1\":{\"304\":1}}],[\"我这边数据发完了\",{\"1\":{\"304\":1}}],[\"我同意你的关闭请求\",{\"1\":{\"304\":1}}],[\"我想这也是为什么现在很少有用table布局的原因之一\",{\"1\":{\"158\":1}}],[\"我的理解就是\",{\"1\":{\"104\":2}}],[\"我们通过一段代码仔细分析上述代码片段执行过程到底发生了什么\",{\"1\":{\"1709\":1}}],[\"我们通过示例并附加图例阐述这种复杂的相互关系\",{\"1\":{\"644\":1}}],[\"我们经常会将函数声明\",{\"1\":{\"1670\":1}}],[\"我们把之后对可执行代码的执行称为\",{\"1\":{\"1668\":1}}],[\"我们把注释放到代码行的结尾处\",{\"1\":{\"244\":1}}],[\"我们会在软件工程体系中看过一句话\",{\"1\":{\"1621\":1}}],[\"我们会说到两个浏览器的核心组件\",{\"1\":{\"1550\":1}}],[\"我们能得出结论\",{\"1\":{\"1581\":1}}],[\"我们必须在一个对象内部包含一个指向函数的属性\",{\"1\":{\"1580\":1}}],[\"我们首先会分别解释这四条规则\",{\"1\":{\"1577\":1}}],[\"我们关心的调用位置就在当前正在执行的函数的前一个调用中\",{\"1\":{\"1576\":1}}],[\"我们来总结一下函数执行上下文中作用域链和变量对象的\",{\"1\":{\"1572\":1}}],[\"我们命名为\",{\"1\":{\"1571\":1}}],[\"我们从一个函数的\",{\"1\":{\"1569\":1}}],[\"我们先了解一个概念\",{\"1\":{\"1561\":1}}],[\"我们用\",{\"1\":{\"1557\":1,\"1562\":1}}],[\"我们用位来表示管理权限\",{\"1\":{\"1161\":1}}],[\"我们并不能清晰的把控处理程序所消耗的时长\",{\"1\":{\"1543\":1}}],[\"我们知道\",{\"1\":{\"1534\":1,\"1709\":1}}],[\"我们知道目前的一种说法是当\",{\"1\":{\"1431\":1}}],[\"我们称之为\",{\"1\":{\"1689\":1}}],[\"我们称其为\",{\"1\":{\"1556\":1}}],[\"我们称它为一个方法\",{\"1\":{\"1515\":1}}],[\"我们称这种为分离的\",{\"1\":{\"1286\":1}}],[\"我们新增一个原型方法稍微改动一下\",{\"1\":{\"1488\":1}}],[\"我们也可以使用生成器方法\",{\"1\":{\"1488\":1}}],[\"我们也可以把它转换成\",{\"1\":{\"1357\":1}}],[\"我们将原型的实现写在类中\",{\"1\":{\"1483\":1}}],[\"我们将原型的实现写在了类中\",{\"1\":{\"599\":1}}],[\"我们预先传入参数\",{\"1\":{\"1412\":1}}],[\"我们期待着不定参数和默认参数可以完全取代\",{\"1\":{\"1408\":1}}],[\"我们还是要回到老式的\",{\"1\":{\"1357\":1}}],[\"我们希望即使前一个异步操作失败\",{\"1\":{\"1348\":1}}],[\"我们应该手动的将这个变量置为空\",{\"1\":{\"1279\":1}}],[\"我们是否还在需要这个对象\",{\"1\":{\"1279\":1}}],[\"我们一般都会直接使用\",{\"1\":{\"1616\":1}}],[\"我们一般称为怪异模式\",{\"1\":{\"321\":1}}],[\"我们一定要慎重的考虑\",{\"1\":{\"1279\":1}}],[\"我们在写\",{\"1\":{\"1490\":1}}],[\"我们在编码中应该尽量避免声明全局变量\",{\"1\":{\"1285\":1}}],[\"我们在理解时仍然需要将其与堆内存区分开来\",{\"1\":{\"1263\":1}}],[\"我们在定义一个变量的时候\",{\"1\":{\"941\":1}}],[\"我们存储的\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"我们就会意识到一个惨痛的事实\",{\"1\":{\"1621\":1}}],[\"我们就完成了最终版的柯里化函数\",{\"1\":{\"1417\":1}}],[\"我们就可以对\",{\"1\":{\"1557\":1}}],[\"我们就可以借助内存空间的特性来验证一下数据类型的特点了\",{\"1\":{\"1264\":1}}],[\"我们就可以很方便的取出我们想要的书\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"我们就把实参带入到func函数中执行\",{\"1\":{\"392\":1}}],[\"我们仍然需要基于堆栈数据结构的思维来实现一些功能\",{\"1\":{\"1260\":1}}],[\"我们使用\",{\"1\":{\"1158\":1}}],[\"我们可使用以下条件语句\",{\"1\":{\"1017\":1}}],[\"我们可以将\",{\"1\":{\"1670\":1}}],[\"我们可以将版本号按照点号分割成修订号\",{\"1\":{\"509\":1}}],[\"我们可以在继承的类中重写父类的方法\",{\"1\":{\"1491\":1}}],[\"我们可以在分割版本号的同时解析出修订号进行比较\",{\"1\":{\"509\":1}}],[\"我们可以通过更改上面的代码来实现并行的异步操作\",{\"1\":{\"1358\":1}}],[\"我们可以通过类比乒乓球盒子来分析\",{\"1\":{\"1260\":1}}],[\"我们可以利用这个特性来替代立即执行函数\",{\"1\":{\"1692\":1}}],[\"我们可以利用\",{\"1\":{\"1353\":1}}],[\"我们可以结合以下例子与图解进行理解\",{\"1\":{\"1264\":1}}],[\"我们可以粗浅地理解为保存在栈内存中的一个引用地址\",{\"1\":{\"1264\":1}}],[\"我们可以直接操作保存在栈内存空间的值\",{\"1\":{\"1263\":1}}],[\"我们可以使用\",{\"1\":{\"603\":1,\"1616\":1}}],[\"我们可以手动为它设置回适当的值\",{\"1\":{\"578\":1}}],[\"我们可以用下面的方式使用惰性载入重写\",{\"1\":{\"1468\":1}}],[\"我们可以用一个数字\",{\"1\":{\"1161\":1}}],[\"我们可以用\",{\"1\":{\"394\":1}}],[\"我们可以添加注释来对\",{\"1\":{\"240\":1}}],[\"我们可以理解成一个特定的\",{\"1\":{\"15\":1}}],[\"我们只要改变原生的\",{\"1\":{\"955\":1}}],[\"我们只需要在每个函数中返回\",{\"1\":{\"1497\":1}}],[\"我们只需要创建数组并存储它们\",{\"1\":{\"1355\":1}}],[\"我们只需要关心书的名字\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"我们只需要常数空间存放若干变量\",{\"1\":{\"524\":1}}],[\"我们只需要常数的空间保存若干变量\",{\"1\":{\"509\":1}}],[\"我们只需要遍历一遍数组即可求得答案\",{\"1\":{\"524\":1}}],[\"我们仅需要知道以下几个知识点\",{\"1\":{\"925\":1}}],[\"我们所需要的无非就是超类型原型的一个副本而已\",{\"1\":{\"659\":1}}],[\"我们创建了函数\",{\"1\":{\"1580\":1}}],[\"我们创建选择器对象之所以没有\",{\"1\":{\"584\":1}}],[\"我们创建的每个函数都有一个\",{\"1\":{\"575\":1}}],[\"我们需要先判断参数\",{\"1\":{\"1398\":1}}],[\"我们需要\",{\"1\":{\"509\":1}}],[\"我们需要重新验证并计算渲染树\",{\"1\":{\"158\":1}}],[\"我们不确定它存不存在\",{\"1\":{\"381\":1}}],[\"我们无法简单的通过使用\",{\"1\":{\"81\":1}}],[\"我们除了\",{\"1\":{\"7\":1}}],[\"开启下一轮循环\",{\"1\":{\"457\":1}}],[\"开启\",{\"1\":{\"439\":1}}],[\"开启iptables服务的开机自启动\",{\"1\":{\"217\":1}}],[\"开启iptables服务\",{\"1\":{\"217\":1}}],[\"开设一个条目\",{\"1\":{\"303\":1}}],[\"开发工具\",{\"0\":{\"1721\":1},\"2\":{\"172\":1,\"179\":1,\"182\":1}}],[\"开发者来说\",{\"1\":{\"1695\":1}}],[\"开发者将程序分解成离散功能块\",{\"1\":{\"1606\":1}}],[\"开发者可能需要处理多个连续步骤的操作\",{\"1\":{\"1353\":1}}],[\"开发者\",{\"1\":{\"115\":1}}],[\"开始做准备工作\",{\"1\":{\"1572\":1}}],[\"开始要解释执行代码的时候\",{\"1\":{\"1557\":1}}],[\"开始首次事件循环\",{\"1\":{\"1533\":1}}],[\"开始执行函数\",{\"1\":{\"1572\":1}}],[\"开始执行\",{\"1\":{\"1532\":1}}],[\"开始可以使用类数组对象\",{\"1\":{\"1302\":1}}],[\"开始下载脚本并继续解析文档\",{\"1\":{\"464\":1}}],[\"开始下一轮\",{\"1\":{\"457\":1}}],[\"开始计算元素大小和位置\",{\"1\":{\"437\":1}}],[\"开始的标签中来为站点设定语言\",{\"1\":{\"132\":1}}],[\"开始\",{\"1\":{\"121\":1,\"491\":1,\"509\":1,\"1321\":1,\"1694\":1}}],[\"开始标签\",{\"1\":{\"116\":1}}],[\"开始显示背景图像\",{\"1\":{\"101\":2}}],[\"开头\",{\"1\":{\"242\":1,\"245\":1,\"1616\":1}}],[\"开头标签标志着元素开始或开始生效的地方\",{\"1\":{\"116\":1}}],[\"开头的元素\",{\"1\":{\"14\":1}}],[\"开头的字符串的\",{\"1\":{\"14\":1}}],[\"开头并用连接符\",{\"1\":{\"14\":1}}],[\"含义\",{\"1\":{\"1328\":1}}],[\"含义就是指向该对象的构造函数\",{\"1\":{\"647\":1}}],[\"含\",{\"1\":{\"101\":2}}],[\"含转义字符串\",{\"1\":{\"29\":1}}],[\"渐变色\",{\"0\":{\"111\":1},\"1\":{\"100\":1}}],[\"judge\",{\"1\":{\"1418\":2}}],[\"jul\",{\"1\":{\"1048\":1}}],[\"jun\",{\"1\":{\"1048\":1}}],[\"just\",{\"1\":{\"1449\":2}}],[\"justfy\",{\"0\":{\"85\":1}}],[\"justify\",{\"1\":{\"81\":7,\"85\":1,\"332\":2}}],[\"jaegermonkey\",{\"1\":{\"1550\":1}}],[\"jaavscript\",{\"1\":{\"1253\":1}}],[\"jan\",{\"1\":{\"1048\":2}}],[\"javascrip\",{\"1\":{\"438\":1}}],[\"javascript所能表示最大的数字\",{\"1\":{\"376\":1}}],[\"javascriptcore\",{\"1\":{\"144\":1}}],[\"javascript引擎本质是一个程序\",{\"1\":{\"144\":1}}],[\"javascript引擎\",{\"0\":{\"144\":1}}],[\"javascript\",{\"0\":{\"131\":1,\"954\":1},\"1\":{\"131\":4,\"230\":1,\"234\":2,\"235\":3,\"236\":2,\"239\":2,\"240\":2,\"245\":1,\"247\":1,\"251\":1,\"252\":5,\"253\":3,\"438\":3,\"457\":1,\"527\":2,\"537\":1,\"544\":1,\"546\":1,\"557\":2,\"558\":2,\"565\":1,\"603\":1,\"644\":1,\"646\":1,\"799\":3,\"804\":1,\"838\":1,\"848\":1,\"870\":1,\"875\":1,\"890\":3,\"891\":2,\"893\":2,\"917\":2,\"923\":2,\"924\":2,\"925\":3,\"927\":1,\"938\":1,\"941\":1,\"945\":1,\"946\":3,\"947\":1,\"948\":2,\"1017\":1,\"1027\":1,\"1033\":1,\"1052\":1,\"1065\":1,\"1069\":1,\"1075\":1,\"1083\":2,\"1086\":1,\"1087\":1,\"1122\":1,\"1132\":3,\"1142\":5,\"1143\":1,\"1147\":1,\"1179\":1,\"1184\":1,\"1197\":1,\"1200\":1,\"1212\":1,\"1218\":2,\"1259\":1,\"1260\":3,\"1263\":3,\"1264\":3,\"1271\":1,\"1273\":1,\"1274\":1,\"1279\":5,\"1280\":1,\"1282\":2,\"1284\":1,\"1285\":1,\"1286\":1,\"1287\":1,\"1312\":1,\"1318\":1,\"1322\":1,\"1329\":2,\"1380\":2,\"1382\":1,\"1387\":1,\"1390\":2,\"1398\":2,\"1408\":1,\"1422\":1,\"1452\":1,\"1473\":2,\"1496\":2,\"1500\":1,\"1505\":1,\"1514\":1,\"1524\":1,\"1529\":1,\"1532\":1,\"1533\":1,\"1534\":2,\"1537\":1,\"1538\":1,\"1547\":1,\"1548\":2,\"1549\":6,\"1550\":7,\"1551\":9,\"1552\":4,\"1556\":4,\"1557\":5,\"1561\":6,\"1562\":1,\"1579\":1,\"1580\":2,\"1581\":1,\"1593\":1,\"1611\":3,\"1612\":3,\"1613\":2,\"1614\":7,\"1621\":2,\"1632\":1,\"1665\":2,\"1669\":1,\"1670\":1,\"1673\":4,\"1677\":1,\"1680\":1,\"1689\":1,\"1691\":1,\"1694\":1,\"1695\":1,\"1698\":6,\"1709\":2},\"2\":{\"232\":1,\"255\":1,\"296\":1,\"361\":1,\"387\":1,\"390\":1,\"396\":1,\"399\":1,\"536\":1,\"543\":1,\"554\":1,\"567\":1,\"574\":1,\"583\":1,\"589\":1,\"595\":1,\"609\":1,\"617\":1,\"627\":1,\"634\":1,\"639\":1,\"643\":1,\"655\":1,\"658\":1,\"661\":1,\"666\":1,\"675\":1,\"681\":1,\"686\":1,\"691\":1,\"697\":1,\"703\":1,\"708\":1,\"718\":1,\"723\":1,\"728\":1,\"739\":1,\"744\":1,\"751\":1,\"759\":1,\"765\":1,\"771\":1,\"778\":1,\"783\":1,\"789\":1,\"798\":1,\"809\":1,\"815\":1,\"822\":1,\"827\":1,\"832\":1,\"840\":1,\"845\":1,\"851\":1,\"856\":1,\"863\":1,\"867\":1,\"872\":1,\"877\":1,\"883\":1,\"889\":1,\"896\":1,\"901\":1,\"907\":1,\"912\":1,\"916\":1,\"932\":1,\"940\":1,\"957\":1,\"965\":1,\"973\":1,\"979\":1,\"988\":1,\"1006\":1,\"1016\":1,\"1022\":1,\"1029\":1,\"1038\":1,\"1044\":1,\"1050\":1,\"1057\":1,\"1062\":1,\"1072\":1,\"1079\":1,\"1082\":1,\"1085\":1,\"1089\":1,\"1096\":1,\"1104\":1,\"1113\":1,\"1118\":1,\"1134\":1,\"1141\":1,\"1163\":1,\"1168\":1,\"1171\":1,\"1188\":1,\"1196\":1,\"1199\":1,\"1206\":1,\"1211\":1,\"1237\":1,\"1240\":1,\"1245\":1,\"1251\":1,\"1258\":1,\"1270\":1,\"1278\":1,\"1291\":1,\"1298\":1,\"1314\":1,\"1325\":1,\"1337\":1,\"1360\":1,\"1378\":1,\"1392\":1,\"1397\":1,\"1410\":1,\"1415\":1,\"1421\":1,\"1430\":1,\"1440\":1,\"1443\":1,\"1451\":1,\"1464\":1,\"1472\":1,\"1479\":1,\"1495\":1,\"1499\":1,\"1508\":1,\"1513\":1,\"1520\":1,\"1528\":1,\"1531\":1,\"1536\":1,\"1545\":1,\"1554\":1,\"1559\":1,\"1568\":1,\"1574\":1,\"1592\":1,\"1605\":1,\"1623\":1,\"1638\":1,\"1648\":1,\"1657\":1,\"1660\":1,\"1663\":1,\"1672\":1,\"1679\":1,\"1688\":1,\"1697\":1,\"1706\":1,\"1713\":1}}],[\"java\",{\"0\":{\"1726\":1,\"1731\":1,\"1737\":1},\"1\":{\"230\":1,\"924\":1,\"930\":1,\"1075\":1,\"1329\":1,\"1473\":1}}],[\"jquery\",{\"1\":{\"584\":1,\"1233\":1,\"1458\":1,\"1496\":2,\"1613\":1,\"1614\":3}}],[\"john\",{\"1\":{\"927\":1}}],[\"jothan\",{\"1\":{\"659\":2}}],[\"job\",{\"1\":{\"569\":3,\"570\":3,\"571\":3,\"572\":1,\"575\":1,\"576\":1,\"578\":2,\"579\":1,\"581\":1,\"586\":3,\"590\":3,\"592\":6,\"593\":3,\"1658\":2}}],[\"join\",{\"1\":{\"506\":1,\"943\":1,\"1184\":2}}],[\"j++\",{\"1\":{\"488\":2,\"1027\":1}}],[\"j\",{\"1\":{\"476\":4,\"482\":3,\"488\":16,\"506\":5,\"509\":5,\"1013\":3,\"1027\":6,\"1248\":4}}],[\"js`\",{\"1\":{\"1593\":1}}],[\"js解析如下\",{\"1\":{\"464\":1}}],[\"js文件\",{\"1\":{\"464\":1}}],[\"js文件等\",{\"1\":{\"153\":1}}],[\"js的事件循环\",{\"0\":{\"458\":1}}],[\"js实现\",{\"0\":{\"273\":1}}],[\"jsondata\",{\"1\":{\"1232\":2}}],[\"jsonp\",{\"1\":{\"450\":1}}],[\"json\",{\"0\":{\"1232\":1},\"1\":{\"161\":1,\"251\":1,\"531\":1,\"1232\":2,\"1261\":1,\"1264\":1,\"1288\":1,\"1632\":1}}],[\"jscript\",{\"1\":{\"144\":1,\"1550\":1}}],[\"js使用的引擎\",{\"1\":{\"144\":1}}],[\"js\",{\"0\":{\"1738\":1},\"1\":{\"131\":2,\"139\":1,\"143\":1,\"144\":1,\"157\":1,\"274\":1,\"277\":2,\"412\":1,\"848\":1,\"893\":2,\"1138\":1,\"1139\":1,\"1286\":1,\"1413\":1,\"1533\":2,\"1595\":1,\"1599\":2,\"1600\":1,\"1601\":1,\"1602\":3,\"1603\":5,\"1611\":4,\"1612\":4,\"1613\":2,\"1614\":8,\"1616\":3,\"1617\":3,\"1618\":6,\"1621\":4,\"1626\":2,\"1627\":2,\"1628\":1,\"1629\":1,\"1631\":2,\"1632\":1,\"1633\":1,\"1636\":2,\"1658\":3,\"1661\":11,\"1673\":1},\"2\":{\"163\":1}}],[\"jpg\",{\"1\":{\"100\":2}}],[\"背景位于整个滚动区域的居中部位\",{\"1\":{\"105\":1}}],[\"背景也不会随着元素的内容滚动\",{\"1\":{\"105\":1}}],[\"背景将会随着元素的内容滚动\",{\"1\":{\"105\":1}}],[\"背景相对于\",{\"1\":{\"105\":3}}],[\"背景图片或颜色\",{\"1\":{\"106\":1}}],[\"背景图片居中\",{\"1\":{\"102\":1}}],[\"背景图像始终被包含在容器内\",{\"1\":{\"104\":1}}],[\"背景图像有可能超出容器\",{\"1\":{\"104\":1}}],[\"背景图像的真实大小\",{\"1\":{\"104\":1}}],[\"背景\",{\"0\":{\"97\":1}}],[\"排在队伍前面的人一定是最先过检的人\",{\"1\":{\"1262\":1}}],[\"排除偶数保留奇数\",{\"0\":{\"672\":1}}],[\"排序\",{\"1\":{\"313\":1,\"476\":1},\"2\":{\"484\":1,\"490\":1}}],[\"排版引擎及\",{\"1\":{\"1550\":1}}],[\"排版的话\",{\"1\":{\"94\":1}}],[\"排版\",{\"1\":{\"94\":1}}],[\"排列的整数数组\",{\"1\":{\"500\":1}}],[\"排列越靠前\",{\"1\":{\"332\":1}}],[\"排列\",{\"1\":{\"45\":1,\"500\":1}}],[\"图中已经详细的表明了栈空间的存储原理\",{\"1\":{\"1260\":1}}],[\"图例\",{\"1\":{\"644\":1}}],[\"图标上\",{\"1\":{\"130\":1}}],[\"图片\",{\"1\":{\"120\":1}}],[\"图片可以保有其原有的尺寸\",{\"1\":{\"104\":1}}],[\"图片间隙问题\",{\"0\":{\"94\":1}}],[\"图像在垂直方向上重复\",{\"1\":{\"103\":1}}],[\"图像在水平和垂直方向上都不重复\",{\"1\":{\"103\":1}}],[\"图像在水平和垂直方向上重复\",{\"1\":{\"103\":1}}],[\"图像在水平方向上重复\",{\"1\":{\"103\":1}}],[\"图像\",{\"0\":{\"30\":1},\"1\":{\"29\":1,\"30\":1}}],[\"顶层的\",{\"1\":{\"1620\":1}}],[\"顶线和文字的顶和文字的底是不一样的\",{\"1\":{\"93\":1}}],[\"顶部\",{\"1\":{\"59\":1}}],[\"底层永远有个\",{\"1\":{\"1557\":1}}],[\"底层实现原理与\",{\"1\":{\"593\":1}}],[\"底数\",{\"1\":{\"1207\":1}}],[\"底行模式\",{\"1\":{\"205\":1}}],[\"底线\",{\"1\":{\"93\":1}}],[\"底部\",{\"1\":{\"59\":1}}],[\"决定给变量\",{\"1\":{\"1197\":1}}],[\"决定属性是否出现在对象的属性枚举中\",{\"1\":{\"531\":1}}],[\"决定是否可以使用\",{\"1\":{\"530\":1}}],[\"决定是否可以修改属性的值\",{\"1\":{\"529\":1}}],[\"决定了序列要进行排序的次数\",{\"1\":{\"488\":1}}],[\"决定主轴的方向\",{\"1\":{\"332\":1}}],[\"决定\",{\"1\":{\"93\":2}}],[\"决定其堆叠顺序\",{\"1\":{\"39\":1}}],[\"行末注释\",{\"0\":{\"244\":1}}],[\"行分隔符\",{\"1\":{\"238\":1}}],[\"行终止符\",{\"0\":{\"238\":1},\"1\":{\"233\":1}}],[\"行为类似于替换元素\",{\"1\":{\"329\":1}}],[\"行为和标识三种属性\",{\"1\":{\"229\":1}}],[\"行为标准\",{\"1\":{\"139\":1}}],[\"行高由\",{\"1\":{\"93\":1}}],[\"行内函数表达式非常强大且有用\",{\"1\":{\"1685\":1}}],[\"行内元素要使用该属性必须先定义该元素为块级或行内块级\",{\"1\":{\"86\":1}}],[\"行内元素的空隙问题\",{\"0\":{\"46\":1}}],[\"行内元素\",{\"1\":{\"45\":1}}],[\"行内元素与块级元素\",{\"0\":{\"45\":1}}],[\"行内样式\",{\"1\":{\"17\":2,\"18\":1}}],[\"等事件\",{\"1\":{\"1538\":1}}],[\"等初始化结束后\",{\"1\":{\"1407\":1}}],[\"等到最终没人进电梯了\",{\"1\":{\"1444\":1}}],[\"等到初始化结束\",{\"1\":{\"1407\":1}}],[\"等到异步操作完成\",{\"1\":{\"1340\":1}}],[\"等号\",{\"1\":{\"1243\":1}}],[\"等号才能知道\",{\"1\":{\"1222\":1}}],[\"等号左边对象的\",{\"1\":{\"1218\":1}}],[\"等号左边的两个变量的次序与等号右边两个同名属性的次序不一致\",{\"1\":{\"1218\":1}}],[\"等值比较操作保证以下不变\",{\"1\":{\"1203\":1}}],[\"等值运算符\",{\"0\":{\"1202\":1},\"1\":{\"1200\":1}}],[\"等于函数的参数个数减去指定了默认值的参数个数\",{\"1\":{\"1406\":1}}],[\"等于默认值\",{\"1\":{\"1221\":1}}],[\"等于\",{\"1\":{\"1041\":1,\"1202\":1}}],[\"等于目标和的根节点到叶节点路径如上图所示\",{\"1\":{\"470\":1}}],[\"等类型作为\",{\"1\":{\"936\":1}}],[\"等内置对象的属性以及使用\",{\"1\":{\"1101\":1}}],[\"等内置对象\",{\"1\":{\"935\":1}}],[\"等不适合使用\",{\"1\":{\"934\":1}}],[\"等价于\",{\"1\":{\"624\":2,\"669\":1,\"1139\":1,\"1203\":2,\"1253\":2,\"1524\":1,\"1699\":1}}],[\"等价字符引用\",{\"1\":{\"121\":1}}],[\"等等\",{\"1\":{\"580\":1}}],[\"等数据类型的值有对应的包装对象\",{\"1\":{\"563\":1}}],[\"等这些内容完成载入\",{\"1\":{\"464\":1}}],[\"等待垃圾回收\",{\"1\":{\"1709\":2}}],[\"等待新的\",{\"1\":{\"1534\":1}}],[\"等待执行\",{\"1\":{\"457\":1,\"1698\":1}}],[\"等待服务端确认\",{\"1\":{\"301\":1}}],[\"等字符做过滤\",{\"1\":{\"417\":1}}],[\"等方法获取到的属性为可枚举属性\",{\"1\":{\"531\":1}}],[\"等方法\",{\"1\":{\"402\":1}}],[\"等握手成功后再提交给应用程序\",{\"1\":{\"303\":1}}],[\"等着客户端发送实际的请求数据\",{\"1\":{\"303\":1}}],[\"等安全问题没有得到解决\",{\"1\":{\"143\":1}}],[\"等\",{\"1\":{\"115\":1,\"417\":1,\"458\":1,\"710\":1,\"1668\":1}}],[\"等同于\",{\"1\":{\"385\":2,\"1135\":1,\"1367\":1,\"1635\":1,\"1644\":1,\"1652\":2}}],[\"等同\",{\"1\":{\"92\":1}}],[\"等宽字体\",{\"1\":{\"71\":1}}],[\"韩文\",{\"1\":{\"91\":1}}],[\"know\",{\"1\":{\"1673\":1}}],[\"kankuuii\",{\"1\":{\"1496\":1}}],[\"kat\",{\"1\":{\"640\":9,\"659\":2,\"662\":6}}],[\"kashida\",{\"1\":{\"85\":1}}],[\"k++\",{\"1\":{\"488\":1}}],[\"k\",{\"1\":{\"476\":4,\"482\":23,\"488\":5,\"521\":4,\"1496\":1}}],[\"kobeindex\",{\"1\":{\"355\":2}}],[\"kobe\",{\"1\":{\"355\":2}}],[\"ket\",{\"1\":{\"1234\":1}}],[\"keyboard\",{\"1\":{\"1533\":1}}],[\"key\",{\"1\":{\"388\":3,\"402\":5,\"403\":9,\"695\":2,\"701\":4,\"716\":2,\"737\":2,\"928\":4,\"996\":1,\"1068\":3,\"1106\":1,\"1107\":1,\"1234\":2,\"1261\":1,\"1264\":1,\"1375\":4,\"1441\":5}}],[\"keys\",{\"0\":{\"345\":1,\"790\":1},\"1\":{\"345\":3,\"388\":2,\"531\":1,\"565\":2,\"695\":1,\"731\":1,\"737\":2,\"790\":1,\"791\":2,\"794\":1,\"795\":1,\"796\":1,\"803\":1,\"1186\":1}}],[\"keyword\",{\"1\":{\"248\":1}}],[\"keep\",{\"1\":{\"91\":1,\"156\":1}}],[\"kill\",{\"1\":{\"222\":2}}],[\"k为kb\",{\"1\":{\"215\":1}}],[\"khtml\",{\"1\":{\"143\":2}}],[\"kde\",{\"1\":{\"143\":1}}],[\"允许不存在的变量先使用\",{\"1\":{\"1691\":1}}],[\"允许指定回调函数\",{\"1\":{\"1617\":1}}],[\"允许模块路径动态生成\",{\"1\":{\"1597\":1}}],[\"允许\",{\"1\":{\"1551\":1}}],[\"允许传递多个回调函数\",{\"0\":{\"1458\":1}}],[\"允许为函数的参数设置默认值\",{\"1\":{\"1399\":1}}],[\"允许读取位于连接对象链深处的属性的值\",{\"1\":{\"1164\":1}}],[\"允许在块级作用域内声明函数\",{\"1\":{\"1074\":1}}],[\"允许在字间发生换行\",{\"1\":{\"91\":1}}],[\"允许重复声明同名函数且存在函数变量提升\",{\"1\":{\"1074\":1}}],[\"允许定义并执行的函数\",{\"1\":{\"805\":1}}],[\"允许访问\",{\"1\":{\"317\":1}}],[\"允许通信双方的应用进程在任何时候都能发送数据\",{\"1\":{\"298\":1}}],[\"允许内容顶开或溢出指定的容器边界\",{\"1\":{\"90\":1}}],[\"允许浏览器用户代理确定使用的两端对齐法则\",{\"1\":{\"85\":1}}],[\"块作用域\",{\"0\":{\"1689\":1}}],[\"块作用域内定义的变量将在离开块作用域后立即被回收\",{\"1\":{\"1073\":1}}],[\"块的内部数据相对而言是私有的\",{\"1\":{\"1606\":1}}],[\"块内形成块级作用域\",{\"1\":{\"1073\":1}}],[\"块语句\",{\"0\":{\"1073\":1},\"1\":{\"1073\":1}}],[\"块返回的值同样适用\",{\"1\":{\"1054\":1}}],[\"块里的\",{\"1\":{\"1054\":1}}],[\"块里抛出的异常\",{\"1\":{\"1053\":1}}],[\"块之后执行但是在下一个\",{\"1\":{\"1053\":1}}],[\"块和\",{\"1\":{\"1053\":1}}],[\"块和内联布局\",{\"1\":{\"329\":1}}],[\"块执行完成后\",{\"1\":{\"1052\":1}}],[\"块执行时存在\",{\"1\":{\"1052\":1}}],[\"块时\",{\"1\":{\"1052\":1}}],[\"块指定一个标识符\",{\"1\":{\"1052\":1}}],[\"块中的抛出一个异常时\",{\"1\":{\"1055\":1}}],[\"块中嵌套\",{\"1\":{\"1054\":1}}],[\"块中返回一个值\",{\"1\":{\"1053\":1}}],[\"块中调用的和你熟\",{\"1\":{\"1052\":1}}],[\"块中调用的函数\",{\"1\":{\"1052\":1}}],[\"块中任何一个语句\",{\"1\":{\"1052\":1}}],[\"块中没有异常抛出\",{\"1\":{\"1052\":1}}],[\"块中有任何一个语句\",{\"1\":{\"1052\":1}}],[\"块中抛出异常时要执行的语句\",{\"1\":{\"1052\":1}}],[\"块中\",{\"1\":{\"1051\":1}}],[\"块中引用对象的属性\",{\"1\":{\"1048\":1}}],[\"块中以引用它\",{\"1\":{\"130\":1}}],[\"块\",{\"1\":{\"1045\":2,\"1051\":1}}],[\"块级\",{\"1\":{\"1692\":1}}],[\"块级作用域中的函数特征\",{\"1\":{\"1074\":1}}],[\"块级作用域\",{\"0\":{\"1074\":1},\"1\":{\"1689\":1}}],[\"块级格式化上下文\",{\"1\":{\"325\":1}}],[\"块级格式化上下文容器\",{\"1\":{\"325\":1}}],[\"块级注释\",{\"1\":{\"242\":2}}],[\"块级元素的流体特性主要体现在水平方向上\",{\"1\":{\"48\":1}}],[\"块级元素\",{\"1\":{\"45\":1}}],[\"块容器必须显式定义\",{\"1\":{\"87\":1}}],[\"及之前是没有块级变量这个说法的\",{\"1\":{\"1691\":1}}],[\"及其之后是如何被当作引用属性添加到\",{\"1\":{\"1579\":1}}],[\"及后续版本\",{\"1\":{\"234\":2}}],[\"及\",{\"1\":{\"130\":1,\"923\":1,\"934\":1}}],[\"及自定义字符\",{\"1\":{\"87\":1}}],[\"及最后一行\",{\"1\":{\"81\":1}}],[\"波浪线\",{\"1\":{\"83\":1}}],[\"实的数组\",{\"1\":{\"1394\":1}}],[\"实参表达式\",{\"0\":{\"1523\":1}}],[\"实参\",{\"1\":{\"1334\":1}}],[\"实际的结果就是在这个代码片段的周围创建了一个作用域气泡\",{\"1\":{\"1681\":1}}],[\"实际原因是箭头函数根本没有自己的\",{\"1\":{\"1589\":1}}],[\"实际原因时箭头函数根本没有自己的\",{\"1\":{\"1375\":1}}],[\"实际要执行的函数\",{\"1\":{\"1433\":1}}],[\"实际应用的是默认绑定规则\",{\"1\":{\"1586\":1}}],[\"实际应用\",{\"0\":{\"1412\":1}}],[\"实际执行的是\",{\"1\":{\"1407\":1}}],[\"实际保存的是指向堆内存中对象的一个指针\",{\"1\":{\"1204\":1}}],[\"实际指向的是子类实例\",{\"1\":{\"622\":1}}],[\"实际上动态作用域是\",{\"1\":{\"1677\":1}}],[\"实际上并不存在所谓的构造函数\",{\"1\":{\"1581\":1}}],[\"实际上并没有一个物理的连接通路\",{\"1\":{\"304\":1}}],[\"实际上你无法控制回调函数的执行方式\",{\"1\":{\"1579\":1}}],[\"实际上我不止在忍者秘籍中见过\",{\"1\":{\"1543\":1}}],[\"实际上我们首先是从变量对象中获取了该对象的\",{\"1\":{\"1264\":1}}],[\"实际上这个参数是没法省略的\",{\"1\":{\"1405\":1}}],[\"实际上这一算法认为两个字符串已经是经过规范化的形式\",{\"1\":{\"1203\":1}}],[\"实际上有两个\",{\"1\":{\"1386\":1}}],[\"实际上有很多方法来处理在你的页面上加载\",{\"1\":{\"131\":1}}],[\"实际上就会模拟\",{\"1\":{\"1255\":1}}],[\"实际上就是把这些代码隐藏起来\",{\"1\":{\"1681\":1}}],[\"实际上就是将\",{\"1\":{\"640\":1}}],[\"实际上就是其在流式布局中的角色\",{\"1\":{\"329\":1}}],[\"实际上说明\",{\"1\":{\"1218\":1}}],[\"实际上\",{\"1\":{\"1194\":1,\"1334\":1,\"1380\":1,\"1382\":1,\"1504\":1,\"1581\":1,\"1589\":1,\"1641\":1}}],[\"实际上是在操作对象的引用而不是实际的对象\",{\"1\":{\"917\":1,\"1264\":1}}],[\"实际上可以把它看作\",{\"1\":{\"596\":1}}],[\"实例属性\",{\"1\":{\"636\":1}}],[\"实例属性都是在构造函数中定义的\",{\"1\":{\"569\":1}}],[\"实例\",{\"1\":{\"624\":1,\"1115\":1,\"1419\":1,\"1635\":1}}],[\"实例化一个对象\",{\"1\":{\"1588\":1}}],[\"实例化对象\",{\"1\":{\"1243\":2}}],[\"实例化对象的原型对象\",{\"1\":{\"935\":1}}],[\"实例化后返回一个空对象\",{\"1\":{\"624\":1}}],[\"实例化类后\",{\"1\":{\"603\":1}}],[\"实例对象\",{\"0\":{\"603\":1},\"1\":{\"637\":1}}],[\"实例的属性除非显式定义在其本身\",{\"1\":{\"603\":1}}],[\"实例的确没有必要\",{\"1\":{\"592\":1}}],[\"实例的本质\",{\"1\":{\"592\":1}}],[\"实例与原型之间的关系是松散的\",{\"1\":{\"579\":1}}],[\"实例就可以继承绑定函数的原型中的值\",{\"1\":{\"394\":1}}],[\"实践示例\",{\"0\":{\"1208\":1}}],[\"实践\",{\"0\":{\"311\":1}}],[\"实时视频会议等\",{\"1\":{\"310\":1}}],[\"实现模块化能实现的优势\",{\"1\":{\"1609\":1}}],[\"实现动态加载\",{\"1\":{\"1593\":1}}],[\"实现了显式绑定\",{\"1\":{\"1580\":1}}],[\"实现类非常简单\",{\"1\":{\"1482\":1}}],[\"实现的\",{\"1\":{\"1473\":1}}],[\"实现的解释器上运行的话\",{\"1\":{\"250\":1}}],[\"实现函数的防抖\",{\"1\":{\"1446\":1}}],[\"实现函数的节流\",{\"1\":{\"1433\":1}}],[\"实现思路\",{\"1\":{\"1446\":1}}],[\"实现一个柯里化求和函数\",{\"1\":{\"1418\":1}}],[\"实现偏函数\",{\"0\":{\"1413\":1}}],[\"实现原理\",{\"0\":{\"1350\":1,\"1445\":1},\"1\":{\"1441\":1}}],[\"实现多次重复尝试\",{\"1\":{\"1349\":1}}],[\"实现分离的\",{\"1\":{\"1286\":1}}],[\"实现内存的管理\",{\"1\":{\"1279\":1}}],[\"实现指数运算符\",{\"0\":{\"1209\":1}}],[\"实现\",{\"0\":{\"1185\":1,\"1425\":1,\"1426\":1,\"1427\":1},\"1\":{\"946\":1}}],[\"实现子类与父类的隔离\",{\"1\":{\"664\":1}}],[\"实现步骤分解\",{\"1\":{\"662\":1}}],[\"实现之中\",{\"1\":{\"624\":1}}],[\"实现对象原型\",{\"1\":{\"597\":2}}],[\"实现工厂模式\",{\"0\":{\"586\":1,\"587\":1}}],[\"实现过程\",{\"1\":{\"547\":1}}],[\"实现深层次的监听\",{\"1\":{\"402\":1}}],[\"实现方式\",{\"1\":{\"394\":1}}],[\"实现方法\",{\"0\":{\"1497\":1},\"1\":{\"393\":1}}],[\"实现最主要是要运用到判断两点位于直线同侧的算法\",{\"1\":{\"277\":1}}],[\"实现判断方向会有一个比较大的缺点\",{\"1\":{\"277\":1}}],[\"实现判断进入方向\",{\"1\":{\"274\":1}}],[\"实现判断鼠标进入方向\",{\"0\":{\"269\":1}}],[\"实现纯\",{\"1\":{\"270\":1}}],[\"实线\",{\"1\":{\"83\":1}}],[\"实质上就是调用原型上的方法\",{\"1\":{\"599\":1}}],[\"实质上\",{\"1\":{\"16\":1}}],[\"百分比\",{\"1\":{\"102\":1}}],[\"百分比相对\",{\"1\":{\"82\":1}}],[\"百分比总是相对于另一个值才存在的\",{\"1\":{\"31\":1}}],[\"把控制权返回给之前的执行环境\",{\"1\":{\"1707\":1}}],[\"把复杂的系统分解到多个模块以方便编码\",{\"1\":{\"1606\":1}}],[\"把数组展开成参数\",{\"1\":{\"1586\":1}}],[\"把负责输出数字\",{\"1\":{\"1505\":1}}],[\"把这些功能抽离出来之后\",{\"1\":{\"1505\":1}}],[\"把这部分业务逻辑放在函数参数中\",{\"1\":{\"1501\":1}}],[\"把一些跟核心业务逻辑模块无关的功能抽离出来\",{\"1\":{\"1505\":1}}],[\"把可变的部分封装在函数参数里\",{\"1\":{\"1503\":1}}],[\"把嗅探浏览器的操作提前到代码加载的时候\",{\"1\":{\"1470\":1}}],[\"把函数当作参数传递\",{\"1\":{\"1501\":1}}],[\"把函数外部的值复制到函数内部的参数\",{\"1\":{\"1387\":1}}],[\"把函数定义转移到构造函数外部来解决重复创建函数实例的问题\",{\"1\":{\"592\":1}}],[\"把新值保存在这个位置\",{\"1\":{\"528\":1}}],[\"把文本插入到输入流中\",{\"1\":{\"464\":1}}],[\"把\",{\"1\":{\"394\":1,\"919\":1,\"1151\":2,\"1502\":1,\"1709\":1}}],[\"把每一个promise的结果\",{\"1\":{\"380\":1}}],[\"把map转为对象\",{\"1\":{\"377\":1}}],[\"把键值对数组转为对象\",{\"1\":{\"377\":1}}],[\"把当前盒提升\",{\"1\":{\"82\":2}}],[\"把当前盒的垂直中心和父级盒的基线加上父级的半\",{\"1\":{\"82\":1}}],[\"把当前盒的\",{\"1\":{\"82\":4}}],[\"把当前盒的基线提升到合适的位置作为父级盒的上标\",{\"1\":{\"82\":1}}],[\"把当前盒的基线降低到合适的位置作为父级盒的下标\",{\"1\":{\"82\":1}}],[\"把当前盒的基线与父级盒的基线对齐\",{\"1\":{\"82\":1}}],[\"把该元素往\",{\"1\":{\"37\":1}}],[\"就连一直以为安全的\",{\"1\":{\"1694\":1}}],[\"就连所有原生的引用类型\",{\"1\":{\"580\":1}}],[\"就没法做\",{\"1\":{\"1655\":1}}],[\"就没有必要再进行其他分支的检测了\",{\"1\":{\"1466\":1}}],[\"就只能是下游先行了\",{\"1\":{\"1621\":1}}],[\"就如上图的这个\",{\"1\":{\"1621\":1}}],[\"就加载模块\",{\"1\":{\"1596\":1}}],[\"就必须使用\",{\"1\":{\"1490\":1}}],[\"就必须将上面的\",{\"1\":{\"1260\":1}}],[\"就用\",{\"1\":{\"1466\":1}}],[\"就开始请求判断了\",{\"1\":{\"1449\":1}}],[\"就直接返回\",{\"1\":{\"1441\":1}}],[\"就直接返回对应的值\",{\"1\":{\"1346\":1}}],[\"就指向第一个参数\",{\"1\":{\"1407\":1}}],[\"就出现了双重默认值\",{\"1\":{\"1403\":1}}],[\"就要检测参数是否为undefined\",{\"1\":{\"1398\":1}}],[\"就和把值从一个变量复制到另一个变量一样\",{\"1\":{\"1387\":1}}],[\"就能去释放这个变量上一次指向的值\",{\"1\":{\"1279\":1}}],[\"就先将其转为对象\",{\"1\":{\"1220\":1}}],[\"就变成了\",{\"1\":{\"1160\":1}}],[\"就错误的返回了\",{\"1\":{\"1132\":1}}],[\"就执行\",{\"1\":{\"1041\":1}}],[\"就无法运算\",{\"1\":{\"948\":1}}],[\"就无法再对象进行扩展\",{\"1\":{\"812\":1}}],[\"就不是指向同一个对象\",{\"1\":{\"1616\":1}}],[\"就不会执行\",{\"1\":{\"1449\":1}}],[\"就不会生成\",{\"1\":{\"1403\":1}}],[\"就不会抛出异常影响语句流畅性\",{\"1\":{\"926\":1}}],[\"就不要在模式中放置圆括号\",{\"1\":{\"1222\":1}}],[\"就不得使用圆括号\",{\"1\":{\"1222\":1}}],[\"就不严格等于\",{\"1\":{\"1218\":1}}],[\"就不容易被攻击\",{\"1\":{\"893\":1}}],[\"就不保留数据备份\",{\"1\":{\"309\":1}}],[\"就结束查找\",{\"1\":{\"646\":1}}],[\"就表示该方法不会被实例继承\",{\"1\":{\"629\":1}}],[\"就表示该方法是一个生成器方法\",{\"1\":{\"606\":1}}],[\"就相当于\",{\"1\":{\"622\":1}}],[\"就可能会用到这些变量\",{\"1\":{\"1282\":1}}],[\"就可能会导致命名冲突\",{\"1\":{\"580\":1}}],[\"就可以直接使用\",{\"1\":{\"1675\":1}}],[\"就可以了\",{\"1\":{\"1661\":1}}],[\"就可以看出前端在领域的成长\",{\"1\":{\"1621\":1}}],[\"就可以省略第二个参数\",{\"1\":{\"1403\":1}}],[\"就可以为它的三个属性设置默认值\",{\"1\":{\"1403\":1}}],[\"就可以避免这种情况\",{\"1\":{\"1403\":1}}],[\"就可以让两个不同的子类实例对象既分别拥有自己属性\",{\"1\":{\"662\":1}}],[\"就可以确定属性是原型中的属性\",{\"1\":{\"577\":1}}],[\"就可以确定该属性到底是存在于对象中\",{\"1\":{\"577\":1}}],[\"就可以向服务器发起请求了\",{\"1\":{\"152\":1}}],[\"就在变量对象中以变量名建立一个属性\",{\"1\":{\"1564\":1}}],[\"就在\",{\"1\":{\"1532\":1}}],[\"就在于调用它们的方式不同\",{\"1\":{\"591\":1}}],[\"就在原生对象的原型中添加这个方法\",{\"1\":{\"580\":1}}],[\"就在当前语句行结束处填补分号\",{\"1\":{\"252\":1,\"253\":1}}],[\"就返回\",{\"1\":{\"560\":1}}],[\"就返回最新资源\",{\"1\":{\"430\":1}}],[\"就调用视图更新的方法\",{\"1\":{\"402\":1}}],[\"就重写数组的原型方法\",{\"1\":{\"402\":1}}],[\"就知道可以断开连接了\",{\"1\":{\"304\":1}}],[\"就知道可以关闭连接了\",{\"1\":{\"304\":1}}],[\"就代表是文件\",{\"1\":{\"208\":1}}],[\"就像由众多\",{\"1\":{\"1621\":1}}],[\"就像我们刚才看到的那样\",{\"1\":{\"1580\":1}}],[\"就像\",{\"1\":{\"143\":1}}],[\"就导致了经常被人诟病的浏览器样式兼容性问题\",{\"1\":{\"1550\":1}}],[\"就导致了\",{\"1\":{\"143\":1}}],[\"就会执行里面的\",{\"1\":{\"1708\":1}}],[\"就会很容易引发冲突\",{\"1\":{\"1683\":1}}],[\"就会加载指定的模块\",{\"1\":{\"1593\":1}}],[\"就会将\",{\"1\":{\"1571\":1}}],[\"就会将函数的执行上下文从栈中弹出\",{\"1\":{\"1557\":1}}],[\"就会保存所有父级作用域内的变量对象到其中\",{\"1\":{\"1570\":1}}],[\"就会从父级\",{\"1\":{\"1569\":1}}],[\"就会从任务队列中取出对应异步任务的回调函数放入执行栈中继续执行\",{\"1\":{\"457\":1}}],[\"就会有个新的执行上下文为其创建\",{\"1\":{\"1557\":1}}],[\"就会创建一个执行上下文\",{\"1\":{\"1557\":1}}],[\"就会自动出栈\",{\"1\":{\"1556\":1}}],[\"就会进入一个执行上下文\",{\"1\":{\"1556\":1}}],[\"就会进行类型转换\",{\"1\":{\"955\":1}}],[\"就会开始执行代码\",{\"1\":{\"1555\":1}}],[\"就会使用\",{\"1\":{\"1349\":1}}],[\"就会先返回\",{\"1\":{\"1340\":1}}],[\"就会导致后面的进程申请不到内存\",{\"1\":{\"1284\":1}}],[\"就会触发函数参数的默认值\",{\"1\":{\"1221\":1}}],[\"就会调用一次\",{\"1\":{\"955\":1}}],[\"就会报错\",{\"1\":{\"951\":1,\"1407\":2,\"1655\":1}}],[\"就会发生数据类型的隐式转换\",{\"1\":{\"949\":1}}],[\"就会继续在该原型对象的原型对象中找\",{\"1\":{\"646\":1}}],[\"就会同时创建它的原型对象\",{\"1\":{\"578\":1}}],[\"就会根据一组特定的规则为该函数创建一个\",{\"1\":{\"576\":1}}],[\"就会判断是否有\",{\"1\":{\"458\":1}}],[\"就会等待回调被天加到队列中\",{\"1\":{\"458\":1}}],[\"就会等比缩小\",{\"1\":{\"104\":1}}],[\"就会变为\",{\"1\":{\"289\":1}}],[\"就会返回一个\",{\"1\":{\"153\":1}}],[\"就会放大\",{\"1\":{\"104\":1}}],[\"就将底部外边距的边界和父级的基线对齐\",{\"1\":{\"82\":1}}],[\"就行了\",{\"1\":{\"81\":1,\"1159\":1}}],[\"就是常驻内存会增大内存使用量\",{\"1\":{\"1711\":1}}],[\"就是用来声明常量的\",{\"1\":{\"1693\":1}}],[\"就是众多模块管理器中挑选一个来使用\",{\"1\":{\"1684\":1}}],[\"就是输出一个叫做\",{\"1\":{\"1652\":1}}],[\"就是采用了这个规范\",{\"1\":{\"1616\":1}}],[\"就是为了到达当前执行位置所调用的所有函数\",{\"1\":{\"1576\":1}}],[\"就是所有父级作用域的变量对象的层级链\",{\"1\":{\"1570\":1}}],[\"就是一个私有属性\",{\"1\":{\"1483\":1}}],[\"就是一个普通函数\",{\"1\":{\"624\":1}}],[\"就是说函数执行的分支只会执行一次\",{\"1\":{\"1468\":1}}],[\"就是说对象\",{\"1\":{\"1281\":1}}],[\"就是每次都要执行\",{\"1\":{\"1426\":1}}],[\"就是函数\",{\"1\":{\"1375\":1}}],[\"就是外层代码块的\",{\"1\":{\"1375\":1,\"1589\":1}}],[\"就是这样的\",{\"1\":{\"1132\":1}}],[\"就是这种宽度的表现\",{\"1\":{\"48\":1}}],[\"就是使用寄生式继承来继承超类型的原型\",{\"1\":{\"659\":1}}],[\"就是将\",{\"1\":{\"622\":1,\"1350\":1}}],[\"就是因为这个作用域链\",{\"1\":{\"1709\":1}}],[\"就是因为在\",{\"1\":{\"955\":1}}],[\"就是因为\",{\"1\":{\"584\":1}}],[\"就是通过调用构造函数而创建的那个对象实例的原型对象\",{\"1\":{\"575\":1}}],[\"就是我们熟知的原型\",{\"1\":{\"565\":1}}],[\"就是在页面第一次加载的时候\",{\"1\":{\"439\":1}}],[\"就是在客户端电脑上设置的首选\",{\"1\":{\"150\":1}}],[\"就是flat\",{\"1\":{\"375\":1}}],[\"就是指父类可以是一个表达式\",{\"1\":{\"1493\":1}}],[\"就是指断开一个\",{\"1\":{\"304\":1}}],[\"就是指变量\",{\"1\":{\"246\":1}}],[\"就是浏览器鼠标移动事件含有一定延迟\",{\"1\":{\"277\":1}}],[\"就是可以在程序中直接使用的数据\",{\"1\":{\"245\":1}}],[\"就是\",{\"1\":{\"6\":1,\"624\":1,\"848\":1,\"873\":1,\"1218\":1,\"1374\":1,\"1518\":1,\"1710\":1}}],[\"此类写法常用于\",{\"1\":{\"1586\":1}}],[\"此例的\",{\"1\":{\"1483\":1}}],[\"此函数可以接受剩余的参数\",{\"1\":{\"1412\":1}}],[\"此循环仅以原始插入顺序记录\",{\"1\":{\"1004\":1}}],[\"此环境中没有\",{\"1\":{\"849\":1}}],[\"此属性的值是对函数本身的引用\",{\"1\":{\"805\":1}}],[\"此后\",{\"1\":{\"570\":1}}],[\"此处调用\",{\"1\":{\"1670\":1}}],[\"此处所说的\",{\"1\":{\"943\":1}}],[\"此处不保存的话到了定时器回调函数中\",{\"1\":{\"289\":1}}],[\"此处将背景图片的大小\",{\"1\":{\"102\":1}}],[\"此时执行环境栈中存在三个执行环境\",{\"1\":{\"1709\":1}}],[\"此时执行环境栈中存在两个执行环境\",{\"1\":{\"1709\":1}}],[\"此时执行流进入\",{\"1\":{\"1709\":2}}],[\"此时的\",{\"1\":{\"1700\":1}}],[\"此时没有任务在排队\",{\"1\":{\"1542\":1}}],[\"此时会先执行\",{\"1\":{\"1539\":1}}],[\"此时等于\",{\"1\":{\"1218\":1}}],[\"此时要求\",{\"1\":{\"969\":1}}],[\"此时m到n的距离为n\",{\"1\":{\"494\":1}}],[\"此时文档完全解析完成\",{\"1\":{\"464\":1}}],[\"此时\",{\"1\":{\"321\":1,\"464\":1,\"578\":1,\"1702\":1}}],[\"此时可以对文件内容进行编辑\",{\"1\":{\"205\":1}}],[\"此时再实现两端对齐\",{\"1\":{\"81\":1}}],[\"此外\",{\"1\":{\"144\":1,\"251\":1,\"590\":1,\"706\":1,\"893\":1,\"1589\":1}}],[\"此声明将覆盖任何其他声明\",{\"1\":{\"19\":1}}],[\"来防止内存泄漏\",{\"1\":{\"1691\":1}}],[\"来讲也是一样的\",{\"1\":{\"1675\":1}}],[\"来展开数组\",{\"1\":{\"1586\":1}}],[\"来控制\",{\"1\":{\"1584\":1}}],[\"来直接进行测试\",{\"1\":{\"1584\":1}}],[\"来调用函数\",{\"1\":{\"1581\":1}}],[\"来调用\",{\"1\":{\"1581\":1}}],[\"来调用类的构造函数\",{\"1\":{\"1483\":1}}],[\"来修复这个问题\",{\"1\":{\"1579\":1}}],[\"来保存\",{\"1\":{\"1518\":1}}],[\"来批量注册这些\",{\"1\":{\"1504\":1}}],[\"来指向即将要生成的实例对象\",{\"1\":{\"1474\":1}}],[\"来指出资源最后一次修改时间\",{\"1\":{\"430\":1}}],[\"来简化这种写法\",{\"1\":{\"1417\":1}}],[\"来模仿方法的重载\",{\"1\":{\"1390\":1}}],[\"来表示变量对象\",{\"1\":{\"1562\":1}}],[\"来表示\",{\"1\":{\"1338\":1}}],[\"来表示链表尾连接到链表中的位置\",{\"1\":{\"491\":1}}],[\"来释放掉\",{\"1\":{\"1284\":1}}],[\"来申请内存空间\",{\"1\":{\"1284\":1}}],[\"来为某些变量设置默认值\",{\"1\":{\"1256\":1}}],[\"来执行函数\",{\"1\":{\"1178\":1}}],[\"来完成\",{\"1\":{\"1156\":1}}],[\"来完成值交换\",{\"1\":{\"1154\":1}}],[\"来完成智能工厂\",{\"1\":{\"584\":1}}],[\"来替换\",{\"1\":{\"1137\":1}}],[\"来代替\",{\"1\":{\"1135\":1}}],[\"来阻止代码自动地向下一个\",{\"1\":{\"1040\":1}}],[\"来分组这些语句\",{\"1\":{\"1019\":1}}],[\"来检查\",{\"1\":{\"1004\":1}}],[\"来检查一个全局变量是否被声明\",{\"1\":{\"560\":1}}],[\"来标识循环的结尾并进入循环条件判断\",{\"1\":{\"976\":1}}],[\"来标识循环的开始\",{\"1\":{\"976\":1}}],[\"来获取每个对象的类型\",{\"1\":{\"936\":1}}],[\"来获取全局对象\",{\"1\":{\"848\":1}}],[\"来获取元素的\",{\"1\":{\"277\":1}}],[\"来创建一个伪属性类型\",{\"1\":{\"1318\":1}}],[\"来创建一个新的对象\",{\"1\":{\"803\":1}}],[\"来创建一个没有原型的新对象\",{\"1\":{\"548\":1}}],[\"来解决\",{\"1\":{\"592\":1}}],[\"来访问对象的属性时\",{\"1\":{\"558\":1}}],[\"来进行设置\",{\"1\":{\"430\":1}}],[\"来自不同组件的行为需要变更同一状态\",{\"1\":{\"412\":1}}],[\"来自服务端\",{\"1\":{\"303\":1}}],[\"来劫持各个属性的setter\",{\"1\":{\"401\":1}}],[\"来判断它是否已经声明过\",{\"1\":{\"1670\":1}}],[\"来判断即可\",{\"1\":{\"1158\":1}}],[\"来判断返回函数的原型是否在实例的原型链上\",{\"1\":{\"394\":1}}],[\"来判断哪一些属性值与一个元素最为相关\",{\"1\":{\"16\":1}}],[\"来排布它的内容\",{\"1\":{\"329\":1}}],[\"来终止这个方向的连接\",{\"1\":{\"304\":1}}],[\"来终止这一方向的连接\",{\"1\":{\"304\":1}}],[\"来触发\",{\"1\":{\"301\":1,\"304\":1}}],[\"来说\",{\"1\":{\"235\":1,\"1675\":1}}],[\"来决定调用什么类型的动态文件解释器来处理这个请求\",{\"1\":{\"153\":1}}],[\"来避免商标问题\",{\"1\":{\"144\":1}}],[\"来增加安全性\",{\"1\":{\"130\":1}}],[\"来实现\",{\"1\":{\"1318\":1,\"1505\":1}}],[\"来实现单行文本两端对齐\",{\"1\":{\"81\":2}}],[\"来实现两端对齐\",{\"1\":{\"81\":1}}],[\"首页\",{\"1\":{\"1621\":1}}],[\"首部标志比特有\",{\"1\":{\"299\":1}}],[\"首次点击按钮触发\",{\"1\":{\"1435\":1}}],[\"首次及后续都需要间隔一段时间触发才生效\",{\"1\":{\"293\":1}}],[\"首次触发立即生效\",{\"1\":{\"292\":1}}],[\"首次触发\",{\"1\":{\"288\":1}}],[\"首次触发或间隔\",{\"1\":{\"288\":1}}],[\"首先需要注意的是\",{\"1\":{\"1579\":1}}],[\"首先要介绍的是最常用的函数调用类型\",{\"1\":{\"1578\":1}}],[\"首先要理解执行环境\",{\"1\":{\"1707\":1}}],[\"首先要理解\",{\"1\":{\"1576\":1}}],[\"首先在\",{\"1\":{\"1537\":1,\"1677\":2}}],[\"首先介绍函数重写技术\",{\"1\":{\"1467\":1}}],[\"首先检查是否支持\",{\"1\":{\"1466\":1}}],[\"首先声明了变量\",{\"1\":{\"1407\":1}}],[\"首先从栈中获得该对象的\",{\"1\":{\"1204\":1}}],[\"首先设置表达式\",{\"1\":{\"1040\":1}}],[\"首先执行\",{\"1\":{\"1633\":1}}],[\"首先执行更新语句\",{\"1\":{\"969\":1}}],[\"首先执行微任务队列中的任务\",{\"1\":{\"457\":1}}],[\"首先进行关闭的一方将执行主动关闭\",{\"1\":{\"304\":2}}],[\"首先查看\",{\"1\":{\"155\":1}}],[\"首先\",{\"1\":{\"81\":1,\"571\":1,\"951\":1,\"1684\":1}}],[\"首选最小宽度\",{\"0\":{\"54\":1},\"1\":{\"54\":1}}],[\"单元\",{\"1\":{\"1621\":2}}],[\"单例模式模式\",{\"1\":{\"1612\":1}}],[\"单例模式\",{\"0\":{\"1612\":1}}],[\"单线程的本质\",{\"1\":{\"1551\":1}}],[\"单线程\",{\"0\":{\"1551\":1},\"1\":{\"1538\":1,\"1547\":2}}],[\"单个表达式\",{\"0\":{\"1369\":1}}],[\"单个参数\",{\"0\":{\"1364\":1}}],[\"单个项目占据的主轴空间叫做main\",{\"1\":{\"332\":1}}],[\"单层条件判断\",{\"0\":{\"1018\":1}}],[\"单独使用和在\",{\"1\":{\"577\":1}}],[\"单独进行关闭\",{\"1\":{\"304\":1}}],[\"单工数据传输只支持数据在一个方向上传输\",{\"1\":{\"312\":1}}],[\"单行注释以两个斜杠开头\",{\"1\":{\"241\":1}}],[\"单行注释\",{\"0\":{\"241\":1}}],[\"单行文本两端对齐\",{\"1\":{\"81\":1}}],[\"单引号\",{\"1\":{\"119\":1}}],[\"单词内部允许断行它要求一个没有断行破发点的词必须保持为一个整体单位\",{\"1\":{\"90\":1}}],[\"单位是毫秒\",{\"1\":{\"1433\":1,\"1446\":1}}],[\"单位为秒\",{\"1\":{\"429\":1}}],[\"单位时间内事件只能触发一次\",{\"1\":{\"291\":1}}],[\"单位时间内事件触发则等待时间会被重置\",{\"1\":{\"287\":1}}],[\"单位换算\",{\"1\":{\"27\":1}}],[\"单位的\",{\"1\":{\"24\":4}}],[\"单位可有可无\",{\"1\":{\"23\":1}}],[\"被销毁了\",{\"1\":{\"1709\":1}}],[\"被广泛认可的变量声明方式是\",{\"1\":{\"1695\":1}}],[\"被解析成了全局变量\",{\"1\":{\"1578\":1}}],[\"被激活\",{\"1\":{\"1562\":1,\"1566\":1}}],[\"被绑定到指定对象\",{\"1\":{\"1589\":1}}],[\"被绑定到\",{\"1\":{\"1579\":1}}],[\"被绑定到该对象\",{\"1\":{\"1515\":1}}],[\"被绑定到全局对象\",{\"1\":{\"1510\":1}}],[\"被重定义\",{\"1\":{\"1467\":1}}],[\"被传递的值会被复制给一个局部变量\",{\"1\":{\"1388\":1}}],[\"被更新了\",{\"1\":{\"1375\":1}}],[\"被环境中的变量引用的变量\",{\"1\":{\"1282\":1}}],[\"被赋值为\",{\"1\":{\"1242\":1}}],[\"被拷贝数组元素仅限基本数据类型\",{\"1\":{\"1182\":1}}],[\"被执行时\",{\"1\":{\"1034\":1}}],[\"被除数\",{\"1\":{\"1012\":1}}],[\"被迭代枚举其属性的对象\",{\"1\":{\"982\":1,\"991\":1}}],[\"被标记的语句可以是任何块语句\",{\"1\":{\"960\":1}}],[\"被静默转义的唯一情况是使用指数为\",{\"1\":{\"859\":1}}],[\"被定义或修改的\",{\"1\":{\"693\":1}}],[\"被删除或从来未被赋值的元素不会被遍历到\",{\"1\":{\"669\":1}}],[\"被调用时\",{\"1\":{\"1579\":1}}],[\"被调用时的作用域\",{\"1\":{\"893\":1}}],[\"被调用的数组\",{\"1\":{\"668\":1}}],[\"被调用函数中的this永远指向这个对象\",{\"1\":{\"392\":1}}],[\"被冻结的对象不可扩展\",{\"1\":{\"774\":1}}],[\"被冻结\",{\"1\":{\"540\":1,\"706\":1}}],[\"被设置为\",{\"1\":{\"531\":1}}],[\"被css隐藏的节点\",{\"1\":{\"464\":1}}],[\"被用在了一些\",{\"1\":{\"144\":1}}],[\"被禁用的元素通常有一个灰色的外观\",{\"1\":{\"118\":1}}],[\"被左\",{\"1\":{\"116\":1}}],[\"被打断的这一行\",{\"1\":{\"81\":1}}],[\"被使用的元素必须是定位元素\",{\"1\":{\"39\":1}}],[\"自然报错\",{\"1\":{\"1700\":1}}],[\"自执行函数\",{\"1\":{\"1686\":1}}],[\"自减\",{\"1\":{\"1194\":2,\"1207\":1}}],[\"自减运算符\",{\"1\":{\"1189\":2}}],[\"自定义模块路径必须以\",{\"1\":{\"1616\":1}}],[\"自定义的组件汇集成\",{\"1\":{\"1490\":1}}],[\"自定义对象\",{\"1\":{\"1109\":1}}],[\"自定义字体\",{\"0\":{\"79\":1},\"1\":{\"79\":1}}],[\"自增\",{\"1\":{\"955\":1,\"1207\":1}}],[\"自身属性描述符是指直接在对象上定义\",{\"1\":{\"1486\":1}}],[\"自身\",{\"1\":{\"786\":1}}],[\"自身的属性\",{\"1\":{\"603\":1}}],[\"自动垃圾收集机制\",{\"1\":{\"1279\":1}}],[\"自动释放它\",{\"1\":{\"1276\":1}}],[\"自动回收不再使用的内存\",{\"1\":{\"1271\":1}}],[\"自动绑定\",{\"1\":{\"607\":1}}],[\"自动调用该方法\",{\"1\":{\"602\":1}}],[\"自动分号补全\",{\"0\":{\"253\":1}}],[\"自有属性与继承属性\",{\"0\":{\"757\":1,\"820\":1}}],[\"自有属性\",{\"1\":{\"565\":1}}],[\"自上而下式堆化\",{\"1\":{\"482\":2}}],[\"自上而下式建小顶堆\",{\"1\":{\"482\":1}}],[\"自举协议\",{\"1\":{\"311\":1}}],[\"自己还要发送\",{\"1\":{\"301\":1}}],[\"自选\",{\"1\":{\"79\":1}}],[\"阿里巴巴的图标库\",{\"1\":{\"79\":1}}],[\"要使用级联函数\",{\"1\":{\"1497\":1}}],[\"要使得\",{\"1\":{\"87\":1}}],[\"要实现这个目标\",{\"1\":{\"1408\":1}}],[\"要设置默认值\",{\"1\":{\"1398\":1}}],[\"要设置其原型的对象\",{\"1\":{\"829\":1}}],[\"要记住调用函数中实参的正确顺序实在让人头疼\",{\"1\":{\"1382\":1}}],[\"要等待所有的结果返回\",{\"1\":{\"1357\":1}}],[\"要绑定到给定函数的属性值\",{\"1\":{\"1321\":1}}],[\"要绑定到给定函数的属性名\",{\"1\":{\"1317\":1}}],[\"要简单理解栈的存取方式\",{\"1\":{\"1260\":1}}],[\"要用怎样的数据结构能很方便地判断他能不能进行这个操作呢\",{\"1\":{\"1161\":1}}],[\"要删除的属性\",{\"1\":{\"1099\":1}}],[\"要删除继承属性必须从定义这个属性的原型对象上删除它\",{\"1\":{\"564\":1}}],[\"要执行多个语句\",{\"1\":{\"1019\":1}}],[\"要创建\",{\"1\":{\"929\":1}}],[\"要定义其可枚举属性或修改的属性描述符的对象\",{\"1\":{\"688\":1}}],[\"要取得原型属性的描述符\",{\"1\":{\"576\":1}}],[\"要明确的真正重要的一点就是\",{\"1\":{\"576\":1}}],[\"要么将其内容集成到其父元素的格式化上下文中\",{\"1\":{\"329\":1}}],[\"要判断移出方向\",{\"1\":{\"276\":1}}],[\"要求使用括号\",{\"1\":{\"930\":1}}],[\"要求释放连接\",{\"1\":{\"299\":1}}],[\"要求\",{\"1\":{\"234\":1,\"621\":1}}],[\"要打包的文件\",{\"1\":{\"212\":1}}],[\"要注意的是\",{\"1\":{\"157\":1}}],[\"要注意跨域问题\",{\"1\":{\"79\":1}}],[\"要给不同元素添加样式\",{\"1\":{\"4\":1}}],[\"网关\",{\"1\":{\"220\":1}}],[\"网卡名\",{\"1\":{\"220\":1}}],[\"网络请求\",{\"1\":{\"1532\":1,\"1621\":1}}],[\"网络进程负责处理浏览器中的网络请求和响应\",{\"1\":{\"425\":1}}],[\"网络线程\",{\"1\":{\"425\":1}}],[\"网络协议族中有两个具有代表性的传输层协议\",{\"1\":{\"297\":1}}],[\"网络类型\",{\"1\":{\"220\":1}}],[\"网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送\",{\"1\":{\"318\":1}}],[\"网络层\",{\"1\":{\"152\":1,\"317\":1,\"318\":1}}],[\"网络字体\",{\"1\":{\"79\":1}}],[\"网格布局或弹性布局\",{\"1\":{\"329\":1}}],[\"网格布局\",{\"1\":{\"44\":1}}],[\"个一元函数\",{\"1\":{\"1411\":1}}],[\"个参数的情况\",{\"1\":{\"1417\":1}}],[\"个参数\",{\"1\":{\"1406\":1}}],[\"个形参时\",{\"1\":{\"1382\":1}}],[\"个乒乓球取出来\",{\"1\":{\"1260\":1}}],[\"个语句都会报错\",{\"1\":{\"1224\":1}}],[\"个字符\",{\"1\":{\"1184\":1}}],[\"个字节的首部要短\",{\"1\":{\"310\":1}}],[\"个字节\",{\"1\":{\"310\":1}}],[\"个比特\",{\"1\":{\"1150\":1}}],[\"个位运算符\",{\"1\":{\"1143\":1}}],[\"个特性\",{\"1\":{\"528\":1}}],[\"个台阶\",{\"1\":{\"518\":1}}],[\"个元素有序的\",{\"1\":{\"503\":1}}],[\"个元素\",{\"1\":{\"485\":1}}],[\"个数\",{\"1\":{\"482\":1}}],[\"个不同的元素\",{\"1\":{\"482\":1}}],[\"个最大的元素\",{\"1\":{\"482\":2}}],[\"个包以确认连接的断开\",{\"1\":{\"304\":1}}],[\"个人理解\",{\"1\":{\"289\":1}}],[\"个三角形\",{\"1\":{\"274\":1}}],[\"个部分写入\",{\"1\":{\"270\":1}}],[\"个部分\",{\"1\":{\"270\":1}}],[\"个十六进制数\",{\"1\":{\"239\":1}}],[\"个\",{\"1\":{\"239\":1,\"299\":1,\"880\":1,\"1502\":1}}],[\"个属性\",{\"1\":{\"131\":1}}],[\"个基数\",{\"1\":{\"77\":8}}],[\"个子元素\",{\"1\":{\"15\":4}}],[\"比较运算符分为\",{\"1\":{\"1200\":1}}],[\"比较运算符比较它的操作数并返回一个基于表达式是否为\",{\"1\":{\"1200\":1}}],[\"比较运算符\",{\"0\":{\"1200\":1}}],[\"比较两个数是否符号相同\",{\"1\":{\"1158\":1}}],[\"比较两个值是否相同\",{\"1\":{\"803\":1}}],[\"比较的情况下\",{\"1\":{\"955\":1}}],[\"比较\",{\"1\":{\"953\":2}}],[\"比较值\",{\"1\":{\"761\":2}}],[\"比较修订号时\",{\"1\":{\"509\":1}}],[\"比较版本号时\",{\"1\":{\"509\":1}}],[\"比较版本号\",{\"0\":{\"509\":1}}],[\"比较大小\",{\"1\":{\"488\":1}}],[\"比vue2\",{\"1\":{\"403\":1}}],[\"比特\",{\"1\":{\"317\":1,\"1142\":1}}],[\"比\",{\"1\":{\"310\":1}}],[\"比使用定时器开销更低\",{\"1\":{\"288\":1}}],[\"比如块作用域\",{\"1\":{\"1689\":1}}],[\"比如浏览器中的\",{\"1\":{\"1676\":1}}],[\"比如引擎执行代码时\",{\"1\":{\"1670\":1}}],[\"比如单核\",{\"1\":{\"1547\":1}}],[\"比如常见的字符串方法\",{\"1\":{\"1496\":1}}],[\"比如说对象属性的循环引用\",{\"1\":{\"1282\":1}}],[\"比如数组\",{\"1\":{\"1264\":1}}],[\"比如为假值\",{\"1\":{\"1256\":1}}],[\"比如整数\",{\"1\":{\"1142\":1}}],[\"比如在递归中\",{\"1\":{\"1685\":1}}],[\"比如在回调中传入这个方法\",{\"1\":{\"1312\":1}}],[\"比如在\",{\"1\":{\"1066\":1,\"1692\":1}}],[\"比如在解析css的同时\",{\"1\":{\"157\":1}}],[\"比如一个页面的头部组件\",{\"1\":{\"1621\":1}}],[\"比如一个带有两个参数的函数被称为二元函数\",{\"1\":{\"1411\":1}}],[\"比如一个\",{\"1\":{\"999\":1}}],[\"比如更改该变量的类型\",{\"1\":{\"893\":1}}],[\"比如中文\",{\"1\":{\"880\":1,\"886\":1}}],[\"比如通过\",{\"1\":{\"548\":1}}],[\"比如是否可以通过\",{\"1\":{\"528\":1}}],[\"比如socket\",{\"1\":{\"458\":1}}],[\"比如元素的尺寸\",{\"1\":{\"439\":1}}],[\"比如有一个函数\",{\"1\":{\"381\":1}}],[\"比如有一个数组\",{\"1\":{\"381\":1}}],[\"比如有一个对象\",{\"1\":{\"381\":1}}],[\"比如我们需要一个变量\",{\"1\":{\"381\":1}}],[\"比如上面提到的重定向\",{\"1\":{\"155\":1}}],[\"比如图片\",{\"1\":{\"153\":1}}],[\"比如内存\",{\"1\":{\"143\":1}}],[\"比如使连续的英文字符断行\",{\"1\":{\"91\":1}}],[\"比如\",{\"1\":{\"89\":1,\"120\":1,\"122\":1,\"155\":2,\"417\":1,\"439\":1,\"506\":1,\"548\":1,\"625\":1,\"924\":1,\"946\":1,\"1260\":1,\"1282\":1,\"1284\":1,\"1394\":1,\"1406\":1,\"1502\":1,\"1549\":1,\"1551\":1,\"1620\":1,\"1676\":1}}],[\"比如某个模块或对象的\",{\"1\":{\"1681\":1}}],[\"比如某个css的背景色变了\",{\"1\":{\"158\":1}}],[\"比如某个\",{\"1\":{\"15\":1}}],[\"比正常文字宽度宽\",{\"1\":{\"77\":4}}],[\"比正常文字宽度窄\",{\"1\":{\"77\":4}}],[\"举例\",{\"1\":{\"1621\":1}}],[\"举例来说\",{\"1\":{\"2\":1,\"229\":1,\"1581\":1}}],[\"举个例子\",{\"1\":{\"75\":1}}],[\"867\",{\"1\":{\"1232\":2}}],[\"83\",{\"1\":{\"1153\":5}}],[\"87\",{\"1\":{\"881\":1,\"887\":1}}],[\"85\",{\"1\":{\"881\":1,\"887\":1}}],[\"82\",{\"1\":{\"880\":1,\"1166\":1}}],[\"80\",{\"1\":{\"662\":2,\"1271\":1}}],[\"8080\",{\"1\":{\"223\":1}}],[\"800\",{\"1\":{\"75\":1}}],[\"8421法\",{\"1\":{\"208\":1,\"209\":1}}],[\"8\",{\"0\":{\"155\":1,\"348\":1,\"464\":1,\"521\":1},\"1\":{\"120\":2,\"126\":1,\"128\":2,\"220\":3,\"245\":1,\"310\":1,\"313\":1,\"348\":1,\"349\":1,\"374\":4,\"470\":1,\"524\":1,\"671\":1,\"807\":2,\"838\":1,\"878\":1,\"913\":1,\"914\":3,\"971\":1,\"1092\":1,\"1094\":1,\"1142\":1,\"1154\":2,\"1156\":2,\"1207\":1,\"1221\":4,\"1243\":1,\"1312\":3,\"1375\":2,\"1404\":4}}],[\"8px\",{\"1\":{\"14\":1,\"46\":1}}],[\"定时触发器线程\",{\"1\":{\"1549\":1}}],[\"定时器不能非常细粒化的控制执行的时间\",{\"1\":{\"1543\":1}}],[\"定时器无法保证准时执行回调函数\",{\"0\":{\"1541\":1}}],[\"定时器触发\",{\"1\":{\"1538\":1}}],[\"定时器机制\",{\"0\":{\"1537\":1}}],[\"定时器和\",{\"1\":{\"1534\":1}}],[\"定时器检测阶段\",{\"1\":{\"1534\":1}}],[\"定时器也没有清除\",{\"1\":{\"1288\":1}}],[\"定时器的回调函数以及内部依赖的变量都不能被回收\",{\"1\":{\"1288\":1}}],[\"定时器的执行顺序是随机的\",{\"1\":{\"460\":1}}],[\"定时器没有被清除\",{\"1\":{\"1288\":1}}],[\"定时器\",{\"0\":{\"1288\":1}}],[\"定时器版本\",{\"1\":{\"288\":1}}],[\"定义声明是在编译阶段进行的\",{\"1\":{\"1698\":1}}],[\"定义\",{\"0\":{\"1708\":1},\"1\":{\"1677\":1}}],[\"定义异步模块\",{\"1\":{\"1617\":1}}],[\"定义模块\",{\"1\":{\"1617\":1,\"1618\":1}}],[\"定义的\",{\"1\":{\"1589\":1}}],[\"定义私有属性\",{\"1\":{\"1483\":1}}],[\"定义这个属性是为了分清\",{\"1\":{\"1386\":1}}],[\"定义函数的时候\",{\"1\":{\"1382\":1}}],[\"定义函数时被自动赋值\",{\"1\":{\"648\":1}}],[\"定义时\",{\"1\":{\"1375\":1}}],[\"定义时所在\",{\"1\":{\"1374\":1}}],[\"定义方式\",{\"1\":{\"1338\":1}}],[\"定义或修改\",{\"1\":{\"693\":1}}],[\"定义自己的数据结构\",{\"1\":{\"625\":1}}],[\"定义一个方法并且赋值给构造函数的原型\",{\"1\":{\"599\":1,\"1481\":1,\"1483\":1}}],[\"定义一个ctx变量获取传入的对象obj\",{\"1\":{\"392\":1,\"393\":1}}],[\"定义格式化上下文的根元素\",{\"1\":{\"329\":1}}],[\"定义了\",{\"1\":{\"1406\":1}}],[\"定义了默认值的参数\",{\"1\":{\"1405\":1}}],[\"定义了声明\",{\"1\":{\"329\":1}}],[\"定义了一种特殊序列\",{\"1\":{\"239\":1}}],[\"定义对象的作用域\",{\"1\":{\"230\":1}}],[\"定义内联内容溢出其块容器是否截断或者添加\",{\"1\":{\"87\":1}}],[\"定义缩进作用在块容器的第一行或者内部的每个强制换行的首行\",{\"1\":{\"86\":1}}],[\"定义比继承值更轻的值\",{\"1\":{\"75\":1}}],[\"定义比继承值更重的值\",{\"1\":{\"75\":1}}],[\"定位元素\",{\"1\":{\"39\":1}}],[\"定位以外的第一个父元素\",{\"1\":{\"35\":1}}],[\"定位\",{\"0\":{\"34\":1},\"1\":{\"38\":1}}],[\"粗体\",{\"1\":{\"75\":1}}],[\"人为的使文字倾斜\",{\"1\":{\"74\":1}}],[\"方括号这种写法属于\",{\"1\":{\"1218\":1}}],[\"方括号内是另一个表达式\",{\"1\":{\"1087\":1}}],[\"方括号中的值若是非字符串类型会使用\",{\"1\":{\"558\":1}}],[\"方括号运算符\",{\"0\":{\"558\":1},\"1\":{\"556\":1,\"561\":2}}],[\"方式创建的对象会以传入的对象参数为对象的原型\",{\"1\":{\"652\":1}}],[\"方式\",{\"0\":{\"652\":1}}],[\"方式只可判断移入方向\",{\"1\":{\"277\":1}}],[\"方式来为一个文档添加元数据\",{\"1\":{\"127\":1}}],[\"方便代码维护\",{\"1\":{\"1609\":1}}],[\"方便字符串插值\",{\"1\":{\"344\":1}}],[\"方便服务器接受时能够准确地还原报文信息\",{\"1\":{\"152\":1}}],[\"方便观察背景图片设置对应\",{\"1\":{\"102\":1}}],[\"方法内的\",{\"1\":{\"1670\":1}}],[\"方法内部的\",{\"1\":{\"622\":1,\"623\":3}}],[\"方法进行了\",{\"1\":{\"1670\":1}}],[\"方法放在\",{\"1\":{\"1595\":1}}],[\"方法则要求以数组的形式传入参数\",{\"1\":{\"1529\":1}}],[\"方法则调用\",{\"1\":{\"953\":1}}],[\"方法使用它自有的实参列表作为函数的实参\",{\"1\":{\"1529\":1}}],[\"方法调用的语法已经很清晰地表明了函数将基于一个对象进行操作\",{\"1\":{\"1517\":1}}],[\"方法调用的母体就是这个对象\",{\"1\":{\"1517\":1}}],[\"方法调用模式\",{\"0\":{\"1514\":1},\"1\":{\"1514\":1}}],[\"方法被调用时\",{\"1\":{\"1514\":1}}],[\"方法判断数据类型的一系列的\",{\"1\":{\"1504\":1}}],[\"方法判断对象的\",{\"1\":{\"531\":1}}],[\"方法成为了一个非常灵活的方法\",{\"1\":{\"1503\":1}}],[\"方法当然知道节点什么时候创建好\",{\"1\":{\"1502\":1}}],[\"方法解决\",{\"1\":{\"1457\":1}}],[\"方法无效\",{\"1\":{\"1375\":1}}],[\"方法中使用了箭头函数\",{\"1\":{\"1375\":1}}],[\"方法就能够并发地等待所有\",{\"1\":{\"1355\":1}}],[\"方法就可以达到效果\",{\"1\":{\"955\":1}}],[\"方法实现同时触发\",{\"1\":{\"1354\":1}}],[\"方法实际上会在现有对象上调用\",{\"1\":{\"776\":1}}],[\"方法捕捉错误\",{\"1\":{\"1348\":1}}],[\"方法里面的\",{\"1\":{\"1345\":1}}],[\"方法指定的回调函数\",{\"1\":{\"1345\":1}}],[\"方法指定下一步的操作\",{\"1\":{\"1338\":1}}],[\"方法回调函数接收到\",{\"1\":{\"1344\":1}}],[\"方法回调函数的参数\",{\"1\":{\"1344\":1}}],[\"方法添加回调函数\",{\"1\":{\"1340\":1}}],[\"方法在现有对象上定义取值函数\",{\"1\":{\"1319\":1}}],[\"方法创建一个新的函数\",{\"1\":{\"1308\":1}}],[\"方法创建一个新数组\",{\"1\":{\"667\":1}}],[\"方法将\",{\"1\":{\"1185\":1}}],[\"方法返回\",{\"1\":{\"1488\":1}}],[\"方法返回的是一个\",{\"1\":{\"1185\":1}}],[\"方法返回所有自有属性\",{\"1\":{\"565\":1}}],[\"方法返回所有可枚举的自有属性\",{\"1\":{\"565\":1}}],[\"方法设置为不可设置的属性不能被删除\",{\"1\":{\"1101\":1}}],[\"方法隐式转换为\",{\"1\":{\"951\":1}}],[\"方法转成字符串然后拼接\",{\"1\":{\"951\":1}}],[\"方法存在时\",{\"1\":{\"946\":1,\"951\":1}}],[\"方法时\",{\"1\":{\"936\":1}}],[\"方法能精准地判断出值的数据类型\",{\"1\":{\"936\":1}}],[\"方法为一个可扩展的对象添加新属性会抛出异常\",{\"1\":{\"813\":1}}],[\"方法用来检测指定对象是否已被冻结\",{\"1\":{\"772\":1}}],[\"方法用于将引用类型转换为原始数据类型的操作\",{\"1\":{\"946\":1}}],[\"方法用于将所有可枚举自有\",{\"1\":{\"676\":1}}],[\"方法用于指定对象自身的所有可枚举\",{\"1\":{\"841\":1}}],[\"方法用于表示指定对象的字符串\",{\"1\":{\"833\":1}}],[\"方法用于设置一个指定的对象的原型\",{\"1\":{\"828\":1}}],[\"方法用于标识指定对象为不可扩展\",{\"1\":{\"823\":1}}],[\"方法用于检测指定\",{\"1\":{\"816\":1}}],[\"方法用于检测指定对象是否已被密封\",{\"1\":{\"784\":1}}],[\"方法用于检测指定对象是否可扩展\",{\"1\":{\"766\":1}}],[\"方法用于检测指定对象自有\",{\"1\":{\"752\":1}}],[\"方法用于令指定对象无法再添加新的属性\",{\"1\":{\"810\":1}}],[\"方法用于测试指定对象是否存在于目标对象的原型链上\",{\"1\":{\"779\":1}}],[\"方法用于判断两个值是否是相同的值\",{\"1\":{\"760\":1}}],[\"方法用于获取指定对象自身可枚举\",{\"1\":{\"790\":1}}],[\"方法用于获取指定对象的原型\",{\"1\":{\"745\":1}}],[\"方法用于获取指定对象的所有自身\",{\"1\":{\"729\":1}}],[\"方法用于获取一个给定对象自身的所有\",{\"1\":{\"740\":1}}],[\"方法用于获取一个对象的所有自身\",{\"1\":{\"724\":1}}],[\"方法用于冻结一个对象\",{\"1\":{\"704\":1}}],[\"方法用于枚举指定对象并返回以键值对组成的数组为元素的二维数组\",{\"1\":{\"698\":1}}],[\"方法用于为一个对象定义一个自有\",{\"1\":{\"692\":1}}],[\"方法用于为一个对象定义\",{\"1\":{\"687\":1}}],[\"方法用于创建指定对象为原型对象的新对象\",{\"1\":{\"548\":1,\"682\":1}}],[\"方法都可以标记一个对象为不可扩展\",{\"1\":{\"768\":1}}],[\"方法获取\",{\"1\":{\"737\":2,\"835\":1}}],[\"方法过滤\",{\"1\":{\"731\":1}}],[\"方法接收一个键值对的列表参数\",{\"1\":{\"711\":1}}],[\"方法把键值对列表转换为一个对象\",{\"1\":{\"709\":1}}],[\"方法只会拷贝源对象自身的并且可枚举的属性到目标对象\",{\"1\":{\"678\":1}}],[\"方法只能用于实例属性\",{\"1\":{\"576\":1}}],[\"方法说明\",{\"0\":{\"669\":1,\"678\":1,\"700\":1,\"706\":1,\"711\":1,\"731\":1,\"754\":1,\"762\":1,\"768\":1,\"774\":1,\"786\":1,\"792\":1,\"812\":1,\"835\":1}}],[\"方法规范化了原型式继承\",{\"1\":{\"640\":1}}],[\"方法也可以在新创建的对象上执行构造函数\",{\"1\":{\"635\":1}}],[\"方法也可以\",{\"1\":{\"635\":1}}],[\"方法不是通过\",{\"1\":{\"625\":1}}],[\"方法不存在的情况下\",{\"1\":{\"570\":1}}],[\"方法向父类\",{\"1\":{\"625\":1}}],[\"方法传入的\",{\"1\":{\"625\":1}}],[\"方法执行时\",{\"1\":{\"622\":1}}],[\"方法才能调用父类实例\",{\"1\":{\"619\":1}}],[\"方法是属性名之前\",{\"1\":{\"615\":1}}],[\"方法前面的下划线\",{\"1\":{\"612\":1}}],[\"方法来将该对象转化为原始类型\",{\"1\":{\"946\":1}}],[\"方法来指定其目标类型\",{\"1\":{\"946\":1}}],[\"方法来获取实例对象的原型\",{\"1\":{\"603\":1}}],[\"方法来修改属性描述符\",{\"1\":{\"530\":1}}],[\"方法间不需要添加逗号\",{\"1\":{\"599\":1}}],[\"方法和\",{\"1\":{\"577\":1}}],[\"方法外\",{\"1\":{\"572\":1}}],[\"方法之外\",{\"1\":{\"572\":1}}],[\"方法的参数\",{\"1\":{\"1599\":1}}],[\"方法的参数必须是一个表达式\",{\"1\":{\"1197\":1}}],[\"方法的例子\",{\"1\":{\"1393\":1}}],[\"方法的的对象\",{\"1\":{\"711\":1}}],[\"方法的底层实现\",{\"1\":{\"624\":1}}],[\"方法的继承\",{\"1\":{\"624\":1}}],[\"方法的\",{\"1\":{\"551\":1}}],[\"方法的第二个参数是属性描述符\",{\"1\":{\"548\":1}}],[\"方法的对象赋值会静默失败\",{\"1\":{\"533\":1}}],[\"方法可以用来间接地调用函数\",{\"1\":{\"1529\":1}}],[\"方法可以用来从子类上获取父类\",{\"1\":{\"620\":1}}],[\"方法可以使用\",{\"1\":{\"1516\":1}}],[\"方法可以获取对象自有\",{\"1\":{\"719\":1}}],[\"方法可以确定该属性是自有属性还是继承属性\",{\"1\":{\"565\":1}}],[\"方法可以标记一个对象为不可扩展\",{\"1\":{\"538\":1}}],[\"方法可以判断某属性是不是该对象的实例属性\",{\"1\":{\"388\":1}}],[\"方法需要成对出现的\",{\"1\":{\"534\":1}}],[\"方法改变属性\",{\"1\":{\"529\":1}}],[\"方法八\",{\"1\":{\"488\":1}}],[\"方法七\",{\"1\":{\"488\":1}}],[\"方法六\",{\"1\":{\"488\":1}}],[\"方法五\",{\"1\":{\"488\":1}}],[\"方法四\",{\"1\":{\"488\":1}}],[\"方法三\",{\"1\":{\"488\":1}}],[\"方法二\",{\"1\":{\"473\":1,\"482\":1,\"488\":1,\"509\":1}}],[\"方法一需要存储分割后的修订号\",{\"1\":{\"509\":1}}],[\"方法一\",{\"1\":{\"473\":1,\"482\":1,\"488\":1,\"509\":1,\"524\":1}}],[\"方法定义了可以对一个对象执行那些操作\",{\"1\":{\"229\":1}}],[\"方法\",{\"0\":{\"803\":1,\"806\":1},\"1\":{\"152\":2,\"229\":1,\"388\":1,\"392\":1,\"393\":1,\"531\":1,\"532\":3,\"533\":1,\"534\":2,\"551\":1,\"570\":1,\"576\":1,\"602\":1,\"619\":2,\"635\":1,\"737\":1,\"754\":1,\"776\":1,\"787\":1,\"849\":2,\"936\":3,\"943\":2,\"946\":5,\"951\":2,\"952\":1,\"953\":2,\"955\":2,\"1178\":1,\"1312\":1,\"1348\":1,\"1462\":1,\"1466\":2,\"1483\":1,\"1502\":2,\"1580\":1,\"1593\":2,\"1658\":2,\"1670\":3,\"1709\":1}}],[\"方正静蕾体\",{\"1\":{\"71\":1}}],[\"方向的外边距属性\",{\"1\":{\"55\":1}}],[\"方向的尺寸\",{\"1\":{\"23\":1}}],[\"衬线字体\",{\"1\":{\"71\":1}}],[\"且能立即得到结果的\",{\"1\":{\"1547\":1}}],[\"且只能访问最后出现的该名称的形参\",{\"1\":{\"1381\":1}}],[\"且只能在类的构造函数或方法中创建\",{\"1\":{\"615\":1,\"1483\":1}}],[\"且都和\",{\"1\":{\"1282\":1}}],[\"且返回值不是一个对象\",{\"1\":{\"1035\":1,\"1036\":1}}],[\"且是有限值\",{\"1\":{\"899\":1}}],[\"且所有现有\",{\"1\":{\"823\":1}}],[\"且所有数据属性\",{\"1\":{\"774\":1}}],[\"且不得操作\",{\"1\":{\"1551\":1}}],[\"且不重复的三元组\",{\"1\":{\"476\":1}}],[\"且不安全\",{\"1\":{\"450\":1}}],[\"且等于\",{\"1\":{\"385\":1}}],[\"且在它所涉及的范围内更普遍\",{\"1\":{\"228\":1}}],[\"且\",{\"1\":{\"71\":1,\"476\":1,\"1203\":8}}],[\"字母不区分大小写\",{\"1\":{\"923\":1}}],[\"字母字符\",{\"1\":{\"246\":1}}],[\"字面量或者变量\",{\"1\":{\"1207\":1}}],[\"字面量\",{\"0\":{\"1080\":1},\"1\":{\"1080\":3}}],[\"字面量方式创建的对象默认是可扩展的\",{\"1\":{\"813\":1}}],[\"字面量方式\",{\"0\":{\"650\":1}}],[\"字面量以及行尾分号补全的规则\",{\"1\":{\"233\":1}}],[\"字节\",{\"1\":{\"313\":2}}],[\"字节的数据\",{\"1\":{\"303\":1}}],[\"字节流\",{\"1\":{\"298\":1}}],[\"字段\",{\"1\":{\"205\":1,\"309\":1}}],[\"字符的函数都有这个问题\",{\"1\":{\"1184\":1}}],[\"字符识别为\",{\"1\":{\"1184\":1}}],[\"字符编码值\",{\"1\":{\"953\":1}}],[\"字符编码等操作\",{\"1\":{\"148\":1}}],[\"字符流转换为标记流\",{\"1\":{\"464\":1}}],[\"字符来代表任意\",{\"1\":{\"239\":1}}],[\"字符全集\",{\"1\":{\"239\":1}}],[\"字符序标记\",{\"1\":{\"237\":1}}],[\"字符集编写\",{\"1\":{\"234\":1}}],[\"字符集\",{\"0\":{\"234\":1}}],[\"字符集声明等等\",{\"1\":{\"120\":1}}],[\"字符\",{\"1\":{\"121\":1,\"1184\":1}}],[\"字符串操作\",{\"1\":{\"1496\":1}}],[\"字符串也可以解构赋值\",{\"1\":{\"1219\":1}}],[\"字符串比较使用的方式是简单地检测字符编码单元序列是否相同\",{\"1\":{\"1203\":1}}],[\"字符串比较可以按这种方式强制执行\",{\"1\":{\"1203\":1}}],[\"字符串比较是基于标准的字典顺序\",{\"1\":{\"1200\":1}}],[\"字符串的解构赋值\",{\"0\":{\"1219\":1}}],[\"字符串的\",{\"1\":{\"1184\":1}}],[\"字符串的长度是它的元素的数量\",{\"1\":{\"927\":1}}],[\"字符串中的应用\",{\"0\":{\"1184\":1}}],[\"字符串运算符\",{\"0\":{\"1169\":1},\"1\":{\"1169\":1}}],[\"字符串字面量\",{\"1\":{\"1080\":1}}],[\"字符串连接符\",{\"1\":{\"951\":1}}],[\"字符串对象\",{\"1\":{\"917\":1}}],[\"字符串进行解码\",{\"1\":{\"880\":1}}],[\"字符串采用\",{\"1\":{\"878\":1}}],[\"字符串解析为数字\",{\"1\":{\"858\":1}}],[\"字符串名称或者\",{\"1\":{\"753\":1}}],[\"字符串是\",{\"1\":{\"558\":1}}],[\"字符串分割\",{\"1\":{\"509\":1}}],[\"字符串相加\",{\"0\":{\"506\":1}}],[\"字符串直接量\",{\"1\":{\"245\":1}}],[\"字符串\",{\"0\":{\"927\":1},\"1\":{\"29\":1,\"388\":1,\"869\":1,\"874\":1,\"879\":2,\"917\":1,\"1087\":1,\"1115\":1,\"1200\":1,\"1302\":1,\"1306\":1},\"2\":{\"511\":1}}],[\"字体图标\",{\"1\":{\"1621\":1}}],[\"字体那么缝隙可能就是\",{\"1\":{\"94\":1}}],[\"字体形态\",{\"1\":{\"71\":1}}],[\"字体\",{\"0\":{\"71\":1}}],[\"文件夹我们可以拿到其他项目中使用\",{\"1\":{\"1621\":1}}],[\"文件夹名\",{\"1\":{\"194\":1,\"197\":2}}],[\"文件引入\",{\"1\":{\"1617\":1,\"1618\":1}}],[\"文件的问题\",{\"1\":{\"1614\":1}}],[\"文件地址\",{\"1\":{\"220\":1}}],[\"文件系统都会被加载\",{\"1\":{\"215\":1}}],[\"文件\",{\"1\":{\"215\":1,\"1606\":1}}],[\"文件授权\",{\"0\":{\"209\":1}}],[\"文件权限信息示例\",{\"1\":{\"208\":1}}],[\"文件权限简介\",{\"1\":{\"208\":1}}],[\"文件权限\",{\"0\":{\"207\":1}}],[\"文件不存在\",{\"1\":{\"203\":1}}],[\"文件操作\",{\"0\":{\"202\":1}}],[\"文件名\",{\"1\":{\"197\":2,\"204\":2,\"205\":1}}],[\"文件里\",{\"1\":{\"150\":1}}],[\"文件路径\",{\"1\":{\"131\":1}}],[\"文档对象\",{\"1\":{\"453\":1}}],[\"文档渲染得好像这个元素并不存在\",{\"1\":{\"329\":1}}],[\"文档分区元素\",{\"1\":{\"136\":1}}],[\"文档的标题\",{\"1\":{\"126\":1}}],[\"文档类型是一个历史遗留问题\",{\"1\":{\"120\":1}}],[\"文档\",{\"0\":{\"120\":1}}],[\"文字也可以用二进制\",{\"1\":{\"929\":1}}],[\"文字装饰\",{\"1\":{\"83\":1}}],[\"文字的装饰是闪烁\",{\"1\":{\"83\":1}}],[\"文字的装饰是贯穿线\",{\"1\":{\"83\":1}}],[\"文字的装饰是上划线\",{\"1\":{\"83\":1}}],[\"文字的装饰是下划线\",{\"1\":{\"83\":1}}],[\"文字无装饰\",{\"1\":{\"83\":1}}],[\"文字\",{\"0\":{\"70\":1}}],[\"文本允许在任意字符内发生换行\",{\"1\":{\"91\":1}}],[\"文本表现同\",{\"1\":{\"91\":1}}],[\"文本不允许在字符内发生换行\",{\"1\":{\"91\":1}}],[\"文本\",{\"0\":{\"29\":1,\"80\":1}}],[\"文本相对长度单位\",{\"1\":{\"24\":2}}],[\"平铺图像\",{\"1\":{\"65\":2}}],[\"平铺图片以填充边框\",{\"1\":{\"65\":1}}],[\"九宫格中间那一块切片作为\",{\"1\":{\"63\":1}}],[\"关联性\",{\"1\":{\"1243\":1}}],[\"关联的代码块会被执行\",{\"1\":{\"1040\":1}}],[\"关于\",{\"1\":{\"1457\":1,\"1490\":1}}],[\"关于圆括号与解构赋值的关系\",{\"1\":{\"1218\":1}}],[\"关于寄生构造函数模式\",{\"1\":{\"571\":1}}],[\"关于doctype\",{\"0\":{\"321\":1}}],[\"关于属性的引号\",{\"0\":{\"119\":1}}],[\"关系运算符\",{\"0\":{\"953\":1,\"1201\":1},\"1\":{\"953\":1,\"1200\":1}}],[\"关系\",{\"1\":{\"229\":2}}],[\"关系选择符和否定选择符\",{\"1\":{\"17\":1}}],[\"关系选择符\",{\"0\":{\"13\":1},\"1\":{\"11\":1,\"17\":1}}],[\"关闭事件回调阶段\",{\"1\":{\"1534\":1}}],[\"关闭生成器\",{\"1\":{\"1002\":1}}],[\"关闭迭代器\",{\"0\":{\"1000\":1}}],[\"关闭运行的防火墙\",{\"1\":{\"217\":1}}],[\"关闭iptables服务的开机自启动\",{\"1\":{\"217\":1}}],[\"关闭系统\",{\"0\":{\"190\":1}}],[\"关闭tcp连接的四次握手\",{\"1\":{\"464\":1}}],[\"关闭tcp连接\",{\"0\":{\"156\":1},\"1\":{\"147\":1,\"156\":1}}],[\"关键在于引入和暴露\",{\"1\":{\"1616\":1}}],[\"关键值可以被分为六个种类\",{\"1\":{\"329\":1}}],[\"关键词和表达式之间不可换行\",{\"1\":{\"1036\":1}}],[\"关键词紧随在缩进数值之后\",{\"1\":{\"86\":1}}],[\"关键词\",{\"0\":{\"1041\":1},\"1\":{\"65\":1}}],[\"关键字定义变量却不赋值\",{\"1\":{\"1698\":1}}],[\"关键字定义的变量\",{\"1\":{\"1698\":1}}],[\"关键字定义的\",{\"1\":{\"1589\":1}}],[\"关键字声明的函数\",{\"1\":{\"1564\":1}}],[\"关键字创建出来的实例对象\",{\"1\":{\"1521\":1}}],[\"关键字创建对象实例\",{\"1\":{\"599\":1}}],[\"关键字来生成实例对象\",{\"1\":{\"1474\":1}}],[\"关键字来声明类\",{\"1\":{\"599\":1}}],[\"关键字的函数在执行后都会自动返回\",{\"1\":{\"1340\":1}}],[\"关键字后面没有标识符的函数\",{\"1\":{\"1332\":1}}],[\"关键字后面的标识符\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"关键字后面的函数名\",{\"1\":{\"551\":1}}],[\"关键字组成\",{\"1\":{\"1326\":1}}],[\"关键字会指向\",{\"1\":{\"1312\":1}}],[\"关键字设置为提供的值\",{\"1\":{\"1308\":1}}],[\"关键字和它后面的表达式之间不能有换行\",{\"1\":{\"1033\":1}}],[\"关键字和保留字\",{\"0\":{\"247\":1}}],[\"关键字即可将相对应的变量输出\",{\"1\":{\"1651\":1}}],[\"关键字即可\",{\"1\":{\"632\":1}}],[\"关键字不仅可以用来继承类\",{\"1\":{\"625\":1}}],[\"关键字实现继承\",{\"1\":{\"619\":1}}],[\"关键字也能执行\",{\"1\":{\"602\":1}}],[\"关键字调用\",{\"1\":{\"602\":1}}],[\"关键字生成对象实例时\",{\"1\":{\"602\":1}}],[\"关键字只是保留字的一部分\",{\"1\":{\"247\":1}}],[\"关键字除外\",{\"1\":{\"239\":1}}],[\"关键字是针对父母的\",{\"1\":{\"81\":1}}],[\"关键字\",{\"0\":{\"249\":1,\"1522\":1},\"1\":{\"63\":1,\"235\":1,\"599\":1,\"604\":1,\"619\":1,\"621\":1,\"629\":1,\"630\":1,\"1002\":1,\"1327\":1,\"1330\":1,\"1489\":1,\"1518\":1,\"1526\":1,\"1651\":1}}],[\"那为什么要介绍动态作用域呢\",{\"1\":{\"1677\":1}}],[\"那我们来看一段代码深入理解一下\",{\"1\":{\"1670\":1}}],[\"那我们就在实例中创建该属性\",{\"1\":{\"576\":1}}],[\"那你或许应当\",{\"1\":{\"1589\":1}}],[\"那就是\",{\"1\":{\"1698\":1}}],[\"那就可以实现和硬绑定相同的效果\",{\"1\":{\"1587\":1}}],[\"那就暂时不去请求判断用户名是否被占用\",{\"1\":{\"1449\":1}}],[\"那些对应的异步任务\",{\"1\":{\"1532\":1}}],[\"那些\",{\"1\":{\"1282\":1}}],[\"那些没有通过回调函数测试的元素会被跳过\",{\"1\":{\"669\":1}}],[\"那\",{\"1\":{\"645\":1}}],[\"那它跟普通函数也不会有什么两样\",{\"1\":{\"591\":1}}],[\"那它就可以作为构造函数\",{\"1\":{\"591\":1}}],[\"那这个返回函数的实例对象的this就指向了person函数\",{\"1\":{\"394\":1}}],[\"那好\",{\"1\":{\"304\":1}}],[\"那么描述的更准确的一点\",{\"1\":{\"1670\":1}}],[\"那么只会执行一次\",{\"1\":{\"1635\":1}}],[\"那么必须有\",{\"1\":{\"1632\":1}}],[\"那么该属性将会被新的引用所覆盖\",{\"1\":{\"1564\":1}}],[\"那么剩下代码将不再执行\",{\"1\":{\"1547\":1}}],[\"那么调用表达式的值就是这个对象\",{\"1\":{\"1526\":1}}],[\"那么他就会一直支持了\",{\"1\":{\"1466\":1}}],[\"那么定时器内的目标方法也就不会执行\",{\"1\":{\"1446\":1}}],[\"那么最后一次触发事件后\",{\"1\":{\"1446\":1}}],[\"那么生硬和恶心\",{\"1\":{\"1426\":1}}],[\"那么我们就将重复的东西放到公共容器就好了\",{\"1\":{\"1475\":1}}],[\"那么我们可以先保存一个接收过\",{\"1\":{\"1418\":1}}],[\"那么我们在第四步使用ctx\",{\"1\":{\"392\":1}}],[\"那么length属性也不再计入后面的参数了\",{\"1\":{\"1406\":1}}],[\"那么等同于\",{\"1\":{\"1349\":1}}],[\"那么整个\",{\"1\":{\"1348\":1}}],[\"那么整个属性访问表达式的值就是\",{\"1\":{\"1087\":1}}],[\"那么对应在运行的定时器通过设置\",{\"1\":{\"1446\":1}}],[\"那么对应的\",{\"1\":{\"1322\":1}}],[\"那么对这个外部对象进行冻结\",{\"1\":{\"540\":1}}],[\"那么标记清除法也会将其回收\",{\"1\":{\"1282\":1}}],[\"那么将会报错\",{\"1\":{\"1216\":1,\"1218\":1}}],[\"那么将会进入包裹它的\",{\"1\":{\"1054\":1}}],[\"那么将计算第三个操作数\",{\"1\":{\"1197\":1}}],[\"那么将计算第二个操作数\",{\"1\":{\"1197\":1}}],[\"那么结果就是\",{\"1\":{\"1144\":1,\"1145\":1}}],[\"那么删除属性之后\",{\"1\":{\"1101\":1}}],[\"那么这时将忽略返回值\",{\"1\":{\"1526\":1}}],[\"那么这将是一个死循环\",{\"1\":{\"1014\":1}}],[\"那么这个过程就被称为\",{\"1\":{\"1666\":1}}],[\"那么这个表达式是惰性求值的\",{\"1\":{\"1217\":1}}],[\"那么这个权限值表示为\",{\"1\":{\"1161\":1}}],[\"那么这个值将会成为整个\",{\"1\":{\"1053\":1}}],[\"那么这个函数就可以被视为一个工厂\",{\"1\":{\"584\":1}}],[\"那么这个时候开销就浪费了\",{\"1\":{\"303\":1}}],[\"那么这个声明会被忽略\",{\"1\":{\"23\":1}}],[\"那么先通过固定的方法将复杂值转换为原始数据类型\",{\"1\":{\"951\":1}}],[\"那么另一个操作数会调用\",{\"1\":{\"951\":1}}],[\"那么另一个值不应该是\",{\"1\":{\"102\":2}}],[\"那么方法的调用顺序就变为了\",{\"1\":{\"946\":1}}],[\"那么你可以使用本函数\",{\"1\":{\"886\":1}}],[\"那么你可以使用\",{\"1\":{\"880\":1}}],[\"那么当在另一个支持该方法的实现中运行代码时\",{\"1\":{\"580\":1}}],[\"那么\",{\"1\":{\"575\":1,\"1101\":1,\"1581\":1,\"1670\":1}}],[\"那么它们之间的关系如下图所示\",{\"1\":{\"1621\":1}}],[\"那么它们都是这个对象的引用\",{\"1\":{\"552\":1}}],[\"那么它就是被当做一个方法来调用\",{\"1\":{\"1515\":1}}],[\"那么它就是被当做一个函数来调用的\",{\"1\":{\"1509\":1}}],[\"那么它是一个只写属性\",{\"1\":{\"532\":1}}],[\"那么它是一个只读属性\",{\"1\":{\"532\":1}}],[\"那么它是一个读\",{\"1\":{\"532\":1}}],[\"那么它将生成一个内联盒子\",{\"1\":{\"329\":1}}],[\"那么如果对fn这个返回函数进行new时\",{\"1\":{\"394\":1}}],[\"那么就是把本来接收多个参数一次性求和的函数改成了接收单一参数逐个求和的函数\",{\"1\":{\"1416\":1}}],[\"那么就不会再对第二个操作数求值\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"那么就不需要转换\",{\"1\":{\"951\":1}}],[\"那么就要定义很多歌全局函数\",{\"1\":{\"592\":1}}],[\"那么就会从它的\",{\"1\":{\"646\":1}}],[\"那么就会切断现有实例与新原型之间的联系\",{\"1\":{\"570\":1}}],[\"那么就会再发起新的请求\",{\"1\":{\"303\":1}}],[\"那么就实现了多维数组\",{\"1\":{\"374\":1}}],[\"那么会产生浅拷贝\",{\"1\":{\"343\":1}}],[\"那么浏览器就不知道文档解析标准是什么\",{\"1\":{\"321\":1}}],[\"那么背景图像会覆盖在背景颜色之上\",{\"1\":{\"99\":1}}],[\"那么可以换个思路\",{\"1\":{\"81\":1}}],[\"那样分拆为\",{\"1\":{\"60\":1}}],[\"绘制于元素内容周围\",{\"1\":{\"60\":1}}],[\"绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值\",{\"1\":{\"58\":1}}],[\"gui\",{\"1\":{\"1621\":2}}],[\"gc\",{\"1\":{\"1282\":7}}],[\"gap\",{\"1\":{\"488\":12}}],[\"gateway=192\",{\"1\":{\"220\":1}}],[\"gpu\",{\"1\":{\"439\":1}}],[\"gpu进程\",{\"1\":{\"425\":1}}],[\"g为gb\",{\"1\":{\"215\":1}}],[\"g\",{\"1\":{\"215\":1,\"245\":1,\"1156\":2,\"1253\":1,\"1254\":1,\"1274\":1}}],[\"gz\",{\"1\":{\"211\":2,\"215\":3}}],[\"gzip\",{\"1\":{\"155\":1}}],[\"girl\",{\"1\":{\"635\":2,\"659\":3}}],[\"gitignore\",{\"1\":{\"171\":1}}],[\"git\",{\"0\":{\"1720\":1},\"1\":{\"165\":5,\"166\":3,\"167\":5,\"168\":3,\"169\":3,\"170\":2,\"171\":3,\"175\":2,\"176\":4,\"177\":2},\"2\":{\"173\":1,\"180\":1}}],[\"gif\",{\"1\":{\"130\":1}}],[\"go\",{\"1\":{\"1186\":3,\"1613\":2,\"1614\":1}}],[\"going\",{\"1\":{\"1065\":3}}],[\"good\",{\"1\":{\"562\":1,\"1654\":2}}],[\"google\",{\"1\":{\"144\":2,\"1349\":1}}],[\"goto\",{\"1\":{\"250\":1}}],[\"gold\",{\"1\":{\"59\":1}}],[\"geekno\",{\"1\":{\"716\":1}}],[\"geekno=34\",{\"1\":{\"716\":1}}],[\"geek1\",{\"1\":{\"714\":4,\"715\":3}}],[\"geek\",{\"1\":{\"714\":2,\"715\":2}}],[\"genf\",{\"1\":{\"1350\":2}}],[\"gen\",{\"1\":{\"1002\":3,\"1350\":4}}],[\"gender\",{\"1\":{\"345\":2,\"367\":1,\"368\":2,\"377\":5}}],[\"generation\",{\"1\":{\"329\":1}}],[\"generator\",{\"0\":{\"1186\":1,\"1426\":1},\"1\":{\"59\":2,\"606\":1,\"1186\":2,\"1338\":6,\"1350\":1,\"1374\":1,\"1427\":2}}],[\"getuserinfo\",{\"1\":{\"1502\":3}}],[\"getuserlist\",{\"1\":{\"1354\":3}}],[\"getorderlist\",{\"1\":{\"1354\":3}}],[\"getownpropertysymbols\",{\"0\":{\"740\":1},\"1\":{\"740\":1,\"741\":1,\"742\":1,\"803\":1}}],[\"getownpropertyname\",{\"1\":{\"730\":1}}],[\"getownpropertynames\",{\"0\":{\"729\":1},\"1\":{\"540\":1,\"565\":2,\"729\":1,\"730\":1,\"733\":1,\"734\":2,\"735\":1,\"736\":1,\"737\":2,\"803\":1}}],[\"getownpropertydescriptors\",{\"0\":{\"724\":1},\"1\":{\"724\":1,\"725\":1,\"726\":1,\"803\":1,\"825\":2}}],[\"getownpropertydescriptor\",{\"0\":{\"719\":1},\"1\":{\"576\":2,\"678\":1,\"719\":1,\"720\":1,\"721\":1,\"776\":2,\"787\":2,\"803\":1,\"1486\":1}}],[\"getdrinkdata\",{\"1\":{\"1353\":1}}],[\"getdata\",{\"1\":{\"1288\":1}}],[\"getpizzadata\",{\"1\":{\"1353\":1}}],[\"getpropertyof\",{\"1\":{\"749\":3}}],[\"getprototypeof\",{\"0\":{\"745\":1},\"1\":{\"603\":1,\"620\":2,\"650\":2,\"651\":1,\"745\":1,\"746\":2,\"748\":2,\"749\":2,\"803\":1}}],[\"getresult\",{\"1\":{\"1352\":2}}],[\"getx\",{\"1\":{\"1312\":3}}],[\"getelementbyid\",{\"1\":{\"1286\":2,\"1288\":1,\"1435\":1}}],[\"gettime\",{\"1\":{\"1166\":1}}],[\"getters\",{\"1\":{\"413\":1}}],[\"getter\",{\"0\":{\"533\":1},\"1\":{\"401\":1,\"532\":5,\"533\":1,\"678\":2,\"706\":1,\"774\":1,\"1316\":1,\"1318\":4,\"1319\":1,\"1322\":1,\"1486\":2}}],[\"getmonthname\",{\"1\":{\"1048\":2}}],[\"getbar\",{\"1\":{\"735\":2,\"796\":2}}],[\"getboundingclientrect\",{\"1\":{\"277\":1}}],[\"getarea\",{\"1\":{\"605\":1}}],[\"getclassname\",{\"1\":{\"600\":1}}],[\"get\",{\"1\":{\"152\":2,\"402\":1,\"403\":3,\"450\":1,\"464\":1,\"467\":2,\"512\":2,\"515\":1,\"533\":2,\"534\":3,\"539\":1,\"604\":4,\"615\":1,\"678\":1,\"688\":1,\"694\":1,\"695\":2,\"716\":1,\"726\":2,\"1166\":1,\"1317\":2,\"1318\":2,\"1319\":4,\"1349\":1,\"1403\":5,\"1486\":4}}],[\"gecko\",{\"1\":{\"143\":2,\"436\":1,\"1550\":1}}],[\"gt\",{\"1\":{\"121\":1}}],[\"globalcontext\",{\"1\":{\"1557\":4,\"1570\":2,\"1572\":3,\"1709\":7}}],[\"globalthis\",{\"0\":{\"846\":1},\"1\":{\"846\":1,\"847\":1,\"848\":3,\"849\":1}}],[\"globalsymbol\",{\"1\":{\"742\":1}}],[\"global\",{\"1\":{\"61\":1,\"329\":1,\"846\":1,\"848\":1,\"864\":1,\"868\":1,\"873\":1,\"878\":1,\"884\":1,\"890\":1,\"897\":1,\"902\":1,\"908\":1,\"913\":1,\"1233\":1,\"1570\":1,\"1572\":1,\"1578\":1,\"1587\":1,\"1620\":1,\"1686\":2,\"1709\":2}}],[\"graphical\",{\"1\":{\"1621\":1}}],[\"gray\",{\"1\":{\"586\":1,\"590\":1,\"592\":1}}],[\"gradient\",{\"1\":{\"30\":4,\"100\":2}}],[\"gradians\",{\"1\":{\"26\":1}}],[\"grad\",{\"1\":{\"26\":1}}],[\"grow属性定义项目的放大比例\",{\"1\":{\"332\":1}}],[\"grow\",{\"1\":{\"332\":2,\"1285\":2}}],[\"group\",{\"1\":{\"329\":5}}],[\"greeting\",{\"1\":{\"1197\":4}}],[\"green\",{\"1\":{\"61\":1,\"108\":1,\"1109\":1}}],[\"greg\",{\"1\":{\"576\":2}}],[\"grep\",{\"1\":{\"215\":3,\"223\":1}}],[\"grid\",{\"1\":{\"44\":1,\"329\":7,\"1621\":1}}],[\"6=\",{\"1\":{\"1161\":1}}],[\"64\",{\"1\":{\"1142\":2}}],[\"644\",{\"1\":{\"215\":1}}],[\"64位库\",{\"1\":{\"186\":1}}],[\"6\",{\"0\":{\"153\":1,\"346\":1,\"448\":1,\"515\":1},\"1\":{\"239\":1,\"299\":1,\"343\":1,\"348\":1,\"349\":1,\"374\":6,\"392\":1,\"482\":2,\"485\":5,\"500\":4,\"515\":2,\"524\":2,\"596\":1,\"672\":1,\"928\":1,\"1069\":2,\"1087\":2,\"1092\":1,\"1109\":1,\"1153\":9,\"1161\":3,\"1175\":1,\"1224\":1,\"1243\":1,\"1333\":1,\"1367\":1,\"1375\":2,\"1405\":1,\"1417\":3,\"1533\":2,\"1537\":1,\"1538\":1,\"1542\":1,\"1695\":1}}],[\"60\",{\"1\":{\"110\":4,\"313\":1}}],[\"600\",{\"1\":{\"75\":1}}],[\"60px\",{\"1\":{\"59\":1}}],[\"666\",{\"1\":{\"15\":1}}],[\"you\",{\"1\":{\"1673\":1}}],[\"your\",{\"1\":{\"928\":1}}],[\"yes\",{\"1\":{\"1221\":2}}],[\"years\",{\"1\":{\"1490\":2,\"1491\":1}}],[\"year\",{\"1\":{\"1109\":1,\"1329\":1}}],[\"y+1\",{\"1\":{\"301\":1}}],[\"yields\",{\"1\":{\"1319\":1}}],[\"yield\",{\"1\":{\"253\":2,\"606\":1,\"1000\":3,\"1001\":1,\"1002\":3,\"1186\":3,\"1243\":4,\"1338\":3,\"1374\":1,\"1426\":1,\"1427\":1,\"1488\":6}}],[\"yum\",{\"1\":{\"215\":3}}],[\"yao\",{\"1\":{\"187\":2,\"192\":2,\"215\":2}}],[\"y>\",{\"1\":{\"102\":1}}],[\"y\",{\"1\":{\"59\":4,\"103\":1,\"244\":2,\"253\":1,\"274\":8,\"301\":1,\"343\":2,\"488\":2,\"506\":2,\"509\":9,\"548\":4,\"597\":8,\"603\":6,\"619\":5,\"684\":3,\"713\":3,\"894\":3,\"1020\":2,\"1065\":2,\"1069\":3,\"1083\":8,\"1087\":2,\"1158\":1,\"1178\":3,\"1184\":2,\"1203\":21,\"1204\":2,\"1214\":4,\"1216\":2,\"1217\":14,\"1218\":13,\"1220\":1,\"1221\":14,\"1229\":4,\"1231\":3,\"1238\":26,\"1246\":2,\"1248\":1,\"1274\":3,\"1281\":3,\"1382\":8,\"1388\":3,\"1389\":3,\"1398\":11,\"1399\":2,\"1401\":2,\"1403\":7,\"1404\":10,\"1405\":6,\"1407\":14,\"1412\":2,\"1417\":8,\"1509\":2,\"1510\":2,\"1529\":2,\"1652\":2}}],[\"每找到一个变量声明\",{\"1\":{\"1564\":1}}],[\"每当用户输入的时候把前一个\",{\"1\":{\"1449\":1}}],[\"每隔\",{\"1\":{\"1438\":1}}],[\"每隔一段时间再去计算这个判断逻辑\",{\"1\":{\"1438\":1}}],[\"每次某个函数被调用\",{\"1\":{\"1557\":1}}],[\"每次当控制器转到可执行代码的时候\",{\"1\":{\"1556\":1}}],[\"每次调用\",{\"1\":{\"1466\":1}}],[\"每次使用都需要这样调用\",{\"1\":{\"1418\":1}}],[\"每次循环任务\",{\"1\":{\"1356\":1}}],[\"每次迭代时\",{\"1\":{\"982\":1}}],[\"每次你可以爬\",{\"1\":{\"518\":1}}],[\"每进入一个阶段\",{\"1\":{\"458\":1}}],[\"每根轴线两侧的间隔都相等\",{\"1\":{\"332\":1}}],[\"每一个对应的位\",{\"1\":{\"1151\":2}}],[\"每一个对应的位都为\",{\"1\":{\"1151\":1}}],[\"每一个对象都有\",{\"1\":{\"624\":1}}],[\"每一个对象都从原型继承属性\",{\"1\":{\"565\":1}}],[\"每一次进行等号的比较\",{\"1\":{\"955\":1}}],[\"每一次运行\",{\"1\":{\"352\":1}}],[\"每一帧包括数据和必要的控制信息\",{\"1\":{\"318\":1}}],[\"每一帧分为两个部分\",{\"1\":{\"152\":1}}],[\"每一条\",{\"1\":{\"298\":1}}],[\"每条从根节点到叶节点的路径都代表一个数字\",{\"1\":{\"497\":1}}],[\"每条\",{\"1\":{\"298\":1}}],[\"每层都要对数据进行封装\",{\"1\":{\"152\":1}}],[\"每组参数值以逗号分隔\",{\"1\":{\"59\":1}}],[\"每个函数都有自己的执行环境\",{\"1\":{\"1707\":1}}],[\"每个执行环境都有一个与之关联的\",{\"1\":{\"1707\":1}}],[\"每个模块具有比完整程序更小的接触面\",{\"1\":{\"1606\":1}}],[\"每个宏任务执行完毕后都必须将当前的微任务队列清空\",{\"1\":{\"1533\":1}}],[\"每个配置项对应一个异步请求\",{\"1\":{\"1355\":1}}],[\"每个变量仅仅是一个用于保存值的占位符而已\",{\"1\":{\"1063\":1}}],[\"每个对象将继承\",{\"1\":{\"1004\":1}}],[\"每个对象\",{\"1\":{\"936\":1}}],[\"每个对象都有构造函数\",{\"1\":{\"647\":1}}],[\"每个属性都是一个名值对\",{\"1\":{\"799\":1}}],[\"每个属性都是一个键值对\",{\"1\":{\"544\":1}}],[\"每个子类都有父类实例函数的副本\",{\"1\":{\"637\":1}}],[\"每个类都有一个\",{\"1\":{\"599\":1,\"1483\":1}}],[\"每个方法都要在每个实例上重新创建一遍\",{\"1\":{\"592\":1}}],[\"每个方向都必须要\",{\"1\":{\"304\":1}}],[\"每个实例都会有自己的一份实例属性的副本\",{\"1\":{\"569\":1}}],[\"每个\",{\"1\":{\"565\":1}}],[\"每个右括号都有一个对应的相同类型的左括号\",{\"1\":{\"512\":1}}],[\"每个版本号至少包含一个字符\",{\"1\":{\"509\":1}}],[\"每个修订号由\",{\"1\":{\"509\":1}}],[\"每个页面至少需要一次回流\",{\"1\":{\"439\":1}}],[\"每个进程在执行时都会分配独立的内存空间\",{\"1\":{\"422\":1}}],[\"每个字符引用以符号\",{\"1\":{\"121\":1}}],[\"每个参数仅允许有一个值\",{\"1\":{\"71\":1}}],[\"每个项目的右侧都有一个\",{\"1\":{\"46\":1}}],[\"每个规则集都应该包含在成对的大括号里\",{\"1\":{\"7\":1}}],[\"向右被移出的位被丢弃\",{\"1\":{\"1149\":1,\"1150\":1}}],[\"向其中添加一个新字符串\",{\"1\":{\"569\":1}}],[\"向服务端发送\",{\"1\":{\"301\":1}}],[\"向选定的元素之后插入内容\",{\"1\":{\"256\":1}}],[\"向选定的元素前插入内容\",{\"1\":{\"256\":1}}],[\"向里收缩\",{\"1\":{\"59\":1}}],[\"向四面扩展\",{\"1\":{\"59\":1}}],[\"向上追溯找不到含有\",{\"1\":{\"39\":1}}],[\"向上找最近的定位为\",{\"1\":{\"36\":1}}],[\"阴影示例模版\",{\"1\":{\"59\":1}}],[\"阴影向内\",{\"1\":{\"59\":1}}],[\"阴影扩散半径\",{\"1\":{\"59\":1}}],[\"阴影模糊半径\",{\"1\":{\"59\":2}}],[\"阴影模糊值半径\",{\"1\":{\"59\":1}}],[\"阴影颜色\",{\"1\":{\"59\":4}}],[\"阴影也会有圆角效果\",{\"1\":{\"59\":1}}],[\"阴影将\",{\"1\":{\"59\":1}}],[\"阴影外延值\",{\"1\":{\"59\":1}}],[\"阴影边缘不出现模糊\",{\"1\":{\"59\":1}}],[\"阴影出现在元素\",{\"1\":{\"59\":2}}],[\"左到右\",{\"1\":{\"1242\":1}}],[\"左结合\",{\"1\":{\"1242\":1}}],[\"左移位赋值\",{\"1\":{\"1238\":1}}],[\"左移\",{\"0\":{\"1148\":1},\"1\":{\"1148\":1,\"1151\":1}}],[\"左操作数为对象\",{\"1\":{\"935\":1}}],[\"左括号必须以正确的顺序闭合\",{\"1\":{\"512\":1}}],[\"左括号必须用相同类型的右括号闭合\",{\"1\":{\"512\":1}}],[\"左下角会显示\",{\"1\":{\"205\":1}}],[\"左侧用\",{\"1\":{\"1150\":1}}],[\"左侧\",{\"1\":{\"59\":1}}],[\"左边的变量就会被赋予对应的值\",{\"1\":{\"1213\":1}}],[\"左边的操作数小于或等于右边的操作数返回\",{\"1\":{\"1201\":1}}],[\"左边的操作数小于右边的操作数返回\",{\"1\":{\"1201\":1}}],[\"左边的操作数大于或等于右边的操作数返回\",{\"1\":{\"1201\":1}}],[\"左边的操作数大于右边的操作数返回\",{\"1\":{\"1201\":1}}],[\"左边\",{\"1\":{\"55\":1}}],[\"左边右边\",{\"1\":{\"55\":2}}],[\"负数在内存里面\",{\"1\":{\"1160\":1}}],[\"负无穷时\",{\"1\":{\"898\":1}}],[\"负责收集并维护由所有声明的标识符\",{\"1\":{\"1669\":1}}],[\"负责语法分析及代码生成等步骤\",{\"1\":{\"1669\":1}}],[\"负责\",{\"1\":{\"1549\":1,\"1550\":1}}],[\"负责页面的渲染\",{\"1\":{\"1549\":1}}],[\"负责初始化\",{\"1\":{\"1490\":1}}],[\"负责浏览器插件运行\",{\"1\":{\"425\":1}}],[\"负责处理浏览器中的gpu加速任务\",{\"1\":{\"425\":1}}],[\"负责处理用户输入\",{\"1\":{\"425\":1}}],[\"负责向两台主机进程之间的通信提供通用的数据传输服务\",{\"1\":{\"318\":1}}],[\"负责数据包从源到宿的传递和网际互连\",{\"1\":{\"317\":1}}],[\"负值对该属性无效\",{\"1\":{\"332\":1}}],[\"负值\",{\"1\":{\"59\":3,\"82\":2}}],[\"负边距\",{\"1\":{\"56\":1}}],[\"正是因为\",{\"1\":{\"1652\":1,\"1709\":1}}],[\"正是因为它没有\",{\"1\":{\"1375\":1,\"1589\":1}}],[\"正在执行期间\",{\"1\":{\"1542\":1}}],[\"正在等待执行\",{\"1\":{\"1541\":1}}],[\"正在等待客户端的确认包\",{\"1\":{\"303\":1}}],[\"正在排队等待执行\",{\"1\":{\"1540\":1}}],[\"正如排队过安检一样\",{\"1\":{\"1262\":1}}],[\"正弦\",{\"1\":{\"1218\":1}}],[\"正数是用原码\",{\"1\":{\"1160\":1}}],[\"正式引入\",{\"1\":{\"938\":1}}],[\"正式规范为\",{\"1\":{\"309\":1}}],[\"正则字面量\",{\"1\":{\"1080\":1}}],[\"正则对象\",{\"1\":{\"917\":1}}],[\"正则表达式直接量\",{\"1\":{\"245\":1}}],[\"正则表达式和标识符中\",{\"1\":{\"239\":1}}],[\"正无穷\",{\"1\":{\"898\":1}}],[\"正确的代码应该是\",{\"1\":{\"1681\":1}}],[\"正确的写法\",{\"1\":{\"1218\":1}}],[\"正确返回字符串长度的函数可以像下面这样写\",{\"1\":{\"1184\":1}}],[\"正确\",{\"1\":{\"619\":1,\"1227\":3}}],[\"正常情况下\",{\"1\":{\"1346\":1}}],[\"正常使用\",{\"1\":{\"914\":1}}],[\"正常文字宽度\",{\"1\":{\"77\":1}}],[\"正常的字体\",{\"1\":{\"75\":1,\"76\":1}}],[\"正常流宽度\",{\"0\":{\"50\":1}}],[\"正值\",{\"1\":{\"59\":3,\"82\":2}}],[\"第\",{\"1\":{\"928\":1,\"1538\":1,\"1540\":1,\"1542\":1}}],[\"第五版在定义只有内部才能使用的特性\",{\"1\":{\"527\":1}}],[\"第一步\",{\"1\":{\"1572\":1}}],[\"第一步是创建超类型原型的一个副本\",{\"1\":{\"659\":1}}],[\"第一行的方法调用语法非常清晰地表明这个函数执行的载体是\",{\"1\":{\"1517\":1}}],[\"第一种事函数在第一次调用时\",{\"1\":{\"1468\":1}}],[\"第一种写法是一个表达式后跟随一个句点和标识符\",{\"1\":{\"1087\":1}}],[\"第一次我们遍历这些方法找到最合适的那个\",{\"1\":{\"1466\":1}}],[\"第一次是在创建子类型原型的时候\",{\"1\":{\"663\":1}}],[\"第一次调用该函数时会\",{\"1\":{\"1467\":1}}],[\"第一次调用函数\",{\"1\":{\"1445\":1}}],[\"第一次调用\",{\"1\":{\"662\":1,\"1465\":1}}],[\"第一次执行回调函数时\",{\"1\":{\"352\":1}}],[\"第一次挥手是服务端确认客户端需要断开连接\",{\"1\":{\"304\":1}}],[\"第一次挥手\",{\"1\":{\"304\":1}}],[\"第一次握手\",{\"1\":{\"301\":1}}],[\"第一层意思\",{\"1\":{\"229\":1}}],[\"第一组三位\",{\"1\":{\"208\":1}}],[\"第一位必须是\",{\"1\":{\"923\":1}}],[\"第一位\",{\"1\":{\"208\":1,\"1160\":1}}],[\"第一个\",{\"1\":{\"1533\":1,\"1542\":1}}],[\"第一个操作数\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"第一个操作数当成布尔值\",{\"1\":{\"1197\":1}}],[\"第一个是\",{\"1\":{\"1091\":1}}],[\"第一个元素的索引为\",{\"1\":{\"927\":1}}],[\"第一个元素是将用作属性键的值\",{\"1\":{\"711\":1}}],[\"第一个实例对象\",{\"1\":{\"662\":1}}],[\"第一个参数为对象obj\",{\"1\":{\"392\":1,\"393\":1}}],[\"第一个分号不能省略\",{\"1\":{\"252\":1}}],[\"第一个分号可以省略\",{\"1\":{\"252\":1}}],[\"第一个字符必须是一个字母\",{\"1\":{\"246\":1}}],[\"第一个阴影在最上面\",{\"1\":{\"59\":1}}],[\"第一个长度值定义元素的阴影水平偏移值\",{\"1\":{\"59\":1}}],[\"第三方模块\",{\"1\":{\"1616\":1}}],[\"第三方库的许多函数\",{\"1\":{\"1580\":1}}],[\"第三方包\",{\"1\":{\"1426\":1}}],[\"第三方代码可以看到某一个\",{\"1\":{\"893\":1}}],[\"第三方软件安装位置\",{\"1\":{\"186\":1}}],[\"第三次挥手是客户端确认服务器数据发完\",{\"1\":{\"304\":1}}],[\"第三次挥手\",{\"1\":{\"304\":1}}],[\"第三次握手可以发送数据吗\",{\"1\":{\"303\":1}}],[\"第三次握手\",{\"1\":{\"301\":1}}],[\"第三组三位\",{\"1\":{\"208\":1}}],[\"第三个长度值定义元素的\",{\"1\":{\"59\":1}}],[\"第二种写法是使用方括号\",{\"1\":{\"1087\":1}}],[\"第二步是为创建的副本添加\",{\"1\":{\"659\":1}}],[\"第二个\",{\"1\":{\"1348\":1,\"1540\":1}}],[\"第二个操作数\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"第二个逗号是逗号运算符\",{\"1\":{\"1248\":1}}],[\"第二个例子的变量没有对应的同名属性\",{\"1\":{\"1218\":1}}],[\"第二个和第三个操作数总是会计算其中之一\",{\"1\":{\"1197\":1}}],[\"第二个是\",{\"1\":{\"1091\":1}}],[\"第二个表达式指定要访问的属性的名称或代表要访问数组元素的索引\",{\"1\":{\"1087\":1}}],[\"第二个元素是与该属性键关联的值\",{\"1\":{\"711\":1}}],[\"第二个实例对象\",{\"1\":{\"662\":1}}],[\"第二个参数为数组实参\",{\"1\":{\"393\":1}}],[\"第二个长度值定义元素的阴影垂直偏移值\",{\"1\":{\"59\":1}}],[\"第二次调用\",{\"1\":{\"662\":1}}],[\"第二次挥手是客户端确认服务器接收断开请求\",{\"1\":{\"304\":1}}],[\"第二次挥手\",{\"1\":{\"304\":1}}],[\"第二次握手\",{\"1\":{\"301\":1}}],[\"第二层意思\",{\"1\":{\"229\":1}}],[\"第二组三位\",{\"1\":{\"208\":1}}],[\"第二段是正确的\",{\"1\":{\"121\":1}}],[\"第四步\",{\"1\":{\"393\":1}}],[\"第四次挥手是服务端确认客户端断开连接\",{\"1\":{\"304\":1}}],[\"第四次挥手\",{\"1\":{\"304\":1}}],[\"第四个长度值定义元素的\",{\"1\":{\"59\":1}}],[\"第四点需要特别解释一下\",{\"1\":{\"38\":1}}],[\"怪异盒模型\",{\"1\":{\"58\":1}}],[\"标志位判断\",{\"0\":{\"1161\":1}}],[\"标注示例\",{\"0\":{\"1027\":1}}],[\"标记清除的工作流程\",{\"1\":{\"1282\":1}}],[\"标记清除法\",{\"0\":{\"1282\":1},\"1\":{\"1280\":1,\"1282\":1}}],[\"标记的循环或块非常罕见\",{\"1\":{\"1023\":1}}],[\"标记的时间只能精确到1秒\",{\"1\":{\"430\":1}}],[\"标记就是在一条语句前面加个可以引用的标识符\",{\"1\":{\"1023\":1}}],[\"标记语句可以和\",{\"1\":{\"1023\":1}}],[\"标识指定对象为密封状态\",{\"1\":{\"803\":1}}],[\"标识指定对象为冻结状态\",{\"1\":{\"803\":1}}],[\"标识指定对象为不可扩展状态\",{\"1\":{\"803\":1}}],[\"标识符的查询规则\",{\"1\":{\"1670\":1}}],[\"标识符则指定需要访问的属性的名称\",{\"1\":{\"1087\":1}}],[\"标识符不再可用\",{\"1\":{\"1052\":1}}],[\"标识符仅在\",{\"1\":{\"1052\":1}}],[\"标识符必须直接出现在\",{\"1\":{\"557\":1}}],[\"标识符要符合\",{\"1\":{\"557\":1}}],[\"标识符采用驼峰大小写格式\",{\"1\":{\"246\":1}}],[\"标识符中的字母也可以包含扩展的\",{\"1\":{\"246\":1}}],[\"标识符可以是按照下列格式规则组合起来的一或多个字符\",{\"1\":{\"246\":1}}],[\"标识符\",{\"0\":{\"246\":1},\"1\":{\"246\":1,\"1027\":1,\"1673\":1,\"1676\":1}}],[\"标识\",{\"1\":{\"236\":1}}],[\"标头\",{\"1\":{\"152\":1}}],[\"标准\",{\"1\":{\"1551\":1}}],[\"标准规范的\",{\"1\":{\"1238\":1}}],[\"标准的算术运算符就是加减乘除\",{\"1\":{\"1207\":1}}],[\"标准中增加了相应的限制\",{\"1\":{\"1408\":1}}],[\"标准中认为相等的\",{\"1\":{\"1203\":1}}],[\"标准中根本没有出现\",{\"1\":{\"930\":1}}],[\"标准定义了\",{\"1\":{\"917\":1}}],[\"标准内置对象\",{\"0\":{\"749\":1}}],[\"标准脱节\",{\"1\":{\"143\":1}}],[\"标准盒模型\",{\"1\":{\"58\":1}}],[\"标签就是一次请求\",{\"1\":{\"1614\":1}}],[\"标签的代码是第一个宏任务\",{\"1\":{\"1533\":1}}],[\"标签里使用\",{\"1\":{\"1138\":1}}],[\"标签内\",{\"1\":{\"1075\":1}}],[\"标签内的\",{\"1\":{\"999\":1}}],[\"标签添加一个\",{\"1\":{\"999\":1}}],[\"标签不存在跨域限制\",{\"1\":{\"450\":1}}],[\"标签不区分大小写\",{\"1\":{\"115\":1}}],[\"标签选择器和伪元素选择器具有最低优先级\",{\"1\":{\"337\":1}}],[\"标签选择器\",{\"1\":{\"336\":1}}],[\"标签选择符和伪类对象选择符\",{\"1\":{\"17\":1}}],[\"标签选择符\",{\"1\":{\"17\":1}}],[\"标签和版本\",{\"0\":{\"170\":1}}],[\"标签\",{\"1\":{\"115\":1,\"1039\":1,\"1617\":1,\"1618\":1}}],[\"标签元素\",{\"1\":{\"50\":1}}],[\"与传统的编译语言不同的是\",{\"1\":{\"1665\":1}}],[\"与其对应的值是动态绑定关系\",{\"1\":{\"1654\":1}}],[\"与其他语言不同\",{\"1\":{\"1264\":1}}],[\"与其他语言不同的是\",{\"1\":{\"917\":1}}],[\"与其他函数没有区别\",{\"1\":{\"230\":1}}],[\"与模块1中的函数冲突了\",{\"1\":{\"1611\":1}}],[\"与它的用途有关\",{\"1\":{\"1551\":1}}],[\"与普通函数对比\",{\"0\":{\"1477\":1}}],[\"与柯里化相对应\",{\"1\":{\"1419\":1}}],[\"与匿名函数内部的\",{\"1\":{\"1407\":1}}],[\"与参数对象的对比\",{\"0\":{\"1394\":1}}],[\"与逻辑或运算符\",{\"1\":{\"1256\":1}}],[\"与数组一样\",{\"1\":{\"1218\":1}}],[\"与解构赋值结合\",{\"0\":{\"1183\":1}}],[\"与函数调用一起使用时\",{\"1\":{\"1164\":1}}],[\"与许多其他编程语言不同\",{\"1\":{\"1142\":1}}],[\"与通常对\",{\"1\":{\"1100\":1}}],[\"与语句标签相关联的标识符\",{\"1\":{\"960\":1,\"968\":1}}],[\"与常规数字进行比较\",{\"1\":{\"929\":1}}],[\"与此同时\",{\"1\":{\"659\":1}}],[\"与声明函数在逻辑上是等价的\",{\"1\":{\"592\":1}}],[\"与构造函数不同\",{\"1\":{\"575\":1}}],[\"与寄生构造函数模式类似\",{\"1\":{\"572\":1}}],[\"与属性查询相同\",{\"1\":{\"561\":1}}],[\"与英文字符同样对待\",{\"1\":{\"556\":1}}],[\"与目标ip地址\",{\"1\":{\"464\":1}}],[\"与交叉轴两端对齐\",{\"1\":{\"332\":1}}],[\"与交叉轴的中点对齐\",{\"1\":{\"332\":1}}],[\"与交叉轴的终点对齐\",{\"1\":{\"332\":1}}],[\"与交叉轴的起点对齐\",{\"1\":{\"332\":1}}],[\"与边框的交叉点\",{\"1\":{\"332\":1}}],[\"与点\",{\"1\":{\"275\":3,\"276\":3}}],[\"与之对立的是静态类型\",{\"1\":{\"229\":1}}],[\"与命令\",{\"1\":{\"195\":1}}],[\"与创建tcp连接的3次握手类似\",{\"1\":{\"156\":1}}],[\"与服务器建立了连接后\",{\"1\":{\"152\":1}}],[\"与开始标签相似\",{\"1\":{\"116\":1}}],[\"与行盒的\",{\"1\":{\"82\":2}}],[\"与\",{\"0\":{\"313\":1,\"1004\":1},\"1\":{\"58\":1,\"91\":1,\"92\":3,\"108\":1,\"126\":1,\"177\":1,\"599\":3,\"603\":2,\"604\":1,\"619\":1,\"946\":2,\"952\":1,\"969\":1,\"1020\":1,\"1068\":3,\"1197\":1,\"1203\":3,\"1260\":1,\"1483\":1,\"1670\":2,\"1693\":1}}],[\"与第一个\",{\"1\":{\"15\":1}}],[\"盒内部是一个块级上下文\",{\"1\":{\"329\":1}}],[\"盒\",{\"1\":{\"329\":2}}],[\"盒子模型的默认定义里\",{\"1\":{\"58\":1}}],[\"盒模型概念呈现的\",{\"1\":{\"329\":1}}],[\"盒模型\",{\"0\":{\"43\":1}}],[\"右到左\",{\"1\":{\"1242\":1}}],[\"右关联\",{\"1\":{\"1242\":1}}],[\"右移位赋值\",{\"1\":{\"1238\":1}}],[\"右移\",{\"0\":{\"1149\":1},\"1\":{\"1149\":1,\"1151\":1}}],[\"右操作数必须是一个对象值\",{\"1\":{\"1109\":1}}],[\"右操作数必须是\",{\"1\":{\"935\":1}}],[\"右角括号所包围\",{\"1\":{\"116\":1}}],[\"右侧\",{\"1\":{\"56\":1,\"59\":1}}],[\"右边移入\",{\"1\":{\"1151\":1}}],[\"右边是\",{\"1\":{\"653\":1}}],[\"右边丝带\",{\"0\":{\"261\":1}}],[\"右边\",{\"1\":{\"55\":1}}],[\"叠加上下文\",{\"0\":{\"56\":1}}],[\"全部报错\",{\"1\":{\"1224\":1,\"1226\":1}}],[\"全等号\",{\"1\":{\"1243\":1}}],[\"全等\",{\"1\":{\"1202\":1}}],[\"全排列\",{\"0\":{\"521\":1}}],[\"全双工数据通信允许数据同时在两个方向上传输\",{\"1\":{\"312\":1}}],[\"全双工\",{\"1\":{\"304\":1,\"313\":1}}],[\"全双工通信是两个单工通信方式的结合\",{\"1\":{\"312\":1}}],[\"全双工通信\",{\"1\":{\"298\":1}}],[\"全方大的空白\",{\"1\":{\"121\":1}}],[\"全局命名空间\",{\"0\":{\"1683\":1}}],[\"全局模式\",{\"0\":{\"1611\":1},\"1\":{\"1611\":1}}],[\"全局执行上下文的变量对象初始化是全局对象\",{\"1\":{\"1565\":1}}],[\"全局执行上下文中的变量对象就是全局对象\",{\"1\":{\"1561\":1}}],[\"全局执行上下文\",{\"0\":{\"1561\":1},\"1\":{\"1560\":1,\"1709\":1}}],[\"全局上下文只有唯一的一个\",{\"1\":{\"1557\":1}}],[\"全局环境\",{\"1\":{\"1556\":1}}],[\"全局对象有\",{\"1\":{\"1561\":1}}],[\"全局对象是由\",{\"1\":{\"1561\":1}}],[\"全局对象是作用域链的头\",{\"1\":{\"1561\":1}}],[\"全局对象就是\",{\"1\":{\"1561\":1}}],[\"全局对象\",{\"0\":{\"1748\":1,\"1749\":1},\"1\":{\"1518\":1,\"1561\":1}}],[\"全局变量的作用域遍布全局\",{\"1\":{\"1698\":1}}],[\"全局变量会自动成为全局对象的属性\",{\"1\":{\"1676\":1}}],[\"全局变量拥有全局作用域\",{\"1\":{\"1673\":1}}],[\"全局变量被污染了\",{\"1\":{\"1611\":1}}],[\"全局变量不会被当成垃圾回收\",{\"1\":{\"1285\":1}}],[\"全局变量引起的内存泄漏\",{\"1\":{\"1284\":1}}],[\"全局变量\",{\"0\":{\"1285\":1},\"1\":{\"1279\":1,\"1407\":1,\"1467\":1}}],[\"全局作用域\",{\"1\":{\"1074\":1,\"1709\":1}}],[\"全局作用域中的\",{\"1\":{\"848\":1}}],[\"全局属性\",{\"1\":{\"846\":1,\"852\":1,\"857\":1}}],[\"全局关键字\",{\"1\":{\"59\":1}}],[\"全局值\",{\"1\":{\"55\":1}}],[\"全透明\",{\"1\":{\"28\":1}}],[\"下的变量对象\",{\"1\":{\"1560\":1}}],[\"下的变量对象和\",{\"1\":{\"1560\":1}}],[\"下一次调用\",{\"1\":{\"1469\":1}}],[\"下一个是索引\",{\"1\":{\"927\":1}}],[\"下一个修订号下标为\",{\"1\":{\"509\":1}}],[\"下一个元素将会在同一行上\",{\"1\":{\"329\":1}}],[\"下次再要找那个方法的时候就不用遍历了\",{\"1\":{\"1466\":1}}],[\"下次请求资源时\",{\"1\":{\"430\":1}}],[\"下列为\",{\"1\":{\"1238\":1}}],[\"下表总结了\",{\"1\":{\"1122\":1}}],[\"下方中会对寄生继承进行详细说明\",{\"1\":{\"659\":1}}],[\"下\",{\"1\":{\"599\":1}}],[\"下面展示了标准的变量声明提升\",{\"1\":{\"1699\":1}}],[\"下面三种写法\",{\"1\":{\"1646\":1}}],[\"下面\",{\"1\":{\"1569\":1}}],[\"下面通过扩展\",{\"1\":{\"1505\":1}}],[\"下面监听窗口的\",{\"1\":{\"1436\":1}}],[\"下面写法会得到不一样的结果\",{\"1\":{\"1221\":1}}],[\"下面这样写\",{\"1\":{\"1407\":1}}],[\"下面这个声明会成功执行\",{\"1\":{\"1068\":1}}],[\"下面这些值将被计算出\",{\"1\":{\"1020\":1}}],[\"下面是使用\",{\"1\":{\"1504\":1}}],[\"下面是经典的阶乘函数\",{\"1\":{\"1385\":1}}],[\"下面是嵌套赋值的例子\",{\"1\":{\"1218\":1}}],[\"下面是另一个解构赋值默认值的例子\",{\"1\":{\"1403\":1}}],[\"下面是另一个例子\",{\"1\":{\"1218\":1,\"1221\":1,\"1375\":1}}],[\"下面是另外一些例子\",{\"1\":{\"1183\":1}}],[\"下面是一些使用嵌套数组进行结构的例子\",{\"1\":{\"1214\":1}}],[\"下面是一个更复杂的例子\",{\"1\":{\"1407\":1}}],[\"下面是一个利用函数剩余参数改写数组\",{\"1\":{\"1393\":1}}],[\"下面是一个函数剩余参数代替\",{\"1\":{\"1393\":1}}],[\"下面是一个部署管道机制\",{\"1\":{\"1376\":1}}],[\"下面是一个\",{\"1\":{\"1197\":1,\"1376\":1}}],[\"下面是一个继承\",{\"1\":{\"625\":1}}],[\"下面是三种形式的\",{\"1\":{\"1051\":1}}],[\"下面列出常见转换为\",{\"1\":{\"943\":1}}],[\"下面的写法是有效的\",{\"1\":{\"1652\":1}}],[\"下面的代码可能不会得到预期结果\",{\"1\":{\"1636\":1}}],[\"下面的代码会报错\",{\"1\":{\"1593\":1}}],[\"下面的代码创建\",{\"1\":{\"930\":1}}],[\"下面的表格描述了该示例代码中的各比较运算符\",{\"1\":{\"1200\":1}}],[\"下面的容易令人迷惑\",{\"1\":{\"1130\":1}}],[\"下面的例子演示给每一个\",{\"1\":{\"999\":1}}],[\"下面的例子中\",{\"1\":{\"46\":1}}],[\"下面两个语句都会抛出\",{\"1\":{\"540\":1}}],[\"下标从\",{\"1\":{\"509\":1}}],[\"下载完成后尽快执行\",{\"1\":{\"464\":1}}],[\"下载资源\",{\"1\":{\"464\":1}}],[\"下载文件并以指定的文件名保存文件\",{\"1\":{\"215\":1}}],[\"下划线\",{\"1\":{\"246\":2}}],[\"下侧\",{\"1\":{\"56\":1}}],[\"下边\",{\"1\":{\"55\":2}}],[\"应使用\",{\"1\":{\"678\":1}}],[\"应该销毁其执行环境\",{\"1\":{\"1709\":1}}],[\"应该是\",{\"1\":{\"1681\":1}}],[\"应该是函数的尾参数\",{\"1\":{\"1405\":1}}],[\"应该最小限度地暴露必要内容\",{\"1\":{\"1681\":1}}],[\"应该指向全局对象\",{\"1\":{\"1375\":1}}],[\"应该使用\",{\"1\":{\"329\":1}}],[\"应该避免在同一作用域中重复声明\",{\"1\":{\"1704\":1}}],[\"应该避免把它们的名字用做标识符名\",{\"1\":{\"251\":1}}],[\"应该避免使用以下保留字作为标识符\",{\"1\":{\"250\":1}}],[\"应该尽量避免\",{\"1\":{\"19\":1}}],[\"应用的用户体验\",{\"1\":{\"1621\":1}}],[\"应用配置\",{\"1\":{\"1621\":1}}],[\"应用就无法处理用户的交互\",{\"1\":{\"1534\":1}}],[\"应用实践\",{\"0\":{\"1434\":1,\"1448\":1}}],[\"应用\",{\"0\":{\"1177\":1,\"1436\":1},\"1\":{\"1621\":1}}],[\"应用场景总结\",{\"0\":{\"1590\":1}}],[\"应用场景\",{\"0\":{\"585\":1,\"1372\":1,\"1437\":1,\"1447\":1,\"1710\":1}}],[\"应用程序开发的状态管理模式\",{\"1\":{\"412\":1}}],[\"应用协议数据单元\",{\"1\":{\"317\":1}}],[\"应用进程利用该服务传送应用层报文\",{\"1\":{\"297\":1,\"318\":1}}],[\"应用层协议定义的是应用进程\",{\"1\":{\"318\":1}}],[\"应用层\",{\"1\":{\"152\":1,\"317\":1,\"318\":1}}],[\"应用于所有边\",{\"1\":{\"55\":1}}],[\"上层作用域或全局作用域\",{\"1\":{\"1670\":1}}],[\"上文介绍了函数调用中\",{\"1\":{\"1582\":1}}],[\"上文说了\",{\"1\":{\"1543\":1}}],[\"上调用\",{\"1\":{\"1580\":1}}],[\"上下文\",{\"1\":{\"1580\":1}}],[\"上下文来引用函数\",{\"1\":{\"1579\":1}}],[\"上下左右\",{\"1\":{\"55\":1}}],[\"上次执行时间\",{\"1\":{\"1433\":1}}],[\"上次修改时间\",{\"1\":{\"430\":1}}],[\"上被删除了\",{\"1\":{\"1286\":1}}],[\"上有效\",{\"1\":{\"1109\":1}}],[\"上创建一个迭代循环\",{\"1\":{\"989\":1}}],[\"上原型\",{\"1\":{\"936\":1}}],[\"上执行父类构造函数\",{\"1\":{\"635\":1}}],[\"上面三种写法都会报错\",{\"1\":{\"1634\":1}}],[\"上面最后一个函数\",{\"1\":{\"1406\":1}}],[\"上面最后一个表达式之所以会报错\",{\"1\":{\"1217\":1}}],[\"上面这个函数的执行与函数名紧紧耦合在了一起\",{\"1\":{\"1385\":1}}],[\"上面这个函数\",{\"1\":{\"1376\":1}}],[\"上面这段的遍历是\",{\"1\":{\"1357\":1}}],[\"上面两种写法都对函数的参数设定了默认值\",{\"1\":{\"1404\":1}}],[\"上面两种写法\",{\"1\":{\"1354\":1}}],[\"上面\",{\"1\":{\"1224\":1}}],[\"上面代码加载了两次\",{\"1\":{\"1635\":1}}],[\"上面代码只使用了对象的解构赋值默认值\",{\"1\":{\"1403\":1}}],[\"上面代码的\",{\"1\":{\"1393\":1}}],[\"上面代码的写法会报错\",{\"1\":{\"1218\":1}}],[\"上面代码的第一个例子中\",{\"1\":{\"1218\":1}}],[\"上面代码表示\",{\"1\":{\"1213\":1}}],[\"上面代码中的\",{\"1\":{\"1658\":1}}],[\"上面代码中\",{\"1\":{\"612\":1,\"613\":1,\"622\":1,\"1197\":1,\"1345\":1,\"1375\":2,\"1403\":2,\"1406\":1,\"1407\":6,\"1595\":1,\"1596\":1,\"1597\":1,\"1599\":1,\"1635\":1}}],[\"上面的语句就是动态加载\",{\"1\":{\"1593\":1}}],[\"上面的表达式虽然毫无意义\",{\"1\":{\"1218\":1}}],[\"上面的代码表示\",{\"1\":{\"1658\":1}}],[\"上面的代码不会报错\",{\"1\":{\"1633\":1}}],[\"上面的代码可以看出我们平常使用的\",{\"1\":{\"1616\":1}}],[\"上面的代码可以快速提取\",{\"1\":{\"1232\":1}}],[\"上面的代码也可以使用\",{\"1\":{\"1601\":1}}],[\"上面的代码交换变量\",{\"1\":{\"1229\":1}}],[\"上面的代码是为函数\",{\"1\":{\"1221\":1}}],[\"上面的代码对数组进行对象解构\",{\"1\":{\"1218\":1}}],[\"上面的代码将一部分模式放在圆括号之中\",{\"1\":{\"1226\":2}}],[\"上面的代码将\",{\"1\":{\"1218\":1}}],[\"上面的代码将整个解构赋值语句放在一个圆括号里面\",{\"1\":{\"1218\":1}}],[\"上面的代码有三次解构赋值\",{\"1\":{\"1218\":1}}],[\"上面的代码其实等价于下面的代码\",{\"1\":{\"1217\":1}}],[\"上面的代码中只有一个\",{\"1\":{\"1375\":1}}],[\"上面的代码中\",{\"1\":{\"1184\":1,\"1185\":2,\"1186\":1,\"1217\":2,\"1218\":3,\"1220\":1,\"1221\":2,\"1375\":3}}],[\"上面的代码从数据库取出一行数据\",{\"1\":{\"1179\":1}}],[\"上面的写法有一个重要的好处\",{\"1\":{\"1184\":1}}],[\"上面的例子说明\",{\"1\":{\"625\":1}}],[\"上面例子表达的就是\",{\"1\":{\"924\":1}}],[\"上面创建不必要的\",{\"1\":{\"659\":1}}],[\"上述例子中\",{\"1\":{\"1627\":1}}],[\"上述代码执行效果等同于\",{\"1\":{\"1700\":1}}],[\"上述代码调用回调函数的时候是在全局环境下\",{\"1\":{\"1457\":1}}],[\"上述代码中\",{\"1\":{\"625\":1}}],[\"上述行为将发生变化\",{\"1\":{\"1069\":1}}],[\"上述实现等价于\",{\"1\":{\"624\":1}}],[\"上述示例的头部非常简短\",{\"1\":{\"126\":1}}],[\"上一次的计算结果\",{\"1\":{\"352\":1}}],[\"上所传送的数据单位是比特\",{\"1\":{\"318\":1}}],[\"上\",{\"1\":{\"153\":1,\"332\":1,\"603\":2,\"628\":1,\"1579\":2,\"1584\":1}}],[\"上的属性会在挂载到实例对象上\",{\"1\":{\"603\":1}}],[\"上的\",{\"1\":{\"153\":1}}],[\"上常用的\",{\"1\":{\"153\":1}}],[\"上发表博客\",{\"1\":{\"143\":1}}],[\"上边\",{\"1\":{\"55\":2}}],[\"上边下边\",{\"1\":{\"55\":1}}],[\"上使用\",{\"1\":{\"19\":1}}],[\"问题解决\",{\"0\":{\"1719\":1}}],[\"问题\",{\"1\":{\"1611\":1,\"1612\":1,\"1613\":1}}],[\"问题在于\",{\"1\":{\"1587\":1}}],[\"问题就比较突出了\",{\"1\":{\"581\":1}}],[\"问题说明\",{\"1\":{\"46\":1}}],[\"问一些关于页面内容的问题\",{\"1\":{\"129\":1}}],[\"问号以及其他非英文字符等\",{\"1\":{\"54\":1}}],[\"西方最小宽度由特定的连续的英文字符单元决定\",{\"1\":{\"54\":1}}],[\"东亚文字最小宽度为每个汉字的宽度\",{\"1\":{\"54\":1}}],[\"9+\",{\"1\":{\"1550\":1}}],[\"96\",{\"1\":{\"881\":1,\"887\":1}}],[\"960\",{\"1\":{\"51\":1}}],[\"9\",{\"0\":{\"156\":1,\"349\":1,\"524\":1},\"1\":{\"222\":1,\"349\":1,\"365\":1,\"374\":4,\"479\":2,\"497\":2,\"503\":4,\"515\":2,\"672\":2,\"701\":3,\"880\":1,\"923\":1,\"1092\":1,\"1142\":1,\"1150\":2,\"1158\":1,\"1191\":2,\"1193\":1,\"1207\":1,\"1208\":1,\"1243\":1,\"1312\":2,\"1691\":2}}],[\"9007199254740996\",{\"1\":{\"929\":1}}],[\"9007199254740995\",{\"1\":{\"929\":2}}],[\"9007199254740995n\",{\"1\":{\"929\":6}}],[\"900\",{\"1\":{\"75\":1}}],[\"99999\",{\"1\":{\"1012\":1}}],[\"9999999999999999\",{\"1\":{\"1128\":1}}],[\"9999999999999999n\",{\"1\":{\"1128\":1}}],[\"99999999999997\",{\"1\":{\"924\":1}}],[\"99999999999n\",{\"1\":{\"929\":1,\"1115\":1}}],[\"99\",{\"1\":{\"18\":3,\"694\":2,\"914\":1,\"1402\":1}}],[\"示例分析\",{\"0\":{\"1572\":1}}],[\"示例中首先有一个\",{\"1\":{\"1538\":1}}],[\"示例二\",{\"1\":{\"1406\":1,\"1418\":1}}],[\"示例一\",{\"1\":{\"1406\":1,\"1418\":1}}],[\"示例3\",{\"1\":{\"491\":1}}],[\"示例2\",{\"1\":{\"470\":1,\"473\":2,\"491\":1,\"497\":1}}],[\"示例1\",{\"1\":{\"470\":2,\"473\":2,\"479\":2,\"491\":1,\"497\":1}}],[\"示例如下\",{\"1\":{\"118\":1}}],[\"示例\",{\"0\":{\"694\":1,\"807\":1,\"849\":1,\"854\":1,\"860\":1,\"870\":1,\"875\":1,\"881\":1,\"887\":1,\"894\":1,\"899\":1,\"905\":1,\"910\":1,\"914\":1,\"961\":1,\"970\":1,\"977\":1,\"984\":1,\"992\":1,\"1020\":1,\"1026\":1,\"1042\":1,\"1047\":1,\"1060\":1,\"1102\":1,\"1108\":1,\"1123\":1,\"1166\":1,\"1303\":1,\"1307\":1,\"1312\":1,\"1319\":1,\"1323\":1},\"1\":{\"51\":1,\"55\":1,\"59\":1,\"102\":1,\"110\":1,\"187\":1,\"212\":1,\"215\":1,\"408\":1,\"467\":3,\"470\":2,\"473\":1,\"476\":3,\"479\":2,\"482\":2,\"485\":2,\"488\":2,\"491\":3,\"494\":2,\"497\":2,\"500\":3,\"503\":2,\"506\":3,\"509\":3,\"512\":3,\"515\":3,\"518\":2,\"524\":3,\"622\":1,\"635\":1,\"640\":1,\"659\":1,\"662\":1,\"1052\":1,\"1087\":1,\"1207\":1,\"1253\":1,\"1411\":1,\"1466\":1}}],[\"宽度由内部尺寸决定\",{\"1\":{\"51\":1}}],[\"宽高自适应\",{\"0\":{\"48\":1}}],[\"宽高\",{\"1\":{\"45\":1}}],[\"因而就可以将其所占的内存空间给收回来\",{\"1\":{\"1281\":1}}],[\"因此直接用\",{\"1\":{\"1695\":1}}],[\"因此引擎使用了这个引用\",{\"1\":{\"1675\":1}}],[\"因此函数的作用域在函数定义的时候就决定了\",{\"1\":{\"1673\":1}}],[\"因此函数也可以作为参数传递给另外一个函数\",{\"1\":{\"1452\":1}}],[\"因此函数也有该属性\",{\"1\":{\"648\":1}}],[\"因此没有其他系统会来调取前端系统的服务\",{\"1\":{\"1621\":1}}],[\"因此无法通过\",{\"1\":{\"1584\":1}}],[\"因此强制把\",{\"1\":{\"1580\":1}}],[\"因此就没有办法控制调用位置以得到期望的绑定\",{\"1\":{\"1579\":1}}],[\"因此应用了默认绑定\",{\"1\":{\"1579\":1}}],[\"因此此时的\",{\"1\":{\"1579\":1}}],[\"因此你可以说函数被调用时\",{\"1\":{\"1579\":1}}],[\"因此一定要注意这类兼容性细节\",{\"1\":{\"1578\":1}}],[\"因此只能使用默认绑定\",{\"1\":{\"1578\":1}}],[\"因此只要具有\",{\"1\":{\"1186\":2}}],[\"因此只要\",{\"1\":{\"577\":1}}],[\"因此第二个参数仅仅表示最少延迟时间\",{\"1\":{\"1543\":1}}],[\"因此实际上\",{\"1\":{\"1534\":1}}],[\"因此执行y后\",{\"1\":{\"1407\":1}}],[\"因此输出\",{\"1\":{\"1407\":1}}],[\"因此这个局部变量的变化会反映在函数的外部\",{\"1\":{\"1389\":1}}],[\"因此箭头函数不能用作\",{\"1\":{\"1374\":1}}],[\"因此需要对这些操作进行优化\",{\"1\":{\"1353\":1}}],[\"因此需要一个结束标记\",{\"1\":{\"131\":1}}],[\"因此内存泄漏会导致内部内存溢出\",{\"1\":{\"1284\":1}}],[\"因此垃圾收集器很容易做出判断并回收\",{\"1\":{\"1279\":1}}],[\"因此当词法分析器处理代码时会保持作用域不变\",{\"1\":{\"1674\":1}}],[\"因此当我们要访问堆内存中的引用数据类型时\",{\"1\":{\"1264\":1}}],[\"因此当迭代访问顺序很重要的数组时\",{\"1\":{\"983\":1}}],[\"因此基础数据类型都是按值访问\",{\"1\":{\"1263\":1}}],[\"因此不能使用圆括号\",{\"1\":{\"1225\":1}}],[\"因此不会被赋值\",{\"1\":{\"1218\":1}}],[\"因此建议凡是输入的变量\",{\"1\":{\"1631\":1}}],[\"因此建议\",{\"1\":{\"1222\":1}}],[\"因此变量\",{\"1\":{\"1220\":1}}],[\"因此还可以对这个属性进行解构赋值\",{\"1\":{\"1219\":1}}],[\"因此它们都指向堆内存中同一个对象\",{\"1\":{\"1204\":1}}],[\"因此它将永远不会具有超出它被标记为不可扩展的\",{\"1\":{\"812\":1}}],[\"因此会去上一级到所嵌套的\",{\"1\":{\"1675\":1}}],[\"因此会报句法错误\",{\"1\":{\"1593\":1}}],[\"因此会先自增\",{\"1\":{\"1194\":1}}],[\"因此会强制浏览器重新执行所有已经生成的机器代码以进行补偿\",{\"1\":{\"893\":1}}],[\"因此也可以使用扩展运算符\",{\"1\":{\"1186\":1}}],[\"因此也有\",{\"1\":{\"551\":1}}],[\"因此数组类型的隐式类型转换结果是字符串\",{\"1\":{\"946\":1}}],[\"因此相同参数的symbol函数的返回值是不相等的\",{\"1\":{\"928\":1}}],[\"因此通过\",{\"1\":{\"983\":1}}],[\"因此通过使用\",{\"1\":{\"635\":1}}],[\"因此通常在计算结束时测试\",{\"1\":{\"859\":1}}],[\"因此可得所有构造器的\",{\"1\":{\"653\":1}}],[\"因此可以不直接使用全局对象的词法名称\",{\"1\":{\"1676\":1}}],[\"因此可以用新的函数来覆盖旧的函数\",{\"1\":{\"1467\":1}}],[\"因此可以对数组进行对象属性的解构\",{\"1\":{\"1218\":1}}],[\"因此可以在原生数据结构的基础上\",{\"1\":{\"625\":1}}],[\"因此可以随时添加方法\",{\"1\":{\"580\":1}}],[\"因此可以通过对象实例访问\",{\"1\":{\"576\":1}}],[\"因此可以写成\",{\"1\":{\"556\":1}}],[\"因此可以采用整齐\",{\"1\":{\"236\":1}}],[\"因此同时存在两条继承链\",{\"1\":{\"624\":1}}],[\"因此达到了私有方法和私有属性的效果\",{\"1\":{\"613\":1}}],[\"因此每定义一个函数\",{\"1\":{\"592\":1}}],[\"因此每个方向都必须单独进行关闭\",{\"1\":{\"304\":1}}],[\"因此我们称之为硬绑定\",{\"1\":{\"1580\":1}}],[\"因此我们传入函数时也会被隐式赋值\",{\"1\":{\"1579\":1}}],[\"因此我们期望在第\",{\"1\":{\"1541\":1}}],[\"因此我们不能直接操作对象的堆内存空间\",{\"1\":{\"1264\":1}}],[\"因此我们可以在函数内部再创建一个函数\",{\"1\":{\"1708\":1}}],[\"因此我们可以简单粗暴的理解为\",{\"1\":{\"1260\":1}}],[\"因此我们可以把对象看成是从字符串到值的映射\",{\"1\":{\"544\":1,\"799\":1}}],[\"因此我们对原型对象所做的任何修改都能够立即从实例上反映出来\",{\"1\":{\"579\":1}}],[\"因此程序无法修改它们\",{\"1\":{\"557\":1}}],[\"因此在概念上最好将其理解\",{\"1\":{\"1670\":1}}],[\"因此在一个\",{\"1\":{\"1556\":1}}],[\"因此在\",{\"1\":{\"527\":1,\"1033\":1}}],[\"因此分组也叫\",{\"1\":{\"318\":1}}],[\"因此网络出现拥塞不会使源主机的发送速率降低\",{\"1\":{\"310\":1}}],[\"因此主机不需要维持复杂的链接状态\",{\"1\":{\"310\":1}}],[\"因此\",{\"1\":{\"229\":1,\"304\":1,\"312\":1,\"497\":2,\"572\":1,\"592\":1,\"607\":1,\"620\":1,\"621\":1,\"632\":1,\"678\":1,\"893\":1,\"936\":1,\"1065\":1,\"1074\":1,\"1132\":1,\"1184\":2,\"1197\":1,\"1218\":1,\"1264\":1,\"1406\":1,\"1457\":1,\"1542\":1,\"1576\":3,\"1578\":2,\"1579\":1,\"1593\":2,\"1599\":1,\"1616\":1,\"1670\":1,\"1684\":1,\"1698\":1}}],[\"因此设置\",{\"1\":{\"50\":1}}],[\"因为闭包对脚本性能具有负面影响\",{\"1\":{\"1711\":1}}],[\"因为闭包会导致内存泄漏\",{\"1\":{\"1284\":1}}],[\"因为会导致一些额外的问题\",{\"1\":{\"1684\":1}}],[\"因为可能会暴露过多的变量或函数\",{\"1\":{\"1681\":1}}],[\"因为均会输出\",{\"1\":{\"1654\":1}}],[\"因为上游依托下游\",{\"1\":{\"1621\":1}}],[\"因为我暴露的\",{\"1\":{\"1613\":1}}],[\"因为我们实际上不关心当前的值时什么\",{\"1\":{\"1670\":1}}],[\"因为我们是取到\",{\"1\":{\"1670\":1}}],[\"因为我们知道网络传输是有延时的\",{\"1\":{\"303\":1}}],[\"因为我们用字符引用来代替了角括号\",{\"1\":{\"121\":1}}],[\"因为调用\",{\"1\":{\"1579\":1}}],[\"因为全局对象是作用域链的头\",{\"1\":{\"1561\":1}}],[\"因为不同执行上下文中的变量对象稍有不同\",{\"1\":{\"1560\":1}}],[\"因为队列中已经有\",{\"1\":{\"1541\":1}}],[\"因为函数调用模式的函数中的\",{\"1\":{\"1511\":1}}],[\"因为当在滚动的时候\",{\"1\":{\"1438\":1}}],[\"因为当输入catch\",{\"1\":{\"1052\":1}}],[\"因为其参数是由包含零个或多个值的数组来表示的\",{\"1\":{\"1390\":1}}],[\"因为所有的内层函数都是箭头函数\",{\"1\":{\"1375\":1}}],[\"因为此时上一个\",{\"1\":{\"1542\":1}}],[\"因为此时已经\",{\"1\":{\"1540\":1}}],[\"因为此时\",{\"1\":{\"1375\":1}}],[\"因为箭头函数内部的\",{\"1\":{\"1375\":1}}],[\"因为控制台要始终保持他们的引用\",{\"1\":{\"1289\":1}}],[\"因为判断是否可回收的依据是变量是否可达\",{\"1\":{\"1282\":1}}],[\"因为只要执行流进入相应的执行上下文\",{\"1\":{\"1282\":1}}],[\"因为要知道是否仍然需要某块内存是无法判定的\",{\"1\":{\"1276\":1}}],[\"因为字符串是不可变量\",{\"1\":{\"1274\":1}}],[\"因为顺序的不同并不影响我们的使用\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"因为前置操作需要做的工作更少\",{\"1\":{\"1194\":1}}],[\"因为符号位变成了\",{\"1\":{\"1150\":1}}],[\"因为在本例中\",{\"1\":{\"1578\":1}}],[\"因为在快速查阅代码时容易看成等值比较\",{\"1\":{\"1020\":1}}],[\"因为在早期\",{\"1\":{\"143\":1}}],[\"因为将这些属性添加到\",{\"1\":{\"1004\":1}}],[\"因为迭代的顺序是依赖于执行环境的\",{\"1\":{\"983\":1}}],[\"因为允许变量类型的\",{\"1\":{\"941\":1}}],[\"因为有数字超过了7\",{\"1\":{\"923\":1}}],[\"因为模块内部的所有方法都是对外可见的\",{\"1\":{\"614\":1}}],[\"因为找不到相对应的方法而导致报错\",{\"1\":{\"607\":1}}],[\"因为定义在\",{\"1\":{\"603\":2}}],[\"因为构造函数本身也是函数\",{\"1\":{\"590\":1}}],[\"因为中文相当于字符\",{\"1\":{\"556\":1}}],[\"因为密封对象的所有自身属性必须是不可配置的\",{\"1\":{\"539\":1}}],[\"因为卖出价格需要大于买入价格\",{\"1\":{\"485\":1}}],[\"因为无重复字符的最长子串是\",{\"1\":{\"467\":3}}],[\"因为js是单线程\",{\"1\":{\"457\":1}}],[\"因为线程共享进程的地址空间\",{\"1\":{\"423\":1}}],[\"因为需要保存和恢复进程的完整状态\",{\"1\":{\"422\":1}}],[\"因为需要在满足某个条件后\",{\"1\":{\"289\":1}}],[\"因为基本数据类型不具有属性和方法\",{\"1\":{\"408\":1}}],[\"因为proxy是es6新增的属性\",{\"1\":{\"401\":1}}],[\"因为没有迭代器对象\",{\"1\":{\"388\":1}}],[\"因为伪造\",{\"1\":{\"303\":1}}],[\"因为能够发出第三次握手报文的主机\",{\"1\":{\"303\":1}}],[\"因为三次握手还没完成\",{\"1\":{\"303\":1}}],[\"因为终端间隔了非常远的距离\",{\"1\":{\"303\":1}}],[\"因为加上分号可以避免很多错误\",{\"1\":{\"253\":1}}],[\"因为标准化的代码结构和样式规范使得代码更加清晰\",{\"1\":{\"139\":1}}],[\"因为它的本质是输入接口\",{\"1\":{\"1631\":1}}],[\"因为它决定了\",{\"1\":{\"1576\":1}}],[\"因为它只能在该函数内部访问\",{\"1\":{\"1069\":1}}],[\"因为它只有一个块\",{\"1\":{\"1067\":1}}],[\"因为它可被当前文档中的任何其他代码所访问\",{\"1\":{\"1069\":1}}],[\"因为它必须调用\",{\"1\":{\"893\":1}}],[\"因为它会阻塞渲染\",{\"1\":{\"438\":1}}],[\"因为它们可能被有意或无意地以非预期的方式使用\",{\"1\":{\"1681\":1}}],[\"因为它们用到了表达式\",{\"1\":{\"1634\":1}}],[\"因为它们都是变量声明语句\",{\"1\":{\"1224\":1}}],[\"因为它们所包含的成员或者元素都是子表达式\",{\"1\":{\"1083\":1}}],[\"因为它们不像你想象的\",{\"1\":{\"1075\":1}}],[\"因为它们是继承的\",{\"1\":{\"1004\":1}}],[\"因为它们是自身的属性\",{\"1\":{\"1004\":1}}],[\"因为它们是不可变的\",{\"1\":{\"408\":1}}],[\"因为它们的类型不同\",{\"1\":{\"929\":1}}],[\"因为它们分别引用了不同的数组\",{\"1\":{\"569\":1}}],[\"因为它们下标为\",{\"1\":{\"509\":1}}],[\"因为它们共享相同的地址空间\",{\"1\":{\"423\":1}}],[\"因为它有可能使你的页面在搜索引擎进行的相关搜索中出现得更多\",{\"1\":{\"129\":1}}],[\"因为它既是第一行也是最后一行\",{\"1\":{\"81\":1}}],[\"因为浏览器会认为第二个\",{\"1\":{\"121\":1}}],[\"因为这样做仅仅改变了\",{\"1\":{\"1616\":1}}],[\"因为这样比较容易看出来\",{\"1\":{\"1405\":1}}],[\"因为这样解析器就不必再花时间推测应该在哪里插入分号了\",{\"1\":{\"253\":1}}],[\"因为这两个值都不能包含任意属性\",{\"1\":{\"1087\":1}}],[\"因为这是一个新的作用域\",{\"1\":{\"1076\":1}}],[\"因为这些不是枚举属性\",{\"1\":{\"1004\":1}}],[\"因为这也意味着重置\",{\"1\":{\"529\":1}}],[\"因为这个属性影响文本布局\",{\"1\":{\"85\":1}}],[\"因为这破坏了样式表中的固有的级联规则\",{\"1\":{\"19\":1}}],[\"因为\",{\"1\":{\"81\":1,\"500\":1,\"515\":1,\"625\":1,\"647\":1,\"899\":1,\"904\":1,\"1054\":1,\"1069\":1,\"1160\":1,\"1217\":2,\"1218\":2,\"1549\":1,\"1593\":1,\"1633\":1,\"1636\":1,\"1673\":1,\"1685\":1}}],[\"尺寸也分\",{\"1\":{\"48\":1}}],[\"内存管理\",{\"0\":{\"1754\":1}}],[\"内存管理通过断开引用来间接完成的\",{\"1\":{\"1100\":1}}],[\"内存\",{\"1\":{\"1670\":1}}],[\"内存泄漏发生在节点从\",{\"1\":{\"1286\":1}}],[\"内存泄漏过多的话\",{\"1\":{\"1284\":1}}],[\"内存泄漏\",{\"0\":{\"1284\":1},\"1\":{\"1284\":2}}],[\"内存的分配以及内存的回收完全实现了自动管理\",{\"1\":{\"1279\":1}}],[\"内存回收\",{\"0\":{\"1276\":1},\"1\":{\"1271\":1}}],[\"内存使用\",{\"1\":{\"1271\":1}}],[\"内存分配\",{\"0\":{\"1272\":1},\"1\":{\"1271\":1}}],[\"内存生命周期\",{\"0\":{\"1271\":1}}],[\"内存空间分为\",{\"1\":{\"1259\":1}}],[\"内存模型\",{\"0\":{\"1259\":1},\"1\":{\"1100\":1}}],[\"内存会很容易耗尽\",{\"1\":{\"303\":1}}],[\"内留空即表示该数组没有任何元素\",{\"1\":{\"1091\":1}}],[\"内层作用域声明的函数不干扰外层作用域的函数\",{\"1\":{\"1074\":1}}],[\"内层变量可能会覆盖外层变量\",{\"1\":{\"1074\":1}}],[\"内通过\",{\"1\":{\"635\":1}}],[\"内联样式具有第二高的优先级\",{\"1\":{\"337\":1}}],[\"内联样式表\",{\"1\":{\"18\":1}}],[\"内联样式表和外链样式表\",{\"1\":{\"18\":1}}],[\"内\",{\"1\":{\"275\":1}}],[\"内置模块\",{\"1\":{\"1616\":1}}],[\"内置函数\",{\"1\":{\"1580\":1}}],[\"内置执行器\",{\"1\":{\"1338\":1}}],[\"内置的\",{\"1\":{\"946\":1}}],[\"内置的函数和对象命名格式保持一致\",{\"1\":{\"246\":1}}],[\"内置对象\",{\"0\":{\"1746\":1},\"1\":{\"625\":1,\"653\":1,\"1109\":1}}],[\"内置对象的继承\",{\"0\":{\"625\":1}}],[\"内置于\",{\"1\":{\"143\":1}}],[\"内码\",{\"1\":{\"239\":1}}],[\"内核引擎\",{\"0\":{\"1550\":1}}],[\"内核版本号\",{\"1\":{\"215\":1}}],[\"内核相关信息\",{\"1\":{\"186\":1}}],[\"内核被称为公认的浏览网页速度最快的内核\",{\"1\":{\"143\":1}}],[\"内核的大量\",{\"1\":{\"143\":1}}],[\"内核和\",{\"1\":{\"143\":1}}],[\"内核\",{\"1\":{\"143\":2,\"436\":6}}],[\"内边距盒子\",{\"1\":{\"106\":1}}],[\"内部函数执行所需的参数\",{\"1\":{\"1710\":1}}],[\"内部作用域的闭包\",{\"1\":{\"1708\":1}}],[\"内部具体实现的私有内容\",{\"1\":{\"1681\":1}}],[\"内部代码实现\",{\"1\":{\"1616\":1}}],[\"内部依赖关系混乱也就难以维护啦\",{\"1\":{\"1614\":1}}],[\"内部私有的函数\",{\"1\":{\"1613\":1,\"1614\":1}}],[\"内部调用\",{\"1\":{\"1613\":1,\"1614\":1}}],[\"内部创建的箭头函数会捕获调用时\",{\"1\":{\"1589\":1}}],[\"内部使用的\",{\"1\":{\"1474\":1}}],[\"内部再返回调用下一个单参数\",{\"1\":{\"1416\":1}}],[\"内部变量\",{\"1\":{\"1407\":1}}],[\"内部又声明了一个内部变量\",{\"1\":{\"1407\":1}}],[\"内部有三个延迟函数\",{\"1\":{\"1345\":1}}],[\"内部采用补码形式表示负数\",{\"1\":{\"1147\":1}}],[\"内部的标识符遮蔽了外部的标识符\",{\"1\":{\"1676\":1}}],[\"内部的\",{\"1\":{\"621\":1,\"1375\":1}}],[\"内部属性\",{\"0\":{\"1384\":1},\"1\":{\"576\":1}}],[\"内部对象的属性是依旧可以改变的\",{\"1\":{\"540\":1}}],[\"内部\",{\"1\":{\"329\":2,\"745\":1,\"828\":1,\"1142\":1,\"1681\":1}}],[\"内部表现\",{\"1\":{\"329\":1}}],[\"内部类型设置子元素的布局\",{\"1\":{\"329\":1}}],[\"内部是否换行由换行规则决定\",{\"1\":{\"92\":1}}],[\"内部元素宽度设为\",{\"1\":{\"54\":1}}],[\"内部尺寸指元素的尺寸由内部的元素决定\",{\"1\":{\"52\":1}}],[\"内部尺寸与流体特性\",{\"0\":{\"52\":1}}],[\"内部尺寸\",{\"1\":{\"48\":1}}],[\"内容创建者以及网络服务提供商\",{\"1\":{\"139\":1}}],[\"内容划分元素\",{\"0\":{\"136\":1}}],[\"内容\",{\"1\":{\"116\":2,\"131\":1}}],[\"内容盒子下面\",{\"1\":{\"106\":1}}],[\"内容将在边界内换行\",{\"1\":{\"90\":1}}],[\"内容对齐结束边界\",{\"1\":{\"81\":1}}],[\"内容对齐开始边界\",{\"1\":{\"81\":1}}],[\"内容两端对齐\",{\"1\":{\"81\":1}}],[\"内容右对齐\",{\"1\":{\"81\":1}}],[\"内容居中对齐\",{\"1\":{\"81\":1}}],[\"内容左对齐\",{\"1\":{\"81\":1}}],[\"内容区域自动分配水平空间的机制\",{\"1\":{\"50\":1}}],[\"内容很长的连续的英文和数字\",{\"1\":{\"48\":1}}],[\"绝对地址\",{\"1\":{\"100\":1}}],[\"绝对定位元素的宽度表现是\",{\"1\":{\"51\":1}}],[\"绝对定位模型\",{\"1\":{\"51\":1}}],[\"绝对定位\",{\"1\":{\"48\":1}}],[\"绝对长度单位\",{\"0\":{\"25\":1},\"1\":{\"23\":1}}],[\"例如点击或滚动\",{\"1\":{\"1534\":1}}],[\"例如通过\",{\"1\":{\"1002\":1}}],[\"例如通过触发事件或调用回调函数来通知更改\",{\"1\":{\"408\":1}}],[\"例如任何正值乘以\",{\"1\":{\"853\":1}}],[\"例如gzip压缩\",{\"1\":{\"464\":1}}],[\"例如替换元素\",{\"1\":{\"329\":1}}],[\"例如流式布局\",{\"1\":{\"329\":1}}],[\"例如它的孕育\",{\"1\":{\"229\":1}}],[\"例如内核名称\",{\"1\":{\"215\":1}}],[\"例如代码\",{\"1\":{\"71\":1}}],[\"例如\",{\"1\":{\"48\":2,\"115\":1,\"118\":1,\"187\":2,\"329\":3,\"509\":2,\"584\":1,\"710\":1,\"800\":1,\"858\":2,\"869\":1,\"913\":1,\"926\":2,\"930\":1,\"1068\":2,\"1069\":1,\"1109\":1,\"1138\":1,\"1142\":1,\"1150\":1,\"1169\":1,\"1203\":1,\"1256\":1,\"1329\":1,\"1432\":1,\"1561\":1,\"1670\":1}}],[\"充分利用可用空间\",{\"1\":{\"48\":1}}],[\"若是函数内部声明变量不带\",{\"1\":{\"1691\":1}}],[\"若函数冲突\",{\"1\":{\"1611\":1}}],[\"若函数改变了这个对象的的属性\",{\"1\":{\"1329\":1}}],[\"若在渲染中\",{\"1\":{\"1549\":1}}],[\"若在循环中一次迭代改变多个变量\",{\"1\":{\"1013\":1}}],[\"若参数默认值为函数\",{\"1\":{\"1407\":1}}],[\"若先声明的参数未定义\",{\"1\":{\"1407\":1}}],[\"若先声明的参数已定义\",{\"1\":{\"1407\":1}}],[\"若不存在则寻找外部作用域的\",{\"1\":{\"1407\":1}}],[\"若被调用函数改变了这个参数的值\",{\"1\":{\"1329\":1}}],[\"若没有给参数\",{\"1\":{\"1253\":1}}],[\"若没有显式定义\",{\"1\":{\"602\":1}}],[\"若操作数在操作前非数字类型\",{\"1\":{\"1207\":1}}],[\"若\",{\"1\":{\"1203\":19}}],[\"若非\",{\"1\":{\"1018\":1}}],[\"若为\",{\"1\":{\"1009\":1}}],[\"若返回值为原始数据类型\",{\"1\":{\"946\":2}}],[\"若变量未定义\",{\"1\":{\"558\":1}}],[\"若有引号则原值输出\",{\"1\":{\"558\":1}}],[\"若有多个异步任务则需要在任务队列中排队等待\",{\"1\":{\"457\":1}}],[\"若把外部对象冻结的同时把其所有内部对象甚至是内部的内部无限延伸的对象属性也冻结了\",{\"1\":{\"540\":1}}],[\"若需要实现更复杂的聊天室功能\",{\"1\":{\"397\":1}}],[\"若希望代码能在基于\",{\"1\":{\"250\":1}}],[\"若该值为\",{\"1\":{\"59\":1}}],[\"若外部容器宽度为\",{\"1\":{\"54\":1}}],[\"若仅指定此属性\",{\"1\":{\"47\":1}}],[\"若此元素为\",{\"1\":{\"36\":1}}],[\"取决于空格在这门语言中是否具有意义\",{\"1\":{\"1666\":1}}],[\"取决于其它属性值\",{\"1\":{\"47\":1}}],[\"取到\",{\"1\":{\"1670\":1}}],[\"取到它的源值\",{\"1\":{\"1670\":1}}],[\"取到值\",{\"1\":{\"1654\":1}}],[\"取到全局对象\",{\"1\":{\"848\":1}}],[\"取模\",{\"1\":{\"1243\":1}}],[\"取出这些值就非常方便了\",{\"1\":{\"1230\":1}}],[\"取整\",{\"0\":{\"1153\":1}}],[\"取回定义在obj上的属性名\",{\"1\":{\"540\":1}}],[\"取消旧的定时器\",{\"1\":{\"288\":1,\"289\":1}}],[\"取消操作\",{\"1\":{\"205\":1}}],[\"取消暂存区的更改或者彻底丢弃更改\",{\"1\":{\"178\":1}}],[\"取消暂存等\",{\"1\":{\"169\":1}}],[\"取\",{\"1\":{\"110\":1}}],[\"取值函数\",{\"0\":{\"1316\":1},\"1\":{\"604\":1}}],[\"取值为\",{\"1\":{\"110\":2}}],[\"取值范围\",{\"1\":{\"75\":1}}],[\"取值与单位\",{\"0\":{\"22\":1}}],[\"可理解性很重要的函数名\",{\"1\":{\"1685\":1}}],[\"可理解为\",{\"1\":{\"1194\":1}}],[\"可运行在浏览器和\",{\"1\":{\"1617\":1}}],[\"可在不转换代码的情况下直接在浏览器运行\",{\"1\":{\"1617\":1}}],[\"可复用于\",{\"1\":{\"1616\":1}}],[\"可复杂\",{\"1\":{\"115\":1}}],[\"可忽略\",{\"1\":{\"1556\":1}}],[\"可忽略的表达式\",{\"0\":{\"1014\":1}}],[\"可执行代码\",{\"0\":{\"1556\":1},\"1\":{\"1668\":1}}],[\"可计算成员时指使用方括号包裹一个表达式\",{\"1\":{\"1487\":1}}],[\"可计算成员名称\",{\"0\":{\"1487\":1}}],[\"可计算属性名\",{\"0\":{\"559\":1}}],[\"可被调用执行的函数\",{\"1\":{\"1433\":1,\"1446\":1}}],[\"可直接使用所有数组方法\",{\"1\":{\"1394\":1}}],[\"可根据引用直接获取\",{\"1\":{\"1268\":1}}],[\"可动态调整\",{\"1\":{\"1268\":1}}],[\"可查看\",{\"1\":{\"1122\":1}}],[\"可省略元素\",{\"0\":{\"1093\":1}}],[\"可使用一个标签来唯一标记一个循环\",{\"1\":{\"1025\":1}}],[\"可允许程序摆脱一个被标记的语句\",{\"1\":{\"960\":1}}],[\"可实现可迭代协议的可迭代对象\",{\"1\":{\"710\":1}}],[\"可谓是集两种模式之长\",{\"1\":{\"569\":1}}],[\"可通过键名访问这些值\",{\"1\":{\"544\":1}}],[\"可将对象变为密封状态\",{\"1\":{\"539\":1}}],[\"可扩展的对象能够添加新的属性\",{\"1\":{\"538\":1}}],[\"可扩展性\",{\"1\":{\"139\":1}}],[\"可枚举性\",{\"0\":{\"531\":1},\"1\":{\"531\":1}}],[\"可枚举性决定属性是否出现在对象的\",{\"1\":{\"528\":1}}],[\"可配置性\",{\"0\":{\"530\":1},\"1\":{\"530\":1,\"706\":1}}],[\"可配置性决定是否可以使用\",{\"1\":{\"528\":1}}],[\"可写性\",{\"0\":{\"529\":1},\"1\":{\"529\":1,\"706\":1}}],[\"可写性决定是否可以修改\",{\"1\":{\"528\":1}}],[\"可选地将其初始化为一个值\",{\"1\":{\"1065\":1}}],[\"可选\",{\"1\":{\"640\":1,\"913\":1,\"968\":1,\"1302\":2,\"1306\":2,\"1310\":2,\"1327\":1,\"1330\":1,\"1543\":1}}],[\"可选参数\",{\"1\":{\"548\":1,\"683\":1}}],[\"可选链也可以和函数调用一起使用\",{\"1\":{\"1166\":1}}],[\"可选链运算符不能用于赋值\",{\"1\":{\"1165\":1}}],[\"可选链运算符也是很有帮助的\",{\"1\":{\"1164\":1}}],[\"可选链运算符将会使表达式更短\",{\"1\":{\"1164\":1}}],[\"可选链运算符\",{\"0\":{\"1164\":1},\"1\":{\"1164\":1}}],[\"可选链\",{\"1\":{\"381\":3}}],[\"可选前缘节流或延迟节流\",{\"1\":{\"294\":1}}],[\"可选前缘或延迟节流\",{\"0\":{\"294\":1}}],[\"可选前缘或延迟防抖\",{\"0\":{\"290\":1}}],[\"可选前缘防抖\",{\"1\":{\"290\":1}}],[\"可遍历对象和数组\",{\"1\":{\"356\":1}}],[\"可简写为\",{\"1\":{\"346\":1}}],[\"可简单\",{\"1\":{\"115\":1}}],[\"可覆盖align\",{\"1\":{\"332\":1}}],[\"可靠\",{\"1\":{\"313\":2}}],[\"可靠性\",{\"1\":{\"313\":1}}],[\"可靠传输机制\",{\"0\":{\"308\":1}}],[\"可靠的传输服务\",{\"1\":{\"298\":1}}],[\"可靠的\",{\"1\":{\"298\":1}}],[\"可靠的数据传输服务\",{\"1\":{\"297\":1}}],[\"可能是一个不错的选择\",{\"1\":{\"1586\":1}}],[\"可能导致\",{\"1\":{\"1284\":1}}],[\"可能决定不分配内存\",{\"1\":{\"1274\":1}}],[\"可能的返回值\",{\"1\":{\"1122\":1}}],[\"可能包含\",{\"1\":{\"509\":1}}],[\"可能需要查询数据库等操作\",{\"1\":{\"464\":1}}],[\"可能需要重现创建建\",{\"1\":{\"299\":1}}],[\"可能存在负载均衡导致每次ip不⼀样\",{\"1\":{\"464\":1}}],[\"可能客户端已经创建别的连接去了\",{\"1\":{\"303\":1}}],[\"可能会表述为\",{\"1\":{\"1670\":1}}],[\"可能会遇到意料之外的行为\",{\"1\":{\"1256\":1}}],[\"可能会遇到冲突\",{\"1\":{\"177\":1}}],[\"可能会超过图片的范围\",{\"1\":{\"104\":1}}],[\"可用于调试\",{\"1\":{\"243\":1}}],[\"可用于回退提交\",{\"1\":{\"169\":1}}],[\"可用内存和交换内存的情况\",{\"1\":{\"215\":1}}],[\"可按\",{\"1\":{\"191\":1}}],[\"可重用和易于维护\",{\"1\":{\"139\":1}}],[\"可维护性\",{\"1\":{\"139\":1}}],[\"可访问性\",{\"1\":{\"139\":1}}],[\"可播放音频轨道等等\",{\"1\":{\"120\":1}}],[\"可读性来说\",{\"1\":{\"115\":1}}],[\"可取得它们所属对象的上下文的方法称为公共方法\",{\"1\":{\"1516\":1}}],[\"可取的属性值\",{\"1\":{\"83\":1}}],[\"可取属性值\",{\"1\":{\"47\":1,\"58\":1}}],[\"可以调用一个函数返回一个内部函数的调用\",{\"1\":{\"1710\":1}}],[\"可以调用bigint\",{\"1\":{\"929\":1}}],[\"可以先使用后声明\",{\"1\":{\"1691\":1}}],[\"可以阻止对这些变量或函数进行访问\",{\"1\":{\"1681\":1}}],[\"可以建一个专门的\",{\"1\":{\"1661\":1}}],[\"可以取到模块内部实时的值\",{\"1\":{\"1654\":1}}],[\"可以理解为\",{\"1\":{\"1641\":1}}],[\"可以是相对路径\",{\"1\":{\"1632\":1}}],[\"可以直接修改模块内部的数据\",{\"1\":{\"1612\":1}}],[\"可以直接使用\",{\"1\":{\"394\":1,\"1616\":1}}],[\"可以采用下面的写法\",{\"1\":{\"1602\":1,\"1661\":1}}],[\"可以采用表达式\",{\"1\":{\"605\":1}}],[\"可以解构获得\",{\"1\":{\"1599\":1}}],[\"可以解决\",{\"1\":{\"1426\":1}}],[\"可以放在\",{\"1\":{\"1596\":1}}],[\"可以访问所有其他所有预定义的对象\",{\"1\":{\"1561\":1}}],[\"可以操作\",{\"1\":{\"1549\":1}}],[\"可以操作保存在变量中实际的值\",{\"1\":{\"917\":1}}],[\"可以让类的构造函数返回一个对象\",{\"1\":{\"1490\":1}}],[\"可以将\",{\"1\":{\"1693\":1}}],[\"可以将内部的变量和函数定义\",{\"1\":{\"1684\":1}}],[\"可以将它们想象成几个逐级包含的气泡\",{\"1\":{\"1674\":1}}],[\"可以将类作为参数传入函数\",{\"1\":{\"1485\":1}}],[\"可以将通用的逻辑抽象\",{\"1\":{\"1461\":1}}],[\"可以将其当作一种最佳实践\",{\"1\":{\"246\":1}}],[\"可以看出\",{\"1\":{\"1517\":1}}],[\"可以看到\",{\"1\":{\"1502\":1,\"1583\":1,\"1584\":1}}],[\"可以看座是\",{\"1\":{\"1427\":1}}],[\"可以看成是一个函数\",{\"1\":{\"647\":1}}],[\"可以接收更多的参数和类型\",{\"1\":{\"1419\":1}}],[\"可以接收一个字符串参数\",{\"1\":{\"928\":1}}],[\"可以立刻意识到哪些参数是可以省略的\",{\"1\":{\"1399\":1}}],[\"可以指定任意参数的默认值\",{\"1\":{\"1398\":1}}],[\"可以向该函数传入任意数目的参数\",{\"1\":{\"1393\":1}}],[\"可以为一个函数编写两个定义\",{\"1\":{\"1390\":1}}],[\"可以为负值\",{\"1\":{\"86\":2,\"88\":1,\"89\":2}}],[\"可以消除函数解耦\",{\"1\":{\"1385\":1}}],[\"可以不写\",{\"1\":{\"1370\":1}}],[\"可以不加花括号\",{\"1\":{\"1369\":1}}],[\"可以作为\",{\"1\":{\"1341\":1}}],[\"可以把变量和函数包裹在一个函数的作用域中\",{\"1\":{\"1681\":1}}],[\"可以把这条规则看作是无法应用其他规则时的默认规则\",{\"1\":{\"1578\":1}}],[\"可以把这些字符串作为参数提前传入\",{\"1\":{\"1504\":1}}],[\"可以把\",{\"1\":{\"1286\":1}}],[\"可以把它传递给实例生成函数\",{\"1\":{\"640\":1}}],[\"可以发现代码中引用数为\",{\"1\":{\"1282\":1}}],[\"可以应用于\",{\"1\":{\"1255\":1}}],[\"可以执行\",{\"1\":{\"1218\":1}}],[\"可以写在同一个模块里面\",{\"1\":{\"1636\":1}}],[\"可以写出非常古怪的父之表达式\",{\"1\":{\"1218\":1}}],[\"可以写成下面这样\",{\"1\":{\"1218\":1,\"1234\":1}}],[\"可以写作\",{\"1\":{\"115\":1}}],[\"可以从数组中提取值\",{\"1\":{\"1213\":1}}],[\"可以改为使用\",{\"1\":{\"1185\":1}}],[\"可以检测父类型\",{\"1\":{\"1115\":1}}],[\"可以检测某个对象是否是另一个对象的\",{\"1\":{\"1115\":1}}],[\"可以检测指定对象是否已冻结\",{\"1\":{\"540\":1}}],[\"可以检测指定对象是否已密封\",{\"1\":{\"539\":1}}],[\"可以检测指定对象是否可扩展\",{\"1\":{\"538\":1}}],[\"可以自动插入分号\",{\"1\":{\"1033\":1}}],[\"可以自动换行\",{\"1\":{\"45\":1}}],[\"可以由\",{\"1\":{\"1000\":1}}],[\"可以有两个值\",{\"1\":{\"921\":1}}],[\"可以被转换成数值37\",{\"1\":{\"905\":2}}],[\"可以被子类继承\",{\"1\":{\"631\":1}}],[\"可以动态执行\",{\"1\":{\"890\":1}}],[\"可以这样理解\",{\"1\":{\"624\":1}}],[\"可以无数次调用这个函数\",{\"1\":{\"586\":1}}],[\"可以隐藏原型中的对应属性\",{\"1\":{\"581\":1}}],[\"可以像修改自定义对象的原型一样修改原生对象的原型\",{\"1\":{\"580\":1}}],[\"可以像下面使用稳妥\",{\"1\":{\"572\":1}}],[\"可以重写调用构造函数时返回的值\",{\"1\":{\"571\":1}}],[\"可以利用这一点\",{\"1\":{\"560\":1}}],[\"可以使用对象解构赋值的语法\",{\"1\":{\"1599\":1}}],[\"可以使用定时器来分解长时间运行的任务\",{\"1\":{\"1543\":1}}],[\"可以使用具名的函数表达式\",{\"1\":{\"1385\":1}}],[\"可以使用方括号语法访问它的每一个元素\",{\"1\":{\"1382\":1}}],[\"可以使用箭头函数改写\",{\"1\":{\"1376\":1}}],[\"可以使用数值或字符串作为标识\",{\"1\":{\"1318\":1}}],[\"可以使用逻辑与运算符来取代\",{\"1\":{\"1253\":1}}],[\"可以使用圆括号的情况只有一种\",{\"1\":{\"1227\":1}}],[\"可以使用圆括号的情况\",{\"0\":{\"1227\":1}}],[\"可以使用语句块\",{\"1\":{\"1019\":1}}],[\"可以使用等号运算符\",{\"1\":{\"929\":1}}],[\"可以使用\",{\"1\":{\"531\":1,\"731\":1,\"1318\":1,\"1319\":1,\"1340\":1,\"1385\":1}}],[\"可以通过堆快照\",{\"1\":{\"1286\":1}}],[\"可以通过此方法判断\",{\"1\":{\"620\":1}}],[\"可以通过实例的\",{\"1\":{\"603\":1}}],[\"可以通过\",{\"1\":{\"599\":1,\"848\":1,\"936\":1,\"1318\":1,\"1483\":1,\"1561\":1}}],[\"可以通过变量来访问属性\",{\"1\":{\"558\":1}}],[\"可以通过传入参数\",{\"1\":{\"548\":1}}],[\"可以通过连续跟踪\",{\"1\":{\"491\":1}}],[\"可以通过定义\",{\"1\":{\"81\":1}}],[\"可以忽略\",{\"1\":{\"458\":1}}],[\"可以吧子节点的监听函数定义在父节点上\",{\"1\":{\"456\":1}}],[\"可以存储更多内容\",{\"1\":{\"445\":1}}],[\"可以创建一个自定义的数据包装器\",{\"1\":{\"408\":1}}],[\"可以创建一个sharedworker\",{\"1\":{\"397\":1}}],[\"可以原生支持到数组的响应式\",{\"1\":{\"403\":1}}],[\"可以原生监听数组\",{\"1\":{\"401\":1}}],[\"可以显著提高性能\",{\"1\":{\"401\":1}}],[\"可以监听对象属性的添加和删除\",{\"1\":{\"401\":1}}],[\"可以在需要的时候\",{\"1\":{\"1595\":1}}],[\"可以在外部使用\",{\"1\":{\"1484\":1}}],[\"可以在函数中返回\",{\"1\":{\"848\":1}}],[\"可以在调用父类型构造函数后\",{\"1\":{\"636\":1}}],[\"可以在子类型构造函数中向父类型构造函数传递参数\",{\"1\":{\"636\":1}}],[\"可以在这里定义私有变量和函数\",{\"1\":{\"572\":1}}],[\"可以在文字中使用\",{\"1\":{\"559\":1}}],[\"可以在浏览器的不同上下文\",{\"1\":{\"397\":1}}],[\"可以在浏览器中输入ip地址浏览网站\",{\"1\":{\"150\":1}}],[\"可以在循环内部判断一下\",{\"1\":{\"388\":1}}],[\"可以省略括号\",{\"1\":{\"346\":1}}],[\"可以对参数进行柯里化\",{\"1\":{\"1586\":1}}],[\"可以对一层结构的数组和对象进行深拷贝\",{\"1\":{\"343\":1}}],[\"可以对其做事情的一些东西\",{\"1\":{\"229\":1}}],[\"可以帮助开发人员更精确地控制元素的布局和排列\",{\"1\":{\"325\":1}}],[\"可以继续发送数据\",{\"1\":{\"304\":1}}],[\"可以继续加载解析html\",{\"1\":{\"157\":1}}],[\"可以\",{\"1\":{\"303\":1,\"848\":1,\"859\":1}}],[\"可以判断点\",{\"1\":{\"276\":1}}],[\"可以跨行书写\",{\"1\":{\"242\":1}}],[\"可以用参数直接获得\",{\"1\":{\"1600\":1}}],[\"可以用关键字\",{\"1\":{\"1561\":1}}],[\"可以用\",{\"1\":{\"1374\":1}}],[\"可以用来判断当前是否是严格模式\",{\"1\":{\"1510\":1}}],[\"可以用来获取对象的value的集合\",{\"1\":{\"367\":1}}],[\"可以用来获取对象的key的集合\",{\"1\":{\"345\":1}}],[\"可以用来撤销提交\",{\"1\":{\"178\":1}}],[\"可以用于\",{\"1\":{\"239\":1}}],[\"可以输入完整的路径\",{\"1\":{\"194\":1}}],[\"可以说算是工程化的项目了\",{\"1\":{\"1621\":1}}],[\"可以说\",{\"1\":{\"143\":1}}],[\"可以支持很多复杂网页效果和浏览器扩展接口\",{\"1\":{\"143\":1}}],[\"可以简写为\",{\"1\":{\"118\":1}}],[\"可以简单地解决这个问题\",{\"1\":{\"46\":1}}],[\"可以设定多组阴影效果\",{\"1\":{\"59\":1}}],[\"可以设置水平方向的\",{\"1\":{\"45\":1}}],[\"可以设置宽高\",{\"1\":{\"45\":1}}],[\"可以设置\",{\"1\":{\"45\":1}}],[\"原属性值不会被修改\",{\"1\":{\"1564\":1}}],[\"原本对应的值失去引用\",{\"1\":{\"1282\":1}}],[\"原理\",{\"0\":{\"1280\":1}}],[\"原理分析\",{\"1\":{\"46\":1}}],[\"原因很简单\",{\"1\":{\"1218\":1}}],[\"原因在于\",{\"1\":{\"1185\":1,\"1700\":1}}],[\"原因是浏览器会将元素当作字词去解释\",{\"1\":{\"46\":1}}],[\"原始值\",{\"1\":{\"954\":1}}],[\"原始数据类型\",{\"0\":{\"918\":1},\"1\":{\"917\":2,\"944\":1}}],[\"原始类型转换表\",{\"0\":{\"954\":1}}],[\"原始类型\",{\"0\":{\"563\":1}}],[\"原\",{\"1\":{\"887\":1}}],[\"原uri\",{\"1\":{\"881\":1}}],[\"原生方法的内在特性\",{\"1\":{\"1496\":1}}],[\"原生实现应用\",{\"0\":{\"1435\":1}}],[\"原生构造函数\",{\"1\":{\"625\":1}}],[\"原生构造函数会忽略\",{\"1\":{\"625\":1}}],[\"原生构造函数是无法继承的\",{\"1\":{\"625\":1}}],[\"原生的\",{\"1\":{\"578\":1}}],[\"原型函数\",{\"1\":{\"1419\":1}}],[\"原型也是对象\",{\"1\":{\"646\":1}}],[\"原型链上\",{\"1\":{\"820\":1}}],[\"原型链还保持不变\",{\"1\":{\"659\":1}}],[\"原型链中查找属性方法和访问原型链中的原型对象的区别\",{\"1\":{\"648\":1}}],[\"原型链顶层\",{\"1\":{\"648\":1}}],[\"原型链\",{\"0\":{\"644\":1},\"1\":{\"935\":1}}],[\"原型中的基本类型属性和引用类型属性被两个实例对象共享\",{\"1\":{\"640\":1}}],[\"原型中的所有属性是被很多实例共享的\",{\"1\":{\"581\":1}}],[\"原型对象与实例\",{\"0\":{\"653\":1}}],[\"原型对象即为当前实例对象的父对象\",{\"1\":{\"648\":1}}],[\"原型对象\",{\"0\":{\"648\":1,\"804\":1},\"1\":{\"603\":1,\"637\":1,\"829\":1}}],[\"原型对象的指向\",{\"0\":{\"649\":1}}],[\"原型对象的问题\",{\"0\":{\"581\":1}}],[\"原型对象的原型\",{\"0\":{\"580\":1}}],[\"原型对象中保存的同名属性\",{\"1\":{\"576\":1}}],[\"原型的动态性\",{\"0\":{\"579\":1}}],[\"原型与实例属性检测\",{\"0\":{\"577\":1}}],[\"原型最初只包含\",{\"1\":{\"576\":1}}],[\"原型\",{\"1\":{\"575\":1,\"646\":1,\"653\":1}}],[\"原型已经完成初始化\",{\"1\":{\"570\":1}}],[\"原型模式省略了为构造函数传递初始参数的环节\",{\"1\":{\"581\":1}}],[\"原型模式的重要性不仅体现在创建自定义类型方面\",{\"1\":{\"580\":1}}],[\"原型模式\",{\"0\":{\"575\":1},\"1\":{\"569\":1,\"592\":1}}],[\"原型式继承需要有一个对象可以作为另一个对象的基础\",{\"1\":{\"640\":1}}],[\"原型式继承是借助原型基于已有的对象创建新对象\",{\"1\":{\"640\":1}}],[\"原型式继承\",{\"0\":{\"640\":1},\"1\":{\"394\":1}}],[\"原地建堆\",{\"1\":{\"482\":1}}],[\"原义字符\",{\"1\":{\"121\":1}}],[\"原封不动的保留你输入时的状态\",{\"1\":{\"92\":1}}],[\"给a赋值2\",{\"1\":{\"1699\":1}}],[\"给函数表达式指定一个函数名可以有效解决以上问题\",{\"1\":{\"1685\":1}}],[\"给函数分配内存\",{\"1\":{\"1273\":1}}],[\"给予外部作用域对\",{\"1\":{\"1681\":1}}],[\"给另外一个函数来执行\",{\"1\":{\"1502\":1}}],[\"给\",{\"1\":{\"1485\":1,\"1502\":1,\"1709\":1}}],[\"给数组及其包含的值分配内存\",{\"1\":{\"1273\":1}}],[\"给数值变量分配内存\",{\"1\":{\"1273\":1}}],[\"给字符串分配内存\",{\"1\":{\"1273\":1}}],[\"给任意负数做开方运算\",{\"1\":{\"858\":1}}],[\"给对象增加属性不会导致\",{\"1\":{\"1693\":1}}],[\"给对象及其包含的值分配内存\",{\"1\":{\"1273\":1}}],[\"给对象属性设置\",{\"1\":{\"564\":1}}],[\"给对象添加proxy以监听其属性的更改\",{\"1\":{\"408\":1}}],[\"给它们设置属性会报错\",{\"1\":{\"563\":1}}],[\"给人的错觉是还是可以修改这个属性\",{\"1\":{\"540\":1,\"706\":1}}],[\"给只设置\",{\"1\":{\"533\":1}}],[\"给定对象自身可枚举属性的键值对数组\",{\"1\":{\"700\":1}}],[\"给定对象自身可枚举\",{\"1\":{\"699\":1}}],[\"给定两个字符串形式的非负整数\",{\"1\":{\"506\":1}}],[\"给定一个不含重复数字的数组\",{\"1\":{\"521\":1}}],[\"给定一个整数数组\",{\"1\":{\"515\":1}}],[\"给定一个只包括\",{\"1\":{\"512\":1}}],[\"给定一个\",{\"1\":{\"503\":1}}],[\"给定一个数组\",{\"1\":{\"485\":1}}],[\"给定一个字符串\",{\"1\":{\"467\":1}}],[\"给定整数数组\",{\"1\":{\"482\":1}}],[\"给你两个版本号\",{\"1\":{\"509\":1}}],[\"给你两个按\",{\"1\":{\"500\":1}}],[\"给你一个字符串\",{\"1\":{\"494\":1}}],[\"给你一个链表的头节点\",{\"1\":{\"491\":1}}],[\"给你一个整数数组\",{\"1\":{\"476\":1,\"488\":1,\"524\":1}}],[\"给你单链表的头节点\",{\"1\":{\"473\":1}}],[\"给你二叉树的根节点\",{\"1\":{\"470\":1,\"479\":1}}],[\"给person函数传入指定的this值和实参值\",{\"1\":{\"392\":1,\"393\":1}}],[\"给两个或两个以上的元素设置\",{\"1\":{\"46\":1}}],[\"给一个内联元素\",{\"1\":{\"37\":1}}],[\"换句话来说\",{\"1\":{\"1674\":1}}],[\"换句话说\",{\"1\":{\"252\":1,\"253\":1,\"575\":1,\"576\":1,\"1063\":1,\"1075\":1,\"1677\":1,\"1681\":1}}],[\"换页符\",{\"1\":{\"237\":1}}],[\"换行符\",{\"1\":{\"238\":1}}],[\"换行符和格式控制符\",{\"0\":{\"236\":1}}],[\"换行都会保留\",{\"1\":{\"92\":1}}],[\"换行\",{\"1\":{\"45\":1,\"92\":1}}],[\"换言之\",{\"1\":{\"38\":1,\"1055\":1}}],[\"边距\",{\"1\":{\"45\":1}}],[\"对的\",{\"1\":{\"1709\":1}}],[\"对该执行环境中的代码进行声明提升过程\",{\"1\":{\"1709\":2}}],[\"对函数的传统认知就是先声明一个函数\",{\"1\":{\"1681\":1}}],[\"对函数本身进行二次处理\",{\"1\":{\"1468\":1}}],[\"对作用域的定义\",{\"1\":{\"1673\":1}}],[\"对\",{\"1\":{\"1670\":1,\"1675\":1,\"1709\":1}}],[\"对编程语言来说\",{\"1\":{\"1666\":1}}],[\"对外的接口\",{\"1\":{\"1654\":1}}],[\"对接层次会更多\",{\"1\":{\"1621\":1}}],[\"对用户体验也未必比原来的好\",{\"1\":{\"1449\":1}}],[\"对用户输入的地方和变量都需要仔细检查长度和对\",{\"1\":{\"417\":1}}],[\"对这个属性的行为做出了一些修改\",{\"1\":{\"1295\":1}}],[\"对这个遍历器对象执行扩展运算符即可将内部遍历得到的值转为一个数组\",{\"1\":{\"1186\":1}}],[\"对内存泄漏有个直观的判断\",{\"1\":{\"1285\":1}}],[\"对应关系\",{\"0\":{\"1654\":1}}],[\"对应的代码转换就变成这样\",{\"1\":{\"1419\":1}}],[\"对应的值\",{\"1\":{\"1218\":1}}],[\"对应到vue中是执行vdom\",{\"1\":{\"402\":1}}],[\"对喜爱那个直接量中的属性名称可以是字符串而不是标识符\",{\"1\":{\"1083\":1}}],[\"对其属性值进行劫持\",{\"1\":{\"695\":1}}],[\"对实例属性和静态属性都规定了新的写法\",{\"1\":{\"632\":1}}],[\"对实时应用很有用\",{\"1\":{\"310\":1}}],[\"对某个属性设置\",{\"1\":{\"604\":1}}],[\"对每⼀个可见节点\",{\"1\":{\"464\":1}}],[\"对每一个元素进行翻倍\",{\"1\":{\"348\":1}}],[\"对响应进行解码\",{\"1\":{\"464\":1}}],[\"对响应资源做缓存\",{\"1\":{\"155\":1}}],[\"对浏览器事件循环的理解\",{\"0\":{\"457\":1}}],[\"对事件委托的理解\",{\"0\":{\"456\":1}}],[\"对一些敏感信息进行保护\",{\"1\":{\"417\":1}}],[\"对性能影响比较大\",{\"1\":{\"401\":1}}],[\"对数组或者对象的属性进行循环操作\",{\"1\":{\"980\":1}}],[\"对数组中的每个元素按序执行一个提供的\",{\"1\":{\"352\":1}}],[\"对数据进行翻译\",{\"1\":{\"317\":1}}],[\"对相同布局模式的块级和内联级变体需要单独的关键字\",{\"1\":{\"329\":1}}],[\"对传送的比特流来说\",{\"1\":{\"318\":1}}],[\"对端这个时候挂了\",{\"1\":{\"304\":1}}],[\"对方难道不可以将数据缓存下来\",{\"1\":{\"303\":1}}],[\"对http协议进行解析\",{\"1\":{\"153\":1}}],[\"对元素边框是有效的\",{\"1\":{\"105\":1}}],[\"对齐\",{\"1\":{\"82\":5,\"93\":1}}],[\"对立方位的属性值同时存在时\",{\"1\":{\"51\":1}}],[\"对于多数\",{\"1\":{\"1695\":1}}],[\"对于多层嵌套的组件的传参将会非常繁琐\",{\"1\":{\"412\":1}}],[\"对于函数表达式最熟悉的场景可能就是回调参数了\",{\"1\":{\"1685\":1}}],[\"对于函数内部的代码来说\",{\"1\":{\"1221\":1}}],[\"对于两种作用域的区别\",{\"1\":{\"1677\":1}}],[\"对于普通的函数调用来说\",{\"1\":{\"1509\":1}}],[\"对于这种情况出现多层嵌套时\",{\"1\":{\"1459\":1}}],[\"对于具名的函数表达式来说\",{\"1\":{\"1334\":1}}],[\"对于上例\",{\"1\":{\"1286\":1}}],[\"对于逻辑或而言\",{\"1\":{\"1254\":1}}],[\"对于逻辑与而言\",{\"1\":{\"1253\":1}}],[\"对于编译器来说\",{\"1\":{\"1222\":1}}],[\"对于变量而言\",{\"1\":{\"1194\":1}}],[\"对于非负数\",{\"1\":{\"1150\":1}}],[\"对于所有情况都是\",{\"1\":{\"1100\":1}}],[\"对于不同类型的引用数据类型\",{\"1\":{\"946\":1}}],[\"对于不同的网络应用需要不同的应用层协议\",{\"1\":{\"318\":1}}],[\"对于那些没有部署\",{\"1\":{\"1185\":1}}],[\"对于那些已经被删除或者从未被赋值的索引不会被调用\",{\"1\":{\"669\":1}}],[\"对于那些在构造函数中已经定义的实例属性\",{\"1\":{\"632\":1}}],[\"对于那些包含基本值的属性倒也说得过去\",{\"1\":{\"581\":1}}],[\"对于包含引用类型值的属性来说\",{\"1\":{\"581\":1}}],[\"对于其他方法\",{\"1\":{\"131\":1}}],[\"对于没有设计斜体的特殊字体\",{\"1\":{\"74\":1}}],[\"对于\",{\"1\":{\"47\":1,\"83\":2,\"91\":2,\"1000\":1,\"1194\":1,\"1694\":1}}],[\"对于行内元素和块级元素\",{\"1\":{\"45\":1}}],[\"对象就是类的实例\",{\"1\":{\"1473\":1}}],[\"对象对\",{\"1\":{\"1408\":1}}],[\"对象可被不定参数和默认参数完美代替\",{\"1\":{\"1408\":1}}],[\"对象不是数组\",{\"1\":{\"1393\":1}}],[\"对象了\",{\"1\":{\"1393\":1}}],[\"对象有一个名为\",{\"1\":{\"1385\":1}}],[\"对象并不是\",{\"1\":{\"1382\":1}}],[\"对象并解析html\",{\"1\":{\"464\":1}}],[\"对象来访问这个参数数组\",{\"1\":{\"1382\":1}}],[\"对象被\",{\"1\":{\"1349\":1}}],[\"对象再跟一个\",{\"1\":{\"1348\":1}}],[\"对象变为\",{\"1\":{\"1348\":1}}],[\"对象执行完\",{\"1\":{\"1345\":1}}],[\"对象成功状态传递出来的参数\",{\"1\":{\"1342\":1}}],[\"对象方便多了\",{\"1\":{\"1338\":1}}],[\"对象间的循环引用问题不会引起回收问题\",{\"1\":{\"1282\":1}}],[\"对象自身的浅大小和它支配的所有对象的浅大小的总和\",{\"1\":{\"1281\":1}}],[\"对象自身所存储的原生值及其他必要数据的大小\",{\"1\":{\"1281\":1}}],[\"对象中找到\",{\"1\":{\"1709\":1}}],[\"对象中无\",{\"1\":{\"1613\":1}}],[\"对象中的名\",{\"1\":{\"1382\":1}}],[\"对象中的数据尤其有用\",{\"1\":{\"1232\":1}}],[\"对象中寻找\",{\"1\":{\"646\":1}}],[\"对象都能被访问了\",{\"1\":{\"1566\":1}}],[\"对象都与字符串值相等\",{\"1\":{\"1203\":1}}],[\"对象都和另一个对象相关联\",{\"1\":{\"565\":1}}],[\"对象值\",{\"1\":{\"1200\":1}}],[\"对象会使用原型链上的那个属性\",{\"1\":{\"1101\":1}}],[\"对象会先调用\",{\"1\":{\"946\":1}}],[\"对象表达式也都会各自计算一次\",{\"1\":{\"1083\":1}}],[\"对象和数组没有固定大小\",{\"1\":{\"1279\":1}}],[\"对象和数组初始化表达式实际上是一个新创建的对象和数组\",{\"1\":{\"1083\":1}}],[\"对象和其他基本类型值不同的是\",{\"1\":{\"544\":1}}],[\"对象初始化表达式和数组初始化表达式非常相似\",{\"1\":{\"1083\":1}}],[\"对象初始化表达式\",{\"0\":{\"1083\":1}}],[\"对象下非全局属性\",{\"1\":{\"1066\":1}}],[\"对象等等\",{\"1\":{\"989\":1}}],[\"对象实际上只是对\",{\"1\":{\"1616\":1}}],[\"对象实际宽度\",{\"1\":{\"58\":2}}],[\"对象实现了\",{\"1\":{\"1185\":1}}],[\"对象实例\",{\"1\":{\"955\":1,\"1274\":1}}],[\"对象定义\",{\"1\":{\"930\":1}}],[\"对象形式\",{\"1\":{\"891\":1}}],[\"对象也可看做是属性的无序集合\",{\"1\":{\"799\":1}}],[\"对象也可看作是\",{\"1\":{\"544\":1}}],[\"对象主要用于将任意数据封装成对象形式\",{\"1\":{\"799\":1}}],[\"对象衍生的\",{\"1\":{\"799\":1}}],[\"对象独有\",{\"1\":{\"648\":1}}],[\"对象上是否有\",{\"1\":{\"1670\":1}}],[\"对象上\",{\"1\":{\"603\":1}}],[\"对象上触发\",{\"1\":{\"464\":1}}],[\"对象原型写法的语法糖\",{\"1\":{\"596\":1}}],[\"对象在\",{\"1\":{\"592\":1}}],[\"对象本身具有的属性叫\",{\"1\":{\"565\":1}}],[\"对象的内容还是可以修改的\",{\"1\":{\"1693\":1}}],[\"对象的公共方法提取\",{\"0\":{\"1516\":1}}],[\"对象的一个元素\",{\"1\":{\"1388\":1}}],[\"对象的一个只读属性\",{\"1\":{\"864\":1}}],[\"对象的函数\",{\"1\":{\"1385\":1}}],[\"对象的值与形参的值并不对应\",{\"1\":{\"1383\":1}}],[\"对象的值和形参的值是独立的\",{\"1\":{\"1383\":1}}],[\"对象的值和对应形参的值保持同步\",{\"1\":{\"1383\":1}}],[\"对象的值相同\",{\"1\":{\"1383\":1}}],[\"对象的指向时可变的\",{\"1\":{\"1375\":1}}],[\"对象的时候\",{\"1\":{\"1271\":1}}],[\"对象的对数\",{\"1\":{\"1218\":1}}],[\"对象的解构也可以指定默认值\",{\"1\":{\"1218\":1}}],[\"对象的解构与数组有一个重要的不同\",{\"1\":{\"1218\":1}}],[\"对象的解构赋值可以很方便地将现有现象的方法赋值到某个变量\",{\"1\":{\"1218\":1}}],[\"对象的解构赋值的内部机制是先找到同名属性\",{\"1\":{\"1218\":1}}],[\"对象的解构赋值时下面形式的简写\",{\"1\":{\"1218\":1}}],[\"对象的解构赋值\",{\"0\":{\"1218\":1}}],[\"对象的类型标签是\",{\"1\":{\"1132\":1}}],[\"对象的名称\",{\"1\":{\"1099\":1}}],[\"对象的真和假\",{\"1\":{\"1020\":1}}],[\"对象的实例\",{\"1\":{\"930\":1}}],[\"对象的写入访问器属性\",{\"1\":{\"688\":1}}],[\"对象的读取访问器属性\",{\"1\":{\"688\":1}}],[\"对象的可枚举属性\",{\"1\":{\"1004\":1}}],[\"对象的可枚举性\",{\"1\":{\"688\":1}}],[\"对象的可写性\",{\"1\":{\"688\":1}}],[\"对象的可配置性\",{\"1\":{\"688\":1}}],[\"对象的\",{\"1\":{\"560\":1,\"1293\":1,\"1382\":1,\"1386\":1,\"1438\":1,\"1616\":1}}],[\"对象的属性没有顺序\",{\"1\":{\"983\":1}}],[\"对象的属性值严格等于\",{\"1\":{\"1218\":1}}],[\"对象的属性值\",{\"1\":{\"688\":1}}],[\"对象的属性\",{\"1\":{\"560\":1}}],[\"对象的所有键名都是字符串\",{\"1\":{\"550\":1}}],[\"对象的原型对象也可以被更改\",{\"1\":{\"538\":1}}],[\"对象组成\",{\"0\":{\"549\":1}}],[\"对象键名字符化\",{\"1\":{\"546\":1}}],[\"对象字面量是由若干键值对组成的映射表\",{\"1\":{\"546\":1}}],[\"对象字面量\",{\"0\":{\"546\":1,\"1176\":1},\"1\":{\"545\":1}}],[\"对象创建\",{\"0\":{\"545\":1}}],[\"对象是由\",{\"1\":{\"930\":1}}],[\"对象是属性的无序集合\",{\"1\":{\"549\":1}}],[\"对象是一种复合值\",{\"1\":{\"544\":1}}],[\"对象是可扩展的\",{\"1\":{\"538\":1,\"768\":1}}],[\"对象类型转换函数\",{\"1\":{\"800\":1}}],[\"对象类型\",{\"0\":{\"544\":1},\"1\":{\"948\":1}}],[\"对象密封前已有属性在密封后仍可以被修改\",{\"1\":{\"539\":1}}],[\"对象具有扩展\",{\"1\":{\"537\":1}}],[\"对象状态变为\",{\"1\":{\"1344\":1}}],[\"对象状态\",{\"0\":{\"537\":1}}],[\"对象属性访问规则会分别接管对\",{\"1\":{\"1676\":1}}],[\"对象属性引用链中只有上一层或最后一层在调用位置中起作用\",{\"1\":{\"1579\":1}}],[\"对象属性并不在保护的范围内\",{\"1\":{\"1068\":1}}],[\"对象属性\",{\"1\":{\"935\":1}}],[\"对象属性劫持\",{\"0\":{\"695\":1}}],[\"对象属性仍能删除\",{\"1\":{\"538\":1}}],[\"对象属性描述符的类型分为两种\",{\"1\":{\"527\":1}}],[\"对象属性描述符\",{\"0\":{\"527\":1}}],[\"对象属性同名简写\",{\"0\":{\"353\":1}}],[\"对象直接量也可以嵌套\",{\"1\":{\"1083\":1}}],[\"对象直接量\",{\"1\":{\"245\":1,\"1083\":1}}],[\"对象呈现\",{\"1\":{\"45\":1}}],[\"对象\",{\"0\":{\"998\":1},\"1\":{\"45\":1,\"229\":2,\"530\":1,\"547\":1,\"584\":1,\"586\":1,\"590\":1,\"624\":2,\"644\":1,\"645\":1,\"693\":1,\"786\":1,\"799\":1,\"800\":3,\"848\":1,\"868\":1,\"873\":1,\"878\":1,\"884\":1,\"890\":1,\"897\":1,\"902\":1,\"908\":1,\"913\":1,\"917\":1,\"944\":1,\"999\":1,\"1004\":1,\"1185\":1,\"1203\":1,\"1204\":1,\"1281\":1,\"1302\":1,\"1306\":1,\"1312\":1,\"1338\":4,\"1340\":2,\"1341\":1,\"1344\":1,\"1345\":1,\"1346\":2,\"1374\":2,\"1375\":2,\"1382\":1,\"1408\":1,\"1474\":1,\"1477\":1,\"1497\":1,\"1517\":1,\"1561\":1,\"1562\":1,\"1564\":1,\"1565\":1,\"1579\":2,\"1593\":1,\"1676\":1}}],[\"多终端也已经成为时下以及未来的一个必然趋势\",{\"1\":{\"1621\":1}}],[\"多线程\",{\"1\":{\"1547\":1}}],[\"多线程程序的编程复杂度通常比单线程程序高\",{\"1\":{\"424\":1}}],[\"多层条件判断\",{\"0\":{\"1019\":1}}],[\"多余的属性\",{\"1\":{\"659\":1}}],[\"多位数字\",{\"1\":{\"509\":1}}],[\"多对一和多对多的交互通信\",{\"1\":{\"310\":1}}],[\"多播\",{\"1\":{\"298\":1}}],[\"多行注释又叫块级注释\",{\"1\":{\"242\":1}}],[\"多行注释\",{\"0\":{\"242\":1}}],[\"多数情况下\",{\"1\":{\"236\":1}}],[\"多态\",{\"1\":{\"229\":1,\"584\":1}}],[\"多态性\",{\"1\":{\"229\":1}}],[\"多字体反馈机制\",{\"0\":{\"78\":1}}],[\"多个网络请求是非继发关系\",{\"1\":{\"1354\":1}}],[\"多个字符则从左往右依次比较\",{\"1\":{\"953\":1}}],[\"多个实例对象对引用类型的操作会被篡改\",{\"1\":{\"641\":1}}],[\"多个线程可以在同一进程内并发执行\",{\"1\":{\"423\":1}}],[\"多个组件依赖于同一状态时\",{\"1\":{\"412\":1}}],[\"多个tab页相互通信\",{\"0\":{\"397\":1}}],[\"多个箭头丝带\",{\"0\":{\"263\":1}}],[\"多个文件压缩打包\",{\"1\":{\"212\":1}}],[\"多个块状\",{\"1\":{\"45\":1}}],[\"多个元素会另起一行\",{\"1\":{\"45\":1}}],[\"多半是因为其父结点含有激活并设置了\",{\"1\":{\"39\":1}}],[\"浮点等等\",{\"1\":{\"1142\":1}}],[\"浮点数\",{\"0\":{\"924\":1},\"1\":{\"31\":1,\"1142\":1}}],[\"浮动和清除浮动\",{\"0\":{\"326\":1}}],[\"浮动\",{\"1\":{\"40\":1}}],[\"改名后再输出\",{\"1\":{\"1658\":1}}],[\"改写该变量是被允许的\",{\"1\":{\"1631\":1}}],[\"改写接口\",{\"1\":{\"1631\":1}}],[\"改用更安全的写法\",{\"1\":{\"894\":1}}],[\"改资源可以被缓存使用\",{\"1\":{\"429\":1}}],[\"改为\",{\"1\":{\"40\":2}}],[\"改变了\",{\"1\":{\"625\":1}}],[\"改变this指向的方法有哪些\",{\"0\":{\"391\":1}}],[\"改变dom的外观样式以及大小和位置\",{\"1\":{\"158\":1}}],[\"改变\",{\"1\":{\"6\":1,\"438\":1}}],[\"谁是赋值操作的源头\",{\"1\":{\"1670\":1}}],[\"谁也不知道\",{\"1\":{\"304\":1}}],[\"谁的层叠行就更高\",{\"1\":{\"39\":1}}],[\"谁在\",{\"1\":{\"39\":1}}],[\"后创建函数\",{\"1\":{\"1700\":1}}],[\"后缀可以省略\",{\"1\":{\"1632\":1}}],[\"后端一方面要为前端提供接口服务\",{\"1\":{\"1621\":1}}],[\"后端技术\",{\"0\":{\"1724\":1},\"2\":{\"226\":1}}],[\"后紧跟一个空格和响应的标识符\",{\"1\":{\"1486\":1}}],[\"后通常会使代码更易于阅读\",{\"1\":{\"1408\":1}}],[\"后文的\",{\"1\":{\"1406\":1}}],[\"后者是同步加载\",{\"1\":{\"1593\":1}}],[\"后者的\",{\"1\":{\"1375\":1}}],[\"后者不用\",{\"1\":{\"602\":1}}],[\"后需跟\",{\"1\":{\"1342\":1}}],[\"后进先出\",{\"1\":{\"1260\":1,\"1263\":1,\"1268\":1}}],[\"后置递减\",{\"1\":{\"1243\":1}}],[\"后置递增\",{\"1\":{\"1243\":1}}],[\"后置操作为右值\",{\"1\":{\"1194\":1}}],[\"后置运算符\",{\"1\":{\"253\":1}}],[\"后赋值\",{\"1\":{\"1194\":1}}],[\"后自减的异同点\",{\"1\":{\"1194\":1}}],[\"后自减\",{\"0\":{\"1193\":1},\"1\":{\"1193\":1,\"1194\":2}}],[\"后自增\",{\"0\":{\"1192\":1},\"1\":{\"1189\":1,\"1192\":1,\"1194\":3}}],[\"后检测\",{\"1\":{\"974\":1}}],[\"后代选择器\",{\"1\":{\"336\":1}}],[\"后两个属性可选\",{\"1\":{\"332\":1}}],[\"后仍能发送数据\",{\"1\":{\"304\":1}}],[\"后依然没有收到回复\",{\"1\":{\"304\":1}}],[\"后\",{\"1\":{\"304\":1,\"529\":2,\"530\":3,\"1533\":1,\"1571\":1}}],[\"后续需要间隔一段时间触发才生效\",{\"1\":{\"292\":1}}],[\"后续触发\",{\"1\":{\"288\":1}}],[\"后接大写或小写的\",{\"1\":{\"245\":3}}],[\"后的hash值\",{\"1\":{\"148\":1}}],[\"后的变化\",{\"1\":{\"102\":1}}],[\"后再加载\",{\"1\":{\"131\":1}}],[\"后面请求的发送总是需要依赖上一个请求返回的数据\",{\"1\":{\"1352\":1}}],[\"后面的声明覆盖了前面的声明\",{\"1\":{\"1390\":1}}],[\"后面的异步操作出错\",{\"1\":{\"1349\":1}}],[\"后面的\",{\"1\":{\"1348\":1,\"1632\":1}}],[\"后面的函数声明会覆盖前面的函数声明\",{\"1\":{\"1329\":1,\"1704\":1}}],[\"后面的源对象的属性将类似地覆盖前面的源对象的属性\",{\"1\":{\"678\":1}}],[\"后面跟着一个等于号\",{\"1\":{\"117\":1}}],[\"后面\",{\"1\":{\"39\":1,\"1312\":1}}],[\"后出现的会在上面\",{\"1\":{\"39\":1,\"56\":1}}],[\"其值为undefined\",{\"1\":{\"1700\":1}}],[\"其重要性还体现在它用更常见的词法作用域取代了传统的\",{\"1\":{\"1589\":1}}],[\"其严格程度和你代码有所不同\",{\"1\":{\"1578\":1}}],[\"其作用和\",{\"1\":{\"1580\":1}}],[\"其作用是在需要的时候方便调用这段\",{\"1\":{\"1452\":1}}],[\"其作用域可以是全局或本地声明的块\",{\"1\":{\"1068\":1}}],[\"其高频率的更改可能会让浏览器崩溃\",{\"1\":{\"1432\":1}}],[\"其余都是真值\",{\"1\":{\"1253\":1}}],[\"其余位取反变成\",{\"1\":{\"1160\":1}}],[\"其移动规则\",{\"1\":{\"1148\":1}}],[\"其在\",{\"1\":{\"1137\":1}}],[\"其类型将被返回\",{\"1\":{\"1121\":1}}],[\"其参数\",{\"1\":{\"1068\":1}}],[\"其返回值由参数\",{\"1\":{\"891\":1}}],[\"其排列与使用\",{\"1\":{\"700\":1}}],[\"其包含通过所提供函数实现的测试的所有元素\",{\"1\":{\"667\":1}}],[\"其背后的思路是使用原型链实现对原型对象的属性和方法的继承\",{\"1\":{\"662\":1}}],[\"其背后的基本思路是\",{\"1\":{\"659\":1}}],[\"其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法\",{\"1\":{\"644\":1}}],[\"其原型对象默认只会取得\",{\"1\":{\"576\":1}}],[\"其元素不能被修改\",{\"1\":{\"540\":1,\"706\":1}}],[\"其尾部连接到第一个节点\",{\"1\":{\"491\":1}}],[\"其尾部连接到第二个节点\",{\"1\":{\"491\":1}}],[\"其对布局不会有影响\",{\"1\":{\"329\":1}}],[\"其对内容或布局没有任何影响\",{\"1\":{\"136\":1}}],[\"其可以与\",{\"1\":{\"329\":1}}],[\"其可以将内容分组\",{\"1\":{\"136\":1}}],[\"其会建立一个新的区块格式化上下文\",{\"1\":{\"329\":1}}],[\"其定义了该内容布局时的格式上下文的类型\",{\"1\":{\"329\":1}}],[\"其后跟随\",{\"1\":{\"239\":1}}],[\"其本质是以建立模型体现出来的抽象思维过程和面向对象的方法\",{\"1\":{\"228\":1}}],[\"其他脚本可以通过这个接口\",{\"1\":{\"1654\":1}}],[\"其他上下文需要等待\",{\"1\":{\"1557\":1}}],[\"其他事件触发了之后只能在事件队列中排队等待执行\",{\"1\":{\"1538\":1}}],[\"其他应用\",{\"0\":{\"1506\":1}}],[\"其他框架库实现\",{\"1\":{\"1446\":1}}],[\"其他框架库的实现\",{\"1\":{\"1436\":1}}],[\"其他都是\",{\"1\":{\"1146\":1}}],[\"其他例子\",{\"1\":{\"1115\":1}}],[\"其他例子例如\",{\"1\":{\"584\":1}}],[\"其他情况下执行失败并无任何提示\",{\"1\":{\"1065\":1}}],[\"其他情况均转换为十进制\",{\"1\":{\"913\":1}}],[\"其他值转为\",{\"1\":{\"945\":1}}],[\"其他数字均返回\",{\"1\":{\"897\":1}}],[\"其他转换\",{\"0\":{\"716\":1}}],[\"其他标准内置对象的字面量原型链关系\",{\"1\":{\"653\":1}}],[\"其他标签页可以通过监听相同的广播频道来接收和响应消息\",{\"1\":{\"397\":1}}],[\"其他标签页可以监听该存储区的变化\",{\"1\":{\"397\":1}}],[\"其他模式\",{\"0\":{\"568\":1}}],[\"其他项目都为1\",{\"1\":{\"332\":1}}],[\"其他问题\",{\"0\":{\"303\":1}}],[\"其他字符可以是字母\",{\"1\":{\"246\":1}}],[\"其他常用命令\",{\"0\":{\"214\":1}}],[\"其他\",{\"0\":{\"171\":1}}],[\"其他参数\",{\"1\":{\"152\":1}}],[\"其实我更想说说模块化与组件化\",{\"1\":{\"1621\":1}}],[\"其实我们只需要判断最后一个二进制位是\",{\"1\":{\"1159\":1}}],[\"其实这两个一般都很少使用\",{\"1\":{\"1618\":1}}],[\"其实很像了\",{\"1\":{\"1614\":1}}],[\"其实引用的是\",{\"1\":{\"1579\":1}}],[\"其实是一个不带任何修饰的函数调用\",{\"1\":{\"1579\":1}}],[\"其实是同一个东西\",{\"1\":{\"1562\":1}}],[\"其实是函数\",{\"1\":{\"1375\":1}}],[\"其实上面实现的\",{\"1\":{\"1504\":1}}],[\"其实函数防抖的原理也非常地简单\",{\"1\":{\"1449\":1}}],[\"其实就是将其替换为一个新的定时器\",{\"1\":{\"1445\":1}}],[\"其实就是构造函数\",{\"1\":{\"624\":1}}],[\"其实都是最外层\",{\"1\":{\"1375\":1}}],[\"其实仅仅只是做了一个释放引用的操作\",{\"1\":{\"1282\":1}}],[\"其实使用\",{\"1\":{\"1197\":1}}],[\"其实会默认同时创建该函数的\",{\"1\":{\"645\":1}}],[\"其实所有函数都可以作为构造函数\",{\"1\":{\"645\":1}}],[\"其实并不是\",{\"1\":{\"247\":1}}],[\"其实\",{\"1\":{\"143\":1,\"1466\":1}}],[\"其使命是制定和推广互联网的标准\",{\"1\":{\"139\":1}}],[\"其中有三个标识符\",{\"1\":{\"1674\":1}}],[\"其中有一个参数\",{\"1\":{\"1406\":1}}],[\"其中只有一个标识符\",{\"1\":{\"1674\":2}}],[\"其中的\",{\"1\":{\"1350\":1}}],[\"其中的数组元素将作为单独的参数传给\",{\"1\":{\"1302\":1}}],[\"其中一级管理员拥有最高的权限\",{\"1\":{\"1161\":1}}],[\"其中一个常见的应用场景就是回调函数\",{\"1\":{\"1502\":1}}],[\"其中一个true了就行\",{\"1\":{\"470\":1}}],[\"其中一个等于\",{\"1\":{\"14\":1}}],[\"其中索引顺序很重要\",{\"1\":{\"983\":1}}],[\"其中斜体加粗标注的为\",{\"1\":{\"500\":1}}],[\"其中需要注意的点\",{\"1\":{\"152\":1}}],[\"其中包括\",{\"1\":{\"152\":1}}],[\"其中包括绝大多数人类书面语言的大多数字符\",{\"1\":{\"120\":1}}],[\"其中\",{\"1\":{\"108\":1,\"430\":1,\"509\":2,\"524\":1,\"1259\":1,\"1620\":1}}],[\"其次是可以很方便地复用日志统计等功能模块\",{\"1\":{\"1505\":1}}],[\"其次\",{\"1\":{\"81\":1,\"1684\":1}}],[\"其将会替换掉\",{\"1\":{\"62\":1}}],[\"其宽度大小相对于最近的具有定位特性\",{\"1\":{\"51\":1}}],[\"其\",{\"1\":{\"47\":1,\"1518\":2}}],[\"其特点如下\",{\"1\":{\"45\":1}}],[\"其层级仍然很小\",{\"1\":{\"39\":1}}],[\"父类中静态成员\",{\"1\":{\"1492\":1}}],[\"父类原型上定义方法\",{\"1\":{\"662\":1}}],[\"父类构造函数定义自身属性\",{\"1\":{\"662\":1}}],[\"父类的静态方法\",{\"1\":{\"631\":1}}],[\"父类的静态属性\",{\"1\":{\"624\":1}}],[\"父类的实例对象\",{\"1\":{\"624\":1}}],[\"父类的\",{\"1\":{\"624\":1}}],[\"父类的原型对象parent\",{\"1\":{\"623\":1}}],[\"父类\",{\"1\":{\"623\":1,\"624\":1}}],[\"父元素\",{\"1\":{\"40\":1}}],[\"父元素设置position\",{\"1\":{\"40\":1}}],[\"父元素的\",{\"1\":{\"39\":1}}],[\"父节点的层叠性影响着子节点的层叠性\",{\"1\":{\"39\":1}}],[\"拼爹\",{\"1\":{\"39\":1}}],[\"版新定义的\",{\"1\":{\"928\":1}}],[\"版堆叠\",{\"1\":{\"39\":1}}],[\"版本清楚地说明了箭头函数里面根本没有自己的\",{\"1\":{\"1375\":1}}],[\"版本号由一个或多个修订号组成\",{\"1\":{\"509\":1}}],[\"版本中的保留字并不一样\",{\"1\":{\"250\":1}}],[\"版本\",{\"1\":{\"24\":2,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"509\":1}}],[\"为一个变量分配内存\",{\"1\":{\"1670\":1}}],[\"为路径参数\",{\"1\":{\"1616\":1}}],[\"为创建的所有函数\",{\"1\":{\"1580\":1}}],[\"为默认的\",{\"1\":{\"1253\":1}}],[\"为引用用一对象时返回\",{\"1\":{\"1203\":1}}],[\"为同为\",{\"1\":{\"1203\":1}}],[\"为相等数值\",{\"1\":{\"1203\":1}}],[\"为先操作\",{\"1\":{\"1194\":1}}],[\"为属性访问定义了两种语法\",{\"1\":{\"1086\":1}}],[\"为任意语句\",{\"1\":{\"1018\":1}}],[\"为任何返回结果\",{\"1\":{\"1018\":1}}],[\"为便于记忆\",{\"1\":{\"848\":1}}],[\"为指定对象定义单个\",{\"1\":{\"803\":1}}],[\"为指定对象定义多个\",{\"1\":{\"803\":1}}],[\"为原始数据类型\",{\"1\":{\"800\":1}}],[\"为原型对象创建一个新对象\",{\"1\":{\"656\":1}}],[\"为减少不必要的输入\",{\"1\":{\"578\":1}}],[\"为此\",{\"1\":{\"571\":1}}],[\"为不可扩展对象添加属性会抛出异常\",{\"1\":{\"538\":1}}],[\"为上一次请求的资源的\",{\"1\":{\"430\":1}}],[\"为绑定函数的\",{\"1\":{\"394\":1}}],[\"为网络层以上和应用层以下提供了一个简单的接口\",{\"1\":{\"309\":1}}],[\"为什么不是\",{\"1\":{\"1431\":1}}],[\"为什么后自增后自减优先级很高却后操作\",{\"1\":{\"1194\":1}}],[\"为什么需要浏览器缓存\",{\"0\":{\"432\":1}}],[\"为什么基于\",{\"1\":{\"304\":1}}],[\"为什么断开\",{\"1\":{\"304\":1}}],[\"为什么建立\",{\"1\":{\"303\":1}}],[\"为何\",{\"1\":{\"303\":1}}],[\"为鼠标事件移入获取到的点\",{\"1\":{\"275\":1}}],[\"为前缀\",{\"1\":{\"239\":1}}],[\"为单位的数据包\",{\"1\":{\"152\":1}}],[\"为文档设定主语言\",{\"0\":{\"132\":1}}],[\"为了帮助理解\",{\"1\":{\"1674\":1}}],[\"为了做到形式的对称\",{\"1\":{\"1646\":1}}],[\"为了模拟执行上下文栈的行为\",{\"1\":{\"1557\":1}}],[\"为了利用多核\",{\"1\":{\"1551\":1}}],[\"为了我们能按照一定的间隔周期性的触发定时器\",{\"1\":{\"1543\":1}}],[\"为了协调事件\",{\"1\":{\"1532\":1}}],[\"为了避免复杂性\",{\"1\":{\"1551\":1}}],[\"为了避免多余的代码\",{\"1\":{\"1504\":1}}],[\"为了避免这个问题\",{\"1\":{\"1398\":1}}],[\"为了避免服务器与客户端双方的资源占用和损耗\",{\"1\":{\"156\":1}}],[\"为了不让开发者费心分配内存\",{\"1\":{\"1273\":1}}],[\"为了更好的搞懂变量对象与堆内存\",{\"1\":{\"1264\":1}}],[\"为了保证最大限度的兼容性\",{\"1\":{\"983\":1}}],[\"为了保持完整性\",{\"1\":{\"90\":1}}],[\"为了\",{\"1\":{\"936\":1}}],[\"为了将属性定义\",{\"1\":{\"678\":1}}],[\"为了将一段\",{\"1\":{\"122\":1}}],[\"为了确保子构造函数自身定义的属性或方法不被父构造函数生成的属性重写\",{\"1\":{\"636\":1}}],[\"为了可读性的目的\",{\"1\":{\"632\":1}}],[\"为了表示特征是内部值\",{\"1\":{\"527\":1}}],[\"为了表示给定链表中的环\",{\"1\":{\"491\":1}}],[\"为了优化空间复杂度\",{\"1\":{\"509\":1}}],[\"为了使元素占据一个它通常占据的空间\",{\"1\":{\"329\":1}}],[\"为了兼容\",{\"1\":{\"239\":1}}],[\"为了查找系统中所有文件长度为0的普通文件\",{\"1\":{\"215\":1}}],[\"为了方便传输\",{\"1\":{\"152\":1}}],[\"为了进一步丰富你的网站设计\",{\"1\":{\"130\":1}}],[\"为完全相同的字符序列\",{\"1\":{\"1203\":1}}],[\"为完全不透明\",{\"1\":{\"108\":1}}],[\"为完全透明\",{\"1\":{\"108\":1}}],[\"为非\",{\"1\":{\"87\":3}}],[\"为表意字文本提供完全两端对齐\",{\"1\":{\"85\":1}}],[\"为简写属性\",{\"1\":{\"71\":1,\"83\":1}}],[\"为复合属性\",{\"1\":{\"60\":1}}],[\"为负值时元素会依参考线向外偏移\",{\"1\":{\"56\":1}}],[\"为\",{\"0\":{\"714\":1,\"715\":1},\"1\":{\"48\":1,\"87\":1,\"130\":1,\"301\":1,\"304\":1,\"329\":1,\"464\":1,\"524\":2,\"587\":1,\"615\":1,\"800\":1,\"853\":2,\"913\":3,\"949\":1,\"1018\":1,\"1203\":26,\"1302\":1,\"1570\":1,\"1699\":1}}],[\"为子元素定义了堆叠顺序\",{\"1\":{\"39\":1}}],[\"为能够包含这个元素生成的第一个和最后一个\",{\"1\":{\"36\":1}}],[\"同\",{\"1\":{\"1426\":1,\"1427\":1}}],[\"同名形参\",{\"0\":{\"1381\":1}}],[\"同数组的处理\",{\"1\":{\"944\":1}}],[\"同数据属性中的\",{\"1\":{\"532\":2}}],[\"同支\",{\"1\":{\"521\":1}}],[\"同源指的是\",{\"1\":{\"449\":1}}],[\"同源策略\",{\"0\":{\"449\":1}}],[\"同步加载很容易阻塞\",{\"1\":{\"1617\":1}}],[\"同步加载\",{\"1\":{\"1616\":1,\"1618\":1}}],[\"同步加载依赖的模块\",{\"1\":{\"1616\":1}}],[\"同步引入\",{\"1\":{\"1611\":1}}],[\"同步执行\",{\"1\":{\"1557\":1}}],[\"同步时调用者主动等待调用过程\",{\"1\":{\"1547\":1}}],[\"同步与异步的概念\",{\"1\":{\"1547\":1}}],[\"同步\",{\"0\":{\"1383\":1},\"1\":{\"1547\":1}}],[\"同步脚本经常简单定义函数和注册事件处理程序\",{\"1\":{\"464\":1}}],[\"同步任务执行完成并返回结果后退出执行上下文栈\",{\"1\":{\"1552\":1}}],[\"同步任务在主线程上调用之后需要一直等待\",{\"1\":{\"1552\":1}}],[\"同步任务会按照后进先出的原则依次执行\",{\"1\":{\"457\":1}}],[\"同步任务\",{\"1\":{\"457\":1,\"1552\":1}}],[\"同步连接双方的\",{\"1\":{\"301\":1}}],[\"同步序号来发起一个连接\",{\"1\":{\"299\":1}}],[\"同一函数可以定义多个不同的变量名输出\",{\"1\":{\"1651\":1}}],[\"同一时刻内只会有一段\",{\"1\":{\"1551\":1}}],[\"同一侧\",{\"1\":{\"275\":3,\"276\":3}}],[\"同一父元素中的同级子元素\",{\"1\":{\"39\":1}}],[\"同样使用\",{\"1\":{\"1651\":1}}],[\"同样对象可以作为参数传递给函数\",{\"1\":{\"1452\":1}}],[\"同样对其操作数\",{\"1\":{\"1194\":1}}],[\"同样支持参数列表解构\",{\"1\":{\"1367\":1}}],[\"同样会返回\",{\"1\":{\"1102\":1}}],[\"同样会忽略换行符\",{\"1\":{\"236\":1}}],[\"同样\",{\"1\":{\"1014\":1,\"1083\":1}}],[\"同样用于实现基于原型的继承\",{\"1\":{\"648\":1}}],[\"同样是符合题意的答案\",{\"1\":{\"494\":1}}],[\"同样适用与文件操作\",{\"1\":{\"198\":1}}],[\"同样地先执行函数\",{\"1\":{\"1700\":1}}],[\"同样地\",{\"1\":{\"48\":1,\"233\":1,\"1254\":2,\"1386\":1,\"1654\":1,\"1677\":1}}],[\"同理和二级权限与一下\",{\"1\":{\"1161\":1}}],[\"同理\",{\"1\":{\"102\":1,\"276\":1,\"1406\":1}}],[\"同时因为是\",{\"1\":{\"1695\":1}}],[\"同时保留隐式绑定或者显式绑定修改\",{\"1\":{\"1587\":1}}],[\"同时该实例的属性和方法被\",{\"1\":{\"1581\":2}}],[\"同时容易代码阻塞\",{\"1\":{\"1547\":1}}],[\"同时发生了这么多事情\",{\"1\":{\"1538\":1}}],[\"同时调用时的参数被提供给模拟函数\",{\"1\":{\"1311\":1}}],[\"同时值为原始值\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"同时在进行权限判断的时候也很方便\",{\"1\":{\"1161\":1}}],[\"同时它与任何类型的值比较大小时都返回\",{\"1\":{\"953\":1}}],[\"同时还不必因此创建自定义类型\",{\"1\":{\"640\":1}}],[\"同时还传递了参数\",{\"1\":{\"636\":1}}],[\"同时还满足\",{\"1\":{\"476\":1}}],[\"同时有两个线程\",{\"1\":{\"1551\":1}}],[\"同时有\",{\"1\":{\"624\":1}}],[\"同时使用这个新对象作为调用结果\",{\"1\":{\"1526\":1}}],[\"同时使用\",{\"1\":{\"577\":1}}],[\"同时\",{\"1\":{\"301\":1,\"485\":1,\"825\":1,\"1658\":1}}],[\"同时纯\",{\"1\":{\"277\":1}}],[\"同时最好加上\",{\"1\":{\"131\":1}}],[\"同时显式或者隐式地定义\",{\"1\":{\"87\":1}}],[\"同时设置时\",{\"1\":{\"38\":2}}],[\"同级元素的\",{\"1\":{\"39\":1}}],[\"数组特有的方法都可以使用\",{\"1\":{\"1393\":1}}],[\"数组方法\",{\"1\":{\"1373\":2}}],[\"数组等才会发生内存泄漏\",{\"1\":{\"1284\":1}}],[\"数组或对象时\",{\"1\":{\"1279\":1}}],[\"数组参数就被解构成变量\",{\"1\":{\"1221\":1}}],[\"数组字面量或字符串\",{\"0\":{\"1175\":1}}],[\"数组可迭代\",{\"1\":{\"1109\":1}}],[\"数组的解构赋值\",{\"0\":{\"1213\":1}}],[\"数组的分割\",{\"1\":{\"1183\":1}}],[\"数组的拷贝\",{\"0\":{\"1182\":1}}],[\"数组的合并\",{\"0\":{\"1181\":1}}],[\"数组的元素是按次序排列的\",{\"1\":{\"1218\":1}}],[\"数组的元素是\",{\"1\":{\"1091\":1}}],[\"数组的长度\",{\"1\":{\"524\":1}}],[\"数组初始化表达式中的元素初始化表达式也可以是数组的初始化表达式\",{\"1\":{\"1092\":1}}],[\"数组初始化表达式\",{\"0\":{\"1090\":1},\"1\":{\"1090\":1}}],[\"数组索引只是具有整数名称的枚举属性\",{\"1\":{\"983\":1}}],[\"数组索引为\",{\"1\":{\"352\":1}}],[\"数组类型\",{\"1\":{\"946\":1}}],[\"数组首先会被转为\",{\"1\":{\"944\":1}}],[\"数组检测\",{\"0\":{\"938\":1}}],[\"数组\",{\"0\":{\"733\":1,\"794\":1},\"1\":{\"1109\":1,\"1204\":1,\"1218\":1,\"1393\":1}}],[\"数组作为一种对象\",{\"1\":{\"540\":1,\"706\":1}}],[\"数组排序\",{\"0\":{\"488\":1,\"1503\":1}}],[\"数组中的应用\",{\"0\":{\"1180\":1}}],[\"数组中的第k个最大元素\",{\"0\":{\"482\":1}}],[\"数组中\",{\"1\":{\"943\":1}}],[\"数组中正处理的当前元素的索引\",{\"1\":{\"668\":1}}],[\"数组中同一个元素在答案里不能重复出现\",{\"1\":{\"515\":1}}],[\"数组中如有非promise项\",{\"1\":{\"380\":1,\"383\":1}}],[\"数组对象\",{\"1\":{\"388\":1,\"917\":1}}],[\"数组本身\",{\"1\":{\"347\":1,\"348\":1}}],[\"数组直接量的元素列表结尾处可以留下单个逗号\",{\"1\":{\"1093\":1}}],[\"数组直接量中的列表逗号之间的元素可以省略\",{\"1\":{\"1093\":1}}],[\"数组直接量\",{\"1\":{\"245\":1,\"1083\":1}}],[\"数据是私有的\",{\"1\":{\"1613\":1}}],[\"数据拷贝\",{\"0\":{\"1265\":1}}],[\"数据在栈内存中的存储与使用方式类似于数据结构中的堆栈数据结构\",{\"1\":{\"1263\":1}}],[\"数据的值\",{\"1\":{\"1232\":1}}],[\"数据结构\",{\"1\":{\"1122\":1}}],[\"数据值\",{\"1\":{\"948\":1}}],[\"数据属性的值不可更改\",{\"1\":{\"706\":1}}],[\"数据属性不能被重新定义\",{\"1\":{\"539\":1,\"540\":1}}],[\"数据属性共有\",{\"1\":{\"528\":1}}],[\"数据属性\",{\"0\":{\"528\":1},\"1\":{\"527\":1,\"528\":2}}],[\"数据会消失\",{\"1\":{\"444\":1}}],[\"数据更新会触发视图更新\",{\"1\":{\"402\":1}}],[\"数据驱动视图\",{\"1\":{\"402\":1}}],[\"数据报组装成帧\",{\"1\":{\"318\":1}}],[\"数据报\",{\"1\":{\"318\":1}}],[\"数据报的头部仅仅加入了复用和数据校验\",{\"1\":{\"309\":1}}],[\"数据链路层将网络层接下来的\",{\"1\":{\"318\":1}}],[\"数据链路层\",{\"1\":{\"317\":1,\"318\":1}}],[\"数据通信形式\",{\"0\":{\"312\":1}}],[\"数据传输服务\",{\"1\":{\"297\":1}}],[\"数据直接量\",{\"1\":{\"245\":1}}],[\"数据封装\",{\"1\":{\"229\":1}}],[\"数据抽象\",{\"1\":{\"229\":1}}],[\"数据包通过光纤以及各种中间代理服务器进行传输\",{\"1\":{\"303\":1}}],[\"数据包结构\",{\"0\":{\"299\":1}}],[\"数据包具体内容\",{\"1\":{\"152\":1}}],[\"数据包的发送者\",{\"1\":{\"152\":1}}],[\"数据\",{\"0\":{\"1232\":1},\"1\":{\"152\":1,\"186\":2,\"1611\":1,\"1613\":1,\"1614\":1}}],[\"数据类型和值\",{\"0\":{\"1750\":1}}],[\"数据类型支持的范围时\",{\"1\":{\"929\":1}}],[\"数据类型\",{\"0\":{\"917\":1},\"1\":{\"152\":1,\"1070\":1}}],[\"数值相加后\",{\"1\":{\"1452\":2}}],[\"数值和布尔值的包装对象都有\",{\"1\":{\"1220\":1}}],[\"数值和布尔值的解构赋值\",{\"0\":{\"1220\":1}}],[\"数值比较可以按这种方式强制执行\",{\"1\":{\"1203\":1}}],[\"数值都是以\",{\"1\":{\"1142\":1}}],[\"数值字面量\",{\"1\":{\"1080\":1}}],[\"数值越小\",{\"1\":{\"332\":1}}],[\"数值越大层级最大\",{\"1\":{\"39\":1}}],[\"数值将会被认为是八进制而不会报错\",{\"1\":{\"245\":1}}],[\"数值直接量\",{\"1\":{\"245\":1}}],[\"数值\",{\"1\":{\"75\":1,\"953\":3,\"1142\":1}}],[\"数字存储为根为\",{\"1\":{\"1142\":1}}],[\"数字类型\",{\"1\":{\"1115\":1}}],[\"数字的范围\",{\"0\":{\"925\":1}}],[\"数字对象\",{\"1\":{\"917\":1}}],[\"数字总和\",{\"1\":{\"497\":2}}],[\"数字分隔符\",{\"0\":{\"384\":1}}],[\"数字\",{\"0\":{\"31\":1,\"922\":1},\"1\":{\"408\":1,\"917\":1,\"948\":2,\"1302\":1,\"1306\":1}}],[\"w3school\",{\"1\":{\"1561\":1}}],[\"w3c\",{\"1\":{\"139\":2,\"143\":1}}],[\"wke\",{\"1\":{\"467\":1}}],[\"wrong\",{\"1\":{\"1218\":2}}],[\"writable\",{\"1\":{\"528\":1,\"529\":6,\"530\":4,\"532\":1,\"539\":1,\"540\":1,\"548\":2,\"688\":1,\"689\":1,\"694\":1,\"721\":1,\"726\":1,\"776\":3,\"787\":2,\"825\":5,\"852\":1,\"926\":1}}],[\"writeln\",{\"1\":{\"887\":2}}],[\"write\",{\"1\":{\"464\":3}}],[\"wrapper\",{\"1\":{\"408\":3,\"1496\":1}}],[\"wrap>\",{\"1\":{\"332\":1}}],[\"wrap属性的简写形式\",{\"1\":{\"332\":1}}],[\"wrap属性定义\",{\"1\":{\"332\":1}}],[\"wrap\",{\"0\":{\"90\":1},\"1\":{\"91\":1,\"92\":1,\"332\":1}}],[\"wget\",{\"1\":{\"215\":2}}],[\"what\",{\"1\":{\"392\":1,\"393\":1,\"394\":1}}],[\"wheel\",{\"1\":{\"1437\":1}}],[\"whether\",{\"1\":{\"350\":1}}],[\"whereis\",{\"1\":{\"215\":1}}],[\"while\",{\"0\":{\"974\":1,\"1058\":1},\"1\":{\"249\":1,\"473\":1,\"476\":3,\"479\":1,\"482\":2,\"488\":2,\"491\":1,\"494\":1,\"500\":1,\"503\":1,\"506\":1,\"509\":1,\"969\":2,\"971\":2,\"974\":1,\"975\":1,\"976\":7,\"977\":1,\"1001\":1,\"1014\":1,\"1058\":1,\"1059\":1,\"1060\":2,\"1116\":1,\"1329\":2,\"1413\":1}}],[\"which\",{\"1\":{\"215\":1,\"796\":1,\"1319\":2}}],[\"which指令会在环境变量$path设置的目录里查找符合条件的文件\",{\"1\":{\"215\":1}}],[\"whitespace\",{\"0\":{\"237\":1}}],[\"white\",{\"0\":{\"92\":1},\"1\":{\"48\":1,\"87\":1,\"635\":3,\"662\":3,\"1389\":1}}],[\"w\",{\"1\":{\"208\":1,\"1178\":1}}],[\"wq\",{\"1\":{\"205\":2}}],[\"winheight\",{\"1\":{\"1438\":4}}],[\"window触发\",{\"1\":{\"464\":1}}],[\"window\",{\"1\":{\"289\":1,\"392\":2,\"393\":2,\"560\":4,\"848\":2,\"893\":1,\"935\":1,\"985\":1,\"1066\":3,\"1138\":1,\"1282\":1,\"1302\":1,\"1306\":1,\"1312\":3,\"1375\":1,\"1436\":2,\"1438\":7,\"1457\":3,\"1477\":1,\"1510\":1,\"1511\":1,\"1518\":1,\"1561\":6,\"1578\":2,\"1580\":1,\"1587\":1,\"1613\":3,\"1614\":3,\"1616\":1,\"1676\":2,\"1686\":1}}],[\"windows系统中压缩文件的扩展名\",{\"1\":{\"211\":1}}],[\"windows\",{\"1\":{\"153\":1}}],[\"with\",{\"1\":{\"249\":1,\"408\":1,\"1312\":2,\"1620\":1}}],[\"wide\",{\"1\":{\"139\":2}}],[\"width>\",{\"1\":{\"60\":1}}],[\"width\",{\"0\":{\"47\":1,\"66\":1},\"1\":{\"37\":1,\"45\":2,\"47\":1,\"48\":2,\"50\":2,\"58\":3,\"61\":2,\"62\":1,\"66\":1,\"84\":1,\"87\":1,\"104\":2,\"277\":1,\"1517\":2}}],[\"work\",{\"1\":{\"1658\":2}}],[\"worker\",{\"1\":{\"1551\":1}}],[\"workers\",{\"1\":{\"848\":1}}],[\"works\",{\"1\":{\"714\":2,\"715\":2}}],[\"world\",{\"1\":{\"139\":1,\"606\":2,\"622\":2,\"630\":1,\"635\":1,\"656\":2,\"757\":1,\"954\":2,\"1080\":3,\"1115\":1,\"1169\":4,\"1218\":7,\"1234\":2,\"1340\":2,\"1344\":2,\"1348\":5,\"1398\":4,\"1399\":2,\"1424\":1,\"1426\":1,\"1427\":2,\"1579\":6}}],[\"word\",{\"0\":{\"89\":1,\"90\":1,\"91\":1},\"1\":{\"85\":1,\"90\":1,\"91\":3}}],[\"welcome\",{\"1\":{\"1496\":1}}],[\"we\",{\"1\":{\"1356\":1}}],[\"went\",{\"1\":{\"1218\":2}}],[\"webcore\",{\"1\":{\"1550\":1}}],[\"websocket仍是更常用的选择\",{\"1\":{\"397\":1}}],[\"web服务器解析用户请求\",{\"1\":{\"153\":1}}],[\"webkit\",{\"1\":{\"143\":7,\"144\":1,\"436\":2,\"1550\":3}}],[\"web标准鼓励使用模块化和可扩展的技术\",{\"1\":{\"139\":1}}],[\"web标准促进创建无障碍的网页和应用程序\",{\"1\":{\"139\":1}}],[\"web标准和w3c的重要性在于\",{\"1\":{\"139\":1}}],[\"web标准是一系列由world\",{\"1\":{\"139\":1}}],[\"web标准\",{\"0\":{\"139\":1}}],[\"web\",{\"1\":{\"115\":1,\"128\":1,\"139\":2,\"848\":2,\"1534\":1,\"1551\":1,\"1621\":2}}],[\"weight\",{\"0\":{\"75\":1},\"1\":{\"75\":1,\"1497\":5}}],[\"weight>\",{\"1\":{\"71\":1}}],[\"waited\",{\"1\":{\"1685\":1}}],[\"wait\",{\"1\":{\"304\":4,\"1358\":1,\"1433\":2,\"1446\":4}}],[\"wavy\",{\"1\":{\"83\":1}}],[\"warning\",{\"1\":{\"38\":1,\"39\":1,\"59\":1,\"71\":1,\"75\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"99\":1,\"102\":1,\"105\":1,\"238\":1,\"245\":1,\"246\":1,\"602\":1,\"619\":1,\"622\":1,\"623\":1,\"625\":1,\"630\":1,\"635\":1,\"653\":1,\"656\":1,\"683\":1,\"812\":1,\"859\":1,\"891\":1,\"903\":1,\"917\":1,\"923\":1,\"936\":1,\"948\":1,\"1023\":1,\"1053\":2,\"1065\":1,\"1100\":1,\"1165\":1,\"1216\":1,\"1253\":1,\"1287\":1,\"1329\":1,\"1375\":1,\"1540\":1,\"1549\":1,\"1551\":1,\"1578\":1,\"1593\":1,\"1652\":1,\"1685\":1,\"1692\":1,\"1693\":2,\"1694\":1,\"1698\":1}}],[\"设计模式\",{\"0\":{\"1728\":1}}],[\"设计良好的软件都会依次进行实现\",{\"1\":{\"1681\":1}}],[\"设计\",{\"1\":{\"1681\":1}}],[\"设计一个算法来计算你所能获取的最大利润\",{\"1\":{\"485\":1}}],[\"设定\",{\"1\":{\"1541\":1}}],[\"设定为\",{\"1\":{\"38\":1}}],[\"设备文件\",{\"1\":{\"186\":1}}],[\"设置指定对象的原型对象\",{\"1\":{\"803\":1}}],[\"设置了协商缓存\",{\"1\":{\"430\":1}}],[\"设置值的时候也需要深度监听\",{\"1\":{\"402\":1}}],[\"设置新的延时定时器\",{\"1\":{\"288\":1}}],[\"设置定时器\",{\"1\":{\"288\":1}}],[\"设置的ip\",{\"1\":{\"220\":1}}],[\"设置系统时间\",{\"1\":{\"215\":1}}],[\"设置背景图片大小\",{\"1\":{\"104\":1}}],[\"设置为类\",{\"1\":{\"1487\":1}}],[\"设置为\",{\"1\":{\"102\":1,\"301\":2}}],[\"设置宽高无效\",{\"1\":{\"45\":1}}],[\"设置该元素的\",{\"1\":{\"40\":1}}],[\"设置\",{\"1\":{\"37\":1,\"45\":2,\"301\":1,\"529\":2,\"530\":3}}],[\"设置在元素后\",{\"1\":{\"16\":1}}],[\"设置在元素前\",{\"1\":{\"16\":1}}],[\"设置元素的背景\",{\"1\":{\"106\":1}}],[\"设置元素被选择时的颜色\",{\"1\":{\"16\":1}}],[\"设置元素文字占位符的样式\",{\"1\":{\"16\":1}}],[\"设置元素内的第一行的样式\",{\"1\":{\"16\":1}}],[\"设置元素内的第一个字符的样式\",{\"1\":{\"16\":1}}],[\"设置元素在成为输入焦点\",{\"1\":{\"15\":1}}],[\"设置元素在被用户激活\",{\"1\":{\"15\":1}}],[\"设置元素在其鼠标悬停时的样式\",{\"1\":{\"15\":1}}],[\"设置超链接\",{\"1\":{\"15\":2}}],[\"还意味着在顶层\",{\"1\":{\"1561\":1}}],[\"还调用了\",{\"1\":{\"1557\":1}}],[\"还要创建\",{\"1\":{\"1557\":1}}],[\"还存在一个\",{\"1\":{\"1532\":1}}],[\"还存在标记的变量将被视为准备删除的变量\",{\"1\":{\"1282\":1}}],[\"还必须得层层判断后跳出\",{\"1\":{\"1425\":1}}],[\"还没有声明\",{\"1\":{\"1217\":1}}],[\"还会赋予单词语义\",{\"1\":{\"1674\":1}}],[\"还会获取到原型链上的可枚举属性\",{\"1\":{\"731\":1}}],[\"还会覆盖下层的元素\",{\"1\":{\"37\":1}}],[\"还有搜索联想词功能类似\",{\"1\":{\"1447\":1}}],[\"还有一种情况\",{\"1\":{\"1579\":1}}],[\"还有一种解决方法是使用\",{\"1\":{\"607\":1}}],[\"还有一些附加的属性\",{\"1\":{\"1394\":1}}],[\"还有就是\",{\"1\":{\"143\":1}}],[\"还可以再使用箭头函数\",{\"1\":{\"1376\":1}}],[\"还可以使用一个计算属性名的表达式绑定到给定的函数\",{\"1\":{\"1321\":1}}],[\"还可以用循环语句\",{\"1\":{\"1504\":1}}],[\"还可以用于对象\",{\"1\":{\"1218\":1}}],[\"还可以用来继承原生的构造函数\",{\"1\":{\"625\":1}}],[\"还可以用来写私有方法\",{\"1\":{\"615\":1}}],[\"还可以改写\",{\"1\":{\"955\":1}}],[\"还可以直接支持新增和删除属性\",{\"1\":{\"403\":1}}],[\"还可以选择将脚本放入\",{\"1\":{\"131\":1}}],[\"还未能实现可以同时判断移入和移出\",{\"1\":{\"277\":1}}],[\"还包括css\",{\"1\":{\"157\":1}}],[\"还需要进行解压\",{\"1\":{\"155\":1}}],[\"还负责执行代码\",{\"1\":{\"144\":1}}],[\"还是会输出\",{\"1\":{\"1613\":1}}],[\"还是上面的例子\",{\"1\":{\"1565\":1}}],[\"还是不能被执行\",{\"1\":{\"1540\":1}}],[\"还是让函数的执行结果返回另外一个函数\",{\"1\":{\"1500\":1}}],[\"还是看起来别扭\",{\"1\":{\"1425\":1}}],[\"还是作为对象调用\",{\"1\":{\"623\":1}}],[\"还是可以调用到这个方法\",{\"1\":{\"612\":1}}],[\"还是存在于原型中\",{\"1\":{\"577\":1}}],[\"还是一个待搜索的关键词\",{\"1\":{\"148\":1}}],[\"还是\",{\"1\":{\"38\":1,\"1004\":1,\"1159\":1,\"1670\":1}}],[\"生活中的实例\",{\"1\":{\"1431\":1,\"1444\":1}}],[\"生产环境中\",{\"1\":{\"603\":1}}],[\"生效\",{\"1\":{\"530\":1}}],[\"生效的优先级高\",{\"1\":{\"38\":1}}],[\"生命周期长\",{\"1\":{\"445\":1}}],[\"生成之后\",{\"1\":{\"1263\":1}}],[\"生成器是一个返回迭代器的函数\",{\"1\":{\"1488\":1}}],[\"生成器关闭\",{\"1\":{\"1002\":1}}],[\"生成器不应该重用\",{\"1\":{\"1002\":2}}],[\"生成器方法\",{\"0\":{\"606\":1,\"1488\":1}}],[\"生成\",{\"1\":{\"437\":1}}],[\"生成css规则树\",{\"1\":{\"157\":1}}],[\"生成dom树\",{\"1\":{\"157\":1}}],[\"生成相对定位的元素\",{\"1\":{\"35\":1}}],[\"生成固定定位的元素\",{\"1\":{\"35\":1}}],[\"生成绝对定位的元素\",{\"1\":{\"35\":1}}],[\"并从\",{\"1\":{\"1709\":1}}],[\"并对全局执行环境中的代码进行声明提升\",{\"1\":{\"1709\":1}}],[\"并对上次得到的属性值进行了覆盖\",{\"1\":{\"662\":1}}],[\"并\",{\"1\":{\"1698\":1}}],[\"并依次查找\",{\"1\":{\"1675\":1}}],[\"并依次完成以下步骤\",{\"1\":{\"1555\":1}}],[\"并命名为a\",{\"1\":{\"1670\":1}}],[\"并实施一套非常严格的规则\",{\"1\":{\"1669\":1}}],[\"并以\",{\"1\":{\"1642\":1}}],[\"并直接导出这两个接口\",{\"1\":{\"1641\":1}}],[\"并进行组合在一起\",{\"1\":{\"1606\":1}}],[\"并称之为模块\",{\"1\":{\"1606\":1}}],[\"并当作参数传入一个函数\",{\"1\":{\"1586\":1}}],[\"并发加载多个模块\",{\"0\":{\"1602\":1}}],[\"并发\",{\"1\":{\"1547\":1}}],[\"并发模型\",{\"0\":{\"1546\":1,\"1761\":1}}],[\"并发执行这些非阻塞异步函数\",{\"1\":{\"1353\":1}}],[\"并被销毁\",{\"1\":{\"1709\":1}}],[\"并被赋予新的函数\",{\"1\":{\"1467\":1}}],[\"并被转换为一系列的输入元素\",{\"1\":{\"233\":1}}],[\"并拥有指定的\",{\"1\":{\"1412\":1}}],[\"并拥有一个有意义的真值\",{\"1\":{\"1197\":1}}],[\"并行加载多个模块\",{\"1\":{\"1617\":1}}],[\"并行和并发的概念\",{\"1\":{\"1547\":1}}],[\"并行\",{\"1\":{\"1357\":1,\"1547\":1}}],[\"并可同时使用指定对象作为本次执行时函数内部的\",{\"1\":{\"1304\":1}}],[\"并可同时使用指定对象作为本次函数执行时函数内部的\",{\"1\":{\"1300\":1}}],[\"并可以通过\",{\"1\":{\"565\":1}}],[\"并通过这个属性间接引用函数\",{\"1\":{\"1580\":1}}],[\"并通过\",{\"1\":{\"1178\":1}}],[\"并没有\",{\"1\":{\"1698\":1}}],[\"并没有定义变量\",{\"1\":{\"1407\":1}}],[\"并没有弹出1\",{\"1\":{\"1034\":1}}],[\"并没有删除该属性\",{\"1\":{\"564\":1}}],[\"并跳出循环语句\",{\"1\":{\"1009\":1}}],[\"并尝试再次迭代\",{\"1\":{\"1002\":1}}],[\"并为每个不同属性的值执行语句\",{\"1\":{\"989\":1}}],[\"并继续执行循环的下一次迭代\",{\"1\":{\"966\":1}}],[\"并非对外的接口\",{\"1\":{\"1654\":1}}],[\"并非对象的\",{\"1\":{\"943\":1}}],[\"并非该代码一定有什么问题\",{\"1\":{\"1287\":1}}],[\"并非所有的英文字符都会组成连续单元\",{\"1\":{\"54\":1}}],[\"并指定该\",{\"1\":{\"803\":1}}],[\"并分别指定它们的\",{\"1\":{\"803\":1}}],[\"并认为\",{\"1\":{\"762\":1}}],[\"并利用所有使得回调函数返回\",{\"1\":{\"669\":1}}],[\"并赋值为构造函数的\",{\"1\":{\"648\":1}}],[\"并未真正解决\",{\"1\":{\"611\":1}}],[\"并返回一个新函数赋值给\",{\"1\":{\"1412\":1}}],[\"并返回一个带有这些键值对的新对象\",{\"1\":{\"711\":1}}],[\"并返回其计算结果\",{\"1\":{\"1197\":2}}],[\"并返回其非编码形式\",{\"1\":{\"868\":1,\"873\":1}}],[\"并返回表达式\",{\"1\":{\"1036\":1}}],[\"并返回\",{\"1\":{\"1034\":1}}],[\"并返回编码后的字符串\",{\"1\":{\"884\":1}}],[\"并返回它们的数组下标\",{\"1\":{\"515\":1}}],[\"并返回反转后的链表\",{\"1\":{\"473\":1}}],[\"并选择在\",{\"1\":{\"485\":1}}],[\"并在导入时指定自定义名称\",{\"1\":{\"1626\":1}}],[\"并在它的内部手动调用了\",{\"1\":{\"1580\":1}}],[\"并在可能的情况下将一个消息裁剪成多个消息\",{\"1\":{\"1534\":1}}],[\"并在\",{\"1\":{\"1048\":1}}],[\"并在该对象上实现监听逻辑\",{\"1\":{\"408\":1}}],[\"并在删除之前询问它们\",{\"1\":{\"215\":1}}],[\"并使用object\",{\"1\":{\"402\":1}}],[\"并读取最新的消息内容来实现通信效果\",{\"1\":{\"397\":1}}],[\"并向客户端发出确认\",{\"1\":{\"303\":1}}],[\"并将这个值传递给\",{\"1\":{\"1670\":1}}],[\"并将这个方法覆盖于遍历它的函数\",{\"1\":{\"1466\":1}}],[\"并将一个值存储在变量\",{\"1\":{\"1668\":1}}],[\"并将其命名为变量\",{\"1\":{\"1670\":1}}],[\"并将其作为整个表达式的值返回\",{\"1\":{\"1087\":1}}],[\"并将其添加到当前作用域\",{\"1\":{\"1052\":1}}],[\"并将原型链作为实现继承的主要方法\",{\"1\":{\"644\":1}}],[\"并将队列中的任务依此执行\",{\"1\":{\"457\":1}}],[\"并将网页渲染成可视化内容\",{\"1\":{\"425\":1}}],[\"并将该数据包发送给服务端\",{\"1\":{\"301\":1}}],[\"并将它们设置为红色\",{\"1\":{\"2\":1}}],[\"并把它给我\",{\"1\":{\"1670\":1}}],[\"并把它作为参数传递给另外一个函数\",{\"1\":{\"1502\":1}}],[\"并把我们提供的对象绑定到\",{\"1\":{\"1584\":1}}],[\"并把不同的事件放在不同的队列中等待主线程执行\",{\"1\":{\"1534\":1}}],[\"并把左边空出的位都填充为\",{\"1\":{\"1151\":1}}],[\"并把所有现有属性的\",{\"1\":{\"776\":1,\"787\":1}}],[\"并把\",{\"1\":{\"244\":2}}],[\"并不关心函数和作用域是如何声明以及在何处声明\",{\"1\":{\"1677\":1}}],[\"并不一定意味着就是\",{\"1\":{\"1670\":1}}],[\"并不一定是导致浏览器奔溃\",{\"1\":{\"1284\":1}}],[\"并不代表完整的作用域链\",{\"1\":{\"1570\":1}}],[\"并不是真正意义上的\",{\"1\":{\"1670\":1}}],[\"并不是因为箭头函数内部有绑定\",{\"1\":{\"1589\":1}}],[\"并不是每个人创建了节点之后就希望它们立刻被隐藏\",{\"1\":{\"1502\":1}}],[\"并不是一个关键字\",{\"1\":{\"1137\":1}}],[\"并不是函数中\",{\"1\":{\"1034\":1}}],[\"并不是语言本身的特性\",{\"1\":{\"603\":1}}],[\"并不是在所有换行处都填补分号\",{\"1\":{\"252\":1,\"253\":1}}],[\"并不会有线程专门用来将一个函数值\",{\"1\":{\"1670\":1}}],[\"并不会抛出\",{\"1\":{\"1076\":1}}],[\"并不会终止循环的迭代\",{\"1\":{\"969\":1}}],[\"并不会影响到\",{\"1\":{\"569\":1}}],[\"并不会影响本身布局的高度\",{\"1\":{\"93\":1}}],[\"并不会报错\",{\"1\":{\"560\":1}}],[\"并不区分大小写\",{\"1\":{\"235\":1}}],[\"并支持地球上几乎所有在使用的语言\",{\"1\":{\"234\":1}}],[\"并列出它们的完整路径\",{\"1\":{\"215\":1}}],[\"并重新应用这些提交\",{\"1\":{\"175\":1}}],[\"并调用数据库信息\",{\"1\":{\"153\":1}}],[\"并加入源及目标的ip地址\",{\"1\":{\"152\":1}}],[\"并标记编号\",{\"1\":{\"152\":1}}],[\"并抽取出host等信息\",{\"1\":{\"148\":1}}],[\"并比较缓存是否过期\",{\"1\":{\"147\":1}}],[\"并包含\",{\"1\":{\"131\":1}}],[\"并仍保持在计算上简单\",{\"1\":{\"110\":1}}],[\"并且使用不当容易造成内存泄漏\",{\"1\":{\"1711\":1}}],[\"并且使代码更易读\",{\"1\":{\"119\":1}}],[\"并且通过使用其他类型的作用域单元甚至可以实现维护起来更加优秀\",{\"1\":{\"1689\":1}}],[\"并且能够自动运行\",{\"1\":{\"1684\":1}}],[\"并且将其改名为\",{\"1\":{\"1658\":1}}],[\"并且将其不作任何改变地返回\",{\"1\":{\"891\":1}}],[\"并且压入执行上下文栈\",{\"1\":{\"1557\":1}}],[\"并且只有当整个应用程序结束的时候\",{\"1\":{\"1557\":1}}],[\"并且因为此时队列中已经有一个\",{\"1\":{\"1540\":1}}],[\"并且因此避免了在\",{\"1\":{\"659\":1}}],[\"并且在主线程空闲时才推入执行\",{\"1\":{\"1538\":1}}],[\"并且在脚本下载和执行时解析器会暂停\",{\"1\":{\"464\":1}}],[\"并且返回接受余下的参数而且返回结果的新函数的技术\",{\"1\":{\"1416\":1}}],[\"并且返回值也是一个\",{\"1\":{\"1142\":1}}],[\"并且外部作用域无同名变量已定义\",{\"1\":{\"1407\":1}}],[\"并且没有自己的\",{\"1\":{\"1361\":1}}],[\"并且代码中没有对他的引用\",{\"1\":{\"1286\":1}}],[\"并且可以用于在函数内部使用来代指其本身\",{\"1\":{\"1333\":1}}],[\"并且可以多次使用\",{\"1\":{\"1178\":1}}],[\"并且可选的将其初始化为一个值\",{\"1\":{\"1066\":1}}],[\"并且它们不能用作构造函数\",{\"1\":{\"1361\":1}}],[\"并且它们不必包含常数值\",{\"1\":{\"1083\":1}}],[\"并且它参与一个块或者内联格式上下文\",{\"1\":{\"329\":1}}],[\"并且每个子表达式都包含一个属性名和一个冒号作为前缀\",{\"1\":{\"1083\":1}}],[\"并且对应一个响应\",{\"1\":{\"1051\":1}}],[\"并且对于兄弟组件间的状态传递无能为力\",{\"1\":{\"412\":1}}],[\"并且控制将被传递到调用堆栈中的第一个\",{\"1\":{\"1045\":1}}],[\"并且作为\",{\"1\":{\"1004\":1}}],[\"并且与通用对象属性相同\",{\"1\":{\"983\":1}}],[\"并且所有异步脚本完成载入和执行\",{\"1\":{\"464\":1}}],[\"并且父节点可以通过事件对象获取到目标节点\",{\"1\":{\"456\":1}}],[\"并且由操作系统负责调度和管理\",{\"1\":{\"422\":1}}],[\"并且给他赋值为this\",{\"1\":{\"392\":1,\"393\":1}}],[\"并且按序到达\",{\"1\":{\"298\":1}}],[\"并且无法将单个输入流转换为一个完整的程序时\",{\"1\":{\"253\":1}}],[\"并且文件所属组的用户和其他用户具有读权限的文件\",{\"1\":{\"215\":1}}],[\"并且进行一些验证\",{\"1\":{\"153\":1}}],[\"并且负责寻找传输路线\",{\"1\":{\"152\":1}}],[\"并且根据你输入的内容进行自动完成\",{\"1\":{\"148\":1}}],[\"并且背景的绘制区域和定位区域是相对于可滚动的区域而不是包含他们的边框\",{\"1\":{\"105\":1}}],[\"并且当文字超出边界时不换行\",{\"1\":{\"92\":1}}],[\"并且\",{\"1\":{\"38\":1,\"458\":1,\"1589\":1}}],[\"值属性\",{\"0\":{\"1748\":1}}],[\"值呢\",{\"1\":{\"1709\":1}}],[\"值得注意的是\",{\"1\":{\"1483\":1}}],[\"值得一提的是对于\",{\"1\":{\"946\":1}}],[\"值对是真正需要的实参数据\",{\"1\":{\"1382\":1}}],[\"值对的形式来传入参数\",{\"1\":{\"1382\":1}}],[\"值被忽略\",{\"1\":{\"1311\":1}}],[\"值绑定到\",{\"1\":{\"1311\":1}}],[\"值会自动指向全局对象\",{\"1\":{\"1306\":1}}],[\"值并不一定是该函数执行时真正的\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"值并计算的\",{\"1\":{\"81\":1}}],[\"值从数组\",{\"1\":{\"1212\":1}}],[\"值和预设参数\",{\"1\":{\"1412\":1}}],[\"值和\",{\"1\":{\"1156\":1}}],[\"值交换\",{\"0\":{\"1154\":1}}],[\"值转换为\",{\"1\":{\"951\":1}}],[\"值可能被检测为不等\",{\"1\":{\"1203\":1}}],[\"值可以显式转为字符串\",{\"1\":{\"928\":1}}],[\"值可变\",{\"1\":{\"341\":2}}],[\"值校验\",{\"0\":{\"861\":1}}],[\"值作为名称的属性\",{\"1\":{\"729\":1,\"803\":1}}],[\"值说明\",{\"1\":{\"688\":1}}],[\"值默认为\",{\"1\":{\"648\":1}}],[\"值命名\",{\"0\":{\"613\":1}}],[\"值不是\",{\"1\":{\"1518\":1}}],[\"值不可变\",{\"1\":{\"341\":1}}],[\"值不为\",{\"1\":{\"36\":1}}],[\"值在非严格模式下将是全局对象\",{\"1\":{\"669\":1}}],[\"值在\",{\"1\":{\"329\":1,\"948\":1}}],[\"值在它们自己的单独规范中完整定义\",{\"1\":{\"329\":1}}],[\"值如何影响\",{\"1\":{\"329\":1}}],[\"值如果相同\",{\"1\":{\"39\":1}}],[\"值为引用数据类型时\",{\"1\":{\"946\":1}}],[\"值为以秒为单位的最⼤新鲜时间\",{\"1\":{\"464\":1}}],[\"值为⼀个绝对时间表示缓存新鲜日期\",{\"1\":{\"464\":1}}],[\"值为上一次资源请求的\",{\"1\":{\"430\":1}}],[\"值为\",{\"0\":{\"1110\":1},\"1\":{\"301\":2,\"802\":1,\"974\":1}}],[\"值一致\",{\"1\":{\"92\":3}}],[\"值效果相同\",{\"1\":{\"91\":1}}],[\"值将会根据图片源尺寸进行等比例缩放\",{\"1\":{\"47\":1}}],[\"值多大\",{\"1\":{\"39\":1}}],[\"值很小\",{\"1\":{\"39\":1}}],[\"值的变量的一个别名\",{\"1\":{\"1321\":1}}],[\"值的初始化\",{\"0\":{\"1273\":1}}],[\"值的描述\",{\"1\":{\"928\":1}}],[\"值的数组\",{\"1\":{\"841\":1}}],[\"值的数组集合\",{\"1\":{\"803\":1}}],[\"值的唯一性\",{\"1\":{\"613\":1}}],[\"值的\",{\"1\":{\"39\":1}}],[\"值的父元素的情况下\",{\"1\":{\"39\":1}}],[\"值较大的元素被值较小的元素遮挡了\",{\"1\":{\"39\":1}}],[\"值\",{\"0\":{\"859\":1},\"1\":{\"39\":2,\"87\":3,\"329\":1,\"430\":1,\"611\":1,\"613\":2,\"648\":1,\"668\":1,\"669\":1,\"753\":1,\"846\":1,\"1200\":1,\"1302\":1,\"1306\":2,\"1312\":1,\"1382\":1,\"1518\":1,\"1529\":1}}],[\"值只决定\",{\"1\":{\"39\":1}}],[\"值其中之一\",{\"1\":{\"38\":1}}],[\"指有权访问另一个函数作用域中的变量的函数\",{\"1\":{\"1708\":1}}],[\"指属于这个函数的全部变量都可以在整个函数的范围内使用及复用\",{\"1\":{\"1680\":1}}],[\"指程序的设计结构\",{\"1\":{\"1547\":1}}],[\"指程序的运行状态\",{\"1\":{\"1547\":1}}],[\"指操作函数的函数\",{\"1\":{\"1500\":1}}],[\"指将上次的\",{\"1\":{\"1441\":1}}],[\"指第二个\",{\"1\":{\"1407\":1}}],[\"指申请的内存执行完后没有及时的清理或者销毁\",{\"1\":{\"1284\":1}}],[\"指内存空间已经被申请完\",{\"1\":{\"1283\":1}}],[\"指数\",{\"1\":{\"1207\":1}}],[\"指数运算符\",{\"1\":{\"1207\":1}}],[\"指示变量未指向任何对象\",{\"1\":{\"919\":1}}],[\"指只能在类的内部访问而外部不能访问的方法和属性\",{\"1\":{\"610\":1}}],[\"指代当前类\",{\"1\":{\"600\":1}}],[\"指的是将原型链和借用构造函数的技术组合到一块\",{\"1\":{\"662\":1}}],[\"指的是类\",{\"1\":{\"630\":1}}],[\"指的是\",{\"1\":{\"621\":1}}],[\"指的是没有公共属性\",{\"1\":{\"572\":1}}],[\"指的是流入进程或从进程流出的字节序列\",{\"1\":{\"298\":1}}],[\"指的是一个对象调用了另一个对象的方法\",{\"1\":{\"229\":1}}],[\"指的是一个对象或者表达式的类型在编译时确定\",{\"1\":{\"229\":1}}],[\"指的是一个对象或者表达式的类型直到运行时才确定\",{\"1\":{\"229\":1}}],[\"指向变更\",{\"0\":{\"1588\":1}}],[\"指向新构造的实例\",{\"1\":{\"1581\":2}}],[\"指向称为\",{\"1\":{\"1580\":1}}],[\"指向全局对象\",{\"1\":{\"1578\":1,\"1620\":1}}],[\"指向调用函数的对象\",{\"1\":{\"1477\":1}}],[\"指向同一个作用域的第一个参数\",{\"1\":{\"1407\":1}}],[\"指向函数外层\",{\"1\":{\"1407\":1}}],[\"指向第一个参数\",{\"1\":{\"1407\":1}}],[\"指向拥有这个\",{\"1\":{\"1385\":1}}],[\"指向外层的全局变量\",{\"1\":{\"1407\":1}}],[\"指向外层函数的对应变量\",{\"1\":{\"1375\":1}}],[\"指向外部的\",{\"1\":{\"1375\":1}}],[\"指向固定化\",{\"1\":{\"1375\":1}}],[\"指向当对象被实例化的时候\",{\"1\":{\"805\":1}}],[\"指向当前\",{\"1\":{\"623\":1}}],[\"指向当前的\",{\"1\":{\"623\":1}}],[\"指向当前的子类实例\",{\"1\":{\"622\":1}}],[\"指向一个特殊匿名函数\",{\"1\":{\"653\":1}}],[\"指向一个对象\",{\"1\":{\"575\":1}}],[\"指向构造函数\",{\"1\":{\"624\":1}}],[\"指向构造函数的原型对象\",{\"1\":{\"576\":1}}],[\"指向对应的构造函数的\",{\"1\":{\"624\":1}}],[\"指向总结\",{\"1\":{\"623\":1}}],[\"指向父类\",{\"1\":{\"621\":1}}],[\"指向父类的原型对象\",{\"1\":{\"621\":1,\"622\":1}}],[\"指向\",{\"1\":{\"619\":2,\"622\":1,\"623\":2,\"653\":3,\"1310\":1,\"1375\":2,\"1477\":1,\"1521\":1,\"1588\":1,\"1620\":1}}],[\"指向监听的节点\",{\"1\":{\"289\":1}}],[\"指向的对象\",{\"1\":{\"1616\":1}}],[\"指向的内存地址是一样的\",{\"1\":{\"1616\":1}}],[\"指向的固定化\",{\"1\":{\"1589\":1}}],[\"指向的固定化并不是因为箭头函数内部有绑定\",{\"1\":{\"1375\":1}}],[\"指向的是\",{\"1\":{\"623\":1,\"1457\":1}}],[\"指向的\",{\"1\":{\"15\":1}}],[\"指针引用的对象\",{\"1\":{\"1302\":1}}],[\"指针引用\",{\"1\":{\"1300\":1,\"1304\":1}}],[\"指针再次到达\",{\"1\":{\"491\":1}}],[\"指针和暂存区\",{\"1\":{\"176\":1}}],[\"指针和当前分支的引用\",{\"1\":{\"176\":1}}],[\"指针\",{\"1\":{\"176\":2,\"178\":1,\"1693\":2}}],[\"指令\",{\"1\":{\"130\":1}}],[\"指色彩的纯度\",{\"1\":{\"110\":1}}],[\"指元素最适合的最小宽度\",{\"1\":{\"54\":1}}],[\"指定模块文件的位置\",{\"1\":{\"1632\":1}}],[\"指定的参数列表\",{\"1\":{\"1306\":1}}],[\"指定的\",{\"1\":{\"1306\":1}}],[\"指定的进制基数\",{\"1\":{\"913\":1}}],[\"指定参数的默认值\",{\"1\":{\"1233\":1}}],[\"指定默认值\",{\"1\":{\"1221\":1}}],[\"指定用于检测的对象\",{\"1\":{\"767\":1,\"773\":1,\"785\":1}}],[\"指定资源的过期时间\",{\"1\":{\"429\":1}}],[\"指定校验和算法\",{\"1\":{\"301\":1}}],[\"指定解压的位置\",{\"1\":{\"213\":1}}],[\"指定一个包括与你的页面内容有关的关键词的描述是有用的\",{\"1\":{\"129\":1}}],[\"指定作者在某些情况下是很有用的\",{\"1\":{\"129\":1}}],[\"指定了默认值\",{\"1\":{\"1406\":1}}],[\"指定了默认值后\",{\"1\":{\"1406\":1}}],[\"指定了默认值以后\",{\"1\":{\"1406\":1}}],[\"指定了实际的元数据内容\",{\"1\":{\"129\":1}}],[\"指定了\",{\"1\":{\"129\":1}}],[\"指定文件名\",{\"1\":{\"212\":1}}],[\"指定文档中的字符编码\",{\"0\":{\"128\":1}}],[\"指定文本超过边界时是否换行\",{\"1\":{\"92\":1}}],[\"指定文本字体样式为倾斜的字体\",{\"1\":{\"74\":1}}],[\"指定文本字体样式为斜体\",{\"1\":{\"74\":1}}],[\"指定文本字体样式为正常的字体\",{\"1\":{\"74\":1}}],[\"指定多个背景\",{\"1\":{\"111\":1}}],[\"指定多个字体\",{\"1\":{\"78\":1}}],[\"指定颜色\",{\"1\":{\"99\":1}}],[\"指定对象\",{\"1\":{\"659\":2,\"791\":1,\"842\":1}}],[\"指定对象作为块元素级的表格\",{\"1\":{\"44\":1}}],[\"指定对象为列表项目\",{\"1\":{\"44\":1}}],[\"指定对象为内联块元素\",{\"1\":{\"44\":1}}],[\"指定对象为内联元素\",{\"1\":{\"44\":1}}],[\"指定对象为块元素\",{\"1\":{\"44\":1}}],[\"指定\",{\"1\":{\"38\":1}}],[\"​\",{\"1\":{\"37\":1}}],[\"变\",{\"1\":{\"1147\":2}}],[\"变为\",{\"1\":{\"530\":1}}],[\"变为了\",{\"1\":{\"37\":1}}],[\"变成\",{\"1\":{\"464\":1}}],[\"变换\",{\"1\":{\"272\":1}}],[\"变量定义\",{\"1\":{\"1698\":1}}],[\"变量提升\",{\"1\":{\"1691\":1}}],[\"变量冲突的一个典型例子存在于全局作用域中\",{\"1\":{\"1683\":1}}],[\"变量或函数\",{\"1\":{\"1681\":1}}],[\"变量可以根据需要改变值类型的动态特性\",{\"1\":{\"1680\":1}}],[\"变量和\",{\"1\":{\"1634\":1}}],[\"变量必须声明后再使用\",{\"1\":{\"1620\":1}}],[\"变量必须与属性同名才能取到正确的值\",{\"1\":{\"1218\":1}}],[\"变量赋值保持原位执行\",{\"1\":{\"1700\":1}}],[\"变量赋值\",{\"1\":{\"1469\":1,\"1555\":1}}],[\"变量指向的是函数参数本身\",{\"1\":{\"1407\":1}}],[\"变量与同名参数不为同一变量\",{\"1\":{\"1407\":1}}],[\"变量所占用的内存\",{\"1\":{\"1282\":1}}],[\"变量对象和活动对象\",{\"0\":{\"1566\":1}}],[\"变量对象的创建\",{\"1\":{\"1564\":1}}],[\"变量对象是与\",{\"1\":{\"1560\":1}}],[\"变量对象也是存放于堆内存中\",{\"1\":{\"1263\":1}}],[\"变量对象\",{\"0\":{\"1560\":1},\"1\":{\"1263\":1,\"1264\":3,\"1555\":1,\"1562\":1,\"1566\":1,\"1569\":2,\"1707\":1}}],[\"变量对象与基础数据类型\",{\"0\":{\"1263\":1}}],[\"变量的重复声明是无用的\",{\"1\":{\"1701\":1}}],[\"变量的例子\",{\"1\":{\"1393\":1}}],[\"变量的值等于\",{\"1\":{\"1218\":1}}],[\"变量的值就等于\",{\"1\":{\"1215\":1}}],[\"变量的取值是由它的位置决定的\",{\"1\":{\"1218\":1}}],[\"变量的数据类型\",{\"0\":{\"1070\":1}}],[\"变量自身\",{\"1\":{\"1194\":1}}],[\"变量作用域\",{\"0\":{\"1069\":1},\"1\":{\"1698\":1}}],[\"变量名称\",{\"1\":{\"1334\":1}}],[\"变量名\",{\"1\":{\"1066\":1,\"1330\":1}}],[\"变量声明提升\",{\"0\":{\"1699\":1},\"1\":{\"1698\":2,\"1700\":2}}],[\"变量声明等初始的属性值\",{\"1\":{\"1565\":1}}],[\"变量声明语句\",{\"0\":{\"1224\":1}}],[\"变量声明\",{\"0\":{\"1063\":1},\"1\":{\"1065\":1,\"1564\":1,\"1572\":1,\"1699\":1}}],[\"变量上\",{\"1\":{\"603\":1}}],[\"变量命名规则\",{\"1\":{\"557\":1}}],[\"变量a\",{\"1\":{\"241\":1}}],[\"变量\",{\"1\":{\"235\":1,\"572\":1,\"603\":1,\"1009\":2,\"1014\":1,\"1065\":1,\"1186\":1,\"1204\":1,\"1264\":2,\"1375\":1,\"1403\":3,\"1407\":1,\"1560\":1,\"1669\":1,\"1670\":1,\"1677\":2,\"1681\":1}}],[\"变得更加困难了\",{\"1\":{\"19\":1}}],[\"会引致错误的\",{\"1\":{\"1698\":1}}],[\"会污染全局\",{\"1\":{\"1691\":1}}],[\"会影响最终的查找结果\",{\"1\":{\"1670\":1}}],[\"会影响到其他所有变量\",{\"1\":{\"552\":1}}],[\"会通过查找变量\",{\"1\":{\"1670\":1}}],[\"会报错\",{\"1\":{\"1620\":1}}],[\"会自动执行下面的操作\",{\"1\":{\"1581\":1}}],[\"会自动转为整数后再运行\",{\"1\":{\"1142\":1}}],[\"会绑定到\",{\"1\":{\"1578\":1}}],[\"会再次修改变量对象的属性值\",{\"1\":{\"1565\":1}}],[\"会根据代码\",{\"1\":{\"1565\":1}}],[\"会进入当前函数中执行代码\",{\"1\":{\"1556\":1}}],[\"会进行隐式类型转换\",{\"1\":{\"955\":1}}],[\"会执行之前客户传入的回调函数\",{\"1\":{\"1502\":1}}],[\"会取消上一次触发的执行\",{\"1\":{\"1444\":1}}],[\"会把这个值在内存中的地址复制给一个局部变量\",{\"1\":{\"1389\":1}}],[\"会把其他数据类型转换成\",{\"1\":{\"953\":1}}],[\"会成为\",{\"1\":{\"1344\":1}}],[\"会显示函数表达式的名字\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"会创建一个执行环境及其相应的\",{\"1\":{\"1707\":1}}],[\"会创建一个叫做\",{\"1\":{\"1263\":1}}],[\"会创建该函数的执行上下文\",{\"1\":{\"1282\":1}}],[\"会创建此标识符\",{\"1\":{\"1052\":1}}],[\"会尝试转换它们为恰当的类型来比较\",{\"1\":{\"1200\":1}}],[\"会抛出异常\",{\"1\":{\"1066\":2,\"1692\":2}}],[\"会跳过\",{\"1\":{\"1052\":1}}],[\"会使代码跳出\",{\"1\":{\"1041\":1}}],[\"会使一些编写不标准的网页无法正确显示\",{\"1\":{\"143\":1}}],[\"会被提升至作用域的顶部\",{\"1\":{\"1700\":1}}],[\"会被提前处理\",{\"1\":{\"1698\":1}}],[\"会被推进任务队列等待\",{\"1\":{\"1552\":1}}],[\"会被绑定到对应的对象\",{\"1\":{\"1514\":1}}],[\"会被\",{\"1\":{\"1349\":1}}],[\"会被执行\",{\"1\":{\"1018\":2,\"1467\":2}}],[\"会被当作\",{\"1\":{\"943\":1}}],[\"会涉及到转换为原始数据类型的问题\",{\"1\":{\"951\":1}}],[\"会优先调用对象的\",{\"1\":{\"946\":1}}],[\"会指向该原始值的自动包装对象\",{\"1\":{\"1306\":1}}],[\"会指向该原始值的包装对象\",{\"1\":{\"1302\":1}}],[\"会指向该方法\",{\"1\":{\"607\":1}}],[\"会指向全局对象\",{\"1\":{\"1285\":1}}],[\"会指向构造这个对象的构造器或构造函数\",{\"1\":{\"937\":1}}],[\"会导致\",{\"1\":{\"923\":1}}],[\"会导致不同的作用域链和标识符解析\",{\"1\":{\"592\":1}}],[\"会返回空字符串\",{\"1\":{\"1295\":1}}],[\"会返回\",{\"1\":{\"848\":1}}],[\"会由于不能做到函数复用而降低效率\",{\"1\":{\"656\":1}}],[\"会调用\",{\"1\":{\"532\":2,\"946\":1,\"1709\":1}}],[\"会出现的问题\",{\"1\":{\"1608\":1}}],[\"会出现以下两种情况\",{\"1\":{\"458\":1}}],[\"会出现一下情况\",{\"1\":{\"458\":1}}],[\"会遍历回调队列并同步执行\",{\"1\":{\"458\":1}}],[\"会阻塞\",{\"1\":{\"438\":1}}],[\"会强制刷新会跳过所有缓存\",{\"1\":{\"431\":1}}],[\"会存在服务器时间和客户端时间不一致\",{\"1\":{\"429\":1}}],[\"会在请求头上添加一个\",{\"1\":{\"430\":1}}],[\"会在请求头中添加\",{\"1\":{\"430\":1}}],[\"会在同源请求中携带发送给服务器的特点\",{\"1\":{\"418\":1}}],[\"会在其之前插入一个分号\",{\"1\":{\"253\":1}}],[\"会得到一个typeerror错误\",{\"1\":{\"408\":1}}],[\"会话协议数据单元\",{\"1\":{\"317\":1}}],[\"会话层\",{\"1\":{\"317\":1}}],[\"会延迟执行到后面的元素\",{\"1\":{\"277\":1}}],[\"会忽略程序中\",{\"1\":{\"236\":1}}],[\"会随着目录切换而变化\",{\"1\":{\"187\":1}}],[\"会停止解析后续html\",{\"1\":{\"157\":1}}],[\"会对操作值进行隐式转换后进行比较\",{\"1\":{\"952\":1}}],[\"会对资源进行分析\",{\"1\":{\"155\":1}}],[\"会对连接进行处理\",{\"1\":{\"153\":1}}],[\"会对数据进行分割\",{\"1\":{\"152\":1}}],[\"会先对代码进行编译\",{\"1\":{\"1698\":1}}],[\"会先从当前执行上下文的变量对象中查找\",{\"1\":{\"1569\":1}}],[\"会先检查任务队列中是否有微任务\",{\"1\":{\"457\":1}}],[\"会先检查域名是否存在于本地的\",{\"1\":{\"150\":1}}],[\"会先向服务器发送一个请求\",{\"1\":{\"430\":1}}],[\"会先进行\",{\"1\":{\"152\":1}}],[\"会经历以下步骤\",{\"1\":{\"150\":1}}],[\"会比其他的内核快\",{\"1\":{\"143\":1}}],[\"会撑起\",{\"1\":{\"93\":1}}],[\"会将函数的声明和定义全都提升至作用域顶部\",{\"1\":{\"1700\":1}}],[\"会将声明提升到函数或全局作用域的顶部\",{\"1\":{\"1694\":1}}],[\"会将\",{\"1\":{\"1184\":1}}],[\"会将第一个操作数向右移动指定的位数\",{\"1\":{\"1150\":1}}],[\"会将指定操作数的二进制位向右移动指定的位数\",{\"1\":{\"1149\":1}}],[\"会将其\",{\"1\":{\"1087\":1}}],[\"会将先前元素的计算结果作为参数传入\",{\"1\":{\"352\":1}}],[\"会将序列的空格合并为一个\",{\"1\":{\"92\":1}}],[\"会将整个单词放到下一行进行展示\",{\"1\":{\"90\":1}}],[\"会用空白间隙填充在图像周围\",{\"1\":{\"65\":1}}],[\"会独占一行\",{\"1\":{\"45\":1}}],[\"会发生三件事\",{\"1\":{\"37\":1}}],[\"会一直往上到\",{\"1\":{\"35\":1}}],[\"根本不会执行\",{\"1\":{\"1217\":1}}],[\"根本不用再执行代码前就把函数绑定到特定对象上面\",{\"1\":{\"592\":1}}],[\"根节点到叶子节点\",{\"1\":{\"470\":1}}],[\"根域名服务器查询\",{\"1\":{\"150\":1}}],[\"根据函数\",{\"1\":{\"1597\":1}}],[\"根据不同的情况\",{\"1\":{\"1596\":1}}],[\"根据不同状态码做不同的事\",{\"1\":{\"155\":1}}],[\"根据先进先出的原则\",{\"1\":{\"1539\":1}}],[\"根据判断\",{\"1\":{\"1014\":1}}],[\"根据对应的增量\",{\"1\":{\"488\":1}}],[\"根据dom树和cssom树构建渲染树\",{\"1\":{\"464\":1}}],[\"根据标记创建节点\",{\"1\":{\"464\":1}}],[\"根据html标记关系将对象组成dom树\",{\"1\":{\"464\":1}}],[\"根据html规范将字符流解析为标记\",{\"1\":{\"464\":1}}],[\"根据资源类型决定如何处理\",{\"1\":{\"464\":1}}],[\"根据计算好的位置信息将内容渲染到屏幕上\",{\"1\":{\"437\":1}}],[\"根据其他属性的值\",{\"1\":{\"329\":1}}],[\"根据渲染树布局\",{\"1\":{\"158\":1}}],[\"根据响应资源里的\",{\"1\":{\"155\":1}}],[\"根据\",{\"1\":{\"153\":2,\"437\":1}}],[\"根据以太网协议将数据分为以\",{\"1\":{\"152\":1}}],[\"根据下图的逻辑\",{\"1\":{\"149\":1}}],[\"根据ip建立tcp连接\",{\"1\":{\"147\":1}}],[\"根据情况放大或缩小图像\",{\"1\":{\"65\":1}}],[\"根据用户设备的分辨率匹配合适的图像\",{\"1\":{\"30\":1}}],[\"根元素也是\",{\"1\":{\"36\":1}}],[\"默认会初始化为一个\",{\"1\":{\"1691\":1}}],[\"默认模块改命名模块\",{\"0\":{\"1645\":1}}],[\"默认模块转发\",{\"0\":{\"1643\":1},\"1\":{\"1646\":2}}],[\"默认模块导入\",{\"0\":{\"1600\":1}}],[\"默认导出的变量无法使用命名导入\",{\"1\":{\"1652\":1}}],[\"默认导出让开发者无须知道源模块输出的模块名称即可完成导入\",{\"1\":{\"1652\":1}}],[\"默认导出\",{\"0\":{\"1652\":1},\"1\":{\"1650\":1}}],[\"默认导出被排除在此对象之外\",{\"1\":{\"1627\":1}}],[\"默认导入\",{\"0\":{\"1628\":1},\"1\":{\"1625\":1}}],[\"默认暴露\",{\"1\":{\"1619\":3}}],[\"默认返回\",{\"1\":{\"1521\":1}}],[\"默认是\",{\"1\":{\"1477\":1}}],[\"默认是冒泡\",{\"1\":{\"454\":1}}],[\"默认100ms\",{\"1\":{\"1433\":1}}],[\"默认声明\",{\"0\":{\"1400\":1},\"1\":{\"1400\":1}}],[\"默认参数\",{\"0\":{\"1366\":1,\"1398\":1}}],[\"默认绑定的优先级是四条规则中最低的\",{\"1\":{\"1582\":1}}],[\"默认绑定才能绑定到全局对象\",{\"1\":{\"1578\":1}}],[\"默认绑定\",{\"0\":{\"1578\":1},\"1\":{\"1285\":1}}],[\"默认增量\",{\"1\":{\"488\":1}}],[\"默认赋值\",{\"1\":{\"354\":1,\"1699\":1}}],[\"默认为\",{\"1\":{\"1543\":1}}],[\"默认为1\",{\"1\":{\"332\":1}}],[\"默认为0\",{\"1\":{\"332\":2}}],[\"默认情况下应当使用\",{\"1\":{\"1695\":1}}],[\"默认情况下\",{\"1\":{\"332\":1,\"538\":1,\"578\":1,\"768\":1}}],[\"默认情况是按照\",{\"1\":{\"93\":1}}],[\"默认用户目录为~\",{\"1\":{\"187\":1}}],[\"默认\",{\"1\":{\"176\":1,\"290\":1}}],[\"默认按照基线排版\",{\"1\":{\"94\":1}}],[\"默认处理方式\",{\"1\":{\"92\":1}}],[\"默认间隔\",{\"1\":{\"88\":1,\"89\":1}}],[\"默认排列从上到下\",{\"1\":{\"45\":1}}],[\"默认的返回值是\",{\"1\":{\"1477\":1}}],[\"默认的换行规则\",{\"1\":{\"91\":1}}],[\"默认的\",{\"1\":{\"36\":1}}],[\"默认值变量\",{\"1\":{\"1407\":1}}],[\"默认值设置\",{\"1\":{\"1382\":1}}],[\"默认值生效的条件是\",{\"1\":{\"1218\":1}}],[\"默认值可以引用解构赋值的其他变量\",{\"1\":{\"1217\":1}}],[\"默认值就不会生效\",{\"1\":{\"1217\":1}}],[\"默认值为\",{\"1\":{\"529\":1,\"530\":1}}],[\"默认值为auto\",{\"1\":{\"332\":1}}],[\"默认值为0\",{\"1\":{\"332\":1}}],[\"默认值为row\",{\"1\":{\"332\":1}}],[\"默认值是不会生效的\",{\"1\":{\"1217\":1}}],[\"默认值是\",{\"1\":{\"48\":1,\"534\":1}}],[\"默认值\",{\"0\":{\"1217\":1},\"1\":{\"35\":1,\"44\":1,\"332\":1,\"528\":1,\"532\":1,\"688\":1}}],[\"补充\",{\"1\":{\"36\":1,\"205\":1}}],[\"否则它会要求作用域在当前作用域的集合中声明一个新的变量\",{\"1\":{\"1670\":1}}],[\"否则它将生成一个块容器盒\",{\"1\":{\"329\":1}}],[\"否则报错\",{\"1\":{\"1620\":4,\"1685\":1}}],[\"否则加载模块\",{\"1\":{\"1596\":1}}],[\"否则加上\",{\"1\":{\"1160\":1}}],[\"否则则\",{\"1\":{\"1438\":1}}],[\"否则则不执行循环语句\",{\"1\":{\"1009\":1}}],[\"否则继续\",{\"1\":{\"951\":3}}],[\"否则一律按转换失败处理\",{\"1\":{\"944\":1}}],[\"否则使用\",{\"1\":{\"892\":1}}],[\"否则使用路由表查找下一跳地址\",{\"1\":{\"152\":1}}],[\"否则新建实例会报错\",{\"1\":{\"619\":1}}],[\"否则都是定义在\",{\"1\":{\"603\":1}}],[\"否则会带来很复杂的同步问题\",{\"1\":{\"1551\":1}}],[\"否则会抛出一个错误\",{\"1\":{\"1374\":1}}],[\"否则会被识别为变量\",{\"1\":{\"558\":1}}],[\"否则会报错\",{\"1\":{\"242\":1,\"602\":1,\"619\":1,\"621\":1,\"623\":1,\"1183\":1,\"1342\":1,\"1395\":1}}],[\"否则与服务器进行验证\",{\"1\":{\"464\":1}}],[\"否则返回左侧操作数\",{\"1\":{\"1256\":1}}],[\"否则返回false\",{\"1\":{\"364\":1,\"470\":1}}],[\"否则返回\",{\"1\":{\"350\":1,\"503\":1,\"1101\":1,\"1151\":2,\"1253\":1,\"1254\":1}}],[\"否则服务器会按照规则把请求重写到\",{\"1\":{\"153\":1}}],[\"否则上面\",{\"1\":{\"48\":1}}],[\"否则其行为与相对定位相同\",{\"1\":{\"38\":1}}],[\"否则\",{\"1\":{\"36\":1,\"38\":1,\"352\":1,\"470\":1,\"491\":1,\"669\":1,\"951\":1,\"1018\":1,\"1197\":1,\"1203\":3,\"1279\":1,\"1375\":1,\"1542\":1,\"1543\":1}}],[\"否定伪类\",{\"1\":{\"17\":1}}],[\"外层函数的作用域\",{\"1\":{\"1710\":1}}],[\"外层函数的变量都是可见的\",{\"1\":{\"1708\":1}}],[\"外\",{\"1\":{\"1375\":1}}],[\"外的其他同一个数字\",{\"1\":{\"762\":1}}],[\"外的区域\",{\"1\":{\"36\":1}}],[\"外部函数传给他\",{\"1\":{\"1710\":1}}],[\"外部函数的外部函数的活动对象处于第三位\",{\"1\":{\"1707\":1}}],[\"外部函数的活动对象始终处于第二位\",{\"1\":{\"1707\":1}}],[\"外部作用域无法访问包装函数内部的任何内容\",{\"1\":{\"1684\":1}}],[\"外部只能通过暴露的方法操作\",{\"1\":{\"1613\":1}}],[\"外部输入数据\",{\"1\":{\"1534\":1}}],[\"外部的\",{\"1\":{\"1054\":1}}],[\"外部仍可访问\",{\"1\":{\"611\":1}}],[\"外部表现\",{\"1\":{\"329\":1}}],[\"外部类型设置元素参与流式布局\",{\"1\":{\"329\":1}}],[\"外部尺寸与流体特性\",{\"0\":{\"49\":1}}],[\"外部尺寸\",{\"1\":{\"48\":1}}],[\"外链样式表\",{\"1\":{\"18\":1}}],[\"则最终的值为变量的值\",{\"1\":{\"1701\":1}}],[\"则最后的声明的\",{\"1\":{\"18\":1}}],[\"则必须给这些规则设定优先级\",{\"1\":{\"1582\":1}}],[\"则必须使用到逗号运算符\",{\"1\":{\"1013\":1}}],[\"则变量声明不会干扰已经存在的这类属性\",{\"1\":{\"1564\":1}}],[\"则变为\",{\"1\":{\"951\":1}}],[\"则队首的异步任务将结束等待状态\",{\"1\":{\"1552\":1}}],[\"则是可变的部分\",{\"1\":{\"1503\":1}}],[\"则是固定一个函数的一个或多个参数\",{\"1\":{\"1411\":1}}],[\"则是在原型中定义的\",{\"1\":{\"569\":1}}],[\"则后面覆盖前面\",{\"1\":{\"1611\":1}}],[\"则后面的\",{\"1\":{\"1348\":1}}],[\"则后面拼上\",{\"1\":{\"1160\":1}}],[\"则能很漂亮地解决这个问题\",{\"1\":{\"1312\":1}}],[\"则表示不需要传入任何参数\",{\"1\":{\"1302\":1}}],[\"则指定为\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"则说明没有办法再访问这个值了\",{\"1\":{\"1281\":1}}],[\"则引用次数加\",{\"1\":{\"1281\":1}}],[\"则与书架与书非常相似\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"则与该\",{\"1\":{\"1040\":1}}],[\"则逻辑或操作不一定返回布尔值\",{\"1\":{\"1254\":1}}],[\"则执行函数\",{\"1\":{\"1253\":1,\"1446\":1}}],[\"则执行循环语句\",{\"1\":{\"1009\":1}}],[\"则无论第二个操作数是什么值\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"则给变量\",{\"1\":{\"1197\":2}}],[\"则只能将其放在参数的最后一位\",{\"1\":{\"1183\":1}}],[\"则结果的真假和第二个操作数的真假相同\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"则结果就是\",{\"1\":{\"1144\":1}}],[\"则结束\",{\"1\":{\"946\":2}}],[\"则让浏览器不必显示这个表达式的计算结果\",{\"1\":{\"1138\":1}}],[\"则函数调用仅仅依次执行函数体内的每一条语句直到函数结束\",{\"1\":{\"1034\":1}}],[\"则调用\",{\"1\":{\"953\":1}}],[\"则调用对象的\",{\"1\":{\"946\":1,\"952\":1}}],[\"则比较字符串对应的\",{\"1\":{\"953\":1}}],[\"则比较它们是不是指向同一个对象\",{\"1\":{\"952\":1}}],[\"则进行\",{\"1\":{\"953\":1}}],[\"则通过\",{\"1\":{\"952\":1}}],[\"则通常把这个属性称为\",{\"1\":{\"551\":1}}],[\"则在比较之前先将其转换为数值\",{\"1\":{\"952\":1}}],[\"则按照以下规则解释\",{\"1\":{\"951\":1}}],[\"则依次尝试\",{\"1\":{\"946\":2}}],[\"则先调用\",{\"1\":{\"946\":1}}],[\"则抛出异常\",{\"1\":{\"946\":1}}],[\"则抛出一个\",{\"1\":{\"683\":1}}],[\"则继续调用对象的\",{\"1\":{\"946\":1}}],[\"则转为对应的数字\",{\"1\":{\"944\":1}}],[\"则转换为八进制\",{\"1\":{\"913\":1}}],[\"则转换为十六进制\",{\"1\":{\"913\":1}}],[\"则视作十六进制\",{\"1\":{\"913\":1}}],[\"则视作八进制\",{\"1\":{\"913\":1}}],[\"则将该参数默认设置为空对象\",{\"1\":{\"1254\":1}}],[\"则将其转换为\",{\"1\":{\"953\":1}}],[\"则将另一个操作值转换为数值\",{\"1\":{\"953\":1}}],[\"则将\",{\"1\":{\"913\":1}}],[\"则其转换结果为\",{\"1\":{\"903\":1}}],[\"则其返回值默认为\",{\"1\":{\"865\":1}}],[\"则其值为\",{\"1\":{\"864\":1,\"865\":1}}],[\"则不受默认绑定影响\",{\"1\":{\"1578\":1}}],[\"则不能将全局对象用于默认绑定\",{\"1\":{\"1578\":1}}],[\"则不对其作任何更改\",{\"1\":{\"800\":1,\"807\":1}}],[\"则不必急着关闭连接\",{\"1\":{\"304\":1}}],[\"则两个值相同\",{\"1\":{\"762\":1}}],[\"则属性将被源对象中的属性覆盖\",{\"1\":{\"678\":1}}],[\"则属性可变\",{\"1\":{\"341\":1}}],[\"则他们传入回调函数的值是遍历到它们那一刻的值\",{\"1\":{\"669\":1}}],[\"则都是从\",{\"1\":{\"576\":1}}],[\"则需要使用\",{\"1\":{\"559\":1}}],[\"则需要传递初始值\",{\"1\":{\"352\":1}}],[\"则直接\",{\"1\":{\"1691\":1}}],[\"则直接转换为\",{\"1\":{\"951\":1}}],[\"则直接返回这个对象\",{\"1\":{\"547\":1}}],[\"则直接执行\",{\"1\":{\"392\":1}}],[\"则它会被作为回调函数被调用时的\",{\"1\":{\"669\":1}}],[\"则它不会变成密封对象\",{\"1\":{\"539\":1}}],[\"则它同时也会变成个密封对象\",{\"1\":{\"539\":1}}],[\"则对象属性值为\",{\"1\":{\"534\":1}}],[\"则该作为默认值的函数作用域与参数独立作用域相同\",{\"1\":{\"1407\":1}}],[\"则该值为该参数所定义的值\",{\"1\":{\"1407\":1}}],[\"则该赋值不起作用\",{\"1\":{\"1398\":1}}],[\"则该项是必须的\",{\"1\":{\"960\":1}}],[\"则该修订号视为\",{\"1\":{\"509\":2}}],[\"则该字符串称为回文字符串\",{\"1\":{\"494\":1}}],[\"则该元素宽度为内部尺寸\",{\"1\":{\"52\":1}}],[\"则链表中存在环\",{\"1\":{\"491\":1}}],[\"则三数之和一定大于0\",{\"1\":{\"476\":1}}],[\"则拆成两个子树的问题\",{\"1\":{\"470\":1}}],[\"则请求返回304状态\",{\"1\":{\"430\":1}}],[\"则报错\",{\"1\":{\"383\":1,\"558\":1,\"1407\":1}}],[\"则此项当做成功\",{\"1\":{\"380\":1,\"383\":1}}],[\"则返回第二个操作数\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"则返回第一个操作数\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"则返回该新对象\",{\"1\":{\"1036\":1}}],[\"则返回该对象\",{\"1\":{\"1035\":1,\"1036\":1}}],[\"则返回该值对应的包装对象\",{\"1\":{\"547\":1}}],[\"则返回一个空对象\",{\"1\":{\"807\":1}}],[\"则返回自身无任何属性的\",{\"1\":{\"800\":1}}],[\"则返回对应类型的对象\",{\"1\":{\"800\":1,\"807\":1}}],[\"则返回修改后的内容\",{\"1\":{\"430\":1}}],[\"则返回这个成功结果\",{\"1\":{\"383\":1}}],[\"则返回true\",{\"1\":{\"364\":1}}],[\"则返回\",{\"1\":{\"350\":1,\"491\":1,\"861\":1,\"897\":1,\"903\":2,\"909\":1,\"913\":1,\"952\":1,\"1035\":1,\"1151\":2,\"1164\":1}}],[\"则等同于stretch\",{\"1\":{\"332\":1}}],[\"则空间不足时\",{\"1\":{\"332\":1}}],[\"则证明服务器端已正常关闭\",{\"1\":{\"304\":1}}],[\"则可以重传\",{\"1\":{\"304\":1}}],[\"则可以视为自由的\",{\"1\":{\"39\":1}}],[\"则向客户端发送\",{\"1\":{\"304\":1}}],[\"则要求支持\",{\"1\":{\"234\":1}}],[\"则会覆盖外部的全局变量\",{\"1\":{\"1691\":1}}],[\"则会直接跳过\",{\"1\":{\"1564\":1}}],[\"则会直接把这个文件返回\",{\"1\":{\"153\":1}}],[\"则会导致返回的\",{\"1\":{\"1344\":1}}],[\"则会先转为对象\",{\"1\":{\"1220\":1}}],[\"则会计算方括号内的表达式的值并将其转换为\",{\"1\":{\"1087\":1}}],[\"则会查找由这个标识符指定的\",{\"1\":{\"1087\":1}}],[\"则会使其失去了流动性\",{\"1\":{\"50\":1}}],[\"则每个属性之间必须由空格分隔\",{\"1\":{\"117\":1}}],[\"则阴影\",{\"1\":{\"59\":1}}],[\"则阴影出现在元素\",{\"1\":{\"59\":2}}],[\"则这个值的引用次数就减\",{\"1\":{\"1281\":1}}],[\"则这个值的引用次数就是\",{\"1\":{\"1281\":1}}],[\"则这个对象是可扩展的\",{\"1\":{\"812\":1}}],[\"则这个对象是密封对象\",{\"1\":{\"539\":1}}],[\"则这个对象中的属性是可以修改的\",{\"1\":{\"540\":1,\"706\":1}}],[\"则这个\",{\"1\":{\"51\":1}}],[\"则堆叠顺序由元素在文档中的先后位置决定\",{\"1\":{\"39\":1}}],[\"则元素相对父元素进行定位\",{\"1\":{\"38\":1}}],[\"则父容器无法进行滚动\",{\"1\":{\"38\":1}}],[\"则为\",{\"1\":{\"36\":1}}],[\"则由这个祖先元素的\",{\"1\":{\"36\":1}}],[\"则\",{\"1\":{\"36\":1,\"891\":1,\"903\":1,\"909\":1,\"913\":2,\"976\":1,\"1110\":2,\"1203\":2,\"1253\":1,\"1295\":1}}],[\"都无法从外部被访问\",{\"1\":{\"1681\":1}}],[\"都无值的情况\",{\"1\":{\"1404\":1}}],[\"都将绑定在这个新创建的包装函数的作用域中\",{\"1\":{\"1681\":1}}],[\"都将等比例缩小\",{\"1\":{\"332\":1}}],[\"都存在于\",{\"1\":{\"1675\":1}}],[\"都存在类的概念\",{\"1\":{\"1473\":1}}],[\"都当作只读变量\",{\"1\":{\"1631\":1}}],[\"都不是全局变量了\",{\"1\":{\"1612\":1}}],[\"都提供了一个可选的参数\",{\"1\":{\"1580\":1}}],[\"都有值的情况\",{\"1\":{\"1404\":1}}],[\"都有效\",{\"1\":{\"45\":1}}],[\"都没有自己的\",{\"1\":{\"1375\":1}}],[\"都没返回原始类型\",{\"1\":{\"951\":1}}],[\"都输出同样的结果\",{\"1\":{\"1375\":1}}],[\"都表示相同的字符串值\",{\"1\":{\"1203\":1}}],[\"都表示相同的整数\",{\"1\":{\"509\":1}}],[\"都可以使用扩展运算符\",{\"1\":{\"1186\":1}}],[\"都在执行任何代码之前进行处理\",{\"1\":{\"1065\":1}}],[\"都在其构造函数的原型上定义了方法\",{\"1\":{\"580\":1}}],[\"都重写了\",{\"1\":{\"936\":1}}],[\"都能取到值\",{\"1\":{\"1220\":1}}],[\"都能通过\",{\"1\":{\"936\":1}}],[\"都能使用\",{\"1\":{\"119\":1}}],[\"都指向\",{\"1\":{\"653\":2}}],[\"都是针对\",{\"1\":{\"1685\":1}}],[\"都是指把一个函数\",{\"1\":{\"1505\":1}}],[\"都是同时触发\",{\"1\":{\"1354\":1}}],[\"都是模式\",{\"1\":{\"1218\":1}}],[\"都是自身\",{\"1\":{\"1194\":1}}],[\"都是不可写的\",{\"1\":{\"774\":1}}],[\"都是除零和\",{\"1\":{\"762\":1}}],[\"都是负零\",{\"1\":{\"762\":1}}],[\"都是正零\",{\"1\":{\"762\":1}}],[\"都是通过借用构造函数来继承不可共享的属性\",{\"1\":{\"659\":1}}],[\"都是\",{\"1\":{\"613\":1,\"762\":1,\"1599\":1}}],[\"都是实例对象\",{\"1\":{\"603\":1}}],[\"都是需要新建一个类名\",{\"1\":{\"599\":1,\"1483\":1}}],[\"都是工厂模式的实现\",{\"1\":{\"584\":1}}],[\"都是采用这种模式创建的\",{\"1\":{\"580\":1}}],[\"都是有效的版本号\",{\"1\":{\"509\":1}}],[\"都是按照这个规则来进行比较\",{\"1\":{\"18\":1}}],[\"都会提升到整个模块的头部\",{\"1\":{\"1633\":1}}],[\"都会生成一个执行上下文\",{\"1\":{\"1556\":1}}],[\"都会执行\",{\"1\":{\"1348\":1}}],[\"都会执行这个函数\",{\"1\":{\"372\":1}}],[\"都会调用两次父类构造函数\",{\"1\":{\"663\":1}}],[\"都会被实例继承\",{\"1\":{\"629\":1}}],[\"都会去对应的回调队列中取出函数执行\",{\"1\":{\"458\":1}}],[\"都必须先在双方之间建立一条连接\",{\"1\":{\"300\":1}}],[\"都必须采取一致的大小写的形式\",{\"1\":{\"235\":1}}],[\"都只有一行\",{\"1\":{\"81\":1}}],[\"都要先找到其祖先元素中最近的\",{\"1\":{\"36\":1}}],[\"粘性定位可以被认为是相对定位和固定定位的混合\",{\"1\":{\"35\":1}}],[\"不赋值会报错\",{\"1\":{\"1693\":1}}],[\"不局限于循环内\",{\"1\":{\"1691\":1}}],[\"不带有路径\",{\"1\":{\"1632\":1}}],[\"不建议使用\",{\"1\":{\"1556\":1}}],[\"不建议在条件表达式中使用赋值操作\",{\"1\":{\"1020\":1}}],[\"不仅仅如此\",{\"1\":{\"1621\":1}}],[\"不仅仅是模块\",{\"1\":{\"1593\":1}}],[\"不仅对服务器的压力增大了\",{\"1\":{\"1449\":1}}],[\"不仅可以取得所有默认方法的引用\",{\"1\":{\"580\":1}}],[\"不等待结果的异步循环\",{\"0\":{\"1356\":1}}],[\"不等于\",{\"1\":{\"762\":1,\"1202\":1}}],[\"不报错\",{\"1\":{\"1329\":2,\"1401\":1}}],[\"不合理的内存占用才会被定性为内存泄漏\",{\"1\":{\"1287\":1}}],[\"不再需要继续使用的变量也就是生命周期结束的变量\",{\"1\":{\"1279\":1}}],[\"不再指向\",{\"1\":{\"578\":1}}],[\"不严格等于\",{\"1\":{\"1217\":1}}],[\"不完全解构\",{\"0\":{\"1216\":1}}],[\"不全等\",{\"1\":{\"1202\":1}}],[\"不定义不同类型的数字\",{\"1\":{\"1142\":1}}],[\"不论哪种情况\",{\"1\":{\"1087\":1}}],[\"不应该用于迭代一个数组\",{\"1\":{\"983\":1}}],[\"不管你是否有在模块头部加上\",{\"1\":{\"1620\":1}}],[\"不管使用哪种形式的属性访问器\",{\"1\":{\"1087\":1}}],[\"不管\",{\"1\":{\"969\":1}}],[\"不管有没有显式定义\",{\"1\":{\"619\":1}}],[\"不一定是循环语句\",{\"1\":{\"960\":1}}],[\"不用查看函数体或文档\",{\"1\":{\"1399\":1}}],[\"不用担心数据的类型\",{\"1\":{\"941\":1}}],[\"不用像\",{\"1\":{\"941\":1}}],[\"不怀好意的人\",{\"1\":{\"893\":1}}],[\"不像\",{\"1\":{\"848\":1}}],[\"不被\",{\"1\":{\"820\":1}}],[\"不提供\",{\"1\":{\"610\":1}}],[\"不要这样写\",{\"1\":{\"1685\":1}}],[\"不要使用\",{\"1\":{\"1130\":1}}],[\"不要重用生成器\",{\"0\":{\"1002\":1}}],[\"不要忘了\",{\"1\":{\"592\":1}}],[\"不要频繁的操作元素的样式\",{\"1\":{\"439\":1}}],[\"不必理会\",{\"1\":{\"1534\":1}}],[\"不必担心它的运行环境\",{\"1\":{\"848\":1}}],[\"不必为了指定子类型的原型而调用超类型的构造函数\",{\"1\":{\"659\":1}}],[\"不必在构造函数中定义对象实例的信息\",{\"1\":{\"575\":1}}],[\"不必再向服务器发起请求\",{\"1\":{\"429\":1}}],[\"不继承任何属性和方法\",{\"1\":{\"548\":2}}],[\"不作为参数进行传递\",{\"1\":{\"491\":1}}],[\"不是一个方法\",{\"1\":{\"1700\":1}}],[\"不是一个真实的数组\",{\"1\":{\"1394\":1}}],[\"不是提前编译的\",{\"1\":{\"1665\":1}}],[\"不是修改的模块内部的\",{\"1\":{\"1613\":1}}],[\"不是基于类\",{\"1\":{\"1473\":1}}],[\"不是变量\",{\"1\":{\"1218\":2}}],[\"不是类型语言\",{\"1\":{\"1142\":1}}],[\"不是继承的\",{\"1\":{\"1004\":2}}],[\"不是就返回\",{\"1\":{\"935\":2}}],[\"不是\",{\"1\":{\"898\":1,\"903\":1}}],[\"不是原始字符串\",{\"1\":{\"891\":1}}],[\"不是自定义类型和构造函数的情况下\",{\"1\":{\"656\":1}}],[\"不是定义在实例对象\",{\"1\":{\"628\":1}}],[\"不是对象\",{\"1\":{\"563\":1}}],[\"不是上面的情况\",{\"1\":{\"470\":1}}],[\"不是子串\",{\"1\":{\"467\":1}}],[\"不进入主线程\",{\"1\":{\"457\":1}}],[\"不进行强缓存\",{\"1\":{\"429\":1}}],[\"不然会一直存在\",{\"1\":{\"445\":1}}],[\"不安全\",{\"1\":{\"443\":1,\"1612\":1}}],[\"不强缓存\",{\"1\":{\"429\":1}}],[\"不使用解构\",{\"1\":{\"1213\":1}}],[\"不使用小数点或指数计数法\",{\"1\":{\"1142\":1}}],[\"不使用服务端渲染\",{\"1\":{\"417\":1}}],[\"不使用延展操作符\",{\"1\":{\"343\":1}}],[\"不处理\",{\"1\":{\"403\":1}}],[\"不需要知道赋权的逻辑\",{\"1\":{\"587\":1}}],[\"不需要知道各个权限对应哪个字段\",{\"1\":{\"587\":1}}],[\"不需要再做什么修改了\",{\"1\":{\"570\":1}}],[\"不需要向浏览器发送请求\",{\"1\":{\"429\":1}}],[\"不需要重写数组的原型\",{\"1\":{\"403\":1}}],[\"不需要一次性遍历data的属性\",{\"1\":{\"401\":1}}],[\"不需要这样\",{\"1\":{\"245\":1}}],[\"不具备监听数组的能力\",{\"1\":{\"401\":1}}],[\"不包括函数剩余参数\",{\"1\":{\"1395\":1}}],[\"不包括原型属性和索引\",{\"1\":{\"388\":1}}],[\"不包含数据\",{\"1\":{\"301\":1}}],[\"不存在变量提升\",{\"1\":{\"1068\":1}}],[\"不存在于\",{\"1\":{\"1066\":1}}],[\"不存在继承关系\",{\"1\":{\"624\":1}}],[\"不存在定义构造函数的特殊语法\",{\"1\":{\"591\":1}}],[\"不存在\",{\"1\":{\"352\":1,\"470\":1,\"503\":1,\"919\":1,\"1407\":1}}],[\"不可重复声明\",{\"1\":{\"1693\":1}}],[\"不可重复声明同名变量\",{\"1\":{\"1068\":1}}],[\"不可更改的是\",{\"1\":{\"1693\":1}}],[\"不可在\",{\"1\":{\"1562\":1}}],[\"不可能再修改它的\",{\"1\":{\"1580\":1}}],[\"不可能在具有真实值的属性上同时拥有一个\",{\"1\":{\"1322\":1}}],[\"不可能两者同时执行\",{\"1\":{\"1197\":1}}],[\"不可设置的\",{\"1\":{\"1101\":1}}],[\"不可配置\",{\"1\":{\"1100\":1}}],[\"不可配置属性\",{\"1\":{\"1065\":1}}],[\"不可配置并且不可删除\",{\"1\":{\"786\":1}}],[\"不可写\",{\"1\":{\"926\":1}}],[\"不可使用等号运算符来判断一个值是否为\",{\"1\":{\"861\":1}}],[\"不可扩展对象的属性可能仍然可被删除\",{\"1\":{\"812\":1}}],[\"不可扩展的对象具有以下特征\",{\"1\":{\"538\":1}}],[\"不可枚举\",{\"1\":{\"1486\":1}}],[\"不可枚举属性\",{\"0\":{\"735\":1,\"796\":1},\"1\":{\"735\":1}}],[\"不可枚举的\",{\"1\":{\"599\":1}}],[\"不可或缺的一部分\",{\"1\":{\"618\":1}}],[\"不可见的标签\",{\"1\":{\"464\":1}}],[\"不可见节点包括\",{\"1\":{\"464\":1}}],[\"不可以使用\",{\"1\":{\"1374\":3}}],[\"不可以当作构造函数\",{\"1\":{\"1374\":1}}],[\"不可以\",{\"1\":{\"303\":1}}],[\"不可广播\",{\"1\":{\"298\":1}}],[\"不重复\",{\"1\":{\"298\":1}}],[\"不丢失\",{\"1\":{\"298\":1}}],[\"不保证数据传输的可靠性\",{\"1\":{\"297\":1}}],[\"不在直线\",{\"1\":{\"276\":1}}],[\"不能被重新赋值\",{\"1\":{\"1620\":1}}],[\"不能对只读属性赋值\",{\"1\":{\"1620\":1}}],[\"不能在代码块之中\",{\"1\":{\"1593\":1}}],[\"不能在类中修改类名\",{\"1\":{\"599\":1,\"1483\":1}}],[\"不能通过派生类的实例访问\",{\"1\":{\"1492\":1}}],[\"不能通过相等操作符来判断\",{\"1\":{\"904\":1}}],[\"不能用声明式写法\",{\"1\":{\"1362\":1}}],[\"不能用websocket\",{\"0\":{\"397\":1}}],[\"不能单独使用\",{\"1\":{\"1341\":1}}],[\"不能为一个已有真实值的变量使用\",{\"1\":{\"1322\":1}}],[\"不能保证\",{\"1\":{\"983\":1}}],[\"不能得到其对象类型\",{\"1\":{\"936\":1}}],[\"不能与其他值进行计算\",{\"1\":{\"928\":1}}],[\"不能转换成数值\",{\"1\":{\"905\":1}}],[\"不能是\",{\"1\":{\"891\":1}}],[\"不能找到\",{\"1\":{\"859\":1}}],[\"不能修改该对象已有属性的可枚举性\",{\"1\":{\"706\":1}}],[\"不能修改已有属性值\",{\"1\":{\"540\":1}}],[\"不能删除变量\",{\"1\":{\"1620\":1}}],[\"不能删除不可删除的属性\",{\"1\":{\"1620\":1}}],[\"不能删除已有属性\",{\"1\":{\"706\":1}}],[\"不能删除继承属性\",{\"1\":{\"564\":1}}],[\"不能继承\",{\"1\":{\"637\":1}}],[\"不能自己定义一个\",{\"1\":{\"625\":1}}],[\"不能依赖\",{\"1\":{\"571\":1}}],[\"不能使用前缀\",{\"1\":{\"1620\":1}}],[\"不能使用\",{\"1\":{\"1620\":4}}],[\"不能使用圆括号的情况\",{\"0\":{\"1223\":1}}],[\"不能使用严格相等运算符将\",{\"1\":{\"929\":1}}],[\"不能使用对象字面量重写原型\",{\"1\":{\"570\":1}}],[\"不能使用new\",{\"1\":{\"346\":1,\"928\":1,\"929\":1}}],[\"不能设置原型对象\",{\"1\":{\"539\":1,\"540\":1}}],[\"不能设置垂直方向的\",{\"1\":{\"45\":2}}],[\"不能变更原型对象\",{\"1\":{\"538\":1}}],[\"不能添加新的属性\",{\"1\":{\"538\":1,\"539\":1,\"540\":1}}],[\"不能作为被第三方使用\",{\"1\":{\"418\":1}}],[\"不能直接进行几何运算\",{\"1\":{\"388\":1}}],[\"不能遍历非iterable对象\",{\"1\":{\"356\":1}}],[\"不能把关键字\",{\"1\":{\"246\":1}}],[\"不直接支持重写和重载\",{\"1\":{\"230\":1}}],[\"不直接支持抽象类型\",{\"1\":{\"230\":1}}],[\"不直接支持静态方法和实例\",{\"1\":{\"230\":1}}],[\"不区分大小写\",{\"1\":{\"215\":1}}],[\"不询问\",{\"1\":{\"197\":2,\"204\":1}}],[\"不改变历史\",{\"1\":{\"178\":1}}],[\"不改变工作目录和暂存区\",{\"1\":{\"176\":1}}],[\"不修改提交历史\",{\"1\":{\"177\":1}}],[\"不同即可\",{\"1\":{\"1390\":1}}],[\"不同点\",{\"1\":{\"1194\":1}}],[\"不同之处在于\",{\"1\":{\"1164\":1}}],[\"不同浏览器实现不同\",{\"1\":{\"1065\":1}}],[\"不同对象类型调用\",{\"1\":{\"936\":1}}],[\"不同实例上的同名函数是不相等的\",{\"1\":{\"592\":1}}],[\"不同属性之间用逗号分隔\",{\"1\":{\"546\":1}}],[\"不同进程之间的内存是隔离的\",{\"1\":{\"422\":1}}],[\"不同语言间的对比\",{\"0\":{\"230\":1}}],[\"不同\",{\"1\":{\"177\":1,\"935\":1,\"1256\":1,\"1260\":1}}],[\"不同的渲染引擎对同一个样式的实现不一致\",{\"1\":{\"1550\":1}}],[\"不同的只是\",{\"1\":{\"1504\":1}}],[\"不同的三元组是\",{\"1\":{\"476\":1}}],[\"不同的版本之间格式书写上略有差异\",{\"1\":{\"321\":1}}],[\"不同的浏览器对应不同的方法\",{\"1\":{\"1466\":1}}],[\"不同的浏览器\",{\"1\":{\"139\":1}}],[\"不同的是\",{\"1\":{\"599\":1,\"1534\":1}}],[\"不同的是文字超出边界时将自动换行\",{\"1\":{\"92\":1}}],[\"不同的是会强制所有文本在同一行内显示\",{\"1\":{\"92\":1}}],[\"不同的是最后一行也会两端对齐\",{\"1\":{\"81\":1}}],[\"不同的地方在于它要求一个没有断行破发点的词必须保持为一个整体单位\",{\"1\":{\"91\":1}}],[\"不影响整体布局\",{\"1\":{\"158\":1}}],[\"不断行的空白格\",{\"1\":{\"121\":1}}],[\"不过这种说法可能会造成一些误导\",{\"1\":{\"1579\":1}}],[\"不过当有不止一个参数时\",{\"1\":{\"930\":1}}],[\"不过可以使用\",{\"1\":{\"731\":1}}],[\"不过要记住\",{\"1\":{\"570\":1}}],[\"不过\",{\"1\":{\"115\":1,\"576\":2,\"591\":1,\"1631\":1}}],[\"不做处理\",{\"1\":{\"81\":1}}],[\"不允许没声明就使用\",{\"1\":{\"1692\":1}}],[\"不允许重新声明同名变量\",{\"1\":{\"1692\":1}}],[\"不允许重复声明同名变量\",{\"1\":{\"1066\":1}}],[\"不允许在加载模块的脚本里面\",{\"1\":{\"1631\":1}}],[\"不允许直接访问堆内存中的位置\",{\"1\":{\"1264\":1}}],[\"不允许直接访问内存中的位置\",{\"1\":{\"917\":1}}],[\"不允许未声明变量就使用\",{\"1\":{\"1066\":1}}],[\"不允许这样使用\",{\"1\":{\"848\":1}}],[\"不允许像\",{\"1\":{\"60\":1}}],[\"不允许负值\",{\"1\":{\"47\":2,\"59\":1,\"104\":2}}],[\"不占据布局空间\",{\"1\":{\"60\":1}}],[\"不会报错\",{\"1\":{\"1695\":1}}],[\"不会自动反映函数参数的变化\",{\"1\":{\"1620\":1}}],[\"不会自动换行\",{\"1\":{\"45\":1}}],[\"不会在它的外层作用域引入变量\",{\"1\":{\"1620\":1}}],[\"不会立即执行\",{\"0\":{\"1454\":1}}],[\"不会再输入框失去焦点的时候再去判断用户名是否被占用\",{\"1\":{\"1449\":1}}],[\"不会产生多余的嵌套\",{\"1\":{\"1427\":1}}],[\"不会产生任何进一步的结果\",{\"1\":{\"1002\":1}}],[\"不会造成性能和负载问题\",{\"1\":{\"1425\":1}}],[\"不会从函数内部作用域寻找\",{\"1\":{\"1407\":1}}],[\"不会执行\",{\"1\":{\"1348\":1}}],[\"不会执行注释\",{\"1\":{\"240\":1}}],[\"不会做更复杂的\",{\"1\":{\"1203\":1}}],[\"不会做这种类型转换\",{\"1\":{\"762\":1}}],[\"不会被垃圾回收机制处理掉\",{\"1\":{\"1708\":1}}],[\"不会被垃圾回收机制处理\",{\"1\":{\"1708\":1}}],[\"不会被记录\",{\"1\":{\"1004\":1}}],[\"不会被包含在新数组中\",{\"1\":{\"669\":1}}],[\"不会强制将一个非数值的参数转换成数值\",{\"1\":{\"899\":1}}],[\"不会出现在原型上\",{\"1\":{\"615\":1,\"1483\":1}}],[\"不会改变数组长度\",{\"1\":{\"564\":1}}],[\"不会影响到另一个变量\",{\"1\":{\"552\":1}}],[\"不会影响元素的尺寸\",{\"1\":{\"60\":1}}],[\"不会像cookie一样被请求携带\",{\"1\":{\"445\":1}}],[\"不会\",{\"1\":{\"108\":1}}],[\"不会处理块级内容文本的最后一行\",{\"1\":{\"81\":1}}],[\"不会放大或缩小图像\",{\"1\":{\"65\":1}}],[\"不会独占一行\",{\"1\":{\"45\":1}}],[\"不会生效\",{\"1\":{\"38\":2}}],[\"不脱离文档流\",{\"1\":{\"35\":1}}],[\"不支持直接在形参里写默认值\",{\"1\":{\"1398\":1}}],[\"不支持\",{\"1\":{\"35\":1}}],[\"老年人和其他特殊需求用户能够更轻松地访问和使用web内容\",{\"1\":{\"139\":1}}],[\"老\",{\"1\":{\"35\":1}}],[\"浏览器已经可以运行我们得到的\",{\"1\":{\"1668\":1}}],[\"浏览器厂商\",{\"1\":{\"1550\":1}}],[\"浏览器可能会不知所措了\",{\"1\":{\"1549\":1}}],[\"浏览器可能还在等待如图片等内容加载\",{\"1\":{\"464\":1}}],[\"浏览器事件触发线程\",{\"1\":{\"1549\":1}}],[\"浏览器事件循环会在宏任务结束后\",{\"1\":{\"461\":1}}],[\"浏览器线程\",{\"0\":{\"1549\":1}}],[\"浏览器不会对同一个\",{\"1\":{\"1540\":1}}],[\"浏览器不安全的观点\",{\"1\":{\"143\":1}}],[\"浏览器用程序需要过长时间运行的对话框来缓解这个问题\",{\"1\":{\"1534\":1}}],[\"浏览器用的内核\",{\"1\":{\"143\":1}}],[\"浏览器环境检测\",{\"1\":{\"1621\":1}}],[\"浏览器环境\",{\"0\":{\"1533\":1}}],[\"浏览器无效\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"浏览器下为10\",{\"1\":{\"1137\":1}}],[\"浏览器中就是\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"浏览器中会被重写\",{\"1\":{\"1137\":1}}],[\"浏览器中使用\",{\"1\":{\"144\":1}}],[\"浏览器在\",{\"1\":{\"464\":1}}],[\"浏览器创建\",{\"1\":{\"464\":1}}],[\"浏览器检查响应状态码\",{\"1\":{\"464\":1}}],[\"浏览器获取主机\",{\"1\":{\"464\":1}}],[\"浏览器组装⼀个http\",{\"1\":{\"464\":1}}],[\"浏览器解析url获取协议\",{\"1\":{\"464\":1}}],[\"浏览器解析html\",{\"0\":{\"157\":1},\"1\":{\"147\":1}}],[\"浏览器查看缓存\",{\"1\":{\"464\":1}}],[\"浏览器查找当前url是否存在缓存\",{\"1\":{\"147\":1}}],[\"浏览器渲染优化\",{\"0\":{\"438\":1}}],[\"浏览器渲染\",{\"0\":{\"435\":1}}],[\"浏览器和代理服务器都可以缓存\",{\"1\":{\"429\":1}}],[\"浏览器和较新的\",{\"1\":{\"144\":1}}],[\"浏览器有哪些进程\",{\"0\":{\"425\":1}}],[\"浏览器需要决定哪个样式规则应该被优先应用\",{\"1\":{\"336\":1}}],[\"浏览器需要加载解析的不仅仅是html\",{\"1\":{\"157\":1}}],[\"浏览器根据这个属性\",{\"1\":{\"332\":1}}],[\"浏览器通过解析html\",{\"1\":{\"157\":1}}],[\"浏览器通过优先级\",{\"1\":{\"16\":1}}],[\"浏览器接收http响应\",{\"1\":{\"464\":1}}],[\"浏览器接收到来自服务器的响应资源后\",{\"1\":{\"155\":1}}],[\"浏览器接受响应\",{\"0\":{\"155\":1}}],[\"浏览器接受http响应\",{\"1\":{\"147\":1}}],[\"浏览器就会根据响应\",{\"1\":{\"153\":1}}],[\"浏览器只能发送\",{\"1\":{\"152\":1}}],[\"浏览器会无时无刻地在计算判断是否滚动到底部的逻辑\",{\"1\":{\"1438\":1}}],[\"浏览器会从本地读取缓存资源并返回200\",{\"1\":{\"429\":1}}],[\"浏览器会开始构造一个\",{\"1\":{\"152\":1}}],[\"浏览器会缓存之前拿到的dns\",{\"1\":{\"150\":1}}],[\"浏览器会先检查是否在缓存中\",{\"1\":{\"150\":1}}],[\"浏览器缓存\",{\"1\":{\"150\":1,\"464\":1}}],[\"浏览器首先对拿到的url进行识别\",{\"1\":{\"148\":1}}],[\"浏览器布局渲染\",{\"0\":{\"158\":1},\"1\":{\"147\":1}}],[\"浏览器的内核是多线程的\",{\"1\":{\"1549\":1}}],[\"浏览器的\",{\"1\":{\"461\":1}}],[\"浏览器的渲染过程\",{\"0\":{\"437\":1}}],[\"浏览器的解析过程并非是串行进行的\",{\"1\":{\"157\":1}}],[\"浏览器的地址栏输入url并按下回车\",{\"1\":{\"147\":1}}],[\"浏览器的工作原理\",{\"0\":{\"147\":1}}],[\"浏览器输入url后发生了什么\",{\"1\":{\"147\":1}}],[\"浏览器如\",{\"1\":{\"144\":1}}],[\"浏览器之中\",{\"1\":{\"143\":1}}],[\"浏览器内核\",{\"0\":{\"143\":1},\"1\":{\"436\":3}}],[\"浏览器引擎\",{\"0\":{\"142\":1}}],[\"浏览器\",{\"0\":{\"1718\":1,\"1739\":1},\"1\":{\"105\":1},\"2\":{\"141\":1,\"146\":1,\"160\":1,\"420\":1,\"427\":1,\"434\":1,\"441\":1,\"447\":1,\"452\":1,\"463\":1,\"466\":1}}],[\"浏览器窗口\",{\"1\":{\"35\":1}}],[\"zoo\",{\"1\":{\"1695\":2}}],[\"zn\",{\"1\":{\"1323\":2}}],[\"z未在x外部声明\",{\"1\":{\"1065\":1}}],[\"zxvf\",{\"1\":{\"213\":2}}],[\"zcvf\",{\"1\":{\"212\":2}}],[\"zip文件的内容\",{\"1\":{\"213\":1}}],[\"zip文件\",{\"1\":{\"213\":1}}],[\"zip\",{\"1\":{\"211\":1,\"213\":2}}],[\"zhang3\",{\"1\":{\"341\":1}}],[\"zh\",{\"1\":{\"120\":1,\"132\":1}}],[\"z\",{\"0\":{\"39\":1},\"1\":{\"35\":1,\"37\":1,\"39\":12,\"40\":3,\"59\":1,\"212\":1,\"343\":2,\"548\":2,\"715\":2,\"880\":2,\"894\":2,\"1065\":2,\"1087\":2,\"1178\":3,\"1214\":2,\"1225\":3,\"1231\":3,\"1246\":2,\"1248\":1,\"1274\":1,\"1404\":2,\"1405\":2,\"1417\":8}}],[\"忽略指向\",{\"0\":{\"1586\":1}}],[\"忽略前导零\",{\"1\":{\"509\":1}}],[\"忽略任何前导零后的整数值\",{\"1\":{\"509\":1}}],[\"忽略\",{\"1\":{\"35\":1}}],[\"接着执行下面的代码\",{\"1\":{\"1557\":1}}],[\"接着\",{\"1\":{\"1417\":1}}],[\"接口\",{\"1\":{\"1185\":1,\"1186\":2,\"1234\":1,\"1642\":1}}],[\"接口的类似数组的对象\",{\"1\":{\"1185\":1}}],[\"接口的对象都可以用\",{\"1\":{\"1234\":1}}],[\"接口的对象都可以用扩展运算符转为真正的数组\",{\"1\":{\"1185\":1}}],[\"接口的对象\",{\"0\":{\"1185\":1},\"1\":{\"1186\":1}}],[\"接口和枚举来定义类型\",{\"1\":{\"230\":1}}],[\"接收什么数据类型\",{\"1\":{\"1619\":1}}],[\"接收的时候只能以对象的解构赋值的方式来接收值\",{\"1\":{\"1619\":1}}],[\"接收的第二个参数为类数组\",{\"1\":{\"393\":1}}],[\"接收一个promise数组\",{\"1\":{\"380\":1,\"383\":1}}],[\"接下来编译器会为引擎生成运行所需的代码\",{\"1\":{\"1670\":1}}],[\"接下来\",{\"1\":{\"155\":1}}],[\"接受两个参数\",{\"1\":{\"1543\":1}}],[\"接受一个函数当作参数\",{\"1\":{\"1503\":1}}],[\"接受的参数的类型和数量\",{\"1\":{\"1390\":1}}],[\"接受正确定义的断言的方法总是能够找到\",{\"1\":{\"859\":1}}],[\"接受\",{\"1\":{\"153\":1}}],[\"接受者\",{\"1\":{\"152\":1}}],[\"接\",{\"1\":{\"31\":1}}],[\"整体和部分模块共同转发\",{\"1\":{\"1646\":2}}],[\"整体上就会感觉前端对业务的参与度太低了\",{\"1\":{\"1621\":1}}],[\"整除部分\",{\"1\":{\"1012\":1}}],[\"整型数组\",{\"1\":{\"503\":1}}],[\"整理提交历史\",{\"1\":{\"175\":1}}],[\"整个项目或整个站点被称之为应用\",{\"1\":{\"1621\":1}}],[\"整个前端项目可以划分为这么几种开发概念\",{\"1\":{\"1621\":1}}],[\"整个程序要么严格要么非严格\",{\"1\":{\"1578\":1}}],[\"整个查找过程中\",{\"1\":{\"646\":1}}],[\"整个映射表用花括号括起来\",{\"1\":{\"546\":1}}],[\"整个元素即指开始标签\",{\"1\":{\"116\":1}}],[\"整个结构称为\",{\"1\":{\"3\":1}}],[\"整数精度\",{\"1\":{\"1142\":1}}],[\"整数\",{\"1\":{\"31\":1,\"515\":1}}],[\"视作二进制\",{\"1\":{\"913\":1}}],[\"视为相等\",{\"1\":{\"762\":1}}],[\"视图更新\",{\"1\":{\"402\":1}}],[\"视频等其他媒体资源\",{\"1\":{\"157\":1}}],[\"视频\",{\"1\":{\"120\":1,\"215\":1}}],[\"视频或浏览器支持的其他任何资源\",{\"1\":{\"29\":1}}],[\"视口固定\",{\"1\":{\"105\":1}}],[\"视口\",{\"1\":{\"105\":1}}],[\"视口的宽度或高度被均分为\",{\"1\":{\"24\":2}}],[\"视口被均分为\",{\"1\":{\"24\":2}}],[\"视口相对长度单位\",{\"1\":{\"24\":2}}],[\"声频\",{\"1\":{\"29\":1}}],[\"声明同一变量是被允许的\",{\"1\":{\"1695\":1}}],[\"声明前也应该是\",{\"1\":{\"1694\":1}}],[\"声明使用方法基本和\",{\"1\":{\"1692\":1}}],[\"声明提升\",{\"0\":{\"1698\":1},\"1\":{\"1691\":1,\"1698\":1}}],[\"声明后命名导出\",{\"1\":{\"1661\":1}}],[\"声明后立即导出\",{\"1\":{\"1651\":1}}],[\"声明在全局作用域中的变量就是全局对象的一个同名属性\",{\"1\":{\"1578\":1}}],[\"声明式\",{\"1\":{\"1484\":2}}],[\"声明式和表达式\",{\"1\":{\"598\":1}}],[\"声明函数时指定适当的函数\",{\"0\":{\"1470\":1}}],[\"声明关键字\",{\"0\":{\"1690\":1},\"1\":{\"1328\":1}}],[\"声明创建一个值的只读引用\",{\"1\":{\"1068\":1}}],[\"声明的函数在代码执行之前被\",{\"1\":{\"1698\":1}}],[\"声明的函数名称的标识符\",{\"1\":{\"1328\":1}}],[\"声明的地方\",{\"1\":{\"1694\":1}}],[\"声明的话\",{\"1\":{\"1694\":1}}],[\"声明的基本类型变量理解为只读变量\",{\"1\":{\"1693\":1}}],[\"声明的一些特点\",{\"1\":{\"1691\":1}}],[\"声明的属性不能够从它被声明的作用域中删除\",{\"1\":{\"1101\":1}}],[\"声明的属性不能从全局作用域或函数的作用域中删除\",{\"1\":{\"1101\":1}}],[\"声明的常量具有以下特征\",{\"1\":{\"1068\":1}}],[\"声明的变量在代码执行之前被\",{\"1\":{\"1698\":1}}],[\"声明的变量在当前块使用完之后就会被释放\",{\"1\":{\"1695\":1}}],[\"声明的变量\",{\"1\":{\"1694\":2}}],[\"声明的变量记录的是\",{\"1\":{\"1693\":1}}],[\"声明的变量只在当前代码块有效\",{\"1\":{\"1661\":1}}],[\"声明的变量是有块级作用域的\",{\"1\":{\"1076\":1}}],[\"声明的变量没有块级作用域\",{\"1\":{\"1075\":1}}],[\"声明的变量可以理解为只读变量\",{\"1\":{\"1068\":1}}],[\"声明的变量不提升的效果\",{\"1\":{\"1067\":1}}],[\"声明的变量的块的第一行\",{\"1\":{\"1694\":1}}],[\"声明的变量的作用域只有外层块\",{\"1\":{\"1692\":1}}],[\"声明的变量的作用域是整个封闭函数\",{\"1\":{\"1692\":1}}],[\"声明的变量的作用域是它当前的执行上下文\",{\"1\":{\"1065\":1}}],[\"声明的变量的\",{\"1\":{\"1066\":1}}],[\"声明中你可能会遇到这样的错误\",{\"1\":{\"1067\":1}}],[\"声明不会被提升到当前执行上下文的顶部\",{\"1\":{\"1067\":1}}],[\"声明和未声明变量之间的差异是\",{\"1\":{\"1065\":1}}],[\"声明之前执行\",{\"1\":{\"1053\":1}}],[\"声明类会调用类的构造函数\",{\"1\":{\"599\":1}}],[\"声明类似\",{\"1\":{\"599\":1,\"1483\":1}}],[\"声明变量后的分号\",{\"1\":{\"1330\":1}}],[\"声明变量则恰恰相反\",{\"1\":{\"1067\":1}}],[\"声明变量是它所在上下文环境的\",{\"1\":{\"1065\":1}}],[\"声明变量在任何代码执行前创建\",{\"1\":{\"1065\":1}}],[\"声明变量的作用域限制在其声明位置的上下文中\",{\"1\":{\"1065\":1}}],[\"声明变量并\",{\"1\":{\"242\":1}}],[\"声明变量时不需要指定类型\",{\"1\":{\"230\":1}}],[\"声明文档类型\",{\"1\":{\"120\":1}}],[\"声明\",{\"0\":{\"5\":1,\"1064\":1},\"1\":{\"35\":1,\"244\":2,\"1051\":1,\"1069\":1,\"1675\":1,\"1691\":2,\"1694\":1,\"1698\":1}}],[\"该\",{\"1\":{\"1700\":1}}],[\"该用户名还未被注册\",{\"1\":{\"1449\":2}}],[\"该用户名已被注册\",{\"1\":{\"1449\":2}}],[\"该事件会连续触发\",{\"1\":{\"1432\":1}}],[\"该作用域即会消失\",{\"1\":{\"1407\":1}}],[\"该对象在函数体内不存在\",{\"1\":{\"1374\":1}}],[\"该对象包装了给定的参数\",{\"1\":{\"800\":1}}],[\"该参数不能被重写\",{\"1\":{\"1311\":1}}],[\"该参数无效\",{\"1\":{\"1310\":1}}],[\"该参数会作为原函数运行时的\",{\"1\":{\"1310\":1}}],[\"该参数返回\",{\"1\":{\"807\":1}}],[\"该地址与堆内存的实际值相关联\",{\"1\":{\"1264\":1}}],[\"该子对象的\",{\"1\":{\"1218\":1}}],[\"该表达式短路返回值是\",{\"1\":{\"1164\":1}}],[\"该块由一对大括号\",{\"1\":{\"1073\":1}}],[\"该变量才会从暂时性死区内被移除并可以安全使用\",{\"1\":{\"1694\":1}}],[\"该变量与第一个参数\",{\"1\":{\"1407\":1}}],[\"该变量将多余的参数放入数组中\",{\"1\":{\"1393\":1}}],[\"该变量处于从块开始到初始化处理的\",{\"1\":{\"1067\":1}}],[\"该变量的值是\",{\"1\":{\"1067\":1,\"1698\":1}}],[\"该标识符保存由\",{\"1\":{\"1052\":1}}],[\"该新对象\",{\"1\":{\"1035\":1}}],[\"该循环迭代并记录\",{\"1\":{\"1004\":1}}],[\"该数据类型通常被用作一个对象属性的键值\",{\"1\":{\"928\":1}}],[\"该类型的性质在于这个类型的值可以用来创建匿名的对象属性\",{\"1\":{\"928\":1}}],[\"该方法能准确检测一个变量是否为数组类型\",{\"1\":{\"938\":1}}],[\"该方法返回一个已经编码的\",{\"1\":{\"879\":1}}],[\"该方法仅阻止添加自身的属性\",{\"1\":{\"812\":1}}],[\"该方法会忽略掉那些从原型链上继承到的属性\",{\"1\":{\"754\":1}}],[\"该方法使用源对象的\",{\"1\":{\"678\":1}}],[\"该方法为数组中的每个成员调用一次回调函数\",{\"1\":{\"669\":1}}],[\"该方法就是构造函数\",{\"1\":{\"599\":1}}],[\"该实例对象原型为\",{\"1\":{\"640\":1}}],[\"该实例的内部将包含一个指针\",{\"1\":{\"576\":1}}],[\"该函数返回一个类的实例\",{\"1\":{\"1485\":1}}],[\"该函数会被覆盖为另外一个按合适方式执行的函数\",{\"1\":{\"1469\":1}}],[\"该函数会被覆盖为另一个按照合适方式执行的函数\",{\"1\":{\"1465\":1}}],[\"该函数会被覆盖为符合分支条件的函数\",{\"1\":{\"1468\":1}}],[\"该函数的作用域也遵守这个规则\",{\"1\":{\"1407\":1}}],[\"该函数的作用仅仅是封装创建对象的代码\",{\"1\":{\"571\":1}}],[\"该函数预期传入的参数个数\",{\"1\":{\"1406\":1}}],[\"该函数可以将字符串视作指定的进制形式表示\",{\"1\":{\"913\":1}}],[\"该函数属于\",{\"1\":{\"868\":1,\"873\":1,\"878\":1,\"884\":1,\"897\":1,\"902\":1,\"908\":1,\"913\":1}}],[\"该函数对传入的对象执行了一次\",{\"1\":{\"640\":1}}],[\"该规范把它们放在了两对儿方括号\",{\"1\":{\"527\":1}}],[\"该项目将缩小\",{\"1\":{\"332\":1}}],[\"该条目表明服务器已收到\",{\"1\":{\"303\":1}}],[\"该队列为每个客户端的\",{\"1\":{\"303\":1}}],[\"该行为是对齐所有文本行最快的方法\",{\"1\":{\"85\":1}}],[\"该属性始终是\",{\"1\":{\"1386\":1}}],[\"该属性是一个指针\",{\"1\":{\"1385\":1}}],[\"该属性是否有效由客户端系统安装的字体的特定字体变量映射决定\",{\"1\":{\"75\":1}}],[\"该属性被记录\",{\"1\":{\"1004\":1}}],[\"该属性为\",{\"1\":{\"864\":1}}],[\"该属性将会屏蔽原型中的属性\",{\"1\":{\"576\":1}}],[\"该属性不起作用\",{\"1\":{\"332\":1}}],[\"该属性可以将指定的额外间隙添加到每个单词之后\",{\"1\":{\"89\":1}}],[\"该属性可以将指定的额外间隔添加到每个字符之后\",{\"1\":{\"88\":1}}],[\"该属性可以对几乎所有元素的生成框产生阴影\",{\"1\":{\"59\":1}}],[\"该属性主要是负责边框的缩放形式即可\",{\"1\":{\"65\":1}}],[\"该值和数学意义上的无穷大很像\",{\"1\":{\"853\":1}}],[\"该值为只读的原始类型\",{\"1\":{\"805\":1}}],[\"该值适合包含一些非亚洲文本的亚洲文本\",{\"1\":{\"91\":1}}],[\"该值不影响该元素文本的字体大小\",{\"1\":{\"82\":2}}],[\"该值越大阴影边缘越模糊\",{\"1\":{\"59\":1}}],[\"该值使得属性能够继承祖先设置\",{\"1\":{\"29\":1}}],[\"该元素生成块级元素盒\",{\"1\":{\"329\":1}}],[\"该元素生成一个或多个内联元素盒\",{\"1\":{\"329\":1}}],[\"该元素生成一个块级元素盒\",{\"1\":{\"329\":2}}],[\"该元素是作为匿名盒子生成的\",{\"1\":{\"329\":1}}],[\"该元素使用流式布局\",{\"1\":{\"329\":1}}],[\"该元素之前和之后产生换行\",{\"1\":{\"329\":1}}],[\"该元素将变为块级元素\",{\"1\":{\"37\":1}}],[\"该元素的行为类似内联元素并且根据\",{\"1\":{\"329\":1}}],[\"该元素的行为类似块级元素并且根据网格模型布局它的内容\",{\"1\":{\"329\":1}}],[\"该元素的行为类似块级元素并且根据弹性盒模型布局它的内容\",{\"1\":{\"329\":1}}],[\"该元素的行为类似于\",{\"1\":{\"329\":13}}],[\"该元素的\",{\"1\":{\"15\":1}}],[\"颜色值转换\",{\"0\":{\"1156\":1}}],[\"颜色模型或红绿蓝颜色空间\",{\"1\":{\"108\":1}}],[\"颜色关键字等\",{\"1\":{\"28\":1}}],[\"颜色\",{\"0\":{\"28\":1}}],[\"浩渺\",{\"1\":{\"27\":1}}],[\"秒内连续播放\",{\"1\":{\"1431\":1}}],[\"秒\",{\"1\":{\"27\":1}}],[\"时确定的\",{\"1\":{\"1677\":2}}],[\"时把\",{\"1\":{\"1580\":1}}],[\"时递归终止\",{\"1\":{\"1417\":1}}],[\"时返回\",{\"1\":{\"1203\":2}}],[\"时结果为\",{\"1\":{\"1146\":1}}],[\"时结束循环\",{\"1\":{\"1058\":1}}],[\"时执行其他代码\",{\"1\":{\"1017\":1}}],[\"时执行代码\",{\"1\":{\"1017\":1}}],[\"时会自动替换为指向全局对象\",{\"1\":{\"1302\":1}}],[\"时会隐式转换为\",{\"1\":{\"948\":1}}],[\"时会发生的细节\",{\"1\":{\"329\":1}}],[\"时是不是就满足了上篇文章中的调用对象的函数方法时\",{\"1\":{\"392\":1}}],[\"时长的\",{\"1\":{\"304\":1}}],[\"时等同于\",{\"1\":{\"82\":2}}],[\"时\",{\"1\":{\"52\":1,\"62\":1,\"87\":1,\"253\":1,\"277\":1,\"464\":2,\"527\":1,\"587\":2,\"1017\":1,\"1116\":1,\"1217\":1,\"1253\":1,\"1254\":1,\"1256\":2,\"1281\":1,\"1288\":1,\"1312\":1,\"1319\":1,\"1407\":1,\"1469\":1,\"1486\":2,\"1571\":1,\"1579\":1,\"1587\":1,\"1670\":1}}],[\"时间复杂度\",{\"1\":{\"509\":2,\"524\":1}}],[\"时间过期\",{\"1\":{\"430\":1}}],[\"时间后执行\",{\"1\":{\"289\":1}}],[\"时间后触发\",{\"1\":{\"288\":1}}],[\"时间戳版本\",{\"1\":{\"288\":1}}],[\"时间不允许有负值\",{\"1\":{\"27\":1}}],[\"时间单位包括有\",{\"1\":{\"27\":1}}],[\"时间单位\",{\"1\":{\"27\":1}}],[\"时间\",{\"0\":{\"27\":1},\"1\":{\"1432\":1}}],[\"时的样式\",{\"1\":{\"15\":2}}],[\"圈\",{\"1\":{\"26\":1}}],[\"转化为普通的变量赋值\",{\"1\":{\"1670\":1}}],[\"转化为一组\",{\"1\":{\"1668\":1}}],[\"转码\",{\"1\":{\"1636\":1}}],[\"转型函数的行为\",{\"1\":{\"1255\":1}}],[\"转型函数相同\",{\"1\":{\"1255\":1}}],[\"转成相同的数据类型再计算\",{\"1\":{\"948\":1}}],[\"转为真正的数组\",{\"1\":{\"1185\":1}}],[\"转为字符串相当于直接使用\",{\"1\":{\"943\":1}}],[\"转为字符串将各元素以小写逗号\",{\"1\":{\"943\":1}}],[\"转为数字的字符串形式\",{\"1\":{\"943\":1}}],[\"转为\",{\"1\":{\"943\":6,\"944\":3}}],[\"转换后的\",{\"1\":{\"1375\":1}}],[\"转换后的值\",{\"1\":{\"948\":1}}],[\"转换成字符串类型\",{\"1\":{\"936\":1}}],[\"转换\",{\"0\":{\"714\":1,\"715\":1},\"1\":{\"1018\":1}}],[\"转换为可执行代码的过程被称为\",{\"1\":{\"1668\":1}}],[\"转换为对象\",{\"1\":{\"1087\":1}}],[\"转换为数字类型\",{\"1\":{\"954\":1}}],[\"转换为数值类型\",{\"1\":{\"947\":1}}],[\"转换为布尔类型\",{\"1\":{\"947\":1,\"954\":1}}],[\"转换为字符串类型\",{\"1\":{\"947\":1,\"954\":1}}],[\"转换为函数定义的字符串\",{\"1\":{\"943\":1}}],[\"转换为机器代码\",{\"1\":{\"893\":1}}],[\"转换为代码即可写成\",{\"1\":{\"275\":1,\"276\":1}}],[\"转换为\",{\"1\":{\"253\":2,\"948\":3,\"1619\":1}}],[\"转义序列均以\",{\"1\":{\"239\":1}}],[\"转义序列\",{\"0\":{\"239\":1}}],[\"转\",{\"1\":{\"26\":1}}],[\"弧度\",{\"1\":{\"26\":1}}],[\"梯度\",{\"1\":{\"26\":1}}],[\"度\",{\"1\":{\"26\":1}}],[\"角度单位\",{\"1\":{\"26\":1}}],[\"角度\",{\"0\":{\"26\":1}}],[\"queue\",{\"1\":{\"1532\":1,\"1552\":2}}],[\"queryselector\",{\"1\":{\"1593\":1}}],[\"queryselectorall\",{\"1\":{\"999\":1,\"1185\":2}}],[\"query\",{\"1\":{\"148\":1}}],[\"quickfun\",{\"1\":{\"488\":2}}],[\"quot\",{\"1\":{\"121\":1}}],[\"q\",{\"1\":{\"25\":1,\"191\":1,\"205\":3,\"206\":2,\"479\":7,\"518\":4,\"1083\":4,\"1274\":2}}],[\"m1\",{\"1\":{\"1619\":1}}],[\"must\",{\"1\":{\"1395\":1}}],[\"mult2\",{\"1\":{\"1376\":4}}],[\"mutationobserver\",{\"1\":{\"457\":1,\"1533\":1}}],[\"mutations\",{\"1\":{\"413\":1}}],[\"mdn\",{\"1\":{\"910\":1}}],[\"mth2\",{\"1\":{\"551\":4}}],[\"mth1\",{\"1\":{\"551\":2}}],[\"mtime\",{\"1\":{\"215\":1}}],[\"m+1\",{\"1\":{\"494\":2}}],[\"m\",{\"1\":{\"313\":1,\"494\":7,\"500\":9,\"509\":5,\"570\":2,\"571\":2,\"586\":1,\"1047\":1,\"1264\":2,\"1267\":2,\"1490\":2,\"1491\":1}}],[\"mls\",{\"1\":{\"215\":1}}],[\"m为mb\",{\"1\":{\"215\":1}}],[\"mv\",{\"1\":{\"198\":3}}],[\"mvc\",{\"1\":{\"153\":1}}],[\"mkdir\",{\"1\":{\"196\":2}}],[\"mnt\",{\"1\":{\"186\":1}}],[\"monthname\",{\"1\":{\"1048\":2}}],[\"months\",{\"1\":{\"1048\":3}}],[\"monospace\",{\"1\":{\"71\":1}}],[\"mo\",{\"1\":{\"1048\":5}}],[\"moved\",{\"1\":{\"684\":1}}],[\"move\",{\"1\":{\"684\":1,\"1221\":12}}],[\"mouse\",{\"1\":{\"1533\":1}}],[\"mousemove\",{\"1\":{\"1437\":1}}],[\"mouseover事件\",{\"1\":{\"291\":1}}],[\"mount\",{\"1\":{\"215\":1}}],[\"modify\",{\"1\":{\"500\":1}}],[\"modified\",{\"1\":{\"430\":9}}],[\"module4\",{\"1\":{\"1614\":1}}],[\"moduletwo\",{\"1\":{\"1612\":3}}],[\"moduleone\",{\"1\":{\"1612\":5,\"1614\":2}}],[\"module3\",{\"1\":{\"1602\":2,\"1603\":2,\"1614\":1}}],[\"module2\",{\"1\":{\"1602\":2,\"1603\":2,\"1611\":2,\"1612\":2,\"1614\":1,\"1634\":1,\"1661\":1}}],[\"module1\",{\"1\":{\"1602\":2,\"1603\":2,\"1611\":2,\"1612\":2,\"1613\":2,\"1614\":3,\"1619\":1,\"1634\":1,\"1661\":1}}],[\"moduleb\",{\"1\":{\"1596\":1}}],[\"modulea\",{\"1\":{\"1596\":1}}],[\"modules\",{\"1\":{\"413\":1,\"1593\":1,\"1636\":2,\"1652\":2}}],[\"module\",{\"0\":{\"1619\":1},\"1\":{\"253\":1,\"1312\":4,\"1593\":6,\"1599\":2,\"1600\":3,\"1601\":1,\"1603\":3,\"1611\":4,\"1612\":6,\"1613\":14,\"1614\":2,\"1616\":20,\"1618\":2,\"1626\":2,\"1627\":4,\"1628\":2,\"1629\":1,\"1631\":2,\"1633\":1,\"1634\":4,\"1635\":4,\"1640\":2,\"1641\":3,\"1642\":2,\"1643\":1,\"1644\":2,\"1645\":1,\"1646\":6,\"1661\":1}}],[\"model\",{\"1\":{\"1109\":2}}],[\"mode\",{\"1\":{\"205\":3,\"1385\":1,\"1578\":1}}],[\"more\",{\"1\":{\"206\":1,\"1181\":2,\"1233\":1,\"1285\":1,\"1287\":1}}],[\"mozilla的\",{\"1\":{\"144\":1}}],[\"myreallycoollibrary\",{\"1\":{\"1683\":1}}],[\"myfunction\",{\"1\":{\"1174\":1,\"1178\":6}}],[\"mystring\",{\"1\":{\"1169\":2}}],[\"mymodual\",{\"1\":{\"1593\":1}}],[\"mymonth\",{\"1\":{\"1048\":2}}],[\"mymap\",{\"1\":{\"1166\":3}}],[\"myprivatemethod\",{\"1\":{\"928\":2}}],[\"myclass\",{\"1\":{\"613\":1,\"632\":2}}],[\"mycall\",{\"1\":{\"392\":3}}],[\"mycar\",{\"1\":{\"246\":1,\"1042\":2,\"1109\":3}}],[\"mybind\",{\"1\":{\"394\":1}}],[\"myapply\",{\"1\":{\"393\":2}}],[\"myobject\",{\"1\":{\"388\":2}}],[\"myobject=\",{\"1\":{\"388\":1}}],[\"myname\",{\"1\":{\"354\":2,\"1486\":3}}],[\"my\",{\"1\":{\"131\":2,\"928\":1,\"1042\":3,\"1490\":2,\"1491\":3,\"1634\":2,\"1635\":4}}],[\"memorize\",{\"1\":{\"1441\":1}}],[\"memory\",{\"1\":{\"1285\":2,\"1286\":1,\"1287\":1}}],[\"mercedes\",{\"1\":{\"1109\":2,\"1110\":2}}],[\"merge\",{\"1\":{\"167\":1,\"500\":1}}],[\"messagechannel\",{\"1\":{\"1533\":1}}],[\"message\",{\"1\":{\"1048\":4,\"1054\":1,\"1218\":1,\"1458\":1,\"1593\":1}}],[\"method\",{\"1\":{\"736\":2,\"820\":3,\"1403\":5,\"1449\":2,\"1514\":2}}],[\"methods\",{\"1\":{\"684\":1}}],[\"methodname\",{\"1\":{\"402\":3,\"605\":2,\"1487\":4}}],[\"meta\",{\"1\":{\"129\":1,\"464\":1}}],[\"media\",{\"1\":{\"186\":1}}],[\"medium\",{\"1\":{\"61\":1}}],[\"mrsingsing\",{\"1\":{\"100\":1}}],[\"microtask\",{\"1\":{\"1533\":1}}],[\"microseconds\",{\"1\":{\"1428\":2}}],[\"micortask\",{\"1\":{\"457\":1}}],[\"milliseconds\",{\"1\":{\"1428\":1}}],[\"mix\",{\"1\":{\"947\":3}}],[\"mixed\",{\"1\":{\"176\":2}}],[\"missing\",{\"1\":{\"557\":1,\"1068\":1,\"1693\":1}}],[\"mid\",{\"1\":{\"503\":5}}],[\"middleitem\",{\"1\":{\"488\":3}}],[\"middleindex\",{\"1\":{\"488\":2}}],[\"middle\",{\"1\":{\"82\":1,\"93\":1,\"1183\":1}}],[\"mime\",{\"1\":{\"155\":1}}],[\"min\",{\"1\":{\"485\":5,\"488\":7,\"925\":1}}],[\"minindex\",{\"1\":{\"482\":7,\"488\":5}}],[\"minheight\",{\"1\":{\"47\":1}}],[\"minwidth\",{\"1\":{\"47\":1}}],[\"malloc\",{\"1\":{\"1284\":1}}],[\"make\",{\"1\":{\"1109\":2}}],[\"may\",{\"1\":{\"1048\":1,\"1385\":1}}],[\"map2\",{\"1\":{\"714\":2}}],[\"map1\",{\"1\":{\"714\":2}}],[\"maparr2\",{\"1\":{\"348\":2}}],[\"maparr\",{\"1\":{\"348\":2}}],[\"map\",{\"0\":{\"348\":1,\"714\":1,\"996\":1,\"1186\":1,\"1234\":1},\"1\":{\"348\":2,\"375\":1,\"377\":8,\"388\":1,\"467\":6,\"512\":4,\"515\":5,\"710\":1,\"714\":2,\"716\":1,\"951\":2,\"989\":1,\"996\":1,\"1166\":1,\"1186\":4,\"1221\":2,\"1234\":8,\"1235\":1,\"1355\":1,\"1358\":2,\"1373\":3}}],[\"main=\",{\"1\":{\"1617\":1}}],[\"main\",{\"1\":{\"332\":2,\"1533\":1,\"1593\":4,\"1603\":2,\"1658\":1}}],[\"matrix\",{\"1\":{\"1092\":1}}],[\"math\",{\"1\":{\"251\":1,\"467\":1,\"482\":1,\"485\":2,\"488\":2,\"503\":1,\"506\":1,\"524\":2,\"838\":2,\"854\":2,\"858\":2,\"926\":2,\"1012\":1,\"1101\":1,\"1109\":1,\"1124\":1,\"1131\":1,\"1218\":2,\"1312\":2,\"1561\":4}}],[\"match\",{\"1\":{\"81\":1,\"242\":1,\"430\":1}}],[\"man\",{\"1\":{\"191\":1}}],[\"macrotask\",{\"1\":{\"1533\":1}}],[\"macrotask|task\",{\"1\":{\"457\":1}}],[\"mac\",{\"1\":{\"152\":2}}],[\"mar\",{\"1\":{\"1048\":1}}],[\"markup\",{\"1\":{\"115\":1}}],[\"margin\",{\"0\":{\"55\":1},\"1\":{\"14\":1,\"36\":1,\"45\":6,\"50\":1,\"55\":9,\"56\":5}}],[\"maxans\",{\"1\":{\"524\":4}}],[\"maxsubarray\",{\"1\":{\"524\":1}}],[\"maxheapify\",{\"1\":{\"488\":4}}],[\"maxheight\",{\"1\":{\"47\":1}}],[\"maxprofit\",{\"1\":{\"485\":1}}],[\"max\",{\"1\":{\"429\":1,\"430\":1,\"464\":1,\"467\":1,\"485\":1,\"488\":4,\"509\":1,\"524\":2,\"925\":1}}],[\"maximum\",{\"1\":{\"304\":1}}],[\"maxwidth\",{\"1\":{\"47\":1}}],[\"msg\",{\"1\":{\"1218\":2}}],[\"msleep\",{\"1\":{\"1428\":1}}],[\"msl\",{\"1\":{\"304\":1}}],[\"mss\",{\"1\":{\"301\":1}}],[\"ms\",{\"1\":{\"27\":2,\"1340\":4,\"1433\":1,\"1446\":1}}],[\"mm\",{\"1\":{\"25\":1}}],[\"厘米\",{\"1\":{\"25\":1}}],[\"点运算符是很多面向对象语句的通用写法\",{\"1\":{\"557\":1}}],[\"点运算符\",{\"0\":{\"557\":1},\"1\":{\"556\":1,\"561\":2}}],[\"点状线条\",{\"1\":{\"83\":1}}],[\"点\",{\"1\":{\"25\":1,\"275\":3,\"276\":2}}],[\"即生效范围\",{\"1\":{\"1698\":1}}],[\"即跨多个文件\",{\"1\":{\"1661\":1}}],[\"即通过该接口\",{\"1\":{\"1654\":1}}],[\"即通过借用构造函数来继承属性\",{\"1\":{\"659\":1}}],[\"即面向切面编程\",{\"1\":{\"1505\":1}}],[\"即实现了链式操作了\",{\"1\":{\"1497\":1}}],[\"即直接写在参数定义的后面\",{\"1\":{\"1399\":1}}],[\"即前一个函数的输出是后一个函数的输入\",{\"1\":{\"1376\":1}}],[\"即全局对象\",{\"1\":{\"1375\":1}}],[\"即一次绑定之后\",{\"1\":{\"1589\":1}}],[\"即一个非原始值\",{\"1\":{\"1329\":1}}],[\"即一级的权限表示为\",{\"1\":{\"1161\":1}}],[\"即读写内存\",{\"1\":{\"1271\":1}}],[\"即只有在用到时才会求值\",{\"1\":{\"1217\":1}}],[\"即等号左边的模式只匹配一部分的等号右边的数组\",{\"1\":{\"1216\":1}}],[\"即拷贝了前者的内存空间的地址指针\",{\"1\":{\"1204\":1}}],[\"即便右移\",{\"1\":{\"1150\":1}}],[\"即按二进制形式把所有的数字向左移动对应的位数\",{\"1\":{\"1148\":1}}],[\"即需要将这个数减去\",{\"1\":{\"1147\":1}}],[\"即程序中直接使用的数据值\",{\"1\":{\"1080\":1}}],[\"即会提升到全局作用域或函数作用域的头部\",{\"1\":{\"1074\":1}}],[\"即它是一个全局变量\",{\"1\":{\"853\":1}}],[\"即没有\",{\"1\":{\"774\":1}}],[\"即可\",{\"1\":{\"929\":1,\"1486\":1}}],[\"即可避免隐式类型转换的问题\",{\"1\":{\"861\":1}}],[\"即可以为他们添加新的属性\",{\"1\":{\"768\":1}}],[\"即可判断出鼠标从上方移出\",{\"1\":{\"276\":1}}],[\"即可判断出点\",{\"1\":{\"275\":1}}],[\"即副本\",{\"1\":{\"659\":1}}],[\"即指向相对应的对象的原型对象\",{\"1\":{\"646\":1}}],[\"即在子类型构造函数的内部调用父类构造函数以实现对父类构造函数属性的继承\",{\"1\":{\"635\":1}}],[\"即定义在\",{\"1\":{\"603\":2}}],[\"即怎样知道一个对象的类型\",{\"1\":{\"586\":1}}],[\"即使不使用任何依赖管理工具也可以实现规避冲突的功效\",{\"1\":{\"1684\":1}}],[\"即使是调用的自身函数\",{\"1\":{\"1557\":1}}],[\"即使是先创建了实例后修改原型也照样如此\",{\"1\":{\"579\":1}}],[\"即使未来的版本在对外接口中\",{\"1\":{\"1399\":1}}],[\"即使函数体内只包含一条语句\",{\"1\":{\"1329\":1}}],[\"即使\",{\"1\":{\"1002\":1,\"1284\":1,\"1709\":1}}],[\"即使这个属性设置为\",{\"1\":{\"576\":1}}],[\"即使有其他代码会给这个对象添加方法或数据成员\",{\"1\":{\"572\":1}}],[\"即使一个元素拥有滚动机制\",{\"1\":{\"105\":1}}],[\"即自身定义的属性\",{\"1\":{\"548\":1,\"683\":1}}],[\"即视为\",{\"1\":{\"509\":1}}],[\"即逐层地\",{\"1\":{\"479\":1}}],[\"即从父元素到子元素\",{\"1\":{\"454\":1}}],[\"即从索引为\",{\"1\":{\"352\":1}}],[\"即项目的本来大小\",{\"1\":{\"332\":1}}],[\"即项目的排列方向\",{\"1\":{\"332\":1}}],[\"即如果空间不足\",{\"1\":{\"332\":1}}],[\"即如果存在剩余空间\",{\"1\":{\"332\":1}}],[\"即不应该在顶层代码使用\",{\"1\":{\"1620\":1}}],[\"即不存在任何继承\",{\"1\":{\"624\":1}}],[\"即不保证可靠交付\",{\"1\":{\"310\":1}}],[\"即不会再收到数据了\",{\"1\":{\"304\":1}}],[\"即鼠标从上方进入\",{\"1\":{\"275\":1}}],[\"即每个节点在页面中的大小和位置等几何信息\",{\"1\":{\"158\":1}}],[\"即查询参数\",{\"1\":{\"148\":1}}],[\"即浏览器核心\",{\"1\":{\"143\":1}}],[\"即元素\",{\"1\":{\"39\":1}}],[\"即去掉\",{\"1\":{\"36\":1}}],[\"即\",{\"1\":{\"24\":1,\"51\":1,\"148\":1,\"301\":1,\"621\":1,\"624\":1,\"636\":1,\"648\":1,\"653\":1,\"828\":1,\"903\":1,\"1375\":1,\"1395\":1,\"1477\":1,\"1581\":2,\"1627\":1}}],[\"通俗且不严谨的解释\",{\"1\":{\"1670\":1}}],[\"通用模块定义\",{\"1\":{\"1617\":1,\"1618\":2}}],[\"通用功能\",{\"1\":{\"1462\":1}}],[\"通常从引入模块目录下\",{\"1\":{\"1632\":1}}],[\"通常被称为\",{\"1\":{\"1580\":1}}],[\"通常讲到浏览器的时候\",{\"1\":{\"1550\":1}}],[\"通常由以下几个常驻的线程组成\",{\"1\":{\"1549\":1}}],[\"通常由编译器插入特殊代码来实现\",{\"1\":{\"229\":1}}],[\"通常使用变量\",{\"1\":{\"1518\":1}}],[\"通常使用此函数检测来自\",{\"1\":{\"904\":1}}],[\"通常来讲\",{\"1\":{\"1517\":1}}],[\"通常来说你不应该在代码中混合使用严格模式和非严格模式\",{\"1\":{\"1578\":1}}],[\"通常来说\",{\"1\":{\"229\":1,\"1398\":1}}],[\"通常情况下\",{\"1\":{\"1405\":1}}],[\"通常而言\",{\"1\":{\"1330\":1}}],[\"通常\",{\"1\":{\"1158\":1,\"1505\":1}}],[\"通常可以使用函数调用而不是循环跳转\",{\"1\":{\"1023\":1}}],[\"通常在赋值语句前后额外添加一对括号\",{\"1\":{\"1020\":1}}],[\"通常为\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"通常为比较表达式\",{\"1\":{\"1009\":1}}],[\"通常为一条声明赋值语句\",{\"1\":{\"1009\":1}}],[\"通常为字体高度的一半\",{\"1\":{\"24\":1}}],[\"通常比其他替代方法更慢\",{\"1\":{\"893\":1}}],[\"通常都是在计算失败时\",{\"1\":{\"858\":1,\"926\":1}}],[\"通常用来生成数据结构\",{\"1\":{\"625\":1}}],[\"通常会导致无法维护的代码\",{\"1\":{\"412\":1}}],[\"通常简称为链路层\",{\"1\":{\"318\":1}}],[\"通常是一个对象\",{\"1\":{\"1683\":1}}],[\"通常是一个变量\",{\"1\":{\"1040\":1}}],[\"通常是定时器标识\",{\"1\":{\"1438\":1}}],[\"通常是指\",{\"1\":{\"325\":1}}],[\"通常是两分钟\",{\"1\":{\"304\":1}}],[\"通常是矩形\",{\"1\":{\"60\":1}}],[\"通常端口号不常见是因为大部分都是使用默认的端口\",{\"1\":{\"148\":1}}],[\"通常只出现一次\",{\"1\":{\"126\":1}}],[\"通过在全局执行环境中查找\",{\"1\":{\"1709\":1}}],[\"通过在实例上添加一个同名属性\",{\"1\":{\"581\":1}}],[\"通过函数声明的方式\",{\"1\":{\"1698\":1,\"1700\":1}}],[\"通过以上论述可以得知\",{\"1\":{\"1670\":1}}],[\"通过上述三个阶段\",{\"1\":{\"1668\":1}}],[\"通过使用全局对象\",{\"1\":{\"1561\":1}}],[\"通过执行上面的代码\",{\"1\":{\"1505\":1}}],[\"通过工厂函数创建实例对象\",{\"1\":{\"1497\":1}}],[\"通过立即调用类构造函数可以创建单例\",{\"1\":{\"1485\":1}}],[\"通过闭包保存一个标记来保存\",{\"1\":{\"1449\":1}}],[\"通过异步实现类似\",{\"1\":{\"1422\":1}}],[\"通过提供函数参数的默认值\",{\"1\":{\"1403\":1}}],[\"通过键\",{\"1\":{\"1382\":1}}],[\"通过这种技术可以访问那些被同名变量所遮蔽的全局变量\",{\"1\":{\"1676\":1}}],[\"通过这些方法绑定函数的\",{\"1\":{\"1580\":1}}],[\"通过这些概念面向对象的思想得到了具体的体现\",{\"1\":{\"229\":1}}],[\"通过这个属性可以访问到给定函数指定的名字\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"通过对这个对象进行解构\",{\"1\":{\"1221\":1}}],[\"通过扩展运算符\",{\"1\":{\"1179\":1}}],[\"通过数组索引赋值\",{\"1\":{\"1094\":1}}],[\"通过数学运算进行传播\",{\"1\":{\"859\":1}}],[\"通过手动进行类型转换\",{\"1\":{\"947\":1}}],[\"通过拷贝一个或多个对象的可枚举\",{\"1\":{\"803\":1}}],[\"通过中间对象\",{\"1\":{\"664\":1}}],[\"通过判断\",{\"1\":{\"653\":1}}],[\"通过判断元素内是否有内容\",{\"1\":{\"52\":1}}],[\"通过新增\",{\"1\":{\"640\":1}}],[\"通过往父类型构造函数传递参数\",{\"1\":{\"636\":1}}],[\"通过修改原型链实现继承不同\",{\"1\":{\"619\":1}}],[\"通过把实例化的任务交给子类来完成的\",{\"1\":{\"584\":1}}],[\"通过第三方的类完成松耦合的任务\",{\"1\":{\"584\":1}}],[\"通过原型链的混成形式来继承方法和可共享的属性\",{\"1\":{\"659\":1}}],[\"通过原型链的混成形式来继承方法\",{\"1\":{\"659\":1}}],[\"通过原型实现继承\",{\"1\":{\"230\":1}}],[\"通过原生对象的原型\",{\"1\":{\"580\":1}}],[\"通过node开启一个代理服务器\",{\"1\":{\"450\":1}}],[\"通过它可以告诉浏览器\",{\"1\":{\"321\":1}}],[\"通过媒介传输比特\",{\"1\":{\"317\":1}}],[\"通过抽象类和接口支持抽象类型\",{\"1\":{\"230\":1}}],[\"通过建立模型而达到的抽象是人们对客体认识的深化\",{\"1\":{\"228\":1}}],[\"通过方向键控制光标位置\",{\"1\":{\"205\":1}}],[\"通过\",{\"1\":{\"175\":1,\"230\":1,\"298\":1,\"313\":1,\"529\":1,\"565\":2,\"584\":1,\"602\":1,\"620\":1,\"623\":2,\"625\":1,\"652\":1,\"653\":1,\"1075\":1,\"1132\":1,\"1279\":1,\"1417\":1,\"1516\":1,\"1636\":1,\"1698\":1}}],[\"通过采用web标准\",{\"1\":{\"139\":1}}],[\"通过添加\",{\"1\":{\"132\":1}}],[\"通过拉长选定点的字符调整文本\",{\"1\":{\"85\":1}}],[\"通过增加或减少字或字母之间的空格对齐文本\",{\"1\":{\"85\":1}}],[\"通过增加字之间的空格对齐文本\",{\"1\":{\"85\":1}}],[\"通过给父元素设置\",{\"1\":{\"46\":1}}],[\"通配符选择器\",{\"1\":{\"336\":1}}],[\"通配符\",{\"1\":{\"17\":1}}],[\"通配选择符\",{\"1\":{\"12\":1,\"17\":1}}],[\"xor\",{\"1\":{\"1146\":1}}],[\"xz\",{\"1\":{\"587\":1}}],[\"xss\",{\"0\":{\"417\":1},\"1\":{\"417\":2}}],[\"xss和csrf\",{\"0\":{\"416\":1}}],[\"x的object\",{\"1\":{\"403\":1}}],[\"x+1\",{\"1\":{\"301\":1}}],[\"x++\",{\"1\":{\"253\":1}}],[\"x+2\",{\"1\":{\"244\":1}}],[\"xa9\",{\"1\":{\"245\":1}}],[\"xhtml\",{\"1\":{\"235\":1}}],[\"xxxx\",{\"1\":{\"1613\":1,\"1616\":1}}],[\"xxx\",{\"1\":{\"194\":1,\"936\":2,\"1616\":2}}],[\"xx\",{\"1\":{\"194\":2,\"1483\":2}}],[\"x>\",{\"1\":{\"102\":1}}],[\"x\",{\"1\":{\"24\":1,\"59\":4,\"82\":1,\"103\":1,\"130\":1,\"194\":1,\"208\":1,\"244\":3,\"245\":1,\"253\":2,\"274\":8,\"301\":1,\"343\":2,\"371\":2,\"375\":2,\"488\":2,\"506\":2,\"509\":9,\"524\":3,\"540\":2,\"548\":5,\"551\":2,\"597\":8,\"603\":6,\"606\":2,\"615\":8,\"619\":5,\"622\":3,\"623\":4,\"684\":3,\"713\":3,\"861\":3,\"894\":3,\"1020\":2,\"1065\":2,\"1067\":3,\"1069\":4,\"1083\":8,\"1087\":4,\"1093\":1,\"1094\":3,\"1158\":1,\"1178\":3,\"1184\":4,\"1203\":26,\"1204\":3,\"1214\":4,\"1216\":2,\"1217\":24,\"1218\":26,\"1220\":1,\"1221\":18,\"1224\":4,\"1225\":2,\"1226\":1,\"1229\":4,\"1231\":3,\"1238\":38,\"1246\":2,\"1248\":1,\"1274\":3,\"1281\":3,\"1285\":2,\"1312\":3,\"1332\":2,\"1367\":2,\"1373\":6,\"1375\":3,\"1380\":2,\"1381\":8,\"1382\":7,\"1386\":2,\"1388\":3,\"1389\":2,\"1398\":4,\"1399\":2,\"1400\":5,\"1401\":4,\"1402\":3,\"1403\":9,\"1404\":12,\"1405\":6,\"1407\":53,\"1411\":1,\"1412\":2,\"1417\":11,\"1509\":2,\"1510\":2,\"1523\":2,\"1529\":2,\"1593\":1,\"1634\":1,\"1652\":2}}],[\"ul>\",{\"1\":{\"1286\":1}}],[\"ultra\",{\"1\":{\"77\":2}}],[\"ude80x\",{\"1\":{\"1184\":1}}],[\"ude80\",{\"1\":{\"1184\":1}}],[\"ude80y\",{\"1\":{\"1184\":4}}],[\"ud83dx\",{\"1\":{\"1184\":1}}],[\"ud83d\",{\"1\":{\"1184\":5}}],[\"udp\",{\"0\":{\"309\":1,\"313\":1},\"1\":{\"297\":2,\"309\":5,\"310\":1,\"311\":1,\"313\":1}}],[\"ui\",{\"1\":{\"1532\":1,\"1533\":1,\"1621\":2}}],[\"uint8array\",{\"1\":{\"995\":1}}],[\"ui渲染\",{\"1\":{\"457\":1}}],[\"utils\",{\"1\":{\"612\":1,\"614\":1,\"1436\":1,\"1621\":1}}],[\"utf\",{\"1\":{\"120\":2,\"126\":1,\"128\":2,\"878\":1}}],[\"uzi\",{\"1\":{\"546\":4,\"547\":4,\"569\":7,\"570\":4,\"571\":4,\"572\":5,\"575\":3,\"636\":2,\"640\":10,\"656\":3,\"662\":7,\"1481\":4,\"1483\":4,\"1485\":8,\"1487\":3,\"1488\":6,\"1489\":4,\"1490\":4,\"1491\":4,\"1492\":3,\"1497\":5}}],[\"uristring\",{\"1\":{\"879\":2,\"885\":2}}],[\"uri\",{\"1\":{\"868\":1,\"869\":2,\"873\":4,\"874\":2,\"878\":1,\"879\":2,\"880\":4,\"884\":1,\"885\":2,\"886\":4,\"887\":3}}],[\"urierror\",{\"1\":{\"251\":1,\"874\":1}}],[\"urgent\",{\"1\":{\"299\":1}}],[\"urg\",{\"1\":{\"299\":2}}],[\"urlsearchparams\",{\"1\":{\"716\":1}}],[\"url一般包括几大部分\",{\"1\":{\"148\":1}}],[\"url\",{\"0\":{\"1138\":1},\"1\":{\"15\":1,\"79\":1,\"100\":4,\"148\":1,\"153\":4,\"1138\":2,\"1160\":1,\"1233\":1,\"1403\":2,\"1449\":2,\"1458\":1,\"1616\":2}}],[\"u2029\",{\"1\":{\"238\":1}}],[\"u2028\",{\"1\":{\"238\":1}}],[\"ufeff\",{\"1\":{\"237\":1}}],[\"u00a9\",{\"1\":{\"245\":1}}],[\"u00a0\",{\"1\":{\"237\":1}}],[\"u0020\",{\"1\":{\"237\":1}}],[\"u000d\",{\"1\":{\"238\":1}}],[\"u000a\",{\"1\":{\"238\":1}}],[\"u000c\",{\"1\":{\"237\":1}}],[\"u000b\",{\"1\":{\"237\":1}}],[\"u0009\",{\"1\":{\"237\":1}}],[\"u01\",{\"1\":{\"215\":2}}],[\"uvh\",{\"1\":{\"215\":1}}],[\"upon\",{\"1\":{\"1458\":1}}],[\"upperleft\",{\"1\":{\"1083\":2}}],[\"uppercase\",{\"1\":{\"84\":1}}],[\"updateview\",{\"1\":{\"402\":3}}],[\"update\",{\"1\":{\"215\":1,\"1516\":2,\"1612\":2}}],[\"u\",{\"1\":{\"215\":1,\"239\":1,\"1080\":1}}],[\"usleep\",{\"1\":{\"1428\":1}}],[\"useeffect\",{\"1\":{\"1626\":1}}],[\"usestate\",{\"1\":{\"1626\":1}}],[\"use\",{\"1\":{\"923\":1,\"1381\":1,\"1383\":1,\"1385\":1,\"1386\":2,\"1481\":1,\"1510\":1,\"1518\":1,\"1578\":2,\"1618\":1,\"1620\":1}}],[\"used\",{\"1\":{\"521\":5}}],[\"userid\",{\"1\":{\"1502\":2}}],[\"userpromise\",{\"1\":{\"1354\":2}}],[\"userlist\",{\"1\":{\"1354\":1}}],[\"username\",{\"1\":{\"1197\":4,\"1449\":2,\"1502\":1}}],[\"userexception\",{\"1\":{\"1048\":4}}],[\"userfactory\",{\"1\":{\"587\":3}}],[\"user\",{\"1\":{\"309\":1,\"587\":7,\"1354\":1,\"1449\":2,\"1621\":2}}],[\"usr\",{\"1\":{\"186\":1,\"198\":3,\"199\":3,\"213\":1}}],[\"us\",{\"1\":{\"130\":1}}],[\"ua\",{\"1\":{\"30\":1}}],[\"until\",{\"1\":{\"1358\":1}}],[\"unkown\",{\"1\":{\"1048\":1}}],[\"unknown\",{\"1\":{\"668\":1}}],[\"unexpected\",{\"1\":{\"559\":1,\"1329\":1,\"1405\":2}}],[\"uncaught\",{\"1\":{\"530\":1,\"538\":1,\"539\":2,\"540\":3,\"548\":1,\"557\":1,\"559\":1,\"560\":2,\"563\":2,\"1165\":1,\"1335\":1,\"1395\":1,\"1403\":1,\"1405\":2,\"1698\":1}}],[\"underscore\",{\"1\":{\"1413\":1,\"1436\":1,\"1446\":1}}],[\"underline\",{\"1\":{\"83\":1}}],[\"undeclaredvariable\",{\"1\":{\"1129\":1}}],[\"undefined\",{\"0\":{\"864\":1,\"1129\":1,\"1137\":1},\"1\":{\"251\":1,\"355\":1,\"381\":3,\"392\":2,\"393\":2,\"528\":1,\"531\":1,\"532\":3,\"534\":3,\"539\":1,\"540\":2,\"544\":1,\"551\":2,\"560\":3,\"562\":1,\"563\":3,\"564\":2,\"625\":1,\"646\":1,\"648\":1,\"669\":1,\"673\":1,\"688\":3,\"726\":1,\"762\":1,\"763\":2,\"800\":1,\"807\":2,\"838\":2,\"848\":1,\"864\":2,\"865\":2,\"905\":1,\"917\":1,\"919\":1,\"920\":4,\"934\":2,\"936\":2,\"943\":6,\"944\":2,\"945\":2,\"948\":2,\"951\":4,\"952\":4,\"954\":2,\"983\":2,\"1003\":1,\"1020\":1,\"1033\":1,\"1034\":3,\"1035\":2,\"1036\":1,\"1048\":1,\"1065\":1,\"1066\":1,\"1067\":2,\"1080\":2,\"1087\":2,\"1093\":1,\"1094\":2,\"1110\":2,\"1122\":2,\"1129\":4,\"1135\":5,\"1137\":7,\"1164\":3,\"1183\":1,\"1203\":3,\"1214\":1,\"1215\":1,\"1217\":5,\"1218\":8,\"1220\":2,\"1221\":5,\"1253\":2,\"1255\":2,\"1256\":1,\"1273\":1,\"1302\":2,\"1306\":1,\"1312\":1,\"1319\":1,\"1334\":1,\"1350\":1,\"1382\":3,\"1383\":2,\"1386\":2,\"1398\":2,\"1403\":4,\"1404\":5,\"1405\":8,\"1457\":1,\"1510\":2,\"1518\":2,\"1564\":5,\"1572\":2,\"1578\":2,\"1579\":1,\"1586\":1,\"1587\":1,\"1613\":1,\"1620\":1,\"1691\":2,\"1694\":4,\"1698\":1,\"1699\":2,\"1702\":1,\"1709\":4}}],[\"unicode转义序列\",{\"1\":{\"245\":1}}],[\"unicode3\",{\"1\":{\"234\":1}}],[\"unicode2\",{\"1\":{\"234\":1}}],[\"unicode\",{\"0\":{\"239\":1},\"1\":{\"234\":2,\"239\":3,\"246\":1,\"1184\":3,\"1200\":1,\"1203\":2}}],[\"units\",{\"0\":{\"25\":1},\"1\":{\"24\":2}}],[\"unamed\",{\"1\":{\"640\":2}}],[\"uname\",{\"1\":{\"215\":1}}],[\"uname可以显示一些重要的系统信息\",{\"1\":{\"215\":1}}],[\"unzip\",{\"1\":{\"213\":2}}],[\"unshift\",{\"1\":{\"402\":2}}],[\"unsupported\",{\"1\":{\"161\":1}}],[\"unset\",{\"1\":{\"29\":1,\"35\":1,\"55\":1,\"59\":1,\"61\":1,\"329\":1}}],[\"除法赋值\",{\"1\":{\"1238\":1}}],[\"除法\",{\"1\":{\"1207\":1,\"1243\":1}}],[\"除零会产生\",{\"1\":{\"1207\":1}}],[\"除数\",{\"1\":{\"1012\":1}}],[\"除上述三种\",{\"1\":{\"898\":1}}],[\"除以\",{\"1\":{\"853\":1}}],[\"除此之外返回\",{\"1\":{\"509\":1}}],[\"除此之外\",{\"1\":{\"393\":1,\"531\":1,\"1579\":1}}],[\"除了破坏可读性外\",{\"1\":{\"1408\":1}}],[\"除了闭包\",{\"1\":{\"1279\":1}}],[\"除了在全局作用域中的函数不能被删除\",{\"1\":{\"1101\":1}}],[\"除了\",{\"1\":{\"853\":1,\"953\":1,\"1203\":1,\"1253\":1,\"1375\":1}}],[\"除了使用\",{\"1\":{\"572\":1,\"1587\":1}}],[\"除了盒子模型分为内在盒子和外在盒子\",{\"1\":{\"48\":1}}],[\"除了选择器部分\",{\"1\":{\"7\":1}}],[\"除非遇到\",{\"1\":{\"1345\":1}}],[\"除非属性是一个自己\",{\"1\":{\"1100\":1}}],[\"除非它也是个冻结对象\",{\"1\":{\"540\":1,\"706\":1}}],[\"除非手动删除\",{\"1\":{\"445\":1}}],[\"除非有明确的\",{\"1\":{\"48\":1}}],[\"除非这个值是\",{\"1\":{\"23\":1}}],[\"除\",{\"1\":{\"36\":1,\"934\":1}}],[\"说明当\",{\"1\":{\"1709\":1}}],[\"说明存在分离的\",{\"1\":{\"1286\":1}}],[\"说明了表达式的结果不等于任何一种情况时的操作\",{\"1\":{\"1041\":1}}],[\"说明白些\",{\"1\":{\"592\":1}}],[\"说明授予所有权限\",{\"1\":{\"209\":1}}],[\"说明该元素包含了什么类型的信息\",{\"1\":{\"129\":1}}],[\"说明\",{\"0\":{\"211\":1,\"848\":1,\"853\":1,\"858\":1,\"865\":1,\"880\":1,\"886\":1,\"892\":1,\"904\":1,\"1032\":1,\"1101\":1},\"1\":{\"23\":1,\"24\":2,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"35\":1,\"44\":1,\"47\":2,\"58\":1,\"65\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"81\":1,\"82\":1,\"83\":2,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"215\":9,\"299\":1,\"528\":1,\"532\":1,\"548\":1,\"668\":1,\"688\":1,\"730\":1,\"746\":1,\"791\":1,\"829\":1,\"913\":1,\"991\":1,\"1018\":1,\"1099\":1,\"1107\":1,\"1121\":1,\"1317\":1,\"1321\":1,\"1328\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1621\":1}}],[\"+new\",{\"1\":{\"1433\":1}}],[\"+foo\",{\"1\":{\"1207\":1,\"1243\":1}}],[\"+b\",{\"1\":{\"1203\":1}}],[\"+a\",{\"1\":{\"1203\":1}}],[\"+1\",{\"1\":{\"1194\":2,\"1208\":1}}],[\"+10\",{\"1\":{\"205\":1}}],[\"+0\",{\"1\":{\"762\":2,\"1203\":2,\"1253\":1}}],[\"+=\",{\"1\":{\"488\":1,\"684\":2,\"955\":1,\"971\":1,\"977\":1,\"993\":1,\"1013\":1,\"1060\":2,\"1160\":1,\"1169\":2,\"1197\":2,\"1238\":3,\"1243\":1,\"1393\":1}}],[\"++foo\",{\"1\":{\"1243\":1}}],[\"++n\",{\"1\":{\"1190\":1}}],[\"++num\",{\"1\":{\"955\":1}}],[\"++j\",{\"1\":{\"509\":2}}],[\"++i\",{\"1\":{\"509\":3,\"518\":1,\"955\":1,\"1194\":1}}],[\"++y\",{\"1\":{\"253\":2}}],[\"++c\",{\"1\":{\"253\":2}}],[\"++\",{\"1\":{\"253\":3,\"488\":1,\"1207\":1}}],[\"+7\",{\"1\":{\"215\":1}}],[\"+x\",{\"1\":{\"209\":1}}],[\"+\",{\"1\":{\"23\":1,\"58\":2,\"244\":1,\"253\":2,\"343\":2,\"344\":2,\"352\":6,\"375\":1,\"388\":3,\"436\":1,\"467\":2,\"476\":18,\"482\":3,\"488\":10,\"494\":2,\"497\":5,\"500\":1,\"503\":2,\"506\":2,\"509\":2,\"515\":1,\"518\":6,\"524\":1,\"559\":4,\"597\":8,\"854\":1,\"880\":1,\"894\":4,\"924\":1,\"928\":1,\"951\":55,\"1001\":1,\"1027\":3,\"1060\":1,\"1077\":1,\"1083\":2,\"1091\":2,\"1156\":2,\"1169\":4,\"1197\":1,\"1203\":2,\"1207\":4,\"1208\":4,\"1221\":2,\"1234\":2,\"1238\":1,\"1243\":1,\"1248\":1,\"1271\":1,\"1312\":3,\"1319\":2,\"1352\":2,\"1367\":7,\"1369\":1,\"1370\":1,\"1375\":3,\"1376\":4,\"1380\":1,\"1382\":1,\"1390\":4,\"1402\":1,\"1411\":1,\"1412\":1,\"1417\":8,\"1418\":2,\"1433\":1,\"1452\":2,\"1456\":1,\"1457\":2,\"1466\":2,\"1469\":2,\"1470\":2,\"1474\":1,\"1502\":1,\"1504\":5,\"1505\":1,\"1509\":1,\"1529\":1,\"1566\":2,\"1586\":3,\"1593\":1,\"1634\":1,\"1681\":2,\"1682\":1,\"1691\":1}}],[\"垂直制表符\",{\"1\":{\"237\":1}}],[\"垂直\",{\"1\":{\"23\":1}}],[\"或称惰性载入\",{\"1\":{\"1467\":1}}],[\"或部分\",{\"1\":{\"1416\":2}}],[\"或解构赋值转换为真实数组后方可遍历\",{\"1\":{\"1394\":1}}],[\"或解析不到\",{\"1\":{\"1222\":1}}],[\"或在\",{\"1\":{\"1348\":1}}],[\"或具有相同属性的数据条目同时出现在一个对象字面量中\",{\"1\":{\"1318\":1}}],[\"或全局\",{\"1\":{\"1312\":1}}],[\"或全局范围\",{\"1\":{\"1069\":1}}],[\"或其他对象\",{\"1\":{\"1312\":1}}],[\"或其原型链\",{\"1\":{\"1107\":1}}],[\"或多个变量\",{\"1\":{\"1172\":1}}],[\"或多个元素\",{\"1\":{\"1172\":1}}],[\"或计算结果为对象的表达式\",{\"1\":{\"1099\":1}}],[\"或标签\",{\"1\":{\"966\":1}}],[\"或参数为\",{\"1\":{\"807\":1}}],[\"或用户自定义的其他对象\",{\"1\":{\"1329\":1}}],[\"或用\",{\"1\":{\"731\":1,\"983\":1}}],[\"或用内建的object\",{\"1\":{\"388\":1}}],[\"或修改已有\",{\"1\":{\"692\":1}}],[\"或修改已有的\",{\"1\":{\"687\":1}}],[\"或对象\",{\"1\":{\"683\":1}}],[\"或对象的属性\",{\"1\":{\"650\":1}}],[\"或o\",{\"1\":{\"509\":1}}],[\"或等于\",{\"1\":{\"385\":1}}],[\"或一个美元符号\",{\"1\":{\"246\":1}}],[\"或创建新分支\",{\"1\":{\"167\":1}}],[\"或是layout\",{\"1\":{\"158\":1}}],[\"或者至少函数名可以不污染所在作用域\",{\"1\":{\"1684\":1}}],[\"或者箭头函数来否定\",{\"1\":{\"1589\":1}}],[\"或者返回一个原始值\",{\"1\":{\"1526\":1}}],[\"或者采用模块化管理函数\",{\"1\":{\"1459\":1}}],[\"或者你可能需要反映内部变量的状态\",{\"1\":{\"1318\":1}}],[\"或者地址指针\",{\"1\":{\"1264\":1}}],[\"或者只想获取键值\",{\"1\":{\"1234\":1}}],[\"或者严格来说不是可遍历的结构\",{\"1\":{\"1216\":1}}],[\"或者同为\",{\"1\":{\"1203\":1}}],[\"或者从\",{\"1\":{\"1052\":2}}],[\"或者两个兼有\",{\"1\":{\"1051\":1}}],[\"或者直接终止这个闭合语句的执行\",{\"1\":{\"960\":1}}],[\"或者直接给对象属性赋值基本类型\",{\"1\":{\"408\":1}}],[\"或者改写他的\",{\"1\":{\"955\":1}}],[\"或者说一个值要被多个模块共享\",{\"1\":{\"1661\":1}}],[\"或者说发生构造函数调用时\",{\"1\":{\"1581\":1}}],[\"或者说是否被某个对象拥有或者包含\",{\"1\":{\"1579\":1}}],[\"或者说\",{\"1\":{\"917\":1}}],[\"或者尝试将一个字符串解析成数字但失败了的时候\",{\"1\":{\"858\":1,\"926\":1}}],[\"或者查找到顶层原型对象\",{\"1\":{\"646\":1}}],[\"或者分配给原型对象都不行\",{\"1\":{\"625\":1}}],[\"或者在中途返回了错误的值\",{\"1\":{\"1425\":1}}],[\"或者在调试器堆栈跟踪中鉴别该函数\",{\"1\":{\"1333\":1}}],[\"或者在防止数据被其他应用程序改动时使用\",{\"1\":{\"572\":1}}],[\"或者在保持其原有比例的同时缩放到元素的可用空间的尺寸\",{\"1\":{\"104\":1}}],[\"或者ctx\",{\"1\":{\"392\":1}}],[\"或者延迟防抖\",{\"1\":{\"290\":1}}],[\"或者函数的参数\",{\"1\":{\"246\":1}}],[\"或者提高代码的可读性\",{\"1\":{\"240\":1}}],[\"或者称为成员函数\",{\"1\":{\"229\":1}}],[\"或者使用命令\",{\"1\":{\"194\":1}}],[\"或者拉伸到新的尺寸\",{\"1\":{\"104\":1}}],[\"或者降低\",{\"1\":{\"82\":2}}],[\"或者用同类字体\",{\"1\":{\"78\":1}}],[\"或者内联元素被设置了\",{\"1\":{\"48\":1}}],[\"或者\",{\"1\":{\"46\":1,\"81\":1,\"94\":1,\"190\":2,\"439\":1,\"848\":2,\"929\":1,\"935\":1,\"936\":1,\"955\":1,\"1130\":1,\"1164\":1,\"1253\":1,\"1256\":1,\"1288\":1,\"1579\":1,\"1580\":1,\"1616\":1}}],[\"或者值相同\",{\"1\":{\"39\":1}}],[\"或\",{\"1\":{\"23\":1,\"28\":1,\"37\":1,\"38\":2,\"39\":1,\"40\":1,\"47\":1,\"51\":2,\"58\":1,\"60\":1,\"81\":1,\"102\":4,\"104\":2,\"110\":1,\"120\":1,\"129\":1,\"130\":1,\"136\":1,\"245\":2,\"246\":1,\"329\":2,\"518\":1,\"548\":1,\"556\":1,\"564\":2,\"635\":1,\"669\":1,\"762\":1,\"768\":1,\"774\":1,\"800\":1,\"807\":2,\"861\":1,\"925\":2,\"935\":1,\"936\":1,\"983\":3,\"1000\":1,\"1004\":1,\"1018\":1,\"1023\":1,\"1025\":1,\"1065\":1,\"1075\":1,\"1087\":1,\"1101\":1,\"1149\":1,\"1203\":2,\"1212\":1,\"1256\":1,\"1302\":2,\"1400\":1,\"1518\":1,\"1578\":1,\"1586\":2,\"1616\":2,\"1694\":2,\"1698\":1}}],[\"水平的主轴\",{\"1\":{\"332\":1}}],[\"水平制表符\",{\"1\":{\"237\":1}}],[\"水平\",{\"1\":{\"23\":1}}],[\"一方面要向中后台以及数据层索取服务\",{\"1\":{\"1621\":1}}],[\"一种更微妙\",{\"1\":{\"1579\":1}}],[\"一种易看的显示\",{\"1\":{\"215\":1}}],[\"一直找到全局上下文的变量对象\",{\"1\":{\"1569\":1}}],[\"一直等待直到返回结果\",{\"1\":{\"1547\":1}}],[\"一定程度上可以减少代码量\",{\"1\":{\"1496\":1}}],[\"一定要赋值\",{\"1\":{\"1693\":1}}],[\"一定要注意\",{\"1\":{\"1476\":1}}],[\"一定要优先考虑使用样式规则的优先级来解决问题而不是\",{\"1\":{\"19\":1}}],[\"一切兼容性都不是问题\",{\"1\":{\"1427\":1}}],[\"一切取决于\",{\"1\":{\"115\":1}}],[\"一步步实现一个柯里化函数\",{\"1\":{\"1417\":1}}],[\"一行会报错\",{\"1\":{\"1375\":1}}],[\"一秒钟后\",{\"1\":{\"1312\":1}}],[\"一元减法\",{\"1\":{\"1243\":1}}],[\"一元加法\",{\"1\":{\"1243\":1}}],[\"一元正值符\",{\"1\":{\"1207\":1}}],[\"一元负值符\",{\"1\":{\"1207\":1}}],[\"一级用第\",{\"1\":{\"1161\":1}}],[\"一旦\",{\"1\":{\"1532\":1}}],[\"一旦设置了参数默认值\",{\"1\":{\"1407\":1}}],[\"一旦设置了参数的默认值\",{\"1\":{\"1407\":1}}],[\"一旦遇到\",{\"1\":{\"1340\":1}}],[\"一旦声明了就不能更改\",{\"1\":{\"1693\":1}}],[\"一旦声明\",{\"1\":{\"1068\":1}}],[\"一旦使其不可扩展\",{\"1\":{\"812\":1}}],[\"一旦发现\",{\"1\":{\"625\":1}}],[\"一是新创建对象的实例方法不引用\",{\"1\":{\"572\":1}}],[\"一样主要在浏览器中使用\",{\"1\":{\"1618\":1}}],[\"一样确保函数的\",{\"1\":{\"1589\":1}}],[\"一样\",{\"1\":{\"548\":1,\"593\":1,\"603\":2,\"604\":1,\"1068\":3,\"1580\":1,\"1621\":1,\"1693\":1}}],[\"一次传入两个参数即可\",{\"1\":{\"1411\":1}}],[\"一次都没更新\",{\"1\":{\"1375\":1}}],[\"一次就足以检测错误条件\",{\"1\":{\"859\":1}}],[\"一次\",{\"1\":{\"457\":1}}],[\"一起使用时\",{\"1\":{\"1004\":1}}],[\"一起使用\",{\"1\":{\"329\":1,\"1521\":1}}],[\"一些数组方法不能找到\",{\"1\":{\"859\":1}}],[\"一些布局模型\",{\"1\":{\"329\":1}}],[\"一些\",{\"1\":{\"329\":1}}],[\"一些内容管理系统能够自动获取页面作者的信息\",{\"1\":{\"129\":1}}],[\"一对多\",{\"1\":{\"310\":1}}],[\"一并发送给客户端以确认建立连接请求\",{\"1\":{\"301\":1}}],[\"一致的缩进来形成统一的编码风格\",{\"1\":{\"236\":1}}],[\"一个描述性的名称可以让代码不言自明\",{\"1\":{\"1685\":1}}],[\"一个变量的作用域\",{\"1\":{\"1673\":1}}],[\"一个变种\",{\"1\":{\"1621\":1}}],[\"一个应用由多个下图的页面组成\",{\"1\":{\"1621\":1}}],[\"一个页面由多个组件组合\",{\"1\":{\"1621\":1}}],[\"一个页面是由众多组件组成的\",{\"1\":{\"1621\":1}}],[\"一个页面需要引入多个\",{\"1\":{\"1614\":1}}],[\"一个最常见的\",{\"1\":{\"1579\":1}}],[\"一个执行上下文的生命周期可分为\",{\"1\":{\"1555\":1}}],[\"一个新的执行上下文就会被创建\",{\"1\":{\"1555\":1}}],[\"一个线程在某个\",{\"1\":{\"1551\":1}}],[\"一个运行着的程序就对应了一个进程\",{\"1\":{\"1547\":1}}],[\"一个延迟\",{\"1\":{\"1543\":1}}],[\"一个很好的做法是缩短消息处理\",{\"1\":{\"1534\":1}}],[\"一个回调函数中可以嵌入另一个回调函数\",{\"1\":{\"1459\":1}}],[\"一个简单的函数用于查询数组中是否某个值\",{\"1\":{\"1418\":1}}],[\"一个参数\",{\"1\":{\"1406\":2}}],[\"一个函数中可以传递多个回调函数\",{\"1\":{\"1458\":1}}],[\"一个函数中可以有多个\",{\"1\":{\"1033\":1,\"1036\":1}}],[\"一个函数定义表达式包含名称\",{\"1\":{\"1334\":1}}],[\"一个函数定义由一系列的\",{\"1\":{\"1326\":1}}],[\"一个计算属性名的表达式\",{\"1\":{\"1317\":1}}],[\"一个绑定函数也能使用\",{\"1\":{\"1311\":1}}],[\"一个数组或者类数组对象\",{\"1\":{\"1302\":1}}],[\"一个数与自身的取反值相加等于\",{\"1\":{\"1147\":1}}],[\"一个式子到底是模式还是表达式\",{\"1\":{\"1222\":1}}],[\"一个字符串类型或者\",{\"1\":{\"1107\":1}}],[\"一个包含这个对象的示例数组\",{\"1\":{\"1087\":1}}],[\"一个示例对象\",{\"1\":{\"1087\":1}}],[\"一个拥有两个属性成员的对象\",{\"1\":{\"1083\":1}}],[\"一个生成器函数\",{\"1\":{\"1001\":1}}],[\"一个被冻结的对象再也不能被修改\",{\"1\":{\"706\":1}}],[\"一个用作新对象原型的对象和一个为新对象定义额外属性的对象\",{\"1\":{\"640\":1}}],[\"一个进程至少开启一个线程\",{\"1\":{\"1547\":1}}],[\"一个进程包括了运行中的程序和程序所使用到的内存和系统资源\",{\"1\":{\"1547\":1}}],[\"一个进程可以包含多个线程\",{\"1\":{\"423\":1}}],[\"一个进程的错误不会直接影响其他进程\",{\"1\":{\"422\":1}}],[\"一个进程就是一个程序运行实例\",{\"1\":{\"422\":1}}],[\"一个空对象\",{\"1\":{\"1083\":1}}],[\"一个空的构造函数会被默认添加\",{\"1\":{\"602\":1}}],[\"一个空的正则表达式直接量\",{\"1\":{\"245\":1}}],[\"一个空格\",{\"1\":{\"117\":1}}],[\"一个名称可以表示很多不同类的对象\",{\"1\":{\"229\":1}}],[\"一个类是否继承了另一个类\",{\"1\":{\"620\":1}}],[\"一个类共享了一个或多个其他类定义的结构和行为\",{\"1\":{\"229\":1}}],[\"一个类的方法和属性被称为\",{\"1\":{\"229\":1}}],[\"一个共享相同结构和行为的对象的集合\",{\"1\":{\"229\":1}}],[\"一个对象有状态\",{\"1\":{\"229\":1}}],[\"一个\",{\"1\":{\"153\":1,\"304\":1,\"1238\":1,\"1614\":1}}],[\"一个属性值\",{\"1\":{\"117\":1}}],[\"一个单独的规则\",{\"1\":{\"5\":1}}],[\"一般\",{\"1\":{\"1710\":1}}],[\"一般情况就是在一个函数中包含另一个函数\",{\"1\":{\"1708\":1}}],[\"一般情况下和关键字\",{\"1\":{\"1521\":1}}],[\"一般由几个组件或单个组件构成的带有一定功能的集合体\",{\"1\":{\"1621\":1}}],[\"一般会丢失原来的对象\",{\"1\":{\"1312\":1}}],[\"一般会终止于空格\",{\"1\":{\"54\":1}}],[\"一般现在\",{\"1\":{\"1285\":1}}],[\"一般是堆区内存泄漏\",{\"1\":{\"1284\":1}}],[\"一般常用的垃圾收集方法就是标记清除法\",{\"1\":{\"1284\":1}}],[\"一般也会归类为栈中\",{\"1\":{\"1259\":1}}],[\"一般写法\",{\"1\":{\"1139\":1}}],[\"一般使用\",{\"1\":{\"1135\":1}}],[\"一般来说\",{\"1\":{\"812\":1}}],[\"一般要先检测对象是否存在\",{\"1\":{\"562\":1}}],[\"一般地\",{\"1\":{\"530\":1,\"534\":1,\"1500\":1}}],[\"一般用来定位到某个位置\",{\"1\":{\"148\":1}}],[\"一般做垂直居中用\",{\"1\":{\"93\":1}}],[\"一般可以利用负边距来进行布局\",{\"1\":{\"56\":1}}],[\"一律为根元素\",{\"1\":{\"36\":1}}],[\"使\",{\"1\":{\"1503\":1}}],[\"使这个函数不论怎么调用都有同样的\",{\"1\":{\"1312\":1}}],[\"使合并后的数组同样按\",{\"1\":{\"500\":1}}],[\"使之在用户的浏览器上运行\",{\"1\":{\"417\":1}}],[\"使它们能够共享数据和通信\",{\"1\":{\"397\":1}}],[\"使元素不再显示\",{\"1\":{\"329\":1}}],[\"使历史更为干净\",{\"1\":{\"175\":1}}],[\"使渲染树的一部分或全部发生了变化\",{\"1\":{\"158\":1}}],[\"使很多用户开始转向其他浏览器\",{\"1\":{\"143\":1}}],[\"使得该作用域能够一直存活\",{\"1\":{\"1708\":1}}],[\"使得调试很困难\",{\"1\":{\"1685\":1}}],[\"使得调试找\",{\"1\":{\"19\":1}}],[\"使得应用程序中每个模块都具有条理清楚的设计和明确的目的\",{\"1\":{\"1606\":1}}],[\"使得校验\",{\"1\":{\"1606\":1}}],[\"使得子类实例的原型对象指向父类实例对象\",{\"1\":{\"662\":1}}],[\"使得子类对象具有父类的实例域和方法\",{\"1\":{\"618\":1}}],[\"使得\",{\"1\":{\"635\":1}}],[\"使得父类的所有行为都可以继承\",{\"1\":{\"625\":1}}],[\"使得它非常适合在某些安全执行环境下使用\",{\"1\":{\"572\":1}}],[\"使得脚本无法获取\",{\"1\":{\"417\":1}}],[\"使得网页和应用程序能够适应不断变化的需求和新的技术发展\",{\"1\":{\"139\":1}}],[\"使残障人士\",{\"1\":{\"139\":1}}],[\"使字体表现为斜体等\",{\"1\":{\"115\":1}}],[\"使其在执行任何代码之前就可以访问\",{\"1\":{\"1335\":1}}],[\"使其上面的数据链路层不必考虑网络的具体传输介质是什么\",{\"1\":{\"318\":1}}],[\"使其以某种方式呈现或者工作\",{\"1\":{\"115\":1}}],[\"使其块状化绝对没有问题\",{\"1\":{\"50\":1}}],[\"使用这些工具\",{\"1\":{\"1684\":1}}],[\"使用一套严格的规则来分辨哪些标识符对哪些语法有访问权限\",{\"1\":{\"1673\":1}}],[\"使用了判断语句\",{\"1\":{\"1634\":1}}],[\"使用了变量\",{\"1\":{\"1634\":1}}],[\"使用了表达式\",{\"1\":{\"1634\":1}}],[\"使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改\",{\"1\":{\"1587\":1}}],[\"使用函数调用模式调用函数时\",{\"1\":{\"1510\":1}}],[\"使用函数和原型来定义类型\",{\"1\":{\"230\":1}}],[\"使用参数默认值时\",{\"1\":{\"1401\":1}}],[\"使用关键字\",{\"1\":{\"1338\":1,\"1626\":1}}],[\"使用的时候报错了\",{\"1\":{\"1694\":1}}],[\"使用的时候\",{\"1\":{\"1661\":1}}],[\"使用的几点要求\",{\"1\":{\"1490\":1}}],[\"使用的\",{\"1\":{\"1302\":1}}],[\"使用值的过程实际上是对分配内存进行读取与写入的操作\",{\"1\":{\"1275\":1}}],[\"使用内存\",{\"1\":{\"1271\":1}}],[\"使用内嵌样式\",{\"1\":{\"438\":1}}],[\"使用完毕之后\",{\"1\":{\"1271\":1}}],[\"使用完毕\",{\"1\":{\"1271\":1}}],[\"使用起来就会方便很多\",{\"1\":{\"1218\":1}}],[\"使用解构\",{\"1\":{\"1213\":1}}],[\"使用补码表示\",{\"1\":{\"1160\":1}}],[\"使用按位异或\",{\"1\":{\"1154\":1}}],[\"使用array\",{\"1\":{\"1130\":1}}],[\"使用可选择的\",{\"1\":{\"1017\":1}}],[\"使用可选链\",{\"1\":{\"381\":1}}],[\"使用该语句来选择多个代码块之一来执行\",{\"1\":{\"1017\":2}}],[\"使用该语句来执行代码\",{\"1\":{\"1017\":1}}],[\"使用指定的原型对象和\",{\"1\":{\"803\":1}}],[\"使用寄生组合式继承可以不必为了指定子类型的原型而调用父类型的构造函数\",{\"1\":{\"659\":1}}],[\"使用寄生式继承来为对象添加函数\",{\"1\":{\"656\":1}}],[\"使用构造函数\",{\"1\":{\"592\":1}}],[\"使用者在外部创建对象时\",{\"1\":{\"587\":1}}],[\"使用工厂最终达到的效果是\",{\"1\":{\"584\":1}}],[\"使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法\",{\"1\":{\"575\":1}}],[\"使用稳妥构造函数模式创建的对象与构造函数之间也没有什么关系\",{\"1\":{\"572\":1}}],[\"使用动态原型模式时\",{\"1\":{\"570\":1}}],[\"使用方括号运算符有两个优点\",{\"1\":{\"558\":1}}],[\"使用方法\",{\"0\":{\"619\":1},\"1\":{\"392\":1,\"393\":1,\"394\":1,\"539\":1}}],[\"使用对象字面量的方法来定义对象\",{\"1\":{\"546\":1}}],[\"使用字面量只是隐藏了与使用\",{\"1\":{\"546\":1}}],[\"使用本地缓存\",{\"1\":{\"430\":1}}],[\"使用缓存\",{\"1\":{\"430\":1}}],[\"使用强缓存策略时\",{\"1\":{\"429\":1}}],[\"使用sharedworker\",{\"1\":{\"397\":1}}],[\"使用broadcast\",{\"1\":{\"397\":1}}],[\"使用localstorage或sessionstorage\",{\"1\":{\"397\":1}}],[\"使用hasownproperty\",{\"1\":{\"388\":1}}],[\"使用for\",{\"1\":{\"388\":1}}],[\"使用数字分隔符\",{\"1\":{\"384\":1}}],[\"使用数数字以及大写或小写的字母\",{\"1\":{\"239\":1}}],[\"使用延展操作符\",{\"1\":{\"343\":1}}],[\"使用哪一个html版本标准解析文档\",{\"1\":{\"321\":1}}],[\"使用时间戳实现\",{\"1\":{\"293\":1}}],[\"使用定时器实现\",{\"1\":{\"292\":1}}],[\"使用场景\",{\"0\":{\"1462\":1},\"1\":{\"287\":1,\"291\":1}}],[\"使用纯\",{\"1\":{\"277\":1}}],[\"使用content\",{\"1\":{\"256\":2}}],[\"使用分号\",{\"1\":{\"252\":1}}],[\"使用类\",{\"1\":{\"230\":1}}],[\"使用wget从网上下载软件\",{\"1\":{\"215\":1}}],[\"使用rpm更新apache\",{\"1\":{\"215\":1}}],[\"使用rpm文件安装apache\",{\"1\":{\"215\":1}}],[\"使用yum安装apache\",{\"1\":{\"215\":1}}],[\"使用权限\",{\"1\":{\"215\":1}}],[\"使用命令\",{\"1\":{\"205\":2}}],[\"使用绝对或相对地址指或者创建渐变色来确定图像\",{\"1\":{\"100\":1}}],[\"使用示例\",{\"1\":{\"99\":1,\"100\":1}}],[\"使用伪元素派生一行新的占位内容是个不错的选择\",{\"1\":{\"81\":1}}],[\"使用相对性\",{\"1\":{\"39\":1}}],[\"使用简单的语法实现颜色渐变\",{\"1\":{\"30\":1}}],[\"使用用户自定义标识名作为组件取值\",{\"1\":{\"29\":1}}],[\"使用\",{\"0\":{\"1428\":1},\"1\":{\"19\":1,\"62\":1,\"71\":1,\"239\":1,\"271\":1,\"272\":1,\"277\":1,\"417\":1,\"418\":1,\"438\":1,\"439\":1,\"538\":3,\"539\":1,\"540\":1,\"547\":1,\"564\":2,\"576\":1,\"613\":1,\"615\":1,\"623\":1,\"734\":1,\"737\":3,\"813\":1,\"861\":1,\"936\":1,\"948\":1,\"1059\":1,\"1076\":1,\"1153\":1,\"1156\":1,\"1159\":1,\"1200\":1,\"1289\":1,\"1312\":1,\"1318\":1,\"1322\":1,\"1348\":1,\"1349\":1,\"1382\":1,\"1474\":1,\"1581\":1,\"1586\":1,\"1588\":2,\"1694\":1,\"1695\":1,\"1698\":2}}],[\"结合前面提到的模块化开发\",{\"1\":{\"1621\":1}}],[\"结合着之前讲的变量对象和执行上下文栈\",{\"1\":{\"1572\":1}}],[\"结合案例分析\",{\"0\":{\"1404\":1}}],[\"结合解构赋值\",{\"0\":{\"1403\":1}}],[\"结合性决定了拥有相同优先级的运算符的执行顺序\",{\"1\":{\"1242\":1}}],[\"结合性\",{\"0\":{\"1242\":1}}],[\"结果却是不一样\",{\"1\":{\"1700\":1}}],[\"结果是一样的\",{\"1\":{\"1579\":1}}],[\"结果都是\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"结果才返回\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"结果也是非负的\",{\"1\":{\"1150\":1}}],[\"结果所有实例在默认情况下都将取得相同的属性值\",{\"1\":{\"581\":1}}],[\"结果\",{\"1\":{\"569\":1,\"1122\":1,\"1242\":1,\"1253\":1,\"1254\":1}}],[\"结果会静默失败或抛出\",{\"1\":{\"539\":1}}],[\"结尾\",{\"1\":{\"242\":1}}],[\"结尾的字符串的\",{\"1\":{\"14\":1}}],[\"结构里面\",{\"1\":{\"1348\":1}}],[\"结构原生支持\",{\"1\":{\"1234\":1}}],[\"结构\",{\"0\":{\"1186\":1,\"1234\":1},\"1\":{\"1186\":1,\"1253\":1,\"1634\":1}}],[\"结构标准\",{\"1\":{\"139\":1}}],[\"结构中的距离是不会对元素优先级计算产生影响的\",{\"1\":{\"18\":1}}],[\"结束位置叫做cross\",{\"1\":{\"332\":1}}],[\"结束位置叫做main\",{\"1\":{\"332\":1}}],[\"结束进程\",{\"0\":{\"222\":1}}],[\"结束\",{\"1\":{\"121\":1,\"1542\":1,\"1694\":1}}],[\"结束标签三部分组成的整体\",{\"1\":{\"116\":1}}],[\"结束标签\",{\"1\":{\"116\":1}}],[\"结点关系\",{\"1\":{\"39\":1}}],[\"表单验证需要服务端配合\",{\"1\":{\"1447\":1}}],[\"表现形式\",{\"0\":{\"598\":1,\"1484\":1}}],[\"表现标准\",{\"1\":{\"139\":1}}],[\"表现一致\",{\"1\":{\"81\":1}}],[\"表明这是文档的样式表\",{\"1\":{\"131\":1}}],[\"表示输出\",{\"1\":{\"1658\":1}}],[\"表示八进制数\",{\"1\":{\"1620\":1}}],[\"表示指定所要加载的模块的位置\",{\"1\":{\"1593\":1}}],[\"表示它\",{\"1\":{\"1557\":1}}],[\"表示函数执行的分支只会在函数\",{\"1\":{\"1465\":1}}],[\"表示函数中有异步操作\",{\"1\":{\"1338\":1}}],[\"表示可以执行下一次的循环了\",{\"1\":{\"1438\":1}}],[\"表示紧跟在后面的表达式需要等待结果\",{\"1\":{\"1338\":1}}],[\"表示关闭\",{\"1\":{\"1161\":1}}],[\"表示打开\",{\"1\":{\"1161\":1}}],[\"表示符号位为正\",{\"1\":{\"1160\":1}}],[\"表示为10进制加负号\",{\"1\":{\"1147\":1}}],[\"表示对象或原始值\",{\"1\":{\"1121\":1}}],[\"表示一种情况\",{\"1\":{\"1041\":1}}],[\"表示一支给定股票第\",{\"1\":{\"485\":1}}],[\"表示未经计算的操作数的类型\",{\"1\":{\"934\":1,\"1119\":1}}],[\"表示无穷小\",{\"1\":{\"925\":1}}],[\"表示无穷大\",{\"1\":{\"852\":1,\"925\":1}}],[\"表示原型链中没有该属性或方法\",{\"1\":{\"648\":1}}],[\"表示这是一个只限于内部使用的私有方法\",{\"1\":{\"612\":1}}],[\"表示继承父元素的align\",{\"1\":{\"332\":1}}],[\"表示经实际电路传送后的比特流没有发生变化\",{\"1\":{\"318\":1}}],[\"表示协议数据单元\",{\"1\":{\"317\":1}}],[\"表示层\",{\"1\":{\"317\":1}}],[\"表示\",{\"1\":{\"239\":1,\"615\":1,\"624\":2,\"802\":1,\"925\":2,\"1160\":1,\"1253\":1,\"1254\":1,\"1255\":1,\"1658\":1}}],[\"表示使用用户\",{\"1\":{\"187\":1}}],[\"表示当前用户是超级用户\",{\"1\":{\"187\":1}}],[\"表示持久连接\",{\"1\":{\"156\":1}}],[\"表示字符的特殊编码\",{\"1\":{\"121\":1}}],[\"表示蓝色\",{\"1\":{\"110\":1}}],[\"表示绿色\",{\"1\":{\"110\":1}}],[\"表示黑色\",{\"1\":{\"108\":1}}],[\"表示红色\",{\"1\":{\"108\":1,\"110\":1}}],[\"表示存在\",{\"1\":{\"14\":1}}],[\"表格前后带有换行符\",{\"1\":{\"44\":1}}],[\"表达时间单位\",{\"1\":{\"27\":1}}],[\"表达式中的函数调用会自动返回这个新对象\",{\"1\":{\"1581\":1}}],[\"表达式中被调用时\",{\"1\":{\"1581\":1}}],[\"表达式赋值等号\",{\"1\":{\"1330\":1}}],[\"表达式会抛出一个类型错误异常\",{\"1\":{\"1087\":1}}],[\"表达式指定对象\",{\"1\":{\"1087\":1}}],[\"表达式通常会初始化一个或多个循环计数器\",{\"1\":{\"1009\":1}}],[\"表达式的值是属性值\",{\"1\":{\"546\":1}}],[\"表达式\",{\"0\":{\"1752\":1},\"1\":{\"18\":1,\"600\":1,\"1083\":1,\"1197\":1,\"1212\":1,\"1484\":1}}],[\"当某个函数被调用时\",{\"1\":{\"1707\":1}}],[\"当程序中加载了多个第三方库时\",{\"1\":{\"1683\":1}}],[\"当程序执行流入到一个函数中时\",{\"1\":{\"1282\":1}}],[\"当变量出现在赋值操作的左侧时进行\",{\"1\":{\"1670\":1}}],[\"当查找变量的时候\",{\"1\":{\"1569\":1}}],[\"当代码执行完后\",{\"1\":{\"1565\":1}}],[\"当代码在执行过程中\",{\"1\":{\"1556\":1}}],[\"当运行环境的专用线程中的异步任务准备就绪后\",{\"1\":{\"1552\":1}}],[\"当运算符在运算时\",{\"1\":{\"948\":1}}],[\"当主线程空闲时\",{\"1\":{\"1552\":1}}],[\"当主线程正在执行状态\",{\"1\":{\"1538\":1}}],[\"当准备就绪后会进入事件队列\",{\"1\":{\"1538\":1}}],[\"当微任务队列清空后\",{\"1\":{\"1533\":1}}],[\"当构造函数的函数体执行完毕时\",{\"1\":{\"1526\":1}}],[\"当手动添加返回值后\",{\"1\":{\"1477\":1}}],[\"当该函数再次被调用时\",{\"1\":{\"1467\":1}}],[\"当用户输入第一个字符后的一段时间内如果还有字符输入的话\",{\"1\":{\"1449\":1}}],[\"当返回的函数被最后一个调用后\",{\"1\":{\"1446\":1}}],[\"当事件触发之后\",{\"1\":{\"1446\":1}}],[\"当第二次调用该函数时\",{\"1\":{\"1445\":1}}],[\"当电梯门关闭之前发现有人也要乘电梯\",{\"1\":{\"1444\":1}}],[\"当触发后再次触发\",{\"1\":{\"1444\":1}}],[\"当下次调用时\",{\"1\":{\"1441\":1}}],[\"当页面关闭时\",{\"1\":{\"1709\":1}}],[\"当页面再滚动的时候\",{\"1\":{\"1438\":1}}],[\"当页面被加入书签时\",{\"1\":{\"120\":1}}],[\"当调整浏览器大小的时候\",{\"1\":{\"1432\":1}}],[\"当调用事件触发一段时间后\",{\"1\":{\"1444\":1}}],[\"当调用函数时\",{\"1\":{\"1328\":1}}],[\"当调用构造函数创建一个新的实例后\",{\"1\":{\"576\":1}}],[\"当形参并没有对应的实参时\",{\"1\":{\"1383\":1}}],[\"当形参与实参的个数相同时\",{\"1\":{\"1383\":1}}],[\"当实参比形参个数要多时\",{\"1\":{\"1382\":1}}],[\"当实参比函数声明指定的形参个数要少\",{\"1\":{\"1382\":1}}],[\"当只有一个参数时\",{\"1\":{\"1364\":1}}],[\"当函数需要引用自身时只能使用已经过期的\",{\"1\":{\"1685\":1}}],[\"当函数引用有上下文时\",{\"1\":{\"1579\":1}}],[\"当函数激活\",{\"1\":{\"1571\":1}}],[\"当函数创建的时候\",{\"1\":{\"1570\":1}}],[\"当函数被调用执行时\",{\"1\":{\"1556\":1}}],[\"当函数\",{\"1\":{\"1514\":1}}],[\"当函数内部作用域存在同名变量\",{\"1\":{\"1407\":1}}],[\"当函数内部作用域重新声明与已有参数同名变量\",{\"1\":{\"1407\":1}}],[\"当函数执行的时候\",{\"1\":{\"1340\":1}}],[\"当函数执行完毕的时候\",{\"1\":{\"1557\":1}}],[\"当函数执行完毕\",{\"1\":{\"1279\":1}}],[\"当函数的参数是一个值\",{\"1\":{\"1329\":1}}],[\"当尝试设置属性时\",{\"1\":{\"1320\":1}}],[\"当尝试访问可能不存在的对象属性时\",{\"1\":{\"1164\":1}}],[\"当新函数被调用时\",{\"1\":{\"1311\":1}}],[\"当绑定函数被调用时\",{\"1\":{\"1310\":2,\"1412\":1}}],[\"当被调用时\",{\"1\":{\"1308\":1}}],[\"当声明了一个变量并将一个引用类型赋值给该变量时\",{\"1\":{\"1281\":1}}],[\"当地址指针相同时\",{\"1\":{\"1267\":1}}],[\"当左侧的操作数为\",{\"1\":{\"1256\":1}}],[\"当操作数是浮点数时\",{\"1\":{\"1207\":1}}],[\"当我们了解了具体的执行过程后\",{\"1\":{\"1709\":1}}],[\"当我们看到这行代码\",{\"1\":{\"1670\":1}}],[\"当我们调用一个函数时\",{\"1\":{\"1555\":1}}],[\"当我们需要解决未知数量的\",{\"1\":{\"1355\":1}}],[\"当我们使用\",{\"1\":{\"1285\":1}}],[\"当我们声明变量\",{\"1\":{\"1271\":1}}],[\"当我们访问引用数据类型\",{\"1\":{\"1204\":1}}],[\"当我们的函数有多个变量的时候\",{\"1\":{\"1178\":1}}],[\"当我们尝试使用proxy包装基本数据类型时\",{\"1\":{\"408\":1}}],[\"当试着删除一个不存在的属性时\",{\"1\":{\"1102\":1}}],[\"当进入执行上下文时\",{\"1\":{\"1564\":1}}],[\"当进入\",{\"1\":{\"1055\":1}}],[\"当传递给条件语句时\",{\"1\":{\"1020\":1}}],[\"当这个引用次数变成\",{\"1\":{\"1281\":1}}],[\"当这个条件为假\",{\"1\":{\"1017\":1}}],[\"当这个属性是用于类或对象类型的内部使用的时候\",{\"1\":{\"928\":1}}],[\"当条件为\",{\"1\":{\"1017\":2}}],[\"当循环条件满足时所执行的语句\",{\"1\":{\"1009\":1}}],[\"当n大于1000时跳出循环\",{\"1\":{\"1001\":1}}],[\"当引用对象类型的值进行二元加号运算符运算时\",{\"1\":{\"951\":1}}],[\"当加号运算符作为二元运算符操作值时\",{\"1\":{\"951\":1}}],[\"当加号运算符作为一元运算符运算值时\",{\"1\":{\"951\":1}}],[\"当指定的数字为\",{\"1\":{\"898\":1}}],[\"当作\",{\"1\":{\"1599\":1}}],[\"当作请求参数传递\",{\"1\":{\"880\":1,\"886\":1}}],[\"当作一个对象使用\",{\"1\":{\"622\":1}}],[\"当未定义的对象成员被调用作方法的时候\",{\"1\":{\"805\":1}}],[\"当属性值发生变化时我们可以进行额外操作\",{\"1\":{\"695\":1}}],[\"当通过字面量方式创建对象时\",{\"1\":{\"650\":1}}],[\"当通过方括号运算符\",{\"1\":{\"558\":1}}],[\"当访问一个对象的属性或方法时\",{\"1\":{\"646\":1}}],[\"当中的\",{\"1\":{\"622\":1}}],[\"当然可以在所有的内部嵌套作用域中访问到它们\",{\"1\":{\"1681\":1}}],[\"当然上面的程序并不只有一个\",{\"1\":{\"1670\":1}}],[\"当然还有一种\",{\"1\":{\"1670\":1}}],[\"当然\",{\"1\":{\"578\":1,\"1408\":1,\"1504\":1}}],[\"当然也可以遍历数组\",{\"1\":{\"388\":1}}],[\"当为对象实例添加一个属性时\",{\"1\":{\"576\":1}}],[\"当使用类的方法时\",{\"1\":{\"1312\":1}}],[\"当使用\",{\"1\":{\"564\":4,\"1310\":1}}],[\"当文档完成解析\",{\"1\":{\"464\":1}}],[\"当解析器遇到设置了\",{\"1\":{\"464\":1}}],[\"当所有同步任务执行完毕后\",{\"1\":{\"457\":1}}],[\"当执行流进入一个函数时\",{\"1\":{\"1707\":1}}],[\"当执行一个函数的时候\",{\"1\":{\"1557\":1}}],[\"当执行上下文栈清空后\",{\"1\":{\"1533\":1}}],[\"当执行\",{\"1\":{\"1036\":1}}],[\"当执行到\",{\"1\":{\"1034\":1}}],[\"当执行这一轮的微任务完毕后\",{\"1\":{\"457\":1}}],[\"当执行栈清空后\",{\"1\":{\"457\":1}}],[\"当一个消息需要太长时间才能处理完毕时\",{\"1\":{\"1534\":1}}],[\"当一个方法被调用时\",{\"1\":{\"1515\":1}}],[\"当一个函数被保存为对象的一个属性时\",{\"1\":{\"1515\":1}}],[\"当一个函数并非一个对象的属性时\",{\"1\":{\"1509\":1}}],[\"当一个函数不适合执行一些请求时\",{\"1\":{\"1502\":1}}],[\"当一个函数包含超过\",{\"1\":{\"1382\":1}}],[\"当一个逻辑条件为真\",{\"1\":{\"1017\":1}}],[\"当一个对象执行例如加法操作的时候\",{\"1\":{\"951\":1}}],[\"当一个元素的外观发生变化\",{\"1\":{\"439\":1}}],[\"当一个标签页发送消息到广播频道时\",{\"1\":{\"397\":1}}],[\"当一个标签页发送消息时\",{\"1\":{\"397\":1}}],[\"当dom变化影响了元素\",{\"1\":{\"439\":1}}],[\"当浏览器发起请求时\",{\"1\":{\"430\":1}}],[\"当资源改变\",{\"1\":{\"430\":1}}],[\"当两种方式一起使用时\",{\"1\":{\"429\":1}}],[\"当两条相互冲突的带有\",{\"1\":{\"19\":1}}],[\"当全都失败时\",{\"1\":{\"383\":1}}],[\"当有成功的时候\",{\"1\":{\"383\":1}}],[\"当多个样式规则应用于同一个元素时\",{\"1\":{\"336\":1}}],[\"当空间不足时\",{\"1\":{\"332\":1}}],[\"当服务器端确定数据已发送完成\",{\"1\":{\"304\":1}}],[\"当服务器收到客户端的确认包时\",{\"1\":{\"303\":1}}],[\"当鼠标速度很快的进入\",{\"1\":{\"277\":1}}],[\"当点\",{\"1\":{\"275\":1}}],[\"当语句中包含行终止符语法的时候\",{\"1\":{\"253\":1}}],[\"当捕获到标识符输入流的结尾\",{\"1\":{\"253\":1}}],[\"当出现一个不允许的行终止符或\",{\"1\":{\"253\":1}}],[\"当前作用域内\",{\"1\":{\"1698\":1}}],[\"当前作用域内函数名称唯一\",{\"1\":{\"1328\":1}}],[\"当前作用域\",{\"1\":{\"1670\":1}}],[\"当前模块不能直接使用这两个接口\",{\"1\":{\"1641\":1}}],[\"当前调用位置在\",{\"1\":{\"1576\":1}}],[\"当前调用位置是全局作用域\",{\"1\":{\"1576\":1}}],[\"当前调用调用位置在\",{\"1\":{\"1576\":1}}],[\"当前调用栈是\",{\"1\":{\"1576\":3}}],[\"当前执行上下文\",{\"0\":{\"1575\":1},\"1\":{\"1575\":1}}],[\"当前执行栈里事件执行完毕后\",{\"1\":{\"457\":1}}],[\"当前函数调用\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"当前函数的执行将被停止\",{\"1\":{\"1045\":1}}],[\"当前数组中处理的元素\",{\"1\":{\"668\":1}}],[\"当前的子类\",{\"1\":{\"623\":1}}],[\"当前\",{\"1\":{\"292\":1}}],[\"当前目录名\",{\"1\":{\"198\":1}}],[\"当前位置在bin目录下\",{\"1\":{\"187\":1}}],[\"当前所在目录\",{\"1\":{\"187\":1}}],[\"当前颜色\",{\"1\":{\"28\":1}}],[\"当双方没有请求或响应传递时\",{\"1\":{\"156\":1}}],[\"当在函数内部重写引用类型的形参时\",{\"1\":{\"1389\":1}}],[\"当在浏览器中输入url后\",{\"1\":{\"148\":1}}],[\"当在一个样式生命中使用\",{\"1\":{\"19\":1}}],[\"当内联内容溢出块容器时\",{\"1\":{\"87\":2}}],[\"当值为\",{\"1\":{\"82\":2}}],[\"当不需要\",{\"1\":{\"1288\":1}}],[\"当不能整数次平铺时\",{\"1\":{\"65\":2}}],[\"当不设置\",{\"1\":{\"38\":1}}],[\"当把元素\",{\"1\":{\"37\":1}}],[\"当\",{\"1\":{\"18\":1,\"51\":1,\"621\":2,\"946\":1,\"951\":1,\"960\":1,\"1034\":1,\"1055\":1,\"1116\":1,\"1203\":3,\"1348\":1,\"1417\":1,\"1438\":1,\"1561\":1,\"1579\":1,\"1694\":1,\"1709\":1}}],[\"而全局环境的变量对象则变成活动状态\",{\"1\":{\"1709\":1}}],[\"而表达式的创建方式则只提升了变量\",{\"1\":{\"1700\":1}}],[\"而赋值是在执行阶段进行的\",{\"1\":{\"1698\":1}}],[\"而只在你知道变量值\",{\"1\":{\"1695\":1}}],[\"而只能被\",{\"1\":{\"1681\":1}}],[\"而只有\",{\"1\":{\"1562\":1}}],[\"而将其他内容都\",{\"1\":{\"1681\":1}}],[\"而动态作用域是在\",{\"1\":{\"1677\":1}}],[\"而无需到外面的\",{\"1\":{\"1675\":1}}],[\"而与词法作用域相对的是动态作用域\",{\"1\":{\"1673\":1}}],[\"而与三级权限与一下\",{\"1\":{\"1161\":1}}],[\"而后端它在软件开发中处于下游\",{\"1\":{\"1621\":1}}],[\"而后置操作必须先保存操作数原来的值\",{\"1\":{\"1194\":1}}],[\"而我们在编写模块时用到的\",{\"1\":{\"1616\":1}}],[\"而我们想要使用底层的\",{\"1\":{\"1260\":1}}],[\"而要理解\",{\"1\":{\"1576\":1}}],[\"而处于栈顶的上下文执行完毕之后\",{\"1\":{\"1556\":1}}],[\"而栈顶就是当前执行的上下文\",{\"1\":{\"1556\":1}}],[\"而异步机制是运行环境的两个或以上常驻线程共同完成的\",{\"1\":{\"1551\":1}}],[\"而当执行上下文栈再次清空后\",{\"1\":{\"1533\":1}}],[\"而当将一个为引用数据类型的值的变量赋值给另一个变量时\",{\"1\":{\"1204\":1}}],[\"而理想的做法应该是这样的\",{\"1\":{\"1449\":1}}],[\"而外层的全局变量\",{\"1\":{\"1407\":1}}],[\"而没有函数签名\",{\"1\":{\"1390\":1}}],[\"而没有删除它\",{\"1\":{\"1110\":1}}],[\"而它的真正执行要等到\",{\"1\":{\"1375\":1}}],[\"而函数表达式可以有名称也可以没有名称\",{\"1\":{\"1685\":1}}],[\"而函数表达式则需要\",{\"1\":{\"1335\":1}}],[\"而函数节流所做的工作就是每隔一段时间去执行一次原本需要无时无刻地在执行的函数\",{\"1\":{\"1438\":1}}],[\"而函数的\",{\"1\":{\"1293\":1}}],[\"而那些和\",{\"1\":{\"1282\":1}}],[\"而如果同时使用两个逻辑非操作符\",{\"1\":{\"1255\":1}}],[\"而变量\",{\"1\":{\"1204\":1}}],[\"而其中未赋值的索引位置则表示为空\",{\"1\":{\"1094\":1}}],[\"而使用什么规则去排序\",{\"1\":{\"1503\":1}}],[\"而使用\",{\"1\":{\"1067\":1}}],[\"而由\",{\"1\":{\"948\":1}}],[\"而由所有实例共享的属性\",{\"1\":{\"569\":1}}],[\"而对\",{\"1\":{\"1675\":1,\"1694\":1}}],[\"而对象的属性没有次序\",{\"1\":{\"1218\":1}}],[\"而对引用数据类型\",{\"1\":{\"934\":1}}],[\"而对于非替换元素\",{\"1\":{\"51\":1}}],[\"而许多其他结构则可被现代\",{\"1\":{\"893\":1}}],[\"而查找值的\",{\"1\":{\"859\":1}}],[\"而另一些可以\",{\"1\":{\"859\":1}}],[\"而另一方执行被动关闭\",{\"1\":{\"304\":1}}],[\"而另一方则执行被动关闭\",{\"1\":{\"304\":1}}],[\"而父类型的实例属性是通过借用构造函数的方式来得到的\",{\"1\":{\"659\":1}}],[\"而通过借用构造函数来实现对实例属性的继承\",{\"1\":{\"662\":1}}],[\"而通过访问原型链中的原型对象\",{\"1\":{\"648\":1}}],[\"而通过构造函数中初始化原型\",{\"1\":{\"570\":1}}],[\"而在函数执行之后\",{\"1\":{\"1707\":1}}],[\"而在实际场景中是不需要这么做的\",{\"1\":{\"1438\":1}}],[\"而在其他语言中\",{\"1\":{\"1390\":1}}],[\"而在其他实现中\",{\"1\":{\"576\":1}}],[\"而在严格模式下\",{\"1\":{\"1381\":1}}],[\"而在适当的时候解除引用\",{\"1\":{\"1282\":1}}],[\"而在\",{\"1\":{\"625\":1,\"946\":1,\"1065\":1,\"1532\":1}}],[\"而挂载在类上的方法则挂载在原型链上\",{\"1\":{\"603\":1}}],[\"而自定义类型中\",{\"1\":{\"599\":1,\"1483\":1}}],[\"而更让人无法接受的是\",{\"1\":{\"592\":1}}],[\"而任何函数\",{\"1\":{\"591\":1}}],[\"而非确切的等待时间\",{\"1\":{\"1543\":1}}],[\"而非从对象的原型即成\",{\"1\":{\"1486\":1}}],[\"而非十进制\",{\"1\":{\"1142\":1}}],[\"而非定义为\",{\"1\":{\"1094\":1}}],[\"而非声明变量只有在执行赋值操作的时候才会被创建\",{\"1\":{\"1065\":1}}],[\"而非声明变量总是全局的\",{\"1\":{\"1065\":1}}],[\"而非当前循环\",{\"1\":{\"969\":1}}],[\"而非\",{\"1\":{\"936\":1}}],[\"而非赋值处理\",{\"1\":{\"632\":1}}],[\"而非构造函数则应该以一个小写字母开头\",{\"1\":{\"590\":1}}],[\"而非由外部容器决定\",{\"1\":{\"52\":1}}],[\"而每次它都会返回一个包含三个属性一个方法的对象\",{\"1\":{\"586\":1}}],[\"而这些变量或函数本应该是私有的\",{\"1\":{\"1681\":1}}],[\"而这些\",{\"1\":{\"1534\":1}}],[\"而这些问题可以通过\",{\"1\":{\"592\":1}}],[\"而这个局部对象会在函数执行完毕后立即被销毁\",{\"1\":{\"1389\":1}}],[\"而这个特殊匿名函数的\",{\"1\":{\"653\":1}}],[\"而这个对象的用途是包含可以由\",{\"1\":{\"575\":1}}],[\"而这里的语法\",{\"1\":{\"578\":1}}],[\"而该属性与实例原型中的一个属性同名\",{\"1\":{\"576\":1}}],[\"而该属性也是共享的\",{\"1\":{\"576\":1}}],[\"而除了调用\",{\"1\":{\"572\":1}}],[\"而修改了\",{\"1\":{\"569\":1}}],[\"而原型模式用于定义方法和共享的属性\",{\"1\":{\"569\":1}}],[\"而原生继承的属性默认是不可枚举的\",{\"1\":{\"531\":1}}],[\"而下标为\",{\"1\":{\"509\":1}}],[\"而node中要高于其他优先级\",{\"1\":{\"461\":1}}],[\"而node的微任务是在两个阶段之间执行\",{\"1\":{\"461\":1}}],[\"而重绘不一定会引起回流\",{\"1\":{\"439\":1}}],[\"而f5刷新跳过强缓存\",{\"1\":{\"431\":1}}],[\"而for\",{\"1\":{\"388\":1}}],[\"而创建和销毁进程的开销较大\",{\"1\":{\"424\":1}}],[\"而线程是依赖于进程的\",{\"1\":{\"424\":1}}],[\"而且声明的变量只在其块和子块中可用\",{\"1\":{\"1692\":1}}],[\"而且可能是危险的\",{\"1\":{\"1681\":1}}],[\"而且页面背景会变色\",{\"1\":{\"1614\":1}}],[\"而且这种异步并不是那么彻底\",{\"1\":{\"1425\":1}}],[\"而且这会影响到所有继承自这个原型的对象\",{\"1\":{\"564\":1}}],[\"而且当我们需要在某过程中需要停止执行\",{\"1\":{\"1425\":1}}],[\"而且易读\",{\"1\":{\"1229\":1}}],[\"而且子对象所在的父属性不存在\",{\"1\":{\"1218\":1}}],[\"而且此属性非原型链继承的\",{\"1\":{\"806\":1}}],[\"而且\",{\"1\":{\"580\":1,\"621\":1,\"1698\":1}}],[\"而且也可以定义新方法\",{\"1\":{\"580\":1}}],[\"而且其方法不引用\",{\"1\":{\"572\":1}}],[\"而且for\",{\"1\":{\"388\":1}}],[\"而且会在解析过程中产生一些难以预知的bug\",{\"1\":{\"321\":1}}],[\"而加法则会先强制转换为原语类型\",{\"1\":{\"344\":1}}],[\"而接收方会开辟大量的缓存来容纳这些巨大数据\",{\"1\":{\"303\":1}}],[\"而是保持在私有\",{\"1\":{\"1684\":1}}],[\"而是通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中\",{\"1\":{\"1684\":1}}],[\"而是通过构造函数\",{\"1\":{\"1473\":1}}],[\"而是间接地通过对全局对象属性的引用来对其进行访问\",{\"1\":{\"1676\":1}}],[\"而是对象的某一个属性\",{\"1\":{\"1612\":1}}],[\"而是根据外层\",{\"1\":{\"1589\":1}}],[\"而是使用被称为胖箭头的操作符\",{\"1\":{\"1589\":1}}],[\"而是被添加到等待执行的事件队列中\",{\"1\":{\"1538\":1}}],[\"而是调用它的函数所在的上下文\",{\"1\":{\"1457\":1}}],[\"而是在\",{\"1\":{\"1613\":1}}],[\"而是在输入的时候就在判断这个用户名是否已被注册\",{\"1\":{\"1449\":1}}],[\"而是在当前循环中继续执行\",{\"1\":{\"457\":1}}],[\"而是每次都重新计算默认值表达式的值\",{\"1\":{\"1402\":1}}],[\"而是引用外层的\",{\"1\":{\"1375\":1}}],[\"而是一个类似数组的对象\",{\"1\":{\"1185\":1,\"1393\":1}}],[\"而是一种\",{\"1\":{\"50\":1}}],[\"而是\",{\"1\":{\"969\":1}}],[\"而是指其他类型的值转换为字符串类型的操作\",{\"1\":{\"943\":1}}],[\"而是定义了\",{\"1\":{\"930\":1}}],[\"而是需要直接通过类来调用\",{\"1\":{\"629\":1}}],[\"而是将逻辑封装在一个函数中\",{\"1\":{\"584\":1}}],[\"而是可以将这些信息直接添加到原型对象中\",{\"1\":{\"575\":1}}],[\"而是返回\",{\"1\":{\"560\":1}}],[\"而是放在任务队列中\",{\"1\":{\"457\":1}}],[\"而是创建新的提交来撤销之前的更改\",{\"1\":{\"177\":1}}],[\"而打开网页使用的是\",{\"1\":{\"152\":1}}],[\"而\",{\"1\":{\"127\":1,\"131\":1,\"563\":1,\"577\":1,\"603\":1,\"936\":1,\"1138\":1,\"1284\":1,\"1295\":1,\"1334\":1,\"1338\":3,\"1375\":1,\"1484\":1,\"1556\":1,\"1616\":1,\"1654\":1,\"1670\":1,\"1685\":1,\"1695\":1}}],[\"而产生的小空隙将会使其变为\",{\"1\":{\"46\":1}}],[\"而不改变\",{\"1\":{\"1616\":1}}],[\"而不关心数组中包含哪些参数\",{\"1\":{\"1382\":1}}],[\"而不需要使用显式方法调用\",{\"1\":{\"1318\":1}}],[\"而不用像从乒乓球盒子里取乒乓一样\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"而不用加上路径\",{\"1\":{\"215\":1}}],[\"而不仅仅是布尔值\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"而不仅仅是复制或定义新的属性\",{\"1\":{\"678\":1}}],[\"而不能使用\",{\"1\":{\"1197\":1}}],[\"而不能是一个保留字\",{\"1\":{\"1027\":1}}],[\"而不必明确验证链中的每个引用是否有效\",{\"1\":{\"1164\":1}}],[\"而不测试基数的值\",{\"1\":{\"859\":1}}],[\"而不会执行多次\",{\"1\":{\"1635\":1}}],[\"而不会恢复其指向原型的连接\",{\"1\":{\"576\":1}}],[\"而不会相对\",{\"1\":{\"38\":1}}],[\"而不设置\",{\"1\":{\"534\":1}}],[\"而不是整个外层函数\",{\"1\":{\"1692\":1}}],[\"而不是将自己的标识符暴露在顶级的词法作用域中\",{\"1\":{\"1683\":1}}],[\"而不是先前所在的作用域中\",{\"1\":{\"1681\":1}}],[\"而不是代码中的作用域嵌套\",{\"1\":{\"1677\":1}}],[\"而不是执行时错误\",{\"1\":{\"1593\":1}}],[\"而不是声明的位置\",{\"1\":{\"1576\":1}}],[\"而不是全局变量\",{\"1\":{\"1407\":1}}],[\"而不是指向运行时所在的作用域\",{\"1\":{\"1375\":1}}],[\"而不是指向外部脚本文件\",{\"1\":{\"131\":1}}],[\"而不是使用时所在的对象\",{\"1\":{\"1374\":1}}],[\"而不是为变量\",{\"1\":{\"1221\":1}}],[\"而不是模式\",{\"1\":{\"1218\":1}}],[\"而不是前者\",{\"1\":{\"1218\":1}}],[\"而不是数组元素的值\",{\"1\":{\"1109\":1}}],[\"而不是任何对象的属性\",{\"1\":{\"1004\":1}}],[\"而不是一个数组来表示某个操作的权限集\",{\"1\":{\"1161\":1}}],[\"而不是一个包含函数名称的字符串\",{\"1\":{\"805\":1}}],[\"而不是一个块级盒子\",{\"1\":{\"329\":1}}],[\"而不是实例\",{\"1\":{\"630\":1}}],[\"而不是父类的原型对象\",{\"1\":{\"623\":1}}],[\"而不是子类的实例\",{\"1\":{\"623\":2}}],[\"而不是存在于实例与构造函数之间\",{\"1\":{\"576\":1}}],[\"而不是原型链上的枚举属性\",{\"1\":{\"548\":1,\"683\":1}}],[\"而不是第\",{\"1\":{\"482\":1}}],[\"而不是基本数据类型\",{\"1\":{\"408\":1}}],[\"而不是\",{\"1\":{\"352\":1,\"438\":1,\"600\":1,\"1069\":1,\"1694\":1,\"1695\":1}}],[\"而不是文档内容\",{\"1\":{\"126\":1}}],[\"而不是随着它的内容滚动\",{\"1\":{\"105\":1}}],[\"而不是去选取字体中的斜体字\",{\"1\":{\"74\":1}}],[\"而不是简单的\",{\"1\":{\"18\":1}}],[\"而不是真的增加一个节点\",{\"1\":{\"16\":1}}],[\"而不是改变元素的状态\",{\"1\":{\"16\":1}}],[\"而内联样式可能一般写在了外链样式引用了之后\",{\"1\":{\"18\":1}}],[\"是会覆盖外部作用域的变量的\",{\"1\":{\"1695\":1}}],[\"是块级作用域\",{\"1\":{\"1693\":1,\"1695\":1}}],[\"是块级变量\",{\"1\":{\"1066\":1}}],[\"是没有名称的标识符\",{\"1\":{\"1685\":1}}],[\"是没有第三次挥手\",{\"1\":{\"304\":1}}],[\"是基于\",{\"1\":{\"1677\":1}}],[\"是程序源代码中定义这个变量的区域\",{\"1\":{\"1673\":1}}],[\"是静态执行\",{\"1\":{\"1634\":1}}],[\"是比较相似的\",{\"1\":{\"1618\":1}}],[\"是根据\",{\"1\":{\"1618\":1}}],[\"是根据元素是否达到设定了的阈值决定的\",{\"1\":{\"38\":1}}],[\"是服务器端模块的规范\",{\"1\":{\"1616\":1}}],[\"是运行时加载模块\",{\"1\":{\"1593\":1}}],[\"是全局对象的属性\",{\"1\":{\"1579\":3}}],[\"是全局对象的一个属性\",{\"1\":{\"853\":1,\"919\":1,\"920\":1}}],[\"是如何调用的\",{\"1\":{\"1578\":1}}],[\"是预定义的对象\",{\"1\":{\"1561\":1}}],[\"是很常见的应用了\",{\"1\":{\"1419\":1}}],[\"是把接受多个参数的函数变换成接受一个单一参数\",{\"1\":{\"1416\":1}}],[\"是个自由变量\",{\"1\":{\"1709\":1}}],[\"是个闭包\",{\"0\":{\"1455\":1}}],[\"是个固定参数\",{\"1\":{\"1418\":1}}],[\"是个类数组\",{\"1\":{\"1394\":1}}],[\"是个对象\",{\"1\":{\"540\":1}}],[\"是原来的对象\",{\"1\":{\"1312\":1}}],[\"是原型对象的属性\",{\"1\":{\"603\":1}}],[\"是为页面获得更好性能的一个重要方式\",{\"1\":{\"1282\":1}}],[\"是可以无序的\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"是假值\",{\"1\":{\"1253\":1}}],[\"是变量\",{\"1\":{\"1218\":1}}],[\"是模式\",{\"1\":{\"1218\":1}}],[\"是匹配的模式\",{\"1\":{\"1218\":1}}],[\"是1\",{\"1\":{\"1147\":1}}],[\"是以\",{\"1\":{\"1142\":1}}],[\"是非常底层的运算\",{\"1\":{\"1142\":1}}],[\"是非常特殊的值\",{\"1\":{\"953\":1}}],[\"是通过一对方括号和其内由逗号隔开的列表构成的\",{\"1\":{\"1090\":1}}],[\"是找不到\",{\"1\":{\"1066\":1}}],[\"是不可以省略函数名\",{\"1\":{\"1685\":1}}],[\"是不可忽略的\",{\"1\":{\"71\":1}}],[\"是不会出现的\",{\"1\":{\"1407\":1}}],[\"是不严谨的\",{\"1\":{\"1382\":1}}],[\"是不是真值来执行遍历\",{\"1\":{\"1014\":1}}],[\"是相等的\",{\"1\":{\"952\":1}}],[\"是无效的\",{\"1\":{\"923\":1}}],[\"是表示缺少的标识\",{\"1\":{\"919\":1}}],[\"是唯一一个与其自身不等的值\",{\"1\":{\"904\":1}}],[\"是唯一与自身不全等的值\",{\"1\":{\"861\":1}}],[\"是函数\",{\"1\":{\"648\":2}}],[\"是函数独有的\",{\"1\":{\"644\":1}}],[\"是先新建父类的实例对象\",{\"1\":{\"625\":1}}],[\"是因为函数实例上的隐式指针会留存实例创建环境下的作用域对象\",{\"1\":{\"1287\":1}}],[\"是因为\",{\"1\":{\"1217\":1}}],[\"是因为子类无法获得原生构造函数的内部属性\",{\"1\":{\"625\":1}}],[\"是因为确实行间样式为第一等的权重\",{\"1\":{\"18\":1}}],[\"是父类的显式原型对象\",{\"1\":{\"624\":1}}],[\"是父类\",{\"1\":{\"624\":1}}],[\"是子类继承父类的特征和行为\",{\"1\":{\"618\":1}}],[\"是类的默认方法\",{\"1\":{\"602\":1}}],[\"是用来创建对象的一种最常用的设计模式\",{\"1\":{\"584\":1}}],[\"是用十六进制表示颜色的\",{\"1\":{\"109\":1}}],[\"是弱类型语言\",{\"1\":{\"557\":1}}],[\"是数组中的一个连续部分\",{\"1\":{\"524\":1}}],[\"是数组且有长度\",{\"1\":{\"381\":1}}],[\"是字符串\",{\"1\":{\"509\":2}}],[\"是字符串version1的长度\",{\"1\":{\"509\":2}}],[\"是恰好不满足循环条件的时刻\",{\"1\":{\"494\":1}}],[\"是指内置的构造函数\",{\"1\":{\"625\":1}}],[\"是指没有子节点的节点\",{\"1\":{\"470\":1}}],[\"是指对象上的操作\",{\"1\":{\"229\":1}}],[\"是否立即执行\",{\"1\":{\"1446\":1}}],[\"是否存在一个叫作\",{\"1\":{\"1670\":1}}],[\"是否存在\",{\"1\":{\"1441\":1}}],[\"是否被赋值\",{\"1\":{\"1398\":1}}],[\"是否包含具有指定名称的属性的对象\",{\"1\":{\"1107\":1}}],[\"是否可枚举\",{\"1\":{\"531\":1,\"816\":1}}],[\"是否为1xx\",{\"1\":{\"464\":1}}],[\"是否为首次执行\",{\"1\":{\"288\":1}}],[\"是否在直线\",{\"1\":{\"276\":2}}],[\"是否延伸到边框\",{\"1\":{\"106\":1}}],[\"是区分大小写的语言\",{\"1\":{\"235\":1}}],[\"是默认启用的\",{\"1\":{\"156\":1}}],[\"是的话直接根据\",{\"1\":{\"152\":1}}],[\"是\",{\"1\":{\"143\":3,\"234\":1,\"381\":7,\"799\":1,\"928\":1,\"1124\":1,\"1197\":1,\"1246\":1,\"1274\":1,\"1332\":1,\"1375\":1,\"1510\":1,\"1564\":1,\"1565\":1,\"1579\":1,\"1617\":1,\"1621\":1,\"1694\":1}}],[\"是开始一个新的段落\",{\"1\":{\"121\":1}}],[\"是特殊字符\",{\"1\":{\"121\":1}}],[\"是最短的有效文档声明\",{\"1\":{\"120\":1}}],[\"是在事件触发后事件监听器需要解绑自身\",{\"1\":{\"1685\":1}}],[\"是在css中用来管理和控制元素在页面上布局和排列的一种机制\",{\"1\":{\"325\":1}}],[\"是在\",{\"1\":{\"110\":1}}],[\"是对象独有的\",{\"1\":{\"644\":1}}],[\"是对\",{\"1\":{\"110\":1,\"1616\":2}}],[\"是一门编译语言\",{\"1\":{\"1665\":1}}],[\"是一门样式表语言\",{\"1\":{\"2\":1}}],[\"是一名软件工程师\",{\"1\":{\"1621\":1}}],[\"是一样的\",{\"1\":{\"1579\":1}}],[\"是一致的\",{\"1\":{\"1407\":1}}],[\"是一个独立的词法单元还是其他词法单元的一部分时\",{\"1\":{\"1666\":1}}],[\"是一个可以独立展示内容的\",{\"1\":{\"1621\":1}}],[\"是一个全局变量\",{\"1\":{\"1616\":1}}],[\"是一个全局对象的属性\",{\"1\":{\"858\":1}}],[\"是一个新的字符串\",{\"1\":{\"1274\":1}}],[\"是一个逻辑运算符\",{\"1\":{\"1256\":1}}],[\"是一个\",{\"1\":{\"1186\":1}}],[\"是一个类似数组的对象\",{\"1\":{\"1185\":1}}],[\"是一个表达式\",{\"1\":{\"1121\":1}}],[\"是一个字面量\",{\"1\":{\"919\":1}}],[\"是一个危险的函数\",{\"1\":{\"893\":1}}],[\"是一个常量\",{\"1\":{\"864\":1}}],[\"是一个数值\",{\"1\":{\"852\":1}}],[\"是一个特殊的匿名函数\",{\"1\":{\"653\":1}}],[\"是一个隐藏函数\",{\"1\":{\"533\":1}}],[\"是一个子序列\",{\"1\":{\"467\":1}}],[\"是一个简单的面向数据包的传输层协议\",{\"1\":{\"309\":1}}],[\"是一个国际性组织\",{\"1\":{\"139\":1}}],[\"是一个通用型的流内容容器\",{\"1\":{\"136\":1}}],[\"是一个通用的字符集\",{\"1\":{\"128\":1}}],[\"是一个坏习惯\",{\"1\":{\"19\":1}}],[\"是一种在一个对象上使用一条连续的代码来重复调用不同方法的技巧\",{\"1\":{\"1496\":1}}],[\"是一种在多个浏览器上下文之间共享脚本执行的机制\",{\"1\":{\"397\":1}}],[\"是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术\",{\"1\":{\"1416\":1}}],[\"是一种数字数据类型\",{\"1\":{\"929\":1}}],[\"是一种避免\",{\"1\":{\"417\":1}}],[\"是一种\",{\"1\":{\"229\":1,\"298\":1,\"417\":1,\"917\":1}}],[\"是一种用来告知浏览器如何组织页面的标记语言\",{\"1\":{\"115\":1}}],[\"是一种加色模型\",{\"1\":{\"108\":1}}],[\"之中放置一个事件\",{\"1\":{\"1532\":1}}],[\"之类的语言中\",{\"1\":{\"1279\":1}}],[\"之前已经起到了作用\",{\"1\":{\"1694\":1}}],[\"之前我们就已经在使用一种几乎和箭头函数完全一样的模式\",{\"1\":{\"1589\":1}}],[\"之前要调用\",{\"1\":{\"1490\":1}}],[\"之前的\",{\"1\":{\"1069\":1}}],[\"之前的语句\",{\"1\":{\"1053\":1}}],[\"之前\",{\"1\":{\"983\":1,\"1467\":1}}],[\"之外\",{\"1\":{\"934\":1}}],[\"之外还有很多属性值可以用于\",{\"1\":{\"7\":1}}],[\"之所以这样\",{\"1\":{\"625\":1}}],[\"之所以有这样的错觉\",{\"1\":{\"18\":1}}],[\"之间不能有换行\",{\"1\":{\"969\":1}}],[\"之间的主要差异在于词法单元的识别是通过有状态还是无状态的方式进行的\",{\"1\":{\"1666\":1}}],[\"之间的相互转换会更加直观\",{\"1\":{\"942\":1}}],[\"之间的相互关系\",{\"1\":{\"644\":1}}],[\"之间的对象类型检测无法使用\",{\"1\":{\"935\":1}}],[\"之间的数值\",{\"1\":{\"913\":1}}],[\"之间的数字\",{\"1\":{\"497\":1}}],[\"之间的空格\",{\"1\":{\"236\":1}}],[\"之间进行双向通信\",{\"1\":{\"397\":1}}],[\"之间出现了一个行终止符\",{\"1\":{\"253\":1}}],[\"之间\",{\"1\":{\"108\":1}}],[\"之间有什么区别\",{\"1\":{\"45\":1}}],[\"之一\",{\"1\":{\"38\":1}}],[\"之后我们会介绍如何通过固定\",{\"1\":{\"1579\":1}}],[\"之后调用函数时\",{\"1\":{\"1468\":1}}],[\"之后返回一个新函数\",{\"1\":{\"1412\":1}}],[\"之后它们会被插入到目标函数的参数列表的开始位置\",{\"1\":{\"1312\":1}}],[\"之后的语句将不会执行\",{\"1\":{\"1045\":1}}],[\"之后的内联对象会被排列在同一行内\",{\"1\":{\"45\":1}}],[\"之后才会继续下一次循环\",{\"1\":{\"969\":1}}],[\"之后再比较关系\",{\"1\":{\"953\":1}}],[\"之后\",{\"1\":{\"619\":1,\"1375\":1}}],[\"之后发现它可以设置宽高了\",{\"1\":{\"37\":1}}],[\"之后为固定定位\",{\"1\":{\"35\":1}}],[\"无冲突的作用域中\",{\"1\":{\"1684\":1}}],[\"无限循环了\",{\"1\":{\"1682\":1}}],[\"无意间可能造成命名冲突\",{\"1\":{\"1682\":1}}],[\"无对应写法场景\",{\"0\":{\"1646\":1}}],[\"无值的情况\",{\"1\":{\"1404\":1}}],[\"无参数列表\",{\"1\":{\"1243\":1}}],[\"无符号右移位赋值\",{\"1\":{\"1238\":1}}],[\"无符号右移\",{\"0\":{\"1150\":1},\"1\":{\"1150\":1,\"1151\":1,\"1243\":1}}],[\"无效\",{\"1\":{\"874\":1}}],[\"无效标识符\",{\"1\":{\"558\":1}}],[\"无穷大除以无穷大\",{\"1\":{\"858\":1}}],[\"无重复字符的最长子串\",{\"0\":{\"467\":1}}],[\"无法方便控制依赖的加载顺序\",{\"1\":{\"1608\":1}}],[\"无法合理地管理项目依赖和版本\",{\"1\":{\"1608\":1}}],[\"无法一起使用\",{\"1\":{\"1584\":1}}],[\"无法应用其他规则\",{\"1\":{\"1578\":1}}],[\"无法立即得到结果\",{\"1\":{\"1547\":1}}],[\"无法保证准时执行回调函数\",{\"1\":{\"1541\":1}}],[\"无法回收\",{\"1\":{\"1288\":1}}],[\"无法通过某种算法解决\",{\"1\":{\"1276\":1}}],[\"无法转为对象\",{\"1\":{\"1220\":1}}],[\"无法实现复用\",{\"1\":{\"637\":1}}],[\"无法实现跨网络的实时通信效果\",{\"1\":{\"397\":1}}],[\"无法绑定\",{\"1\":{\"625\":1}}],[\"无法将数据属性重新定义为访问器属性\",{\"1\":{\"539\":1}}],[\"无法删除属性\",{\"1\":{\"539\":1}}],[\"无法使用\",{\"1\":{\"530\":1,\"1584\":1}}],[\"无法监听数组\",{\"1\":{\"402\":1}}],[\"无法检测到对象属性的添加和删除\",{\"1\":{\"401\":1}}],[\"无法显示或输入\",{\"1\":{\"239\":1}}],[\"无沾包\",{\"1\":{\"313\":1}}],[\"无\",{\"1\":{\"313\":2,\"1197\":1}}],[\"无序存储\",{\"1\":{\"1268\":1}}],[\"无序\",{\"1\":{\"313\":1}}],[\"无连接\",{\"1\":{\"313\":1}}],[\"无需发起请求\",{\"1\":{\"430\":1}}],[\"无需建立连接\",{\"1\":{\"310\":1}}],[\"无需重新建立连接而增加慢启动开销\",{\"1\":{\"156\":1}}],[\"无差错\",{\"1\":{\"298\":1}}],[\"无背景图\",{\"1\":{\"100\":2}}],[\"无转换\",{\"1\":{\"84\":1}}],[\"无特定高度值\",{\"1\":{\"47\":1}}],[\"无论函数在哪里被调用\",{\"1\":{\"1676\":1}}],[\"无论如何都无法被访问到\",{\"1\":{\"1676\":1}}],[\"无论绑定的对象是什么\",{\"1\":{\"1584\":1}}],[\"无论之后如何调用函数\",{\"1\":{\"1580\":1}}],[\"无论你如何称呼这个模式\",{\"1\":{\"1579\":1}}],[\"无论这个值是什么数据类型\",{\"1\":{\"1255\":1}}],[\"无论这个函数是来自于函数声明或函数表达式\",{\"1\":{\"1101\":1}}],[\"无论它们是在函数还是全局作用域内\",{\"1\":{\"1065\":1}}],[\"无论发生在何处\",{\"1\":{\"1065\":1}}],[\"无论是变量还是函数声明\",{\"1\":{\"1701\":1}}],[\"无论是匿名还是具名\",{\"1\":{\"1685\":1}}],[\"无论是哪种情况\",{\"1\":{\"1579\":1}}],[\"无论是将函数当作参数传递\",{\"1\":{\"1500\":1}}],[\"无论是函数表达式还是函数声明\",{\"1\":{\"1329\":1}}],[\"无论是前自增\",{\"1\":{\"1194\":1}}],[\"无论是否有\",{\"1\":{\"1053\":1}}],[\"无论是否有异常抛出或着是否被捕获它总是执行\",{\"1\":{\"1053\":1}}],[\"无论是\",{\"1\":{\"1004\":1}}],[\"无论是行内样式\",{\"1\":{\"18\":1}}],[\"无论什么情况下\",{\"1\":{\"663\":1}}],[\"无论什么时候\",{\"1\":{\"576\":1}}],[\"无论该属性存在于实例中还是原型中\",{\"1\":{\"577\":1}}],[\"无论几维\",{\"1\":{\"374\":1}}],[\"无论失败或者成功状态\",{\"1\":{\"372\":1}}],[\"无论子节点的\",{\"1\":{\"39\":1}}],[\"无论属于哪种\",{\"1\":{\"36\":1}}],[\"无权重值\",{\"1\":{\"17\":1}}],[\"从所写的代码中挑选出一个任意的片段\",{\"1\":{\"1681\":1}}],[\"从所有的\",{\"1\":{\"737\":1}}],[\"从头到尾负责整个\",{\"1\":{\"1669\":1}}],[\"从头执行到尾\",{\"1\":{\"1547\":1}}],[\"从源模块导入特定项\",{\"1\":{\"1626\":1}}],[\"从源模块导入其原始名称的特定项目\",{\"1\":{\"1626\":1}}],[\"从谷歌提出\",{\"1\":{\"1621\":1}}],[\"从单页面\",{\"1\":{\"1621\":1}}],[\"从诞生之初以来\",{\"1\":{\"1551\":1}}],[\"从大到小排列\",{\"1\":{\"1503\":1}}],[\"从小到大排列\",{\"1\":{\"1503\":1}}],[\"从实例中新建另一个实例\",{\"1\":{\"1476\":1}}],[\"从字面上就可以理解\",{\"1\":{\"1432\":1}}],[\"从字符串开头\",{\"1\":{\"909\":1,\"913\":1}}],[\"从原来的函数和原来的对象创建一个绑定函数\",{\"1\":{\"1312\":1}}],[\"从原型链上继承来的\",{\"1\":{\"1111\":1}}],[\"从原型对象继承而来的属性叫\",{\"1\":{\"565\":1}}],[\"从逻辑上讲\",{\"1\":{\"1282\":1}}],[\"从右到左\",{\"1\":{\"1243\":5}}],[\"从函数返回多个值\",{\"0\":{\"1230\":1}}],[\"从一开始出现\",{\"1\":{\"1132\":1}}],[\"从一致性\",{\"1\":{\"115\":1}}],[\"从结果来看\",{\"1\":{\"1053\":1}}],[\"从结果可以得知\",{\"1\":{\"1052\":1}}],[\"从句\",{\"1\":{\"1041\":1}}],[\"从句来执行这个语句\",{\"1\":{\"1017\":1}}],[\"从尾部向前循环\",{\"0\":{\"1011\":1}}],[\"从不同的\",{\"1\":{\"848\":1}}],[\"从上图中可以看出\",{\"1\":{\"647\":1}}],[\"从上图可以看出一个对象指向另一个对象\",{\"1\":{\"646\":1}}],[\"从当前对象出发沿着原型对象\",{\"1\":{\"646\":1}}],[\"从当前分支拉取最新的远程变更并应用到本地分支\",{\"1\":{\"175\":1}}],[\"从本质上\",{\"1\":{\"640\":1}}],[\"从这个角度说\",{\"1\":{\"1670\":1}}],[\"从这个角度上来看构造函数\",{\"1\":{\"592\":1}}],[\"从这个位置读\",{\"1\":{\"528\":1}}],[\"从根到叶子节点路径\",{\"1\":{\"497\":5}}],[\"从最后一个非叶子节点开始\",{\"1\":{\"482\":1}}],[\"从后往前\",{\"1\":{\"482\":1}}],[\"从左到右\",{\"1\":{\"1243\":15}}],[\"从左到右访问所有节点\",{\"1\":{\"479\":1}}],[\"从左往右逐个等级比较\",{\"1\":{\"18\":1}}],[\"从dom树的根节点遍历所有可见节点\",{\"1\":{\"464\":1}}],[\"从子元素冒泡到父元素\",{\"1\":{\"454\":1}}],[\"从技术角度上讲\",{\"1\":{\"256\":1}}],[\"从远程仓库拉取变更但不合并\",{\"1\":{\"168\":1}}],[\"从远程仓库克隆项目\",{\"1\":{\"165\":1}}],[\"从\",{\"1\":{\"101\":3,\"482\":2,\"942\":1,\"1054\":1,\"1302\":1,\"1321\":1,\"1488\":1,\"1640\":1,\"1641\":1,\"1642\":1,\"1694\":1,\"1709\":1}}],[\"从而实现了闭包这个概念\",{\"1\":{\"1709\":1}}],[\"从而导致超出了\",{\"1\":{\"1681\":1}}],[\"从而可以对其赋值\",{\"1\":{\"1670\":1}}],[\"从而可以使用class或是id属性方便的定义内容的格式\",{\"1\":{\"136\":1}}],[\"从而把\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"从而报错\",{\"1\":{\"1403\":1}}],[\"从而获取传递给函数的每一个参数\",{\"1\":{\"1382\":1}}],[\"从而发生语错误\",{\"1\":{\"1218\":1}}],[\"从而发挥二者之长的一种继承模式\",{\"1\":{\"662\":1}}],[\"从而寄生式继承只继承了父类型的原型属性\",{\"1\":{\"659\":1}}],[\"从而弥补因重写原型而失去的默认的\",{\"1\":{\"659\":1}}],[\"从而只通过一处就可以控制所有的私有属性\",{\"1\":{\"615\":1,\"1483\":1}}],[\"从而定义自定义对象类型的属性和方法\",{\"1\":{\"590\":1}}],[\"从而让我们能够重新访问原型中的属性\",{\"1\":{\"576\":1}}],[\"从而避免恶意脚本的注入用服务端拼接后返回\",{\"1\":{\"417\":1}}],[\"从而避免出现高度塌陷问题\",{\"1\":{\"325\":1}}],[\"从而盗取用户的信息如\",{\"1\":{\"417\":1}}],[\"从而拒绝服务\",{\"1\":{\"303\":1}}],[\"从而规避网络传输中因为延时导致导致的服务器开销问题\",{\"1\":{\"303\":1}}],[\"从而提高代码的可读性\",{\"1\":{\"236\":1}}],[\"从而给每个元素之间添加一个字符的空隙\",{\"1\":{\"46\":1}}],[\"从而在该元素上应用这些属性值\",{\"1\":{\"16\":1}}],[\"><\",{\"1\":{\"1611\":2,\"1612\":2,\"1613\":1,\"1614\":6,\"1617\":1,\"1618\":1}}],[\">closure<\",{\"1\":{\"1287\":1}}],[\">global\",{\"1\":{\"1285\":1}}],[\">文字<\",{\"1\":{\"1139\":2}}],[\">打开一个新窗口<\",{\"1\":{\"1138\":1}}],[\">0\",{\"1\":{\"497\":1}}],[\">1\",{\"1\":{\"497\":1}}],[\">5\",{\"1\":{\"497\":1}}],[\">9\",{\"1\":{\"497\":2}}],[\">3\",{\"1\":{\"497\":1}}],[\">2\",{\"1\":{\"497\":1}}],[\">>=\",{\"1\":{\"1238\":3,\"1243\":1}}],[\">>>=\",{\"1\":{\"1238\":3,\"1243\":1}}],[\">>>不可对负数取整\",{\"1\":{\"1153\":1}}],[\">>>\",{\"1\":{\"1150\":2,\"1151\":1,\"1153\":2,\"1157\":1,\"1238\":1,\"1243\":1}}],[\">>\",{\"1\":{\"488\":1,\"1149\":2,\"1150\":1,\"1151\":1,\"1153\":2,\"1156\":3,\"1238\":1,\"1243\":1}}],[\">=\",{\"1\":{\"274\":1,\"288\":1,\"293\":1,\"294\":1,\"467\":1,\"482\":1,\"488\":4,\"494\":1,\"500\":2,\"506\":4,\"671\":1,\"1001\":1,\"1011\":1,\"1201\":3,\"1243\":1,\"1418\":1}}],[\">这是一段话<\",{\"1\":{\"117\":1}}],[\">\",{\"1\":{\"18\":3,\"118\":3,\"120\":2,\"121\":3,\"122\":1,\"126\":1,\"128\":1,\"130\":1,\"131\":1,\"132\":1,\"205\":4,\"349\":2,\"392\":1,\"417\":1,\"470\":2,\"476\":3,\"488\":10,\"494\":1,\"500\":1,\"503\":1,\"509\":3,\"713\":2,\"953\":5,\"999\":1,\"1033\":1,\"1158\":2,\"1201\":2,\"1243\":1,\"1284\":2,\"1285\":3,\"1286\":4,\"1287\":4,\"1419\":2,\"1436\":1,\"1438\":2,\"1576\":3,\"1582\":2,\"1611\":2,\"1612\":1,\"1613\":1,\"1614\":2,\"1709\":2}}],[\"0的二进制表示为\",{\"1\":{\"1149\":1}}],[\"0的原理\",{\"0\":{\"401\":1}}],[\"0400000000000000003n\",{\"1\":{\"929\":1}}],[\"079\",{\"1\":{\"923\":1}}],[\"070\",{\"1\":{\"923\":1}}],[\"021\",{\"1\":{\"914\":1}}],[\"0314e+2\",{\"1\":{\"910\":1}}],[\"0308010c\",{\"1\":{\"161\":1}}],[\"001\",{\"1\":{\"509\":3}}],[\"0001\",{\"1\":{\"1160\":2}}],[\"0000\",{\"1\":{\"1160\":1,\"1285\":1,\"1287\":1}}],[\"00000010\",{\"1\":{\"1146\":1,\"1147\":1,\"1148\":1}}],[\"00000011\",{\"1\":{\"1144\":1,\"1145\":2,\"1146\":1,\"1147\":1}}],[\"00000001\",{\"1\":{\"1144\":2,\"1145\":1,\"1146\":1,\"1147\":1,\"1148\":1,\"1149\":1}}],[\"00000000\",{\"1\":{\"1144\":9,\"1145\":9,\"1146\":9,\"1147\":9,\"1148\":6,\"1149\":7}}],[\"000000\",{\"1\":{\"109\":1,\"110\":1}}],[\"000\",{\"1\":{\"384\":3,\"509\":1,\"954\":2}}],[\"0提供\",{\"1\":{\"464\":1}}],[\"0响应式实现\",{\"0\":{\"402\":1}}],[\"0实现响应式基于es6的proxy\",{\"1\":{\"401\":1}}],[\"0实现mvvm\",{\"1\":{\"401\":1}}],[\"0x00\",{\"1\":{\"995\":1,\"1132\":1}}],[\"0x20000000000003n\",{\"1\":{\"929\":1}}],[\"0x1f\",{\"1\":{\"923\":1}}],[\"0xff\",{\"1\":{\"995\":1,\"1156\":2}}],[\"0xfffffffffffffffff\",{\"1\":{\"245\":1}}],[\"0xf\",{\"1\":{\"914\":1}}],[\"0x\",{\"1\":{\"913\":1,\"923\":1,\"1156\":1}}],[\"0x或0x\",{\"1\":{\"245\":1}}],[\"0o400000000000000003n\",{\"1\":{\"929\":1}}],[\"0o\",{\"1\":{\"245\":2}}],[\"0o755\",{\"1\":{\"245\":1}}],[\"0b110\",{\"1\":{\"1161\":2}}],[\"0b100\",{\"1\":{\"1161\":2}}],[\"0b100000000000000000000000000000000000000000000000000011n\",{\"1\":{\"929\":1}}],[\"0b10000000000000000000000000000000\",{\"1\":{\"245\":1}}],[\"0b001\",{\"1\":{\"1161\":1}}],[\"0b010\",{\"1\":{\"1161\":1}}],[\"0b或者0b\",{\"1\":{\"245\":1}}],[\"015\",{\"1\":{\"914\":1}}],[\"0123456789abcdef\",{\"1\":{\"245\":1}}],[\"01234567\",{\"1\":{\"245\":1}}],[\"01\",{\"1\":{\"215\":1,\"388\":1,\"509\":2}}],[\"0~1\",{\"1\":{\"108\":1}}],[\"0\",{\"0\":{\"400\":2,\"401\":1,\"403\":1},\"1\":{\"17\":16,\"18\":4,\"23\":2,\"24\":1,\"46\":1,\"52\":1,\"54\":1,\"55\":1,\"59\":7,\"82\":2,\"88\":1,\"89\":1,\"108\":4,\"110\":9,\"215\":4,\"220\":1,\"245\":6,\"274\":1,\"341\":3,\"349\":2,\"350\":1,\"352\":6,\"354\":1,\"355\":2,\"381\":2,\"401\":2,\"403\":1,\"460\":2,\"467\":3,\"470\":3,\"473\":2,\"476\":27,\"479\":2,\"482\":2,\"485\":7,\"488\":24,\"491\":3,\"494\":2,\"497\":5,\"500\":10,\"503\":3,\"506\":13,\"509\":31,\"515\":5,\"518\":2,\"521\":1,\"524\":2,\"540\":3,\"547\":1,\"615\":1,\"625\":3,\"659\":4,\"664\":1,\"672\":1,\"684\":2,\"701\":1,\"714\":2,\"715\":2,\"733\":1,\"734\":3,\"742\":1,\"762\":2,\"763\":6,\"794\":1,\"795\":2,\"807\":2,\"819\":2,\"853\":1,\"854\":2,\"859\":2,\"880\":1,\"881\":3,\"887\":3,\"899\":3,\"910\":1,\"913\":1,\"923\":3,\"924\":3,\"927\":1,\"944\":7,\"945\":2,\"948\":2,\"951\":11,\"954\":12,\"955\":3,\"962\":2,\"971\":4,\"977\":1,\"995\":1,\"1001\":1,\"1003\":2,\"1004\":5,\"1010\":1,\"1011\":1,\"1013\":1,\"1020\":1,\"1027\":2,\"1034\":2,\"1060\":2,\"1066\":1,\"1067\":2,\"1087\":1,\"1094\":2,\"1109\":1,\"1132\":2,\"1135\":4,\"1137\":1,\"1142\":1,\"1144\":2,\"1146\":1,\"1147\":2,\"1148\":1,\"1149\":1,\"1150\":3,\"1151\":5,\"1153\":4,\"1157\":1,\"1158\":2,\"1159\":3,\"1160\":5,\"1161\":4,\"1178\":3,\"1183\":1,\"1185\":1,\"1203\":2,\"1213\":1,\"1217\":2,\"1218\":3,\"1221\":11,\"1243\":1,\"1246\":2,\"1248\":1,\"1253\":1,\"1254\":1,\"1255\":3,\"1256\":3,\"1264\":1,\"1273\":1,\"1274\":2,\"1281\":3,\"1282\":3,\"1285\":1,\"1293\":1,\"1319\":2,\"1349\":1,\"1375\":3,\"1376\":2,\"1382\":6,\"1383\":11,\"1390\":2,\"1393\":1,\"1395\":1,\"1404\":13,\"1406\":4,\"1413\":2,\"1417\":2,\"1419\":2,\"1457\":3,\"1496\":1,\"1497\":1,\"1502\":2,\"1504\":1,\"1511\":1,\"1533\":1,\"1537\":2,\"1543\":1,\"1564\":1,\"1565\":1,\"1570\":1,\"1572\":3,\"1620\":1,\"1682\":1,\"1691\":1}}],[\"|y\",{\"1\":{\"1238\":1}}],[\"|=\",{\"1\":{\"1238\":2,\"1243\":1}}],[\"|来取整\",{\"1\":{\"1153\":1}}],[\"|content\",{\"1\":{\"106\":1}}],[\"|padding\",{\"1\":{\"106\":1}}],[\"|border\",{\"1\":{\"106\":1}}],[\"|属性值|说明|\",{\"1\":{\"106\":1}}],[\"||=\",{\"0\":{\"385\":1},\"1\":{\"385\":2}}],[\"||\",{\"1\":{\"60\":2,\"71\":3,\"325\":8,\"385\":1,\"392\":1,\"393\":1,\"402\":1,\"470\":1,\"473\":1,\"476\":1,\"500\":1,\"506\":2,\"509\":2,\"1116\":1,\"1233\":1,\"1243\":1,\"1252\":1,\"1254\":15,\"1256\":2,\"1382\":4,\"1398\":2,\"1418\":1,\"1587\":2}}],[\"|\",{\"1\":{\"17\":4,\"38\":5,\"40\":2,\"55\":6,\"59\":13,\"61\":4,\"63\":1,\"65\":3,\"75\":8,\"83\":2,\"98\":1,\"106\":4,\"223\":1,\"829\":1,\"1145\":2,\"1151\":1,\"1153\":1,\"1156\":3,\"1238\":1,\"1243\":1}}],[\"iife\",{\"0\":{\"1613\":1,\"1614\":1,\"1686\":1},\"1\":{\"1613\":7,\"1614\":3,\"1686\":4,\"1692\":2}}],[\"iis\",{\"1\":{\"153\":1}}],[\"iis等\",{\"1\":{\"153\":1}}],[\"illegal\",{\"1\":{\"1033\":1}}],[\"i++和j\",{\"1\":{\"1248\":1}}],[\"i++\",{\"1\":{\"341\":2,\"349\":1,\"476\":1,\"479\":1,\"482\":2,\"488\":6,\"494\":1,\"515\":1,\"521\":1,\"962\":1,\"971\":2,\"1003\":1,\"1010\":1,\"1013\":1,\"1027\":1,\"1060\":1,\"1066\":1,\"1194\":1,\"1248\":1,\"1349\":1,\"1413\":1,\"1502\":2,\"1504\":1,\"1682\":1,\"1691\":1}}],[\"istype\",{\"1\":{\"1504\":8}}],[\"isregistered\",{\"1\":{\"1449\":2}}],[\"isresolve\",{\"1\":{\"380\":2,\"383\":4}}],[\"isbigenough\",{\"1\":{\"671\":2}}],[\"isbelowthreshold\",{\"1\":{\"351\":2}}],[\"isfrozen\",{\"0\":{\"772\":1},\"1\":{\"540\":2,\"772\":1,\"773\":1,\"776\":2,\"803\":1}}],[\"isfinite\",{\"0\":{\"897\":1},\"1\":{\"251\":1,\"897\":1,\"898\":2,\"899\":10}}],[\"isstring\",{\"1\":{\"1504\":3}}],[\"issealed\",{\"0\":{\"784\":1},\"1\":{\"539\":4,\"784\":1,\"785\":1,\"787\":2,\"803\":1,\"825\":1}}],[\"issameside\",{\"1\":{\"274\":1,\"275\":3,\"276\":3}}],[\"isextensible\",{\"0\":{\"766\":1},\"1\":{\"538\":2,\"766\":1,\"767\":1,\"769\":2,\"803\":1,\"813\":2,\"825\":1}}],[\"isvalid\",{\"1\":{\"512\":1}}],[\"isarray\",{\"1\":{\"402\":1,\"938\":2,\"1130\":1,\"1504\":4}}],[\"is\",{\"0\":{\"760\":1},\"1\":{\"344\":2,\"350\":1,\"392\":2,\"393\":2,\"394\":2,\"538\":1,\"539\":2,\"540\":3,\"560\":2,\"607\":1,\"629\":1,\"668\":1,\"760\":1,\"761\":1,\"762\":1,\"763\":9,\"796\":1,\"803\":1,\"819\":2,\"917\":3,\"919\":1,\"928\":3,\"929\":2,\"1027\":2,\"1042\":3,\"1052\":2,\"1053\":2,\"1054\":5,\"1066\":1,\"1067\":1,\"1069\":1,\"1077\":3,\"1218\":1,\"1234\":3,\"1319\":1,\"1334\":1,\"1335\":1,\"1407\":4,\"1428\":1,\"1489\":1,\"1490\":2,\"1491\":3,\"1504\":1,\"1578\":1,\"1613\":1,\"1631\":1,\"1692\":1,\"1694\":1,\"1698\":1,\"1700\":1}}],[\"isnumber\",{\"1\":{\"1504\":2}}],[\"isn\",{\"1\":{\"301\":1,\"796\":1}}],[\"isnan\",{\"0\":{\"902\":1},\"1\":{\"251\":1,\"859\":1,\"861\":10,\"902\":1,\"903\":4,\"905\":13}}],[\"isimmediate\",{\"1\":{\"294\":4}}],[\"ispos\",{\"1\":{\"1157\":3}}],[\"isprototypeof\",{\"0\":{\"779\":1},\"1\":{\"779\":1,\"780\":1,\"781\":4,\"806\":1}}],[\"isprime\",{\"1\":{\"349\":2}}],[\"isp\",{\"1\":{\"150\":2,\"464\":1}}],[\"i386\",{\"1\":{\"215\":2}}],[\"ivh\",{\"1\":{\"215\":1}}],[\"i\",{\"1\":{\"205\":1,\"215\":2,\"341\":6,\"349\":3,\"457\":1,\"458\":1,\"460\":1,\"476\":13,\"479\":2,\"482\":25,\"485\":3,\"488\":44,\"494\":6,\"506\":5,\"509\":12,\"512\":4,\"515\":7,\"518\":2,\"521\":6,\"570\":1,\"571\":1,\"955\":1,\"962\":3,\"971\":7,\"977\":4,\"1003\":2,\"1004\":14,\"1010\":3,\"1011\":4,\"1012\":6,\"1013\":3,\"1027\":6,\"1042\":1,\"1047\":1,\"1060\":6,\"1066\":3,\"1248\":3,\"1312\":1,\"1349\":4,\"1413\":5,\"1417\":8,\"1419\":6,\"1490\":2,\"1491\":1,\"1502\":6,\"1504\":1,\"1533\":1,\"1534\":4,\"1682\":6,\"1685\":1,\"1691\":5}}],[\"ipc\",{\"1\":{\"422\":1}}],[\"ipaddr=192\",{\"1\":{\"220\":1}}],[\"iptables\",{\"1\":{\"217\":6}}],[\"ip协议查询mac地址\",{\"1\":{\"152\":1}}],[\"ip\",{\"0\":{\"318\":1},\"1\":{\"152\":2,\"153\":1,\"215\":1,\"223\":1,\"225\":1,\"298\":1,\"303\":1,\"309\":2,\"318\":5,\"464\":1}}],[\"ico\",{\"1\":{\"130\":2}}],[\"icon\",{\"1\":{\"130\":3,\"1621\":1}}],[\"iconfont\",{\"1\":{\"79\":2}}],[\"iframe\",{\"1\":{\"935\":1}}],[\"ifcfg\",{\"1\":{\"220\":1}}],[\"ifconfig\",{\"1\":{\"191\":2,\"219\":1}}],[\"if\",{\"0\":{\"1017\":1},\"1\":{\"79\":2,\"249\":1,\"275\":1,\"276\":1,\"288\":3,\"290\":3,\"292\":1,\"293\":1,\"294\":2,\"349\":1,\"381\":2,\"388\":1,\"392\":1,\"393\":1,\"394\":1,\"402\":3,\"403\":2,\"408\":1,\"430\":2,\"467\":1,\"470\":2,\"473\":2,\"476\":6,\"479\":3,\"482\":5,\"485\":1,\"488\":9,\"491\":2,\"494\":2,\"497\":2,\"500\":3,\"503\":2,\"509\":5,\"512\":3,\"515\":1,\"521\":2,\"540\":2,\"560\":2,\"562\":2,\"570\":1,\"587\":2,\"737\":1,\"830\":1,\"849\":1,\"861\":2,\"962\":1,\"971\":2,\"986\":1,\"1000\":1,\"1001\":1,\"1003\":1,\"1004\":2,\"1017\":5,\"1018\":2,\"1019\":3,\"1020\":4,\"1027\":1,\"1033\":1,\"1048\":1,\"1069\":3,\"1116\":3,\"1197\":6,\"1209\":1,\"1217\":1,\"1253\":3,\"1288\":1,\"1319\":1,\"1350\":1,\"1385\":4,\"1390\":2,\"1417\":3,\"1433\":1,\"1438\":3,\"1441\":1,\"1446\":1,\"1449\":2,\"1456\":1,\"1458\":2,\"1466\":3,\"1469\":4,\"1470\":2,\"1502\":2,\"1581\":1,\"1587\":1,\"1593\":3,\"1596\":2,\"1634\":2,\"1692\":2}}],[\"iterableobj\",{\"1\":{\"1174\":1,\"1175\":1,\"1176\":1}}],[\"iterable\",{\"1\":{\"990\":1,\"991\":1,\"993\":4,\"994\":2,\"995\":2,\"996\":3,\"997\":2,\"1003\":2,\"1004\":15,\"1185\":1,\"1186\":1}}],[\"iterator\",{\"0\":{\"1185\":1},\"1\":{\"388\":1,\"606\":1,\"711\":1,\"999\":1,\"1000\":1,\"1003\":1,\"1109\":1,\"1127\":1,\"1185\":4,\"1186\":3,\"1234\":2,\"1338\":1}}],[\"items属性\",{\"1\":{\"332\":2}}],[\"items属性定义项目在交叉轴上如何对齐\",{\"1\":{\"332\":1}}],[\"items\",{\"1\":{\"332\":1,\"1355\":2,\"1393\":2}}],[\"item\",{\"1\":{\"44\":1,\"329\":2,\"332\":1,\"347\":2,\"381\":2,\"531\":4,\"1355\":2,\"1356\":5,\"1393\":3,\"1580\":2}}],[\"italic\",{\"1\":{\"74\":1}}],[\"ie11\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"ie8\",{\"1\":{\"1137\":2}}],[\"ie浏览器\",{\"1\":{\"455\":1}}],[\"ie浏览器内核\",{\"1\":{\"436\":1}}],[\"ie\",{\"1\":{\"35\":1,\"143\":4,\"436\":1,\"1432\":1,\"1549\":1}}],[\"immediately\",{\"1\":{\"1613\":1,\"1686\":1}}],[\"immediate\",{\"1\":{\"290\":2,\"460\":2,\"1446\":2}}],[\"implements\",{\"1\":{\"250\":1}}],[\"imports\",{\"1\":{\"1625\":1}}],[\"import\",{\"0\":{\"1624\":1},\"1\":{\"19\":3,\"249\":1,\"438\":1,\"1436\":2,\"1593\":19,\"1595\":3,\"1596\":3,\"1597\":2,\"1599\":2,\"1600\":1,\"1601\":1,\"1602\":3,\"1603\":6,\"1619\":4,\"1624\":1,\"1625\":3,\"1626\":3,\"1627\":2,\"1628\":1,\"1629\":1,\"1631\":3,\"1632\":2,\"1633\":5,\"1634\":5,\"1635\":7,\"1636\":3,\"1639\":1,\"1641\":1,\"1644\":1,\"1646\":3,\"1652\":2,\"1655\":1,\"1658\":3,\"1661\":3}}],[\"important具有最高优先级\",{\"1\":{\"337\":1}}],[\"important\",{\"0\":{\"19\":1},\"1\":{\"17\":1,\"19\":4}}],[\"img\",{\"1\":{\"130\":1}}],[\"image各有不同的解析方式\",{\"1\":{\"155\":1}}],[\"images\",{\"1\":{\"100\":2}}],[\"image>\",{\"1\":{\"98\":1}}],[\"image\",{\"0\":{\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"100\":1},\"1\":{\"30\":2,\"62\":7,\"63\":3,\"64\":2,\"65\":2,\"66\":2,\"67\":1,\"100\":4,\"101\":1,\"130\":1}}],[\"invocation\",{\"1\":{\"1509\":1,\"1514\":1,\"1521\":1}}],[\"invoked\",{\"1\":{\"1613\":1,\"1686\":1}}],[\"invoke\",{\"1\":{\"1436\":1}}],[\"invalidmonthno\",{\"1\":{\"1048\":1}}],[\"invalid\",{\"1\":{\"533\":1,\"1165\":1}}],[\"info\",{\"1\":{\"1334\":1}}],[\"infinity\",{\"0\":{\"852\":1},\"1\":{\"251\":1,\"374\":1,\"852\":2,\"853\":9,\"854\":7,\"897\":2,\"899\":2,\"925\":4,\"945\":1,\"954\":5,\"1115\":1,\"1124\":1,\"1207\":1,\"1255\":1}}],[\"input\",{\"1\":{\"1329\":1,\"1449\":4}}],[\"innerhtml\",{\"1\":{\"1288\":1,\"1502\":2}}],[\"inner\",{\"1\":{\"1287\":1,\"1375\":1,\"1407\":2}}],[\"inga\",{\"1\":{\"1166\":1}}],[\"inum2\",{\"1\":{\"1033\":4}}],[\"inum1\",{\"1\":{\"1033\":4}}],[\"inifinity\",{\"1\":{\"954\":1}}],[\"init脚本\",{\"1\":{\"215\":1}}],[\"init\",{\"1\":{\"165\":1,\"215\":1,\"1375\":2}}],[\"initializer\",{\"1\":{\"1693\":1}}],[\"initialization\",{\"1\":{\"341\":1,\"1008\":1,\"1009\":1}}],[\"initialvalue\",{\"1\":{\"352\":2}}],[\"initial\",{\"1\":{\"29\":1,\"36\":2,\"55\":1,\"59\":1,\"61\":1,\"301\":1,\"329\":1}}],[\"in循环\",{\"1\":{\"388\":1}}],[\"in会遍历数组所有的可枚举属性\",{\"1\":{\"388\":1}}],[\"in更适合遍历对象\",{\"1\":{\"388\":1}}],[\"in遍历的是数组的索引\",{\"1\":{\"388\":1}}],[\"incoming\",{\"1\":{\"1534\":1}}],[\"includes能找到nan\",{\"1\":{\"364\":1}}],[\"includes\",{\"0\":{\"364\":1},\"1\":{\"364\":1,\"403\":1,\"859\":2}}],[\"inches\",{\"1\":{\"25\":1}}],[\"integer\",{\"1\":{\"1382\":1}}],[\"interesting\",{\"1\":{\"1651\":1}}],[\"interpreter\",{\"1\":{\"1550\":1}}],[\"interval\",{\"1\":{\"1438\":2,\"1449\":3}}],[\"intern\",{\"1\":{\"714\":2,\"715\":2}}],[\"internet\",{\"1\":{\"144\":1,\"1550\":1}}],[\"interface\",{\"1\":{\"668\":1,\"730\":1,\"746\":1,\"791\":1,\"829\":1,\"1620\":1,\"1621\":1}}],[\"interfacelong\",{\"1\":{\"250\":1}}],[\"interactive\",{\"1\":{\"464\":1}}],[\"inter\",{\"1\":{\"85\":3}}],[\"into\",{\"1\":{\"1376\":4}}],[\"int\",{\"1\":{\"250\":1,\"1194\":1}}],[\"inside\",{\"1\":{\"1077\":2}}],[\"instrumentation\",{\"1\":{\"1287\":1}}],[\"inst\",{\"1\":{\"604\":1}}],[\"instead\",{\"1\":{\"500\":1}}],[\"instance\",{\"1\":{\"576\":1,\"613\":1,\"659\":2,\"1243\":1,\"1581\":3}}],[\"instanceof\",{\"0\":{\"935\":1,\"1114\":1},\"1\":{\"249\":1,\"394\":2,\"571\":1,\"572\":1,\"578\":1,\"653\":7,\"684\":2,\"933\":1,\"935\":9,\"1114\":2,\"1115\":12,\"1243\":1,\"1476\":2,\"1561\":1}}],[\"install\",{\"1\":{\"215\":1}}],[\"insert\",{\"1\":{\"205\":1,\"1376\":4}}],[\"inset\",{\"1\":{\"59\":2}}],[\"indent\",{\"0\":{\"86\":1}}],[\"indexinenum\",{\"1\":{\"737\":2}}],[\"index索引为字符串型数字\",{\"1\":{\"388\":1}}],[\"indexof找不到nan\",{\"1\":{\"364\":1}}],[\"indexof\",{\"1\":{\"364\":1,\"737\":1,\"859\":2,\"1160\":2,\"1376\":2,\"1418\":1}}],[\"index失效情况\",{\"1\":{\"40\":1}}],[\"index\",{\"0\":{\"39\":1},\"1\":{\"35\":1,\"39\":12,\"40\":2,\"215\":2,\"347\":2,\"348\":1,\"388\":8,\"488\":6,\"668\":4,\"1382\":2,\"1621\":1,\"1661\":3}}],[\"indieflower\",{\"1\":{\"79\":1}}],[\"inline\",{\"1\":{\"36\":2,\"40\":1,\"44\":2,\"45\":5,\"46\":3,\"48\":1,\"50\":1,\"54\":1,\"93\":3,\"94\":2,\"325\":2,\"329\":19}}],[\"inheritedmethod\",{\"1\":{\"736\":1}}],[\"inheritance\",{\"1\":{\"656\":1,\"662\":1}}],[\"inherit\",{\"1\":{\"29\":1,\"55\":1,\"59\":1,\"61\":1,\"81\":1,\"329\":1,\"659\":3}}],[\"in\",{\"0\":{\"356\":1,\"388\":1,\"980\":1,\"1004\":1,\"1105\":1},\"1\":{\"25\":1,\"249\":1,\"329\":1,\"356\":1,\"388\":3,\"402\":1,\"500\":1,\"528\":1,\"531\":4,\"564\":2,\"565\":4,\"577\":6,\"700\":2,\"731\":1,\"754\":1,\"969\":1,\"980\":1,\"981\":1,\"983\":7,\"985\":1,\"986\":2,\"1004\":7,\"1068\":1,\"1105\":1,\"1106\":1,\"1109\":12,\"1110\":4,\"1111\":2,\"1132\":1,\"1165\":1,\"1243\":2,\"1381\":1,\"1386\":2,\"1401\":1,\"1411\":1,\"1441\":1,\"1486\":1,\"1693\":1}}],[\"id=\",{\"1\":{\"1286\":1}}],[\"idx\",{\"1\":{\"734\":1}}],[\"idle\",{\"1\":{\"458\":1,\"1534\":2}}],[\"id选择器具有第三高的优先级\",{\"1\":{\"337\":1}}],[\"id选择器\",{\"1\":{\"336\":1}}],[\"identifiler\",{\"1\":{\"1087\":1}}],[\"identifier\",{\"1\":{\"235\":1,\"1024\":1,\"1027\":1,\"1066\":1,\"1076\":1,\"1400\":2}}],[\"ideograph\",{\"1\":{\"85\":1}}],[\"id\",{\"1\":{\"12\":3,\"17\":2,\"235\":2,\"343\":2,\"1232\":3,\"1375\":15,\"1516\":4,\"1616\":1}}],[\"用伪代码与别人进行概括时\",{\"1\":{\"1670\":1}}],[\"用的比较多的是\",{\"1\":{\"1618\":1}}],[\"用一句话来说明就是\",{\"1\":{\"1616\":1}}],[\"用时\",{\"1\":{\"1505\":1}}],[\"用回调函数的形式传入\",{\"1\":{\"1502\":1}}],[\"用大括号\",{\"1\":{\"1326\":1}}],[\"用逗号运算符可以在一条语句中执行多个运算\",{\"1\":{\"1246\":1}}],[\"用途\",{\"0\":{\"1228\":1}}],[\"用到默认值\",{\"1\":{\"1217\":1}}],[\"用加等于号表示\",{\"1\":{\"1169\":1}}],[\"用法\",{\"0\":{\"1247\":1},\"1\":{\"1151\":1,\"1616\":1,\"1617\":1,\"1618\":1,\"1619\":1,\"1693\":1}}],[\"用二进制表示为\",{\"1\":{\"1142\":1}}],[\"用\",{\"1\":{\"976\":1,\"1017\":1,\"1065\":1,\"1169\":1,\"1485\":1,\"1572\":1}}],[\"用作标签的\",{\"1\":{\"1027\":1}}],[\"用作标识符\",{\"1\":{\"246\":1}}],[\"用作请求地址\",{\"1\":{\"880\":1,\"886\":1}}],[\"用作原型的对象\",{\"1\":{\"805\":1}}],[\"用以下的图示可以清楚的理解队列的原理\",{\"1\":{\"1262\":1}}],[\"用以判断是否继续执行循环体\",{\"1\":{\"969\":1}}],[\"用以到达松耦合的目的\",{\"1\":{\"584\":1}}],[\"用以区别伪类选择符\",{\"1\":{\"16\":1}}],[\"用在\",{\"1\":{\"144\":1}}],[\"用在旧版本\",{\"1\":{\"144\":1}}],[\"用它来禁用表单输入元素\",{\"1\":{\"118\":1}}],[\"用百分比指定背景图像大小\",{\"1\":{\"104\":1}}],[\"用百分比指定字符间隔\",{\"1\":{\"89\":1}}],[\"用百分比指定文本的缩进\",{\"1\":{\"86\":1}}],[\"用百分比来定义高度\",{\"1\":{\"47\":1}}],[\"用长度值指定背景图像大小\",{\"1\":{\"104\":1}}],[\"用长度值指定字符间隔\",{\"1\":{\"88\":1,\"89\":1}}],[\"用长度值指定文本的缩进\",{\"1\":{\"86\":1}}],[\"用长度值来定义高度\",{\"1\":{\"47\":1}}],[\"用户入口\",{\"1\":{\"1621\":1}}],[\"用户管理\",{\"1\":{\"1621\":1}}],[\"用户代理必须使用\",{\"1\":{\"1532\":1}}],[\"用户交互\",{\"1\":{\"1532\":1}}],[\"用户定义的普通属性默认是可枚举的\",{\"1\":{\"531\":1}}],[\"用户定义一个元素在文档中的层叠顺序\",{\"1\":{\"39\":1}}],[\"用户数据报协议\",{\"1\":{\"309\":1}}],[\"用户数据协议\",{\"1\":{\"297\":1}}],[\"用户在短时间内多次点击登陆\",{\"1\":{\"287\":1}}],[\"用户身份编辑\",{\"1\":{\"215\":1}}],[\"用户名\",{\"1\":{\"187\":1}}],[\"用户相关设定\",{\"1\":{\"186\":1}}],[\"用户可能看不到不同值之间的差异\",{\"1\":{\"75\":1}}],[\"用数字表示文本字体粗细\",{\"1\":{\"75\":1}}],[\"用重复的径向渐变创建图像\",{\"1\":{\"30\":1}}],[\"用重复的线形渐变创建图像\",{\"1\":{\"30\":1}}],[\"用径向渐变创建图像\",{\"1\":{\"30\":1}}],[\"用线性渐变创建图像\",{\"1\":{\"30\":1}}],[\"用于暴露的函数\",{\"1\":{\"1613\":2,\"1614\":2}}],[\"用于管理执行上下文\",{\"1\":{\"1557\":1}}],[\"用于保存尝试分配给\",{\"1\":{\"1321\":1}}],[\"用于赋值\",{\"0\":{\"1249\":1}}],[\"用于声明多个变量\",{\"0\":{\"1248\":1}}],[\"用于生成数组\",{\"1\":{\"1183\":1}}],[\"用于解构赋值\",{\"1\":{\"1172\":1}}],[\"用于数组字面量\",{\"1\":{\"1172\":1}}],[\"用于函数调用\",{\"1\":{\"1172\":1}}],[\"用于把两个字符串值相连接\",{\"1\":{\"1169\":1}}],[\"用于组合零个或多个语句\",{\"1\":{\"1073\":1}}],[\"用于当整数值大于\",{\"1\":{\"929\":1}}],[\"用于当块容器\",{\"1\":{\"87\":1}}],[\"用于派生对象为了特定语言环境的目的而重载使用\",{\"1\":{\"806\":1}}],[\"用于测试一个对象是否存在于另一个对象的原型链上\",{\"1\":{\"806\":2}}],[\"用于指示对象自身属性中是否具有指定的属性\",{\"1\":{\"806\":1}}],[\"用于指定当前项位于左端边缘\",{\"1\":{\"102\":1}}],[\"用于指定当前项位于底端边缘\",{\"1\":{\"102\":1}}],[\"用于指定当前项位于右端边缘\",{\"1\":{\"102\":1}}],[\"用于指定当前项位于顶端边缘\",{\"1\":{\"102\":1}}],[\"用于指定背景颜色\",{\"1\":{\"99\":1}}],[\"用于指定元素是否保留文本间的空格\",{\"1\":{\"92\":1}}],[\"用于指定元素的文本是否为斜体\",{\"1\":{\"74\":1}}],[\"用于指定单词之间的额外间隙\",{\"1\":{\"89\":1}}],[\"用于指定字符之间的额外间隙\",{\"1\":{\"88\":1}}],[\"用于指定一个元素在文档中的定位方式\",{\"1\":{\"35\":1}}],[\"用于指定图像或着图像替代\",{\"1\":{\"30\":1}}],[\"用于获取函数的多余参数\",{\"1\":{\"1393\":1}}],[\"用于获取\",{\"1\":{\"725\":1,\"730\":1,\"741\":1}}],[\"用于枚举的对象\",{\"1\":{\"699\":1}}],[\"用于判定数组成员的回调函数\",{\"1\":{\"668\":1}}],[\"用于实现基于原型的继承与属性的共享\",{\"1\":{\"648\":1}}],[\"用于关闭客户端到服务器端的数据传送\",{\"1\":{\"304\":1}}],[\"用于需要执行多次且触发相对平滑的情况\",{\"1\":{\"291\":1}}],[\"用于高频触发且有一定停顿的情况\",{\"1\":{\"287\":1}}],[\"用于创建大多数原生对象值\",{\"1\":{\"546\":1}}],[\"用于创建新的提交\",{\"1\":{\"178\":1}}],[\"用于创建一个新的提交\",{\"1\":{\"177\":1}}],[\"用于修改提交历史的顺序\",{\"1\":{\"178\":1}}],[\"用于移动\",{\"1\":{\"176\":1,\"178\":1}}],[\"用于将一个分支的提交移到另一个分支上\",{\"1\":{\"175\":1}}],[\"用于确保互联网上的网页和应用程序在不同的平台和设备上能够一致地工作和展示\",{\"1\":{\"139\":1}}],[\"用于表示源代码的字符串\",{\"1\":{\"806\":1}}],[\"用于表示整个\",{\"1\":{\"126\":1}}],[\"用于表示颜色的关键字或者数值规则\",{\"1\":{\"28\":1}}],[\"用于规定背景图片\",{\"1\":{\"101\":1}}],[\"用于设置或检索当内容超过指定容器的边界时是否断行\",{\"1\":{\"90\":1}}],[\"用于设置或检索对象外的线条轮廓\",{\"1\":{\"60\":1}}],[\"用于设置元素所有四条边的内边距区域\",{\"1\":{\"57\":1}}],[\"用于定义\",{\"1\":{\"628\":1}}],[\"用于定义块内文本内容的缩进\",{\"1\":{\"86\":1}}],[\"用于定义使用什么方式实现文本内容两端对齐\",{\"1\":{\"85\":1}}],[\"用于定义行内元素在行框内的垂直对齐方式\",{\"1\":{\"82\":1}}],[\"用于定义元素内容文本的字间与字符间的换行行为\",{\"1\":{\"91\":1}}],[\"用于定义元素内容的水平对齐方式\",{\"1\":{\"81\":1}}],[\"用于定义元素文本装饰\",{\"1\":{\"83\":1}}],[\"用于定义元素文本字体的粗细\",{\"1\":{\"75\":1}}],[\"用于定义元素文本的字体名称序列\",{\"1\":{\"72\":1}}],[\"用于定义元素的文字是否横向拉伸变形\",{\"1\":{\"77\":1}}],[\"用于定义元素的文本如何转换大小写\",{\"1\":{\"84\":1}}],[\"用于定义元素的文本是否为小型的大写字母\",{\"1\":{\"76\":1}}],[\"用于定义元素的文本特性\",{\"1\":{\"71\":1}}],[\"用于定义元素的字体大小\",{\"1\":{\"73\":1}}],[\"用于定义元素的阴影\",{\"1\":{\"59\":1}}],[\"用于定义边界图像\",{\"1\":{\"66\":1}}],[\"用于定义边框图片可超出边框的大小\",{\"1\":{\"67\":1}}],[\"用于定义边框图片\",{\"1\":{\"64\":1}}],[\"用于定义图片如何填充边框\",{\"1\":{\"65\":1}}],[\"用于定义引用边框图片后的元素切割区域的边界\",{\"1\":{\"63\":1}}],[\"用于定义文档如何计算一个元素的总宽度和总高度\",{\"1\":{\"58\":1}}],[\"用颜色名称来指定颜色\",{\"1\":{\"28\":1}}],[\"用来区分于普通函数\",{\"1\":{\"1474\":1}}],[\"用来保存操作数原来的值\",{\"1\":{\"1194\":1}}],[\"用来保存被抛出声明指定的值\",{\"1\":{\"1055\":1}}],[\"用来计数的循环变量泄露为全局变量\",{\"1\":{\"1074\":1}}],[\"用来抛出一个用户自定义的异常\",{\"1\":{\"1045\":1}}],[\"用来表示表示大于\",{\"1\":{\"376\":1}}],[\"用来表示一个\",{\"1\":{\"30\":1}}],[\"用来获取对象的键值对集合\",{\"1\":{\"368\":1}}],[\"用来为盒状模型提供最大的灵活性\",{\"1\":{\"332\":1}}],[\"用来临时存放双方通信的数据\",{\"1\":{\"298\":1}}],[\"用来撤销之前的提交\",{\"1\":{\"177\":1}}],[\"用来标记页面内容的标题\",{\"1\":{\"126\":1}}],[\"用来和\",{\"1\":{\"16\":2}}],[\"用来指定添加样式元素的属性\",{\"1\":{\"5\":1}}],[\"前端是处于系统软件的上游\",{\"1\":{\"1621\":1}}],[\"前端工程师在整个系统工程中的地位太低了\",{\"1\":{\"1621\":1}}],[\"前端开发现在不仅仅只是别人说的\",{\"1\":{\"1621\":1}}],[\"前端这种\",{\"1\":{\"1621\":1}}],[\"前端技术\",{\"0\":{\"1716\":1},\"2\":{\"8\":1,\"20\":1,\"32\":1,\"41\":1,\"68\":1,\"95\":1,\"112\":1,\"123\":1,\"133\":1,\"137\":1,\"140\":1,\"145\":1,\"159\":1,\"162\":1,\"231\":1,\"254\":1,\"267\":1,\"278\":1,\"281\":1,\"284\":1,\"295\":1,\"314\":1,\"319\":1,\"322\":1,\"327\":1,\"330\":1,\"333\":1,\"338\":1,\"360\":1,\"386\":1,\"389\":1,\"395\":1,\"398\":1,\"404\":1,\"409\":1,\"414\":1,\"419\":1,\"426\":1,\"433\":1,\"440\":1,\"446\":1,\"451\":1,\"462\":1,\"465\":1,\"468\":1,\"471\":1,\"474\":1,\"477\":1,\"480\":1,\"483\":1,\"486\":1,\"489\":1,\"492\":1,\"495\":1,\"498\":1,\"501\":1,\"504\":1,\"507\":1,\"510\":1,\"513\":1,\"516\":1,\"519\":1,\"522\":1,\"525\":1,\"535\":1,\"542\":1,\"553\":1,\"566\":1,\"573\":1,\"582\":1,\"588\":1,\"594\":1,\"608\":1,\"616\":1,\"626\":1,\"633\":1,\"638\":1,\"642\":1,\"654\":1,\"657\":1,\"660\":1,\"665\":1,\"674\":1,\"680\":1,\"685\":1,\"690\":1,\"696\":1,\"702\":1,\"707\":1,\"717\":1,\"722\":1,\"727\":1,\"738\":1,\"743\":1,\"750\":1,\"758\":1,\"764\":1,\"770\":1,\"777\":1,\"782\":1,\"788\":1,\"797\":1,\"808\":1,\"814\":1,\"821\":1,\"826\":1,\"831\":1,\"839\":1,\"844\":1,\"850\":1,\"855\":1,\"862\":1,\"866\":1,\"871\":1,\"876\":1,\"882\":1,\"888\":1,\"895\":1,\"900\":1,\"906\":1,\"911\":1,\"915\":1,\"931\":1,\"939\":1,\"956\":1,\"964\":1,\"972\":1,\"978\":1,\"987\":1,\"1005\":1,\"1015\":1,\"1021\":1,\"1028\":1,\"1037\":1,\"1043\":1,\"1049\":1,\"1056\":1,\"1061\":1,\"1071\":1,\"1078\":1,\"1081\":1,\"1084\":1,\"1088\":1,\"1095\":1,\"1103\":1,\"1112\":1,\"1117\":1,\"1133\":1,\"1140\":1,\"1162\":1,\"1167\":1,\"1170\":1,\"1187\":1,\"1195\":1,\"1198\":1,\"1205\":1,\"1210\":1,\"1236\":1,\"1239\":1,\"1244\":1,\"1250\":1,\"1257\":1,\"1269\":1,\"1277\":1,\"1290\":1,\"1297\":1,\"1313\":1,\"1324\":1,\"1336\":1,\"1359\":1,\"1377\":1,\"1391\":1,\"1396\":1,\"1409\":1,\"1414\":1,\"1420\":1,\"1429\":1,\"1439\":1,\"1442\":1,\"1450\":1,\"1463\":1,\"1471\":1,\"1478\":1,\"1494\":1,\"1498\":1,\"1507\":1,\"1512\":1,\"1519\":1,\"1527\":1,\"1530\":1,\"1535\":1,\"1544\":1,\"1553\":1,\"1558\":1,\"1567\":1,\"1573\":1,\"1591\":1,\"1604\":1,\"1622\":1,\"1637\":1,\"1647\":1,\"1656\":1,\"1659\":1,\"1662\":1,\"1671\":1,\"1678\":1,\"1687\":1,\"1696\":1,\"1705\":1,\"1712\":1}}],[\"前者的\",{\"1\":{\"1375\":1}}],[\"前者不缩小\",{\"1\":{\"332\":1}}],[\"前置递减\",{\"1\":{\"1243\":1}}],[\"前置递增\",{\"1\":{\"1243\":1}}],[\"前置操作返回加\",{\"1\":{\"1194\":1}}],[\"前会创建一个副本\",{\"1\":{\"1194\":1}}],[\"前自减还是后自增\",{\"1\":{\"1194\":1}}],[\"前自减与后自增\",{\"1\":{\"1194\":1}}],[\"前自减\",{\"0\":{\"1191\":1},\"1\":{\"1191\":1,\"1194\":1}}],[\"前自增\",{\"0\":{\"1190\":1},\"1\":{\"1189\":1,\"1190\":1,\"1194\":2}}],[\"前缀\",{\"1\":{\"1035\":1,\"1296\":1}}],[\"前两位必须是\",{\"1\":{\"923\":1}}],[\"前先检查一下这个值是否是数字类型\",{\"1\":{\"861\":1}}],[\"前调用\",{\"1\":{\"619\":1}}],[\"前面示范继承模式时使用的\",{\"1\":{\"656\":1}}],[\"前面介绍过\",{\"1\":{\"578\":1}}],[\"前面的例子中每添加一个属性和方法就要输入一遍\",{\"1\":{\"578\":1}}],[\"前面的单个冒号\",{\"1\":{\"16\":1}}],[\"前导零\",{\"1\":{\"509\":1}}],[\"前缘节流\",{\"0\":{\"292\":1},\"1\":{\"292\":1,\"294\":1}}],[\"前缘防抖\",{\"0\":{\"288\":1},\"1\":{\"288\":2}}],[\"前身是\",{\"1\":{\"143\":1}}],[\"前一个等级相等才往后比较\",{\"1\":{\"18\":1}}],[\"这叫\",{\"1\":{\"1685\":1}}],[\"这将会更加理想\",{\"1\":{\"1684\":1}}],[\"这将导致\",{\"1\":{\"1132\":1}}],[\"这套查询规则确定标识符在何处\",{\"1\":{\"1670\":1}}],[\"这并不完全正确\",{\"1\":{\"1670\":1}}],[\"这段程序通常会被分解成为下列词法单元\",{\"1\":{\"1666\":1}}],[\"这段代码只会在初次调用构造函数时才会执行\",{\"1\":{\"570\":1}}],[\"这点也是与\",{\"1\":{\"1593\":1}}],[\"这在代码中能确保基本层次的不可变性\",{\"1\":{\"1695\":1}}],[\"这在一些情况下可能很有用\",{\"1\":{\"1579\":1}}],[\"这在那些只能使用保留字或一些非法标识符作为属性名的地方非常有用\",{\"1\":{\"1083\":1}}],[\"这取决于是否是严格模式\",{\"1\":{\"1579\":1}}],[\"这已经成了这门语言的核心特征\",{\"1\":{\"1551\":1}}],[\"这决定了它只能是单线程\",{\"1\":{\"1551\":1}}],[\"这次触发的\",{\"1\":{\"1542\":1}}],[\"这三个阶段还有一个合称叫\",{\"1\":{\"1668\":1}}],[\"这三个事件不能立即执行\",{\"1\":{\"1538\":1}}],[\"这三者之间依附在不同的引用对象类型上\",{\"1\":{\"644\":1}}],[\"这行代码抽出来\",{\"1\":{\"1502\":1}}],[\"这行代码会报错\",{\"1\":{\"1407\":1}}],[\"这导致箭头函数里面的\",{\"1\":{\"1375\":1}}],[\"这比\",{\"1\":{\"1338\":1}}],[\"这会让定义它们的代码更加紧凑\",{\"1\":{\"1330\":1}}],[\"这和\",{\"1\":{\"1329\":1}}],[\"这和下面使用\",{\"1\":{\"1197\":1}}],[\"这只能是一个近似的过程\",{\"1\":{\"1276\":1}}],[\"这只能在实现了nodelist\",{\"1\":{\"999\":1}}],[\"这条规则实际上不那么容易辨别\",{\"1\":{\"1222\":1}}],[\"这条路径上所有节点值相加等于目标和\",{\"1\":{\"470\":1}}],[\"这使得可以将\",{\"1\":{\"1212\":1}}],[\"这使得绘制复杂的外观组件更加简单\",{\"1\":{\"62\":1}}],[\"这带来很多不合理的场景\",{\"1\":{\"1074\":1}}],[\"这包括在\",{\"1\":{\"1053\":1}}],[\"这可能使其不适合将新属性合并到原型中\",{\"1\":{\"678\":1}}],[\"这时并不会去分析或执行\",{\"1\":{\"1593\":1}}],[\"这时并不会创建一个新的值为\",{\"1\":{\"1093\":1}}],[\"这时候\",{\"1\":{\"1617\":1}}],[\"这时候执行上下文的作用域链\",{\"1\":{\"1571\":1}}],[\"这时候的\",{\"1\":{\"1565\":1}}],[\"这时候的活动对象\",{\"1\":{\"1564\":1}}],[\"这时候还没有执行代码\",{\"1\":{\"1564\":1}}],[\"这时浏览器应该以哪个线程为准呢\",{\"1\":{\"1551\":1}}],[\"这时应该输出\",{\"1\":{\"1375\":1}}],[\"这时可以将第一个\",{\"1\":{\"1348\":1}}],[\"这时就只能使用三元条件表达式\",{\"1\":{\"1197\":1}}],[\"这时就要提到两个重要概念\",{\"1\":{\"158\":1}}],[\"这时省略的空位会填充值不存在\",{\"1\":{\"1093\":1}}],[\"这时你可以在\",{\"1\":{\"1052\":1}}],[\"这时会重新判断循环条件\",{\"1\":{\"969\":1}}],[\"这时我们编译器会自动将运算符两边的数据做一个数据类型转换\",{\"1\":{\"948\":1}}],[\"这时\",{\"1\":{\"622\":1,\"1185\":2,\"1218\":1,\"1385\":1,\"1403\":1,\"1586\":1,\"1709\":1}}],[\"这让全局作用域有点名不副实\",{\"1\":{\"592\":1}}],[\"这两者暴露的本质是对象\",{\"1\":{\"1619\":1}}],[\"这两种情形都有很多应用场景\",{\"1\":{\"1500\":1}}],[\"这两种方法都需要传入一个参数当作\",{\"1\":{\"1586\":1}}],[\"这两种方法\",{\"1\":{\"561\":1}}],[\"这两条继承链\",{\"1\":{\"624\":1}}],[\"这两个概念在前端领域已经十分普遍\",{\"1\":{\"1621\":1}}],[\"这两个方法都允许显式指定调用所需的\",{\"1\":{\"1529\":1}}],[\"这两个web存储api可在浏览器的不同标签页之间共享数据\",{\"1\":{\"397\":1}}],[\"这两个伪元素会在真正页面元素之前和之后插入一个额外的元素\",{\"1\":{\"256\":1}}],[\"这\",{\"1\":{\"381\":1}}],[\"这对于垂直外边距塌陷问题的解决非常有帮助\",{\"1\":{\"325\":1}}],[\"这对增强代码的可读性和整洁性是非常重要的\",{\"1\":{\"252\":1}}],[\"这有助于更精确地控制元素之间的间距\",{\"1\":{\"325\":1}}],[\"这不会产生上面显示的重新声明错误\",{\"1\":{\"1067\":1}}],[\"这不仅会降低解析效率\",{\"1\":{\"321\":1}}],[\"这不是我们想要的效果\",{\"1\":{\"46\":1}}],[\"这一点并不仅在\",{\"1\":{\"924\":1}}],[\"这一点与借用构造函数模式类似\",{\"1\":{\"656\":1}}],[\"这一原则是当一方完成数据发送任务后\",{\"1\":{\"304\":1}}],[\"这一过程由客户端或服务端任一方执行\",{\"1\":{\"304\":1}}],[\"这一过程由客户端执行\",{\"1\":{\"301\":1}}],[\"这里就用到了我们上面的结论声明提升了\",{\"1\":{\"1699\":1}}],[\"这里会\",{\"1\":{\"1677\":1}}],[\"这里隐式的进行了对形参\",{\"1\":{\"1670\":1}}],[\"这里对\",{\"1\":{\"1670\":2}}],[\"这里对原型所做的修改\",{\"1\":{\"570\":1}}],[\"这里有一个重要但是非常细微的区别\",{\"1\":{\"1581\":1}}],[\"这里有一个微妙但是非常重要的细节\",{\"1\":{\"1578\":1}}],[\"这里\",{\"1\":{\"1550\":1}}],[\"这里可以自行谷歌\",{\"1\":{\"1543\":1}}],[\"这里的\",{\"1\":{\"1670\":1}}],[\"这里的异步事件包括\",{\"1\":{\"1538\":1}}],[\"这里的引用\",{\"1\":{\"1264\":1}}],[\"这里建议你在构造函数中创建所有私有属性\",{\"1\":{\"1483\":1}}],[\"这里不重点谈这个\",{\"1\":{\"1473\":1}}],[\"这里以用户注册时验证用户名是否被占用为例\",{\"1\":{\"1449\":1}}],[\"这里以判断页面是否滚动到底部为例\",{\"1\":{\"1438\":1}}],[\"这里直接使用箭头函数就不用保存执行上下文的引用了\",{\"1\":{\"1446\":1}}],[\"这里很关键\",{\"1\":{\"1438\":1}}],[\"这里缺少一个循环终止的判断\",{\"1\":{\"1417\":1}}],[\"这里稍微实现一下\",{\"1\":{\"1413\":1}}],[\"这里标志位的\",{\"1\":{\"1161\":1}}],[\"这里重点\",{\"1\":{\"1116\":1}}],[\"这里是\",{\"1\":{\"1698\":1}}],[\"这里是79\",{\"1\":{\"923\":1}}],[\"这里是类似\",{\"1\":{\"16\":1}}],[\"这里相当于重写了实例的原型对象\",{\"1\":{\"578\":1}}],[\"这里只在\",{\"1\":{\"570\":1}}],[\"这里涉及到了一个如何判断点在区域内的算法实现\",{\"1\":{\"274\":1}}],[\"这里没有行终止符\",{\"1\":{\"253\":1}}],[\"这就将\",{\"1\":{\"1616\":1}}],[\"这就形成了一个障碍\",{\"1\":{\"1593\":1}}],[\"这就可能造成大量内存得不到回收\",{\"1\":{\"1281\":1}}],[\"这就意味着\",{\"1\":{\"899\":1}}],[\"这就称为\",{\"1\":{\"629\":1}}],[\"这就叫深冻结\",{\"1\":{\"540\":1}}],[\"这就叫浅冻结\",{\"1\":{\"540\":1}}],[\"这就会涉及到vue的template编译为render函数\",{\"1\":{\"402\":1}}],[\"这就会出现阻塞问题\",{\"1\":{\"157\":1}}],[\"这就是闭包的作用\",{\"1\":{\"1708\":2}}],[\"这就是现代模块实现的基石\",{\"1\":{\"1614\":1}}],[\"这就是上文提到的\",{\"1\":{\"1541\":1}}],[\"这就是惰性函数即只遍历一次就找到最佳方案\",{\"1\":{\"1466\":1}}],[\"这就是栈空间\",{\"1\":{\"1260\":1}}],[\"这就是基于对\",{\"1\":{\"1197\":1}}],[\"这就是环境运行环境对数据类型转换的影响\",{\"1\":{\"949\":1}}],[\"这就是选择器权重的概念\",{\"1\":{\"336\":1}}],[\"这就是reflow\",{\"1\":{\"158\":1}}],[\"这就需要使用专门的链路层的协议\",{\"1\":{\"318\":1}}],[\"这同时也是node\",{\"1\":{\"144\":1}}],[\"这得益于它在开发时的天生优势\",{\"1\":{\"143\":1}}],[\"这样对内部的函数来说\",{\"1\":{\"1708\":1}}],[\"这样对原函数的调用就不用再经过执行的分支了\",{\"1\":{\"1468\":1}}],[\"这样去理解的话\",{\"1\":{\"1670\":1}}],[\"这样看起来硬绑定\",{\"1\":{\"1584\":1}}],[\"这样代码会更加优雅\",{\"1\":{\"1580\":1}}],[\"这样代码看起来更简洁一点\",{\"1\":{\"1160\":1}}],[\"这样由多个执行上下文的\",{\"1\":{\"1569\":1}}],[\"这样既可以对那些方法进行链式调用\",{\"1\":{\"1497\":1}}],[\"这样任何对原函数的调用都不用再经过执行的分支了\",{\"1\":{\"1469\":1}}],[\"这样任何对原函数的调用就不用再经过执行的分支了\",{\"1\":{\"1465\":1}}],[\"这样任何时候系统重启的时候\",{\"1\":{\"215\":1}}],[\"这样一直进行下去\",{\"1\":{\"1444\":1}}],[\"这样一来可以分离业务代码中变化与不变的部分\",{\"1\":{\"1501\":1}}],[\"这样一来\",{\"1\":{\"662\":1,\"1467\":1}}],[\"这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性\",{\"1\":{\"1505\":1}}],[\"这样做的一个缺点就是比较消耗性能\",{\"1\":{\"1438\":1}}],[\"这样做也可能会意外地重写原生方法\",{\"1\":{\"580\":1}}],[\"这样是不是容易理解了\",{\"1\":{\"1416\":1}}],[\"这样是不正确的\",{\"1\":{\"394\":1}}],[\"这样参数的顺序就无关紧要了\",{\"1\":{\"1382\":1}}],[\"这样不管这个异步操作是否成功\",{\"1\":{\"1348\":1}}],[\"这样不会阻塞\",{\"1\":{\"438\":1}}],[\"这样当回调函数返回后\",{\"1\":{\"1286\":1}}],[\"这样在下一次垃圾回收的时候\",{\"1\":{\"1279\":1}}],[\"这样的写法只是相当于对外转发了这两个接口\",{\"1\":{\"1641\":1}}],[\"这样的写法不仅简洁\",{\"1\":{\"1229\":1}}],[\"这样的做法不好的是当用户输入第一个字符的时候\",{\"1\":{\"1449\":1}}],[\"这样的改变对函数外部是可见的\",{\"1\":{\"1329\":1}}],[\"这样的改变不会影响到全局或调用的函数\",{\"1\":{\"1329\":1}}],[\"这样的语句\",{\"1\":{\"1233\":1}}],[\"这样的语法错误\",{\"1\":{\"1076\":1}}],[\"这样的好处在于\",{\"1\":{\"1161\":1}}],[\"这样的话\",{\"1\":{\"1101\":1}}],[\"这样的话也会向调用程序返回\",{\"1\":{\"1035\":1}}],[\"这样的原生构造函数\",{\"1\":{\"590\":1}}],[\"这样就能保证一定是10毫秒的周期调用\",{\"1\":{\"1543\":1}}],[\"这样就能保证输入字符后的\",{\"1\":{\"1449\":1}}],[\"这样就不用再执行\",{\"1\":{\"1469\":1}}],[\"这样就不要使用\",{\"1\":{\"1393\":1}}],[\"这样就不会找不到相对应的方法\",{\"1\":{\"607\":1}}],[\"这样就会缩短程序的执行时间\",{\"1\":{\"1354\":1}}],[\"这样就避免了在函数体内部再写\",{\"1\":{\"1233\":1}}],[\"这样就可以正确执行\",{\"1\":{\"1218\":1}}],[\"这样就可以用\",{\"1\":{\"464\":1}}],[\"这样\",{\"1\":{\"572\":1,\"662\":1,\"1281\":1}}],[\"这样本身\",{\"1\":{\"464\":1}}],[\"这样会造成缓存命中的不准确\",{\"1\":{\"430\":1}}],[\"这样会放大\",{\"1\":{\"303\":1}}],[\"这样你就不会因为\",{\"1\":{\"131\":1}}],[\"这样可以有效规避掉所有的意外冲突\",{\"1\":{\"1684\":1}}],[\"这样可以确保在加载脚本之前浏览器已经解析了所有的\",{\"1\":{\"131\":1}}],[\"这样可以避免很多问题\",{\"1\":{\"119\":1}}],[\"这样用户就不能输入了\",{\"1\":{\"118\":1}}],[\"这些工具并没有能够违反词法作用域规则的功能\",{\"1\":{\"1684\":1}}],[\"这些工具通常无法选择是否启用这个行为\",{\"1\":{\"1579\":1}}],[\"这些库通常会在全局作用域中声明一个名字足够独特的变量\",{\"1\":{\"1683\":1}}],[\"这些代码被用来处理\",{\"1\":{\"1670\":1}}],[\"这些代码块被称为\",{\"1\":{\"1666\":1}}],[\"这些语法都是没法得到值的\",{\"1\":{\"1634\":1}}],[\"这些只有在运行时才能得到结果的语法结构\",{\"1\":{\"1634\":1}}],[\"这些值在调用时会被忽略\",{\"1\":{\"1586\":1}}],[\"这些值都有固定的大小\",{\"1\":{\"1263\":1}}],[\"这些函数实际上就是通过\",{\"1\":{\"1580\":1}}],[\"这些函数的大部分实现都是相同的\",{\"1\":{\"1504\":1}}],[\"这些跟业务逻辑无关的功能通常包括日志统计\",{\"1\":{\"1505\":1}}],[\"这些方法去改变\",{\"1\":{\"1375\":1}}],[\"这些方法只适用于本地通信\",{\"1\":{\"397\":1}}],[\"这些标识符则指代传入函数的实参\",{\"1\":{\"1328\":1}}],[\"这些标准旨在提高web内容的可访问性\",{\"1\":{\"139\":1}}],[\"这些参数会被插入到目标函数的参数列表的开始位置\",{\"1\":{\"1412\":1}}],[\"这些参数\",{\"1\":{\"1312\":1}}],[\"这些参数将置于实参之前传递给被绑定的方法\",{\"1\":{\"1310\":1}}],[\"这些运算符表现得跟它们在大多数编程语言中一样\",{\"1\":{\"1207\":1}}],[\"这些运算符不会在检查相等之前转换操作数的类型\",{\"1\":{\"1200\":1}}],[\"这些表达式是可以嵌套的\",{\"1\":{\"1092\":1}}],[\"这些初始化表达式有时称作\",{\"1\":{\"1083\":1}}],[\"这些是数组元素\",{\"1\":{\"1004\":1}}],[\"这些属性\",{\"1\":{\"848\":1}}],[\"这些属性被称为布尔属性\",{\"1\":{\"118\":1}}],[\"这些相互关联的对象组成的链条就是原型链\",{\"1\":{\"646\":1}}],[\"这些环境中会禁止使用\",{\"1\":{\"572\":1}}],[\"这些特征有相对应的方法\",{\"1\":{\"537\":1}}],[\"这些特性是为了实现\",{\"1\":{\"527\":1}}],[\"这些脚本会同步执行\",{\"1\":{\"464\":1}}],[\"这些脚本一般位于\",{\"1\":{\"215\":1}}],[\"这些操作没有严\",{\"1\":{\"464\":1}}],[\"这些情况处理与2xx不同\",{\"1\":{\"464\":1}}],[\"这些关键词定义一个元素到底是否产生\",{\"1\":{\"329\":1}}],[\"这些关键字规定了元素的内部显示类型\",{\"1\":{\"329\":1}}],[\"这些关键字规定元素的外部显示类型\",{\"1\":{\"329\":1}}],[\"这些条目所标识的连接在服务器处于\",{\"1\":{\"303\":1}}],[\"这些保留字不能用做普通的标识符\",{\"1\":{\"247\":1}}],[\"这些\",{\"1\":{\"239\":1}}],[\"这些类和一个共同超类有关\",{\"1\":{\"229\":1}}],[\"这些行为在术语上被称为\",{\"1\":{\"129\":1}}],[\"这些内容包括你想在搜索结果中出现的关键字和页面描述\",{\"1\":{\"120\":1}}],[\"这些信息不会出现在实际的内容中\",{\"1\":{\"117\":1}}],[\"这些元素不是纯粹由\",{\"1\":{\"329\":1}}],[\"这些元素自身不会产生特定的盒子\",{\"1\":{\"329\":1}}],[\"这些元素可以用来包围或标记不同部分的内容\",{\"1\":{\"115\":1}}],[\"这些元素的宽度默认是\",{\"1\":{\"48\":1}}],[\"这标志着该元素的结束\",{\"1\":{\"116\":1}}],[\"这是不是说明其实\",{\"1\":{\"1694\":1}}],[\"这是不变的部分\",{\"1\":{\"1503\":1}}],[\"这是左值\",{\"1\":{\"1194\":1}}],[\"这是一个很常用的技巧\",{\"1\":{\"1160\":1}}],[\"这是因为处于条件代码块之中\",{\"1\":{\"1655\":1}}],[\"这是因为函数有一个内部属性\",{\"1\":{\"1570\":1}}],[\"这是因为它们的引用次数永远不可能是\",{\"1\":{\"1281\":1}}],[\"这是因为赋值运算符的返回结果就是赋值运算符右边的那个值\",{\"1\":{\"1242\":1}}],[\"这是因为此时字符串被转换成了一个类似数组的对象\",{\"1\":{\"1219\":1}}],[\"这是因为\",{\"1\":{\"625\":1,\"1034\":1,\"1406\":1}}],[\"这是因为子类实例的构建\",{\"1\":{\"619\":1}}],[\"这是因为子类自身的\",{\"1\":{\"619\":1}}],[\"这是因为直接\",{\"1\":{\"394\":1}}],[\"这是常见需求\",{\"1\":{\"610\":1}}],[\"这是各大厂商具体实现时添加的私有属性\",{\"1\":{\"603\":1}}],[\"这是它跟普通构造函数的一个主要区别\",{\"1\":{\"602\":1}}],[\"这是等价的\",{\"1\":{\"509\":1}}],[\"这是mvvm的绑定原理\",{\"1\":{\"402\":1}}],[\"这是bfc最常见的应用之一\",{\"1\":{\"325\":1}}],[\"这是最可靠的方法\",{\"1\":{\"131\":1}}],[\"这是在\",{\"1\":{\"109\":1}}],[\"这是\",{\"1\":{\"108\":1,\"143\":1}}],[\"这与\",{\"1\":{\"91\":1,\"762\":1}}],[\"这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询\",{\"1\":{\"1561\":1}}],[\"这意味着像\",{\"1\":{\"1101\":1}}],[\"这意味着可以改变对象的内容\",{\"1\":{\"1068\":1}}],[\"这意味着\",{\"1\":{\"1067\":1,\"1670\":1}}],[\"这意味着变量可以在声明之前使用\",{\"1\":{\"1065\":1}}],[\"这意味着你不用提前声明变量的类型\",{\"1\":{\"917\":1}}],[\"这意味着任何变量命名的概念都会被删除\",{\"1\":{\"893\":1}}],[\"这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距\",{\"1\":{\"58\":1}}],[\"这意外着可以通过该属性控制单词间的间隙大小\",{\"1\":{\"89\":1}}],[\"这种格式\",{\"1\":{\"1710\":1}}],[\"这种设计方案是非常有用的\",{\"1\":{\"1680\":1}}],[\"这种做法很难查错\",{\"1\":{\"1631\":1}}],[\"这种函数调用被称为\",{\"1\":{\"1581\":1}}],[\"这种绑定是一种显式\",{\"1\":{\"1580\":1}}],[\"这种事件循环机制是由\",{\"1\":{\"1532\":1}}],[\"这种技巧在\",{\"1\":{\"1496\":1}}],[\"这种语法在不设置参数默认值的时候是不会出现的\",{\"1\":{\"1407\":1}}],[\"这种语法行为\",{\"1\":{\"1407\":1}}],[\"这种语法与\",{\"1\":{\"930\":1}}],[\"这种特征很\",{\"1\":{\"1375\":1}}],[\"这种行为的本质是\",{\"1\":{\"1633\":1}}],[\"这种行为就像把原函数当成构造器\",{\"1\":{\"1311\":1}}],[\"这种行为通常发生在数字作为操作数的比较\",{\"1\":{\"1200\":1}}],[\"这种算法下存在一个根节点\",{\"1\":{\"1282\":1}}],[\"这种垃圾收集方式存在一个比较大的问题就是循环引用\",{\"1\":{\"1281\":1}}],[\"这种乒乓球的存放方式与栈中存取数据的方式如出一辙\",{\"1\":{\"1260\":1}}],[\"这种额外的工作可能会花费更大的代价\",{\"1\":{\"1194\":1}}],[\"这种方法有个缺点\",{\"1\":{\"1469\":1}}],[\"这种方法适用于对象和数组\",{\"1\":{\"1087\":1}}],[\"这种方式实际上是用了\",{\"1\":{\"1425\":1}}],[\"这种方式有个缺点\",{\"1\":{\"430\":1}}],[\"这种方式比\",{\"1\":{\"430\":1}}],[\"这种方式可以在服务端进行输入过滤和转义\",{\"1\":{\"417\":1}}],[\"这种后测试循环语句最常用于循环体中的代码至少要被执行一次的情形\",{\"1\":{\"976\":1}}],[\"这种无需开发者手动转换\",{\"1\":{\"948\":1}}],[\"这种相等性判断逻辑和传统的\",{\"1\":{\"762\":1}}],[\"这种优化方式的缺点是\",{\"1\":{\"664\":1}}],[\"这种写法能在脚本底部清晰看到所有输出模块\",{\"1\":{\"1651\":1}}],[\"这种写法不能省略第二个参数\",{\"1\":{\"1403\":1}}],[\"这种写法不仅可以写私有属性\",{\"1\":{\"615\":1}}],[\"这种写法属于\",{\"1\":{\"1213\":1}}],[\"这种写法比以前更清晰\",{\"1\":{\"632\":1}}],[\"这种形式调用\",{\"1\":{\"625\":1}}],[\"这种命名是不保险的\",{\"1\":{\"612\":1}}],[\"这种共享对于函数非常合适\",{\"1\":{\"581\":1}}],[\"这种混成模式还支持向构造函数传递参数\",{\"1\":{\"569\":1}}],[\"这种情况下\",{\"1\":{\"460\":1,\"624\":2,\"1034\":1}}],[\"这种浏览器内核是\",{\"1\":{\"143\":1}}],[\"这种调整模式是特别为阿拉伯脚本语言提供的\",{\"1\":{\"85\":1}}],[\"这种模式的调整是用于优化亚洲语言文档的\",{\"1\":{\"85\":1}}],[\"这种充分利用空间行为称为\",{\"1\":{\"48\":1}}],[\"这个嵌套的作用域\",{\"1\":{\"1695\":1}}],[\"这个提升并不是\",{\"1\":{\"1694\":1}}],[\"这个名称本身\",{\"1\":{\"1684\":1}}],[\"这个名称表示的任何对象可以以不同的方式响应一些共同的操作集合\",{\"1\":{\"229\":1}}],[\"这个赋值操作找到一个目标\",{\"1\":{\"1670\":1}}],[\"这个赋值操作\",{\"1\":{\"1670\":1}}],[\"这个树被称为\",{\"1\":{\"1667\":1}}],[\"这个模块会作为一个对象\",{\"1\":{\"1599\":1}}],[\"这个执行上下文的变量对象才会被激活\",{\"1\":{\"1562\":1}}],[\"这个栈\",{\"1\":{\"1556\":1}}],[\"这个新标准并没有改变\",{\"1\":{\"1551\":1}}],[\"这个新的值\",{\"1\":{\"1267\":1}}],[\"这个延迟代表了消息被实际加入到队列的最小延迟时间\",{\"1\":{\"1543\":1}}],[\"这个阶段执行几乎所有的回调\",{\"1\":{\"1534\":1}}],[\"这个阶段执行定时器队列中的回调\",{\"1\":{\"1534\":1}}],[\"这个变量和内部函数都同在一个作用域内\",{\"1\":{\"1518\":1}}],[\"这个变量引用的就是一个局部对象了\",{\"1\":{\"1389\":1}}],[\"这个实参是一个对象\",{\"1\":{\"1517\":1}}],[\"这个写法很有趣\",{\"1\":{\"1488\":1}}],[\"这个概念\",{\"1\":{\"1473\":1}}],[\"这个过程与语言\",{\"1\":{\"1668\":1}}],[\"这个过程是将词法单元流转换成一个\",{\"1\":{\"1667\":1}}],[\"这个过程会将由字符组成的字符串分解成有意义的代码块\",{\"1\":{\"1666\":1}}],[\"这个过程\",{\"1\":{\"1466\":1}}],[\"这个作为参数的函数就是回调函数\",{\"1\":{\"1452\":1}}],[\"这个作用域里面\",{\"1\":{\"1407\":2}}],[\"这个作用域就会消失\",{\"1\":{\"1407\":1}}],[\"这个操作就没有任何意义\",{\"1\":{\"1445\":1}}],[\"这个操作符都会返回一个布尔值\",{\"1\":{\"1255\":1}}],[\"这个标记始终为\",{\"1\":{\"1438\":1}}],[\"这个标识符将不再可用\",{\"1\":{\"1055\":1}}],[\"这个标识符是\",{\"1\":{\"1055\":1}}],[\"这个例子\",{\"1\":{\"1670\":1}}],[\"这个例子应用\",{\"1\":{\"1419\":1}}],[\"这个例子的高效率体现在它只调用了一次\",{\"1\":{\"659\":1}}],[\"这个匿名函数内部的变量\",{\"1\":{\"1407\":1}}],[\"这个箭头函数的定义生效是在\",{\"1\":{\"1375\":1}}],[\"这个就是\",{\"1\":{\"1160\":2}}],[\"这个是\",{\"1\":{\"1160\":1}}],[\"这个运算符最常用在客户端\",{\"1\":{\"1138\":1}}],[\"这个行为叫做提升\",{\"1\":{\"1065\":1}}],[\"这个程序执行相关的语句\",{\"1\":{\"1039\":1}}],[\"这个循环类似于第一个\",{\"1\":{\"1004\":1}}],[\"这个词\",{\"1\":{\"930\":1}}],[\"这个迭代参数应该是一个能够实现\",{\"1\":{\"711\":1}}],[\"这个示例中的函数实现了寄生组合式继承的最简单形式\",{\"1\":{\"659\":1}}],[\"这个特殊的匿名函数的\",{\"1\":{\"653\":1}}],[\"这个特定阈值指的是\",{\"1\":{\"38\":1}}],[\"这个对象被用作库的命名空间\",{\"1\":{\"1683\":1}}],[\"这个对象\",{\"1\":{\"1616\":1}}],[\"这个对象属性将用作\",{\"1\":{\"935\":1}}],[\"这个对象比较特殊\",{\"1\":{\"647\":1}}],[\"这个对象自动获得构造函数\",{\"1\":{\"578\":1}}],[\"这个原则可以延伸到如何选择作用域来包含变量和函数\",{\"1\":{\"1681\":1}}],[\"这个原则是指在软件设计中\",{\"1\":{\"1681\":1}}],[\"这个原则是当一方完成它的数据发送任务后就能发送一个\",{\"1\":{\"304\":1}}],[\"这个原型对象称为隐式原型对象\",{\"1\":{\"646\":1}}],[\"这个方法实际上会在现有对象上调用\",{\"1\":{\"787\":1}}],[\"这个方法可以用来检测一个对象是否含有特定的自身属性\",{\"1\":{\"754\":1}}],[\"这个方法接收两个参数\",{\"1\":{\"640\":1}}],[\"这个方法会被默认添加\",{\"1\":{\"619\":1}}],[\"这个类的名称为\",{\"1\":{\"600\":1}}],[\"这个类会包含狗的一切基础特征\",{\"1\":{\"229\":1}}],[\"这个做法借鉴自其他\",{\"1\":{\"590\":1}}],[\"这个连接存在于实例与构造函数的原型之间\",{\"1\":{\"576\":1}}],[\"这个属性的值永远等于跟在\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"这个属性的值是可以被更改的\",{\"1\":{\"926\":1}}],[\"这个属性名赋给了指定的变量\",{\"1\":{\"969\":1}}],[\"这个属性就会\",{\"1\":{\"576\":1}}],[\"这个属性对脚本则是完全不可见的\",{\"1\":{\"576\":1}}],[\"这个属性指向函数的原型对象\",{\"1\":{\"576\":1}}],[\"这个属性是一个指向\",{\"1\":{\"576\":1}}],[\"这个属性是一个指针\",{\"1\":{\"575\":1}}],[\"这个属性是资源的唯一标识符\",{\"1\":{\"430\":1}}],[\"这个函数是\",{\"1\":{\"1670\":1}}],[\"这个函数会忽略它当前的\",{\"1\":{\"1584\":1}}],[\"这个函数会在一个时间区间结束后的\",{\"1\":{\"1446\":1}}],[\"这个函数严格来说都不属于\",{\"1\":{\"1579\":1}}],[\"这个函数里面封装了数组元素的排序方法\",{\"1\":{\"1503\":1}}],[\"这个函数接收两个参数\",{\"1\":{\"659\":1}}],[\"这个函数\",{\"1\":{\"647\":1}}],[\"这个函数又很像是典型的构造函数\",{\"1\":{\"571\":1}}],[\"这个函数负责决定如何处理数据\",{\"1\":{\"532\":1}}],[\"这个函数负责返回有效的值\",{\"1\":{\"532\":1}}],[\"这个可以通过判断该方法是否有效而选择是否需要初始化原型\",{\"1\":{\"570\":1}}],[\"这个区间\",{\"1\":{\"494\":1}}],[\"这个时候可以采用命名回调函数的方式调用\",{\"1\":{\"1459\":1}}],[\"这个时候一定会发生回流\",{\"1\":{\"439\":1}}],[\"这个时候客户端就进入\",{\"1\":{\"304\":1}}],[\"这个时间依赖于服务器时间\",{\"1\":{\"429\":1}}],[\"这个fn函数的this指向永远是外部传过来的obj\",{\"1\":{\"394\":1}}],[\"这个this代表调用mybind方法的函数\",{\"1\":{\"394\":1}}],[\"这个电路好像是看不见的\",{\"1\":{\"318\":1}}],[\"这个报文段发送完毕后\",{\"1\":{\"301\":1}}],[\"这个算法只涉及四则运算\",{\"1\":{\"277\":1}}],[\"这个命令用于显示系统当前内存的使用情况\",{\"1\":{\"215\":1}}],[\"这个命令可以直接运行这个文件夹里面的脚本\",{\"1\":{\"215\":1}}],[\"这个内核的优点就是功能强大\",{\"1\":{\"143\":1}}],[\"这个策略会应用在\",{\"1\":{\"130\":1}}],[\"这个元素简单的指定了文档的字符编码\",{\"1\":{\"128\":1}}],[\"这个元素包含了你访问页面时所有显示在页面上的内容\",{\"1\":{\"120\":1}}],[\"这个元素包裹了页面中所有的内容\",{\"1\":{\"120\":1}}],[\"这个元素设置了页面的标题\",{\"1\":{\"120\":1}}],[\"这个元素代表了不能由其他\",{\"1\":{\"120\":1}}],[\"这个元素是一个容器\",{\"1\":{\"120\":1}}],[\"这个元素的主要部分有\",{\"1\":{\"116\":1}}],[\"这个\",{\"1\":{\"117\":1,\"630\":1,\"880\":1,\"886\":1,\"1248\":1,\"1621\":1}}],[\"这个值会在下一次垃圾收集器执行操作时被找到并释放\",{\"1\":{\"1282\":1}}],[\"这个值也会改变\",{\"1\":{\"430\":1}}],[\"这个值一般与属性名称相同\",{\"1\":{\"118\":1}}],[\"这个值通常用于排版拉丁字符和数字等表意符号\",{\"1\":{\"84\":1}}],[\"这个值和\",{\"1\":{\"81\":1}}],[\"这个距离\",{\"1\":{\"82\":2}}],[\"这个最容易出现在\",{\"1\":{\"48\":1}}],[\"这也有可能导致一些不同方式的攻击\",{\"1\":{\"893\":1}}],[\"这也意味着你可以使用同个相同名称的变量保存不同类型的数据\",{\"1\":{\"917\":1}}],[\"这也意味着\",{\"1\":{\"540\":1,\"603\":1}}],[\"这也是造成许多不必要问题的根源\",{\"1\":{\"1279\":1}}],[\"这也是它的本职工作\",{\"1\":{\"388\":1}}],[\"这也是完全可以接受的\",{\"1\":{\"118\":1}}],[\"这也是其被称为伪元素的原因\",{\"1\":{\"16\":1}}],[\"这也就是说人们可以用它来选择性地为\",{\"1\":{\"2\":1}}],[\"树上被移除\",{\"1\":{\"1286\":1}}],[\"树根节点都是\",{\"1\":{\"1282\":1}}],[\"树的最末端改变\",{\"1\":{\"439\":1}}],[\"树构建渲染树\",{\"1\":{\"437\":1}}],[\"树生成完后\",{\"1\":{\"437\":1}}],[\"树和\",{\"1\":{\"437\":1}}],[\"树\",{\"1\":{\"437\":1}}],[\"树中每个节点都存放有一个\",{\"1\":{\"497\":1}}],[\"树中存在两条根节点到叶子节点的路径\",{\"1\":{\"470\":1}}],[\"树中\",{\"1\":{\"16\":1}}],[\"树无法描述的状态下才能为元素添加样式\",{\"1\":{\"15\":1}}],[\"但其变量对象不能被销毁\",{\"1\":{\"1709\":1}}],[\"但其他类型的作用域单元也是存在的\",{\"1\":{\"1689\":1}}],[\"但因为其返回值是\",{\"1\":{\"1709\":1}}],[\"但函数的重复声明会覆盖前面的声明\",{\"1\":{\"1701\":1}}],[\"但反过来想也可以带来一些启示\",{\"1\":{\"1681\":1}}],[\"但非全局的变量如果被遮蔽了\",{\"1\":{\"1676\":1}}],[\"但还是有细小的区分\",{\"1\":{\"1621\":1}}],[\"但目前也可用于浏览器端\",{\"1\":{\"1616\":1}}],[\"但也导致无法在运行时加载模块\",{\"1\":{\"1593\":1}}],[\"但也不可能有别的办法访问传入到构造函数中的原始数据\",{\"1\":{\"572\":1}}],[\"但就多包了一层不好看\",{\"1\":{\"1426\":1}}],[\"但仍不怎么美观\",{\"1\":{\"1425\":1}}],[\"但仍会返回\",{\"1\":{\"1101\":1}}],[\"但值是同步的\",{\"1\":{\"1383\":1}}],[\"但并不是相同的命名空间\",{\"1\":{\"1383\":1}}],[\"但这样会破坏前面提到的最小权限原则\",{\"1\":{\"1681\":1}}],[\"但这时会自动转成立即\",{\"1\":{\"1338\":1}}],[\"但这并不意味着它所持有值是不可变的\",{\"1\":{\"1068\":1}}],[\"但最大的区别在于\",{\"1\":{\"1335\":1}}],[\"但最好不要省略它\",{\"1\":{\"253\":1}}],[\"但当函数的参数是一个对象\",{\"1\":{\"1329\":1}}],[\"但当通过点运算符\",{\"1\":{\"557\":1}}],[\"但代码中留存着对它的\",{\"1\":{\"1286\":1}}],[\"但可以最先被使用\",{\"1\":{\"1260\":1}}],[\"但可以设置水平方向的\",{\"1\":{\"45\":1}}],[\"但该变量必须已经声明\",{\"1\":{\"1217\":1}}],[\"但显然上面的代码更加简洁\",{\"1\":{\"1197\":1}}],[\"但操作后产生操作数原来的\",{\"1\":{\"1194\":1}}],[\"但被拒绝\",{\"1\":{\"1132\":1}}],[\"但又有别于\",{\"1\":{\"1074\":1}}],[\"但语法上是允许一个任意复杂度的表达式\",{\"1\":{\"1009\":1}}],[\"但它们的引用数不一定是\",{\"1\":{\"1282\":1}}],[\"但它们是独立的两个对象\",{\"1\":{\"1204\":1}}],[\"但它具有在执行循环之前初始化变量和定义循环后要执行的代码的能力\",{\"1\":{\"1007\":1}}],[\"但它并不是\",{\"1\":{\"131\":1}}],[\"但返回的先后次序可能会因为浏览器而异\",{\"1\":{\"983\":1}}],[\"但那些禁用\",{\"1\":{\"848\":1}}],[\"但属性仍然可以添加到对象原型\",{\"1\":{\"812\":1}}],[\"但我们可以通过\",{\"1\":{\"650\":1}}],[\"但我们不推荐在产品化的程序中修改原生对象的原型\",{\"1\":{\"580\":1}}],[\"但我们不推荐这样做\",{\"1\":{\"246\":1}}],[\"但依旧不建议在生产中使用该属性\",{\"1\":{\"603\":1}}],[\"但本质上还是一样的\",{\"1\":{\"599\":1,\"1483\":1}}],[\"但创建\",{\"1\":{\"592\":1}}],[\"但却没有解决对象识别的问题\",{\"1\":{\"586\":1}}],[\"但却不能通过对象实例重写原型中的值\",{\"1\":{\"576\":1}}],[\"但通过\",{\"1\":{\"578\":1}}],[\"但通过这种方式创建的对象不会继承任何东西\",{\"1\":{\"548\":1}}],[\"但有两点不同\",{\"1\":{\"572\":1}}],[\"但从表面上看\",{\"1\":{\"571\":1}}],[\"但同时又共享着对方法的引用\",{\"1\":{\"569\":1}}],[\"但无法区别自有还是继承属性\",{\"1\":{\"565\":1}}],[\"但由于是函数调用\",{\"1\":{\"540\":1,\"706\":1}}],[\"但会有协商缓存\",{\"1\":{\"429\":1}}],[\"但多线程可以更好地利用多核处理器来提高程序的执行效率\",{\"1\":{\"424\":1}}],[\"但进程是独立的执行实体\",{\"1\":{\"424\":1}}],[\"但拥有独立的执行栈和寄存器集合\",{\"1\":{\"423\":1}}],[\"但需要根据具体需求和项目情况选择适合的解决方案\",{\"1\":{\"397\":1}}],[\"但如果要执行下一次\",{\"1\":{\"1431\":1}}],[\"但如果要在对象字面量内部对属性名使用表达式\",{\"1\":{\"559\":1}}],[\"但如果利用按位异或\",{\"1\":{\"1158\":1}}],[\"但如果想遍历对象的属性\",{\"1\":{\"388\":1}}],[\"但如果是定义对象\",{\"1\":{\"341\":1}}],[\"但实际是一个内联盒\",{\"1\":{\"329\":1}}],[\"但实际上没有渲染任何东西\",{\"1\":{\"329\":1}}],[\"但\",{\"1\":{\"252\":1,\"576\":1,\"610\":1,\"762\":1}}],[\"但为了与\",{\"1\":{\"246\":1}}],[\"但不要创建任何新对象\",{\"1\":{\"1629\":1}}],[\"但不要使用这种形式\",{\"1\":{\"1124\":1,\"1125\":1,\"1126\":1}}],[\"但不足也很明显\",{\"1\":{\"1426\":1}}],[\"但不同的是\",{\"1\":{\"1267\":1}}],[\"但不是必需的\",{\"1\":{\"1014\":1,\"1382\":1}}],[\"但不会执行循环体\",{\"1\":{\"983\":1}}],[\"但不会修改那个属性\",{\"1\":{\"576\":1}}],[\"但不能指定字符串文字\",{\"1\":{\"1109\":1}}],[\"但不能解码那些不会被\",{\"1\":{\"869\":1}}],[\"但不能嵌套\",{\"1\":{\"242\":1}}],[\"但不一定是不可写\",{\"1\":{\"786\":1}}],[\"但不得不在调用子类型构造函数时重写这些属性\",{\"1\":{\"663\":1}}],[\"但不改变工作目录\",{\"1\":{\"176\":1}}],[\"但元素的几何尺寸和位置不变\",{\"1\":{\"158\":1}}],[\"但在严格模式下\",{\"1\":{\"1383\":1,\"1385\":1}}],[\"但在传入参数的那一刻\",{\"1\":{\"1221\":1}}],[\"但在自增\",{\"1\":{\"1194\":1}}],[\"但在\",{\"1\":{\"250\":1,\"926\":1,\"1075\":1,\"1473\":1}}],[\"但在解析执行js脚本时\",{\"1\":{\"157\":1}}],[\"但在这之前\",{\"1\":{\"150\":1}}],[\"但和\",{\"1\":{\"126\":1}}],[\"但对于更多复杂的迭代器类型\",{\"1\":{\"1194\":1}}],[\"但对于现代浏览器来说\",{\"1\":{\"131\":1}}],[\"但对于强制打断的行\",{\"1\":{\"81\":1}}],[\"但对象的内容作为\",{\"1\":{\"45\":1}}],[\"但没有计算好的话就可能造成元素重叠\",{\"1\":{\"56\":1}}],[\"但后面设置的\",{\"1\":{\"50\":1}}],[\"但是其声明的引用类型变量则是可修改的\",{\"1\":{\"1693\":1}}],[\"但是设计上将具体内容私有化了\",{\"1\":{\"1681\":1}}],[\"但是设置了对象解构赋值的默认值\",{\"1\":{\"1404\":1}}],[\"但是有一个细微的差别\",{\"1\":{\"1670\":1}}],[\"但是有时它可能会让你感到非常郁闷\",{\"1\":{\"1579\":1}}],[\"但是引擎执行怎么查找\",{\"1\":{\"1670\":1}}],[\"但是当编译器开始进行代码生成时\",{\"1\":{\"1670\":1}}],[\"但是最好不要这样做\",{\"1\":{\"1636\":1}}],[\"但是只会执行一次\",{\"1\":{\"1635\":1}}],[\"但是只有\",{\"1\":{\"1578\":1}}],[\"但是现在浏览器和服务器均不支持\",{\"1\":{\"1619\":1}}],[\"但是你不能直接\",{\"1\":{\"1616\":1}}],[\"但是绝大部分时候都会使用\",{\"1\":{\"1589\":1}}],[\"但是从本质上来说\",{\"1\":{\"1589\":1}}],[\"但是我们可以使用硬绑定来测试他俩的优先级\",{\"1\":{\"1584\":1}}],[\"但是我们只要知道书的名字\",{\"1\":{\"1261\":1,\"1264\":1}}],[\"但是实际上\",{\"1\":{\"1579\":1}}],[\"但是实际上这个内核对真正的网页标准支持不是很好\",{\"1\":{\"143\":1}}],[\"但是无论是直接在\",{\"1\":{\"1579\":1}}],[\"但是无法通过\",{\"1\":{\"625\":1}}],[\"但是笔者私自把\",{\"1\":{\"1575\":1}}],[\"但是注意\",{\"1\":{\"1570\":1}}],[\"但是进入执行阶段之后\",{\"1\":{\"1566\":1}}],[\"但是子线程完全受主线程控制\",{\"1\":{\"1551\":1}}],[\"但是客户并不知道节点什么时候会创建好\",{\"1\":{\"1502\":1}}],[\"但是这种案例明摆着就像不从实际出发的面试题\",{\"1\":{\"1418\":1}}],[\"但是这些操作未必相互依赖\",{\"1\":{\"1353\":1}}],[\"但是函数外部的变量是对函数内部可见的\",{\"1\":{\"1708\":1}}],[\"但是函数外层并没有声明变量\",{\"1\":{\"1407\":1}}],[\"但是函数也是对象\",{\"1\":{\"644\":1}}],[\"但是对这个问题\",{\"1\":{\"1543\":1}}],[\"但是对应的布尔值为\",{\"1\":{\"1398\":1}}],[\"但是对取值完全没有影响\",{\"1\":{\"1218\":1}}],[\"但是不包括\",{\"1\":{\"1534\":1}}],[\"但是不可能同时将一个\",{\"1\":{\"1318\":1}}],[\"但是不能传值\",{\"1\":{\"1710\":1}}],[\"但是不能直接对\",{\"1\":{\"1616\":1}}],[\"但是不能转为数值\",{\"1\":{\"928\":1}}],[\"但是不能遍历对象\",{\"1\":{\"388\":1}}],[\"但是和\",{\"1\":{\"1282\":1}}],[\"但是全局变量的生命周期直到浏览器卸载页面才会结束\",{\"1\":{\"1279\":1}}],[\"但是运行效率相对较低\",{\"1\":{\"1268\":1}}],[\"但是解析起来并不容易\",{\"1\":{\"1222\":1}}],[\"但是解析器不会停下来等它下载\",{\"1\":{\"464\":1}}],[\"但是语法是合法的\",{\"1\":{\"1218\":1}}],[\"但是两者有一个重大差别\",{\"1\":{\"1197\":1}}],[\"但是两个字符串对象互不相等\",{\"1\":{\"1203\":1}}],[\"但是两个分号必不可少\",{\"1\":{\"1014\":1}}],[\"但是两个函数不是同一个\",{\"1\":{\"592\":1}}],[\"但是没有设置对象解构赋值的默认值\",{\"1\":{\"1404\":1}}],[\"但是没有部署\",{\"1\":{\"1185\":1}}],[\"但是没有改变布局\",{\"1\":{\"439\":1}}],[\"但是做位运算的时候\",{\"1\":{\"1142\":1}}],[\"但是浮点运算并不总是\",{\"1\":{\"1142\":1}}],[\"但是返回结果是标准的\",{\"1\":{\"1142\":1}}],[\"但是返回的是子类\",{\"1\":{\"621\":1}}],[\"但是并非一成不变\",{\"1\":{\"1068\":1}}],[\"但是它并不理想\",{\"1\":{\"1684\":1}}],[\"但是它们对应的是同一个\",{\"1\":{\"1635\":1}}],[\"但是它们其实已经是相互独立互不影响的值了\",{\"1\":{\"1266\":1}}],[\"但是它使用\",{\"1\":{\"1004\":1}}],[\"但是它记录了数组索引以及\",{\"1\":{\"1004\":1}}],[\"但是它没有类型或者是值\",{\"1\":{\"919\":1}}],[\"但是为了避免混乱\",{\"1\":{\"930\":1}}],[\"但是可以改变\",{\"1\":{\"813\":1}}],[\"但是类也支持直接在原型上定义访问器属性\",{\"1\":{\"604\":1,\"1486\":1}}],[\"但是mn两个边界不能取\",{\"1\":{\"494\":1}}],[\"但是他还是不相信网络\",{\"1\":{\"304\":1}}],[\"但是在用\",{\"1\":{\"1694\":1}}],[\"但是在箭头函数中\",{\"1\":{\"1375\":1}}],[\"但是在变量对象中访问到的具体对象实际上是同一个\",{\"1\":{\"1267\":1}}],[\"但是在某些场景\",{\"1\":{\"1260\":1}}],[\"但是在严格模式和模块环境下\",{\"1\":{\"848\":1}}],[\"但是在\",{\"1\":{\"848\":1,\"1473\":1}}],[\"但是在这个\",{\"1\":{\"304\":1}}],[\"但是在服务端和客户端的传输过程中\",{\"1\":{\"303\":1}}],[\"但是如果是浏览器端\",{\"1\":{\"1617\":1}}],[\"但是如果我们传入的是\",{\"1\":{\"949\":1}}],[\"但是如果你服务器端还有数据没有发送完成\",{\"1\":{\"304\":1}}],[\"但是如果\",{\"1\":{\"245\":1}}],[\"但是如果给一个不支持负长度值的特性设置一个负的值\",{\"1\":{\"23\":1}}],[\"但是\",{\"1\":{\"235\":1,\"312\":1,\"430\":1,\"515\":1,\"578\":1,\"607\":1,\"612\":1,\"624\":1,\"893\":1,\"928\":1,\"1067\":1,\"1101\":1,\"1222\":1,\"1375\":1,\"1385\":1,\"1469\":1,\"1543\":1,\"1557\":1,\"1582\":1,\"1584\":1,\"1621\":1,\"1631\":1,\"1693\":1,\"1701\":2,\"1709\":1}}],[\"但是需要注意的是\",{\"1\":{\"235\":1}}],[\"但是也能在浏览器端运行\",{\"1\":{\"1616\":1}}],[\"但是也应该避免覆盖\",{\"1\":{\"926\":1}}],[\"但是也不是绝对不行\",{\"1\":{\"613\":1}}],[\"但是也胜于\",{\"1\":{\"143\":1}}],[\"但是也存在一些特殊情况\",{\"1\":{\"48\":1}}],[\"但是代价是也显而易见就是要消耗很多的资源\",{\"1\":{\"143\":1}}],[\"但是由于变量对象的特殊职能\",{\"1\":{\"1263\":1}}],[\"但是由于\",{\"1\":{\"143\":1}}],[\"但是会检查协商缓存\",{\"1\":{\"431\":1}}],[\"但是会存在一些问题\",{\"1\":{\"388\":1}}],[\"但是会影响外部元素\",{\"1\":{\"93\":1}}],[\"但是会保留文本输入时的换行\",{\"1\":{\"92\":1}}],[\"但是使用\",{\"1\":{\"46\":1}}],[\"但是伪元素类似于增添一个新的\",{\"1\":{\"16\":1}}],[\"但以前的写法仍然有效\",{\"1\":{\"16\":1}}],[\"但与普通的类不一样\",{\"1\":{\"15\":1}}],[\"546\",{\"1\":{\"914\":1}}],[\"5678\",{\"1\":{\"813\":1}}],[\"5xx\",{\"1\":{\"464\":1}}],[\"5309\",{\"1\":{\"1232\":1}}],[\"533\",{\"1\":{\"506\":1}}],[\"53\",{\"1\":{\"215\":1}}],[\"59\",{\"1\":{\"215\":1}}],[\"50\",{\"1\":{\"110\":1,\"713\":3,\"1375\":4,\"1390\":1,\"1542\":1}}],[\"50px\",{\"1\":{\"102\":1}}],[\"500毫秒后我成功啦\",{\"1\":{\"371\":1}}],[\"500\",{\"1\":{\"75\":1,\"290\":1,\"371\":1,\"1340\":1,\"1352\":1,\"1433\":1,\"1446\":1}}],[\"5em\",{\"1\":{\"59\":1}}],[\"5px\",{\"1\":{\"59\":2}}],[\"5\",{\"0\":{\"16\":1,\"152\":1,\"266\":1,\"345\":1,\"378\":1,\"397\":1,\"442\":1,\"512\":1},\"1\":{\"55\":1,\"108\":1,\"110\":2,\"235\":2,\"244\":2,\"341\":4,\"343\":2,\"344\":1,\"347\":1,\"348\":1,\"349\":2,\"350\":1,\"354\":2,\"374\":6,\"392\":1,\"470\":3,\"473\":2,\"482\":4,\"485\":4,\"488\":4,\"497\":1,\"500\":4,\"503\":2,\"509\":1,\"524\":2,\"546\":2,\"576\":1,\"596\":1,\"640\":1,\"671\":1,\"672\":2,\"689\":2,\"701\":3,\"736\":1,\"838\":1,\"953\":1,\"962\":1,\"971\":2,\"1004\":6,\"1011\":1,\"1012\":1,\"1065\":1,\"1069\":4,\"1083\":1,\"1087\":1,\"1092\":1,\"1093\":2,\"1154\":2,\"1183\":4,\"1201\":1,\"1207\":2,\"1218\":6,\"1219\":1,\"1226\":1,\"1242\":5,\"1243\":1,\"1249\":2,\"1260\":1,\"1302\":1,\"1311\":1,\"1319\":2,\"1365\":4,\"1376\":2,\"1383\":2,\"1385\":4,\"1393\":1,\"1403\":6,\"1405\":6,\"1406\":2,\"1412\":2,\"1418\":1,\"1492\":1,\"1533\":2,\"1691\":3,\"1692\":5,\"1694\":2}}],[\"~foo\",{\"1\":{\"1243\":1}}],[\"~url\",{\"1\":{\"1160\":1}}],[\"~~6\",{\"1\":{\"1153\":1}}],[\"~1\",{\"1\":{\"1147\":1}}],[\"~www\",{\"1\":{\"215\":1}}],[\"~\",{\"1\":{\"15\":1,\"187\":2,\"194\":1,\"880\":1,\"1147\":1,\"1151\":1,\"1153\":1,\"1160\":1}}],[\"相信前端在跨端的领域下肯定会有更好的解决方案\",{\"1\":{\"1621\":1}}],[\"相比把函数当作参数传递\",{\"1\":{\"1504\":1}}],[\"相比之下\",{\"1\":{\"1076\":1,\"1670\":1}}],[\"相较于星号\",{\"1\":{\"1338\":1}}],[\"相较于\",{\"1\":{\"1338\":1,\"1427\":1}}],[\"相反\",{\"1\":{\"929\":1,\"1069\":1,\"1281\":1}}],[\"相似的\",{\"1\":{\"893\":1}}],[\"相应地原型对象中的构造函数\",{\"1\":{\"578\":1}}],[\"相等运算符不总是传递的\",{\"1\":{\"1203\":1}}],[\"相等运算符\",{\"0\":{\"952\":1},\"1\":{\"952\":1}}],[\"相等\",{\"1\":{\"509\":1}}],[\"相关的数据作用域\",{\"1\":{\"1560\":1}}],[\"相关操作可能会导致浏览器卡顿\",{\"1\":{\"1432\":1}}],[\"相关设置\",{\"1\":{\"48\":1}}],[\"相关属性\",{\"1\":{\"47\":1}}],[\"相当于特定类型所有实例都可以访问到一个公共容器\",{\"1\":{\"1475\":1}}],[\"相当于函数对象的\",{\"1\":{\"1334\":2}}],[\"相当于把左边的子表达式加上小括号\",{\"1\":{\"1242\":1}}],[\"相当于调用数组\",{\"1\":{\"943\":1}}],[\"相当于\",{\"1\":{\"624\":1,\"1093\":1,\"1169\":1,\"1242\":1,\"1350\":1,\"1561\":1,\"1578\":1}}],[\"相当于一个仓库\",{\"1\":{\"412\":1}}],[\"相当于前缘防抖和延迟防抖都使用定时器实现时的结合\",{\"1\":{\"290\":1}}],[\"相当于格式化系统\",{\"1\":{\"197\":1}}],[\"相当于给该元素设置了\",{\"1\":{\"37\":1}}],[\"相当于数字值\",{\"1\":{\"75\":2}}],[\"相当于数字\",{\"1\":{\"24\":1}}],[\"相对cookie安全\",{\"1\":{\"444\":1}}],[\"相对地址\",{\"1\":{\"100\":1}}],[\"相对于原型链而言\",{\"1\":{\"636\":1}}],[\"相对于其正常位置进行定位\",{\"1\":{\"35\":1}}],[\"相对于\",{\"1\":{\"35\":2,\"105\":1}}],[\"相对于视口的高度\",{\"1\":{\"24\":1}}],[\"相对于视口的宽度或高度\",{\"1\":{\"24\":2}}],[\"相对于视口的宽度\",{\"1\":{\"24\":1}}],[\"相对于根元素\",{\"1\":{\"24\":1}}],[\"相对于字符\",{\"1\":{\"24\":1}}],[\"相对于当前对象内文本的字体尺寸\",{\"1\":{\"24\":1}}],[\"相对长度单位又可以分为\",{\"1\":{\"24\":1}}],[\"相对长度单位\",{\"0\":{\"24\":1},\"1\":{\"23\":1}}],[\"相同点\",{\"1\":{\"1194\":1}}],[\"相同则返回\",{\"1\":{\"1151\":1}}],[\"相同的是\",{\"1\":{\"599\":1}}],[\"相同\",{\"1\":{\"18\":1,\"91\":1,\"1150\":1,\"1203\":1,\"1692\":1}}],[\"相连兄弟\",{\"1\":{\"15\":1}}],[\"相邻选择符\",{\"1\":{\"13\":1}}],[\"b7\",{\"1\":{\"1661\":1}}],[\"b5\",{\"1\":{\"1661\":1}}],[\"b3\",{\"1\":{\"1661\":1}}],[\"b2\",{\"1\":{\"1080\":1,\"1661\":1}}],[\"bmw\",{\"1\":{\"1060\":1}}],[\"b9\",{\"1\":{\"881\":1,\"887\":1}}],[\"b6\",{\"1\":{\"881\":1,\"887\":1,\"1661\":1}}],[\"b1\",{\"1\":{\"881\":1,\"887\":1,\"1080\":1,\"1201\":1,\"1661\":1}}],[\"bdjavascript\",{\"1\":{\"870\":1,\"875\":1}}],[\"bd\",{\"1\":{\"870\":1,\"875\":1}}],[\"bbb\",{\"1\":{\"1218\":8}}],[\"bbbbb\",{\"1\":{\"467\":1}}],[\"bb\",{\"1\":{\"494\":1,\"881\":1,\"887\":1,\"1201\":1}}],[\"bfs\",{\"2\":{\"481\":1,\"499\":1}}],[\"bfc的作用\",{\"1\":{\"325\":1}}],[\"bfc\",{\"1\":{\"325\":1,\"329\":1}}],[\"bfc容器可以用来清除浮动元素的影响\",{\"1\":{\"325\":1}}],[\"bfc容器是css布局中的一个重要概念\",{\"1\":{\"325\":1}}],[\"bfc容器是一种具有特定规则的html元素或css属性\",{\"1\":{\"325\":1}}],[\"bfc容器\",{\"1\":{\"325\":1}}],[\"bfc和浮动清除\",{\"0\":{\"324\":1}}],[\"bella\",{\"1\":{\"1474\":2}}],[\"beautiful\",{\"1\":{\"1312\":1}}],[\"bet\",{\"1\":{\"1169\":1}}],[\"between\",{\"1\":{\"332\":1}}],[\"been\",{\"1\":{\"1066\":1,\"1076\":1,\"1400\":2}}],[\"ben\",{\"1\":{\"569\":3,\"586\":1,\"590\":1,\"592\":1,\"640\":5,\"656\":1,\"726\":2,\"935\":3,\"1489\":4}}],[\"be\",{\"1\":{\"392\":1,\"393\":1,\"394\":1,\"1385\":1,\"1386\":2,\"1395\":1}}],[\"beforefn\",{\"1\":{\"1505\":2}}],[\"beforecallback\",{\"1\":{\"1458\":2}}],[\"beforesend\",{\"1\":{\"1233\":1}}],[\"before选择器\",{\"1\":{\"256\":1}}],[\"before\",{\"1\":{\"16\":2,\"341\":1,\"664\":1,\"1458\":2,\"1505\":5}}],[\"bigdecima\",{\"1\":{\"924\":1}}],[\"big\",{\"1\":{\"714\":2,\"715\":2}}],[\"biginteger\",{\"1\":{\"506\":1}}],[\"bigint是es10新加的一种javascript数据类型\",{\"1\":{\"376\":1}}],[\"bigint\",{\"0\":{\"376\":1,\"1128\":1},\"1\":{\"917\":1,\"929\":8,\"1115\":2,\"1128\":3}}],[\"bit\",{\"1\":{\"317\":1}}],[\"bingo\",{\"1\":{\"1264\":1,\"1274\":1,\"1319\":2}}],[\"binary\",{\"1\":{\"470\":1,\"479\":1,\"497\":1,\"914\":1,\"929\":1}}],[\"bind会创建一个新的包装函数\",{\"1\":{\"1584\":1}}],[\"bind\",{\"0\":{\"394\":1,\"1308\":1},\"1\":{\"391\":1,\"394\":3,\"607\":1,\"1296\":2,\"1308\":1,\"1309\":1,\"1311\":3,\"1312\":6,\"1375\":3,\"1412\":2,\"1580\":2,\"1584\":1,\"1586\":4,\"1588\":1,\"1589\":3,\"1590\":1}}],[\"bin目录下的所有以a开头的文件或者目录\",{\"1\":{\"200\":1}}],[\"bin\",{\"1\":{\"186\":1,\"187\":1,\"194\":1,\"195\":1,\"196\":1,\"200\":1}}],[\"b点坐标\",{\"1\":{\"274\":1}}],[\"byte\",{\"1\":{\"250\":1}}],[\"b为字节\",{\"1\":{\"215\":1}}],[\"button\",{\"1\":{\"1286\":3,\"1435\":3,\"1595\":1}}],[\"button>\",{\"1\":{\"1285\":1,\"1286\":1,\"1287\":1}}],[\"butlast\",{\"1\":{\"1183\":1}}],[\"buick\",{\"1\":{\"1109\":1,\"1110\":2}}],[\"buildmaxheap\",{\"1\":{\"488\":2}}],[\"buildheap\",{\"1\":{\"482\":2}}],[\"build\",{\"1\":{\"161\":2}}],[\"bug\",{\"1\":{\"19\":1,\"143\":1}}],[\"bg\",{\"1\":{\"111\":1}}],[\"brc\",{\"1\":{\"1674\":1}}],[\"browserify\",{\"1\":{\"1616\":2,\"1619\":1}}],[\"broadcast\",{\"1\":{\"397\":1}}],[\"branch\",{\"1\":{\"167\":1,\"175\":1}}],[\"bridghtness\",{\"1\":{\"110\":1}}],[\"break\",{\"0\":{\"91\":1,\"958\":1},\"1\":{\"90\":1,\"91\":4,\"249\":1,\"253\":1,\"476\":1,\"482\":1,\"958\":1,\"959\":1,\"960\":4,\"962\":1,\"963\":2,\"967\":1,\"969\":1,\"1000\":2,\"1001\":1,\"1002\":2,\"1009\":1,\"1023\":1,\"1025\":1,\"1040\":4,\"1041\":2,\"1042\":3,\"1059\":1,\"1067\":4,\"1349\":2}}],[\"bat\",{\"1\":{\"1654\":1}}],[\"batchdisposal\",{\"1\":{\"1355\":1}}],[\"ba\",{\"1\":{\"881\":1,\"887\":1}}],[\"baz\",{\"1\":{\"612\":4,\"613\":3,\"614\":4,\"630\":3,\"781\":9,\"1166\":1,\"1214\":4,\"1218\":13,\"1256\":2,\"1295\":3,\"1329\":3,\"1335\":2,\"1576\":8,\"1584\":2,\"1654\":4,\"1676\":2,\"1708\":2,\"1709\":9}}],[\"baz1\",{\"1\":{\"600\":4}}],[\"baz2\",{\"1\":{\"600\":2}}],[\"bad\",{\"1\":{\"562\":1,\"1490\":1}}],[\"backtracking\",{\"1\":{\"521\":3}}],[\"backgroundcolor\",{\"1\":{\"1273\":1}}],[\"background\",{\"0\":{\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1},\"1\":{\"98\":2,\"99\":2,\"100\":4,\"101\":3,\"102\":4,\"104\":1,\"105\":1,\"106\":1,\"110\":6,\"111\":1,\"439\":1,\"1614\":1}}],[\"babel\",{\"1\":{\"1427\":1,\"1619\":1,\"1636\":1,\"1667\":1}}],[\"bab\",{\"1\":{\"494\":1}}],[\"babad\",{\"1\":{\"494\":1}}],[\"barcontext\",{\"1\":{\"1709\":2}}],[\"bar=3`\",{\"1\":{\"530\":1}}],[\"bar\",{\"1\":{\"245\":3,\"530\":1,\"531\":1,\"539\":2,\"540\":6,\"547\":4,\"548\":6,\"550\":1,\"552\":5,\"559\":2,\"561\":2,\"612\":3,\"613\":6,\"614\":2,\"630\":2,\"631\":2,\"632\":1,\"652\":2,\"694\":2,\"701\":2,\"735\":2,\"742\":4,\"749\":2,\"763\":1,\"781\":4,\"796\":3,\"819\":3,\"917\":1,\"927\":1,\"1067\":2,\"1166\":1,\"1214\":3,\"1215\":1,\"1218\":18,\"1230\":2,\"1243\":42,\"1295\":3,\"1319\":2,\"1335\":3,\"1371\":2,\"1386\":4,\"1405\":5,\"1407\":5,\"1467\":2,\"1570\":2,\"1576\":7,\"1579\":6,\"1580\":7,\"1584\":5,\"1586\":2,\"1589\":3,\"1611\":3,\"1612\":6,\"1613\":5,\"1614\":2,\"1616\":8,\"1631\":2,\"1635\":3,\"1641\":4,\"1654\":3,\"1655\":1,\"1674\":5,\"1675\":4,\"1676\":2,\"1677\":3,\"1682\":2,\"1685\":2,\"1691\":4,\"1692\":2,\"1693\":2,\"1694\":2,\"1695\":6,\"1700\":3,\"1708\":5,\"1709\":24}}],[\"basis的简写\",{\"1\":{\"332\":1}}],[\"basis属性定义了在分配多余空间之前\",{\"1\":{\"332\":1}}],[\"basis\",{\"1\":{\"332\":1,\"714\":2,\"715\":2}}],[\"bash\",{\"1\":{\"215\":2}}],[\"base\",{\"1\":{\"93\":1,\"94\":1,\"329\":2,\"1207\":1,\"1209\":4}}],[\"baseline\",{\"1\":{\"82\":3}}],[\"bla\",{\"1\":{\"1125\":1}}],[\"blabla\",{\"1\":{\"858\":1,\"905\":2,\"926\":1}}],[\"black\",{\"1\":{\"15\":1,\"59\":1,\"635\":3,\"662\":3,\"1389\":3}}],[\"bloom\",{\"1\":{\"1312\":3}}],[\"blog\",{\"1\":{\"143\":1}}],[\"blocking\",{\"1\":{\"1547\":2}}],[\"block\",{\"1\":{\"36\":4,\"37\":1,\"40\":1,\"44\":2,\"45\":5,\"46\":2,\"48\":1,\"50\":2,\"54\":1,\"94\":1,\"325\":2,\"329\":8,\"1073\":1,\"1692\":1}}],[\"blue\",{\"1\":{\"108\":1,\"635\":3,\"662\":3,\"1273\":1}}],[\"blink\",{\"1\":{\"83\":1,\"143\":3,\"436\":1,\"1550\":2}}],[\"b\",{\"1\":{\"17\":1,\"110\":1,\"245\":6,\"252\":2,\"253\":6,\"274\":6,\"275\":4,\"276\":4,\"343\":4,\"344\":3,\"354\":6,\"381\":1,\"385\":4,\"388\":2,\"392\":5,\"393\":3,\"394\":4,\"467\":1,\"476\":2,\"482\":2,\"538\":2,\"539\":3,\"540\":2,\"552\":2,\"673\":2,\"689\":2,\"694\":3,\"695\":2,\"701\":3,\"733\":1,\"734\":2,\"742\":4,\"756\":2,\"769\":4,\"776\":3,\"787\":6,\"794\":1,\"795\":1,\"807\":6,\"820\":4,\"825\":4,\"843\":1,\"870\":3,\"875\":3,\"953\":1,\"986\":1,\"994\":1,\"996\":2,\"1020\":3,\"1065\":4,\"1066\":3,\"1068\":2,\"1087\":4,\"1151\":12,\"1154\":5,\"1156\":2,\"1181\":3,\"1182\":1,\"1185\":1,\"1186\":1,\"1201\":2,\"1203\":7,\"1204\":3,\"1216\":2,\"1217\":4,\"1219\":2,\"1221\":2,\"1227\":1,\"1230\":1,\"1242\":7,\"1248\":1,\"1253\":4,\"1254\":1,\"1264\":2,\"1266\":4,\"1267\":1,\"1273\":2,\"1274\":1,\"1281\":5,\"1294\":2,\"1319\":3,\"1367\":3,\"1373\":4,\"1376\":2,\"1382\":2,\"1395\":2,\"1406\":3,\"1411\":2,\"1418\":2,\"1503\":4,\"1550\":1,\"1561\":2,\"1564\":3,\"1565\":1,\"1586\":5,\"1596\":1,\"1616\":1,\"1661\":9,\"1674\":4,\"1675\":2,\"1676\":1,\"1681\":9,\"1710\":2}}],[\"boy\",{\"1\":{\"635\":3,\"659\":4}}],[\"bot\",{\"1\":{\"607\":1}}],[\"bottom\",{\"1\":{\"14\":1,\"15\":1,\"35\":1,\"38\":4,\"51\":1,\"56\":1,\"82\":6,\"94\":1,\"102\":3}}],[\"boundgetx\",{\"1\":{\"1312\":2}}],[\"bound\",{\"1\":{\"392\":1,\"393\":1,\"394\":1,\"1296\":2,\"1587\":3}}],[\"boo\",{\"1\":{\"994\":1}}],[\"book\",{\"1\":{\"562\":6}}],[\"boolean类型的值表示用于检测的对象是否可扩展\",{\"1\":{\"767\":1}}],[\"boolean\",{\"0\":{\"1126\":1},\"1\":{\"250\":1,\"251\":1,\"274\":1,\"470\":1,\"491\":1,\"544\":1,\"547\":1,\"563\":1,\"780\":1,\"800\":2,\"807\":3,\"817\":1,\"898\":1,\"903\":1,\"917\":3,\"928\":1,\"934\":1,\"936\":1,\"942\":1,\"943\":1,\"944\":1,\"945\":9,\"947\":1,\"948\":5,\"951\":1,\"963\":2,\"1018\":1,\"1020\":2,\"1047\":1,\"1080\":1,\"1115\":1,\"1122\":2,\"1126\":4,\"1130\":1,\"1197\":2,\"1203\":3,\"1220\":1,\"1255\":4,\"1338\":1}}],[\"booleanliteral\",{\"1\":{\"248\":1}}],[\"bootp\",{\"1\":{\"311\":1}}],[\"bootproto=static\",{\"1\":{\"220\":1}}],[\"boot\",{\"1\":{\"186\":1}}],[\"bolder\",{\"1\":{\"75\":1}}],[\"bold\",{\"1\":{\"75\":1}}],[\"bordre\",{\"1\":{\"63\":1}}],[\"border\",{\"0\":{\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1},\"1\":{\"15\":2,\"36\":1,\"50\":1,\"56\":2,\"58\":3,\"59\":1,\"60\":2,\"61\":8,\"62\":4,\"63\":2,\"64\":2,\"65\":2,\"66\":2,\"67\":1,\"101\":3}}],[\"boder\",{\"1\":{\"60\":1}}],[\"body>\",{\"1\":{\"120\":1,\"1285\":1,\"1286\":1,\"1287\":1}}],[\"body\",{\"1\":{\"35\":1,\"36\":1,\"438\":1,\"1403\":3,\"1438\":2,\"1502\":2,\"1614\":1}}],[\"box的缩写\",{\"1\":{\"332\":1}}],[\"box|用于指定当前项位于顶端边缘|\",{\"1\":{\"106\":1}}],[\"box|具体长度|\",{\"1\":{\"106\":1}}],[\"box|百分比|\",{\"1\":{\"106\":1}}],[\"box\",{\"0\":{\"58\":1,\"59\":1},\"1\":{\"36\":3,\"58\":3,\"59\":13,\"93\":7,\"101\":3,\"329\":2,\"332\":1}}],[\"包装在定时器\",{\"1\":{\"1446\":1}}],[\"包装在一个函数里\",{\"1\":{\"1350\":1}}],[\"包装成的一个\",{\"1\":{\"1338\":1}}],[\"包围在括号中并由逗号分隔\",{\"1\":{\"1326\":1}}],[\"包\",{\"1\":{\"303\":2,\"317\":1}}],[\"包裹一个表达式来当作属性名\",{\"1\":{\"559\":1}}],[\"包裹起来\",{\"1\":{\"122\":1}}],[\"包裹性\",{\"0\":{\"53\":1},\"1\":{\"51\":1}}],[\"包含着\",{\"1\":{\"1674\":2}}],[\"包含着整个全局作用域\",{\"1\":{\"1674\":1}}],[\"包含结构\",{\"1\":{\"1621\":1}}],[\"包含\",{\"1\":{\"1579\":1,\"1708\":1}}],[\"包含了结构\",{\"1\":{\"1621\":1}}],[\"包含了传给函数的所有实参\",{\"1\":{\"1394\":1}}],[\"包含了样式表文件的路径\",{\"1\":{\"131\":1}}],[\"包含一个指向\",{\"1\":{\"1281\":1}}],[\"包含一个数据值的位置\",{\"1\":{\"528\":1}}],[\"包含空格的字符串被转换成0\",{\"1\":{\"905\":1}}],[\"包含全局的\",{\"1\":{\"846\":1}}],[\"包含文本\",{\"1\":{\"120\":1}}],[\"包含元素的名称\",{\"1\":{\"116\":1}}],[\"包含选择符\",{\"1\":{\"13\":1}}],[\"包括处理速度和内存消耗\",{\"1\":{\"1711\":1}}],[\"包括定义\",{\"1\":{\"1700\":1}}],[\"包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理\",{\"1\":{\"1698\":1}}],[\"包括内置对象函数在内的所有函数都可以用\",{\"1\":{\"1581\":1}}],[\"包括花括号在内\",{\"1\":{\"1328\":1}}],[\"包括所有对象会被计算为真\",{\"1\":{\"1020\":1}}],[\"包括非整数类型的名称和继承的那些\",{\"1\":{\"983\":1}}],[\"包括它自己\",{\"1\":{\"953\":1}}],[\"包括其可枚举性\",{\"1\":{\"678\":1}}],[\"包括不可枚举属性但不包括\",{\"1\":{\"729\":1,\"803\":1}}],[\"包括不可枚举的属性\",{\"1\":{\"565\":1}}],[\"包括不同的标签页\",{\"1\":{\"397\":1}}],[\"包括数组元素\",{\"1\":{\"564\":1}}],[\"包括下载网页和资源等\",{\"1\":{\"425\":1}}],[\"包括原型\",{\"1\":{\"388\":1}}],[\"包括标识符\",{\"1\":{\"233\":1}}],[\"包括构造器\",{\"1\":{\"230\":1}}],[\"包括已用内存\",{\"1\":{\"215\":1}}],[\"包括隐藏的文件\",{\"1\":{\"195\":1}}],[\"包括浏览器制造商\",{\"1\":{\"139\":1}}],[\"包括仅有一行文本的情况\",{\"1\":{\"81\":1}}],[\"包括基本颜色关键字\",{\"1\":{\"28\":1}}],[\"包括\",{\"1\":{\"15\":1,\"989\":1,\"1668\":1,\"1698\":1}}],[\"子级可以向父级查找变量\",{\"1\":{\"1708\":1}}],[\"子语句执行完毕后\",{\"1\":{\"1055\":1}}],[\"子语句时标识符创建\",{\"1\":{\"1055\":1}}],[\"子语句内部的\",{\"1\":{\"1055\":1}}],[\"子句内的块将创建一个新的块作用域的词法环境\",{\"1\":{\"1067\":1}}],[\"子句在\",{\"1\":{\"1053\":1}}],[\"子句\",{\"1\":{\"1052\":3,\"1054\":2}}],[\"子句包含\",{\"1\":{\"1052\":1}}],[\"子句的其中一个\",{\"1\":{\"1051\":1}}],[\"子句的执行\",{\"1\":{\"1034\":1,\"1036\":1}}],[\"子句或者一个\",{\"1\":{\"1051\":1}}],[\"子类型对象最终会包含父类型对象的全部实例属性\",{\"1\":{\"663\":1}}],[\"子类型构造函数\",{\"1\":{\"659\":1}}],[\"子类构造函数的原型指向父类构造函数生成的实例\",{\"1\":{\"662\":1}}],[\"子类构造函数调用父类构造函数\",{\"1\":{\"662\":1}}],[\"子类构造函数\",{\"1\":{\"635\":1}}],[\"子类继承父类\",{\"1\":{\"684\":1}}],[\"子类继承内置对象\",{\"1\":{\"624\":1}}],[\"子类继承\",{\"0\":{\"631\":1},\"1\":{\"624\":1}}],[\"子类的显式原型对象\",{\"1\":{\"624\":1}}],[\"子类的隐式原型对象\",{\"1\":{\"624\":1}}],[\"子类的实例对象继承\",{\"1\":{\"624\":1}}],[\"子类的\",{\"1\":{\"624\":2}}],[\"子类的构造函数继承父类时必须执行一次\",{\"1\":{\"621\":1}}],[\"子类实例对象的构造函数无法区分是子类构造函数还是父类构造函数\",{\"1\":{\"664\":1}}],[\"子类实例\",{\"1\":{\"623\":1}}],[\"子类\",{\"1\":{\"622\":1,\"623\":1}}],[\"子类就无法得到\",{\"1\":{\"619\":1}}],[\"子类必须在构造函数中调用\",{\"1\":{\"619\":1}}],[\"子类可以对基类的行为进行扩展\",{\"1\":{\"229\":1}}],[\"子数组\",{\"1\":{\"524\":1}}],[\"子数组最少包含一个元素\",{\"1\":{\"524\":1}}],[\"子串\",{\"1\":{\"467\":1}}],[\"子选择器\",{\"1\":{\"336\":1}}],[\"子选择符\",{\"1\":{\"13\":1}}],[\"子网掩码\",{\"1\":{\"220\":1}}],[\"子元素的\",{\"1\":{\"40\":1}}],[\"子元素中的倒数第一个\",{\"1\":{\"15\":1}}],[\"tdz2\",{\"1\":{\"1694\":1}}],[\"tdz\",{\"1\":{\"1694\":4}}],[\"tdz1\",{\"1\":{\"1694\":1}}],[\"ture\",{\"1\":{\"1233\":1}}],[\"turns\",{\"1\":{\"26\":1}}],[\"turn\",{\"1\":{\"26\":1}}],[\"t>\",{\"1\":{\"668\":1}}],[\"twosum\",{\"1\":{\"515\":1}}],[\"two\",{\"1\":{\"329\":1,\"689\":1,\"1186\":1,\"1213\":2,\"1611\":2,\"1612\":3}}],[\"tftp\",{\"1\":{\"311\":1}}],[\"t\",{\"1\":{\"215\":1,\"668\":5,\"796\":1,\"928\":2,\"1137\":2,\"1197\":2,\"1673\":1,\"1693\":1}}],[\"ths\",{\"1\":{\"1580\":1}}],[\"thunk\",{\"1\":{\"1338\":1}}],[\"that\",{\"1\":{\"929\":1,\"1356\":2,\"1518\":1}}],[\"third\",{\"1\":{\"1214\":2}}],[\"thi\",{\"1\":{\"664\":1}}],[\"thisarg\",{\"1\":{\"668\":4,\"669\":1,\"1301\":1,\"1302\":1,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1}}],[\"this代表person函数\",{\"1\":{\"394\":1}}],[\"this代表fn\",{\"1\":{\"394\":1}}],[\"this指向必须是指向new出来的实例对象\",{\"1\":{\"394\":1}}],[\"this指向window\",{\"1\":{\"392\":1,\"393\":1}}],[\"this就是调用myapply函数的函数\",{\"1\":{\"393\":1}}],[\"this就是调用mycall函数的函数\",{\"1\":{\"392\":1}}],[\"this\",{\"0\":{\"1375\":1,\"1457\":1,\"1518\":1,\"1575\":1},\"1\":{\"249\":1,\"288\":3,\"289\":5,\"290\":4,\"292\":5,\"293\":1,\"294\":2,\"392\":9,\"393\":8,\"394\":18,\"402\":1,\"408\":6,\"470\":3,\"473\":4,\"479\":3,\"491\":2,\"497\":3,\"534\":2,\"569\":5,\"570\":5,\"571\":1,\"572\":3,\"575\":1,\"576\":1,\"578\":2,\"579\":1,\"581\":1,\"587\":2,\"590\":6,\"592\":11,\"593\":4,\"597\":8,\"599\":3,\"603\":7,\"606\":2,\"607\":8,\"612\":2,\"613\":2,\"614\":2,\"615\":1,\"619\":8,\"621\":2,\"622\":5,\"623\":7,\"625\":4,\"628\":1,\"630\":3,\"632\":2,\"635\":4,\"636\":3,\"659\":11,\"662\":6,\"664\":3,\"668\":1,\"669\":2,\"684\":5,\"735\":1,\"736\":2,\"796\":1,\"820\":2,\"846\":1,\"848\":5,\"928\":1,\"955\":2,\"986\":1,\"1003\":2,\"1020\":2,\"1035\":4,\"1048\":2,\"1052\":2,\"1053\":2,\"1054\":5,\"1065\":2,\"1178\":1,\"1285\":2,\"1300\":1,\"1302\":5,\"1303\":2,\"1304\":1,\"1306\":6,\"1307\":5,\"1308\":1,\"1310\":1,\"1311\":2,\"1312\":12,\"1319\":3,\"1323\":1,\"1349\":1,\"1361\":1,\"1374\":1,\"1375\":43,\"1381\":1,\"1386\":2,\"1401\":1,\"1412\":1,\"1413\":1,\"1418\":2,\"1433\":2,\"1436\":5,\"1438\":1,\"1441\":1,\"1446\":2,\"1449\":3,\"1457\":5,\"1474\":5,\"1477\":2,\"1481\":2,\"1483\":3,\"1485\":2,\"1486\":3,\"1487\":2,\"1488\":1,\"1489\":1,\"1490\":7,\"1491\":6,\"1492\":2,\"1497\":10,\"1505\":11,\"1510\":6,\"1511\":4,\"1514\":1,\"1515\":1,\"1516\":5,\"1518\":12,\"1521\":2,\"1522\":1,\"1523\":1,\"1525\":1,\"1526\":3,\"1529\":1,\"1555\":1,\"1561\":9,\"1575\":1,\"1576\":4,\"1577\":1,\"1578\":9,\"1579\":16,\"1580\":7,\"1581\":4,\"1582\":1,\"1583\":1,\"1584\":5,\"1586\":4,\"1587\":7,\"1588\":3,\"1589\":23,\"1612\":4,\"1620\":4,\"1677\":2,\"1709\":3}}],[\"thresod\",{\"1\":{\"1438\":1}}],[\"thresold\",{\"1\":{\"1438\":5}}],[\"three\",{\"1\":{\"689\":1,\"1186\":1,\"1213\":2}}],[\"threesum\",{\"1\":{\"476\":1}}],[\"thread\",{\"0\":{\"423\":1},\"1\":{\"1547\":1}}],[\"throttle\",{\"1\":{\"294\":1,\"1433\":1,\"1435\":1,\"1436\":8,\"1438\":2}}],[\"throttledelayexecution\",{\"1\":{\"293\":1}}],[\"throttleimmediateexecution\",{\"1\":{\"292\":1}}],[\"throws\",{\"1\":{\"1349\":1}}],[\"throw\",{\"0\":{\"1045\":1},\"1\":{\"249\":1,\"250\":1,\"392\":1,\"393\":1,\"394\":1,\"813\":1,\"1000\":1,\"1045\":2,\"1046\":1,\"1047\":4,\"1048\":2,\"1052\":2,\"1053\":1,\"1054\":3,\"1344\":1,\"1350\":1}}],[\"through\",{\"1\":{\"83\":1}}],[\"them\",{\"1\":{\"1385\":1}}],[\"there\",{\"1\":{\"1197\":2}}],[\"then\",{\"1\":{\"372\":2,\"380\":1,\"383\":2,\"457\":1,\"1338\":2,\"1340\":2,\"1344\":3,\"1345\":3,\"1346\":1,\"1348\":2,\"1350\":1,\"1352\":1,\"1353\":1,\"1425\":2,\"1426\":2,\"1533\":4,\"1593\":1,\"1595\":1,\"1596\":2,\"1597\":1,\"1599\":2,\"1600\":1,\"1601\":1,\"1602\":1}}],[\"the\",{\"1\":{\"215\":1,\"659\":2,\"716\":1,\"1027\":2,\"1319\":1,\"1385\":1,\"1411\":1,\"1438\":1}}],[\"txt\",{\"1\":{\"203\":1,\"205\":1,\"206\":4,\"209\":2,\"215\":1}}],[\"tmpfn空函数的原型指向绑定函数的原型\",{\"1\":{\"394\":1}}],[\"tmpfn\",{\"1\":{\"394\":4}}],[\"tmp目录下的tool目录复制到\",{\"1\":{\"199\":1}}],[\"tmp目录下的tool目录剪切到\",{\"1\":{\"198\":1}}],[\"tmp\",{\"1\":{\"186\":1,\"198\":2,\"199\":2,\"1218\":2}}],[\"tcp链接建立后发送http请求\",{\"1\":{\"464\":1}}],[\"tcp\",{\"0\":{\"298\":1,\"313\":1,\"318\":1},\"1\":{\"152\":4,\"153\":1,\"297\":2,\"298\":7,\"299\":2,\"300\":2,\"301\":3,\"303\":1,\"304\":10,\"309\":1,\"310\":1,\"313\":1,\"318\":2}}],[\"tracemonkey\",{\"1\":{\"1550\":1}}],[\"transmission\",{\"1\":{\"298\":1}}],[\"transport\",{\"1\":{\"297\":1,\"318\":1}}],[\"transparent\",{\"1\":{\"28\":1,\"99\":1}}],[\"transfrom\",{\"1\":{\"272\":1}}],[\"transform\",{\"0\":{\"84\":1,\"272\":1},\"1\":{\"438\":1}}],[\"transient\",{\"1\":{\"250\":1}}],[\"treenode\",{\"1\":{\"470\":2,\"479\":2,\"497\":2}}],[\"tree\",{\"1\":{\"470\":1,\"479\":1,\"497\":1,\"1667\":1}}],[\"trigger\",{\"1\":{\"1435\":5}}],[\"triggers\",{\"1\":{\"1000\":1}}],[\"trip\",{\"1\":{\"1166\":1}}],[\"trim\",{\"1\":{\"673\":1}}],[\"trimend\",{\"0\":{\"378\":1},\"1\":{\"378\":1}}],[\"trimstart和trimend用来单独去除字符串的首和尾的空格\",{\"1\":{\"378\":1}}],[\"trimstart\",{\"0\":{\"378\":1},\"1\":{\"378\":1}}],[\"trident\",{\"1\":{\"143\":5,\"436\":1,\"1550\":1}}],[\"trying\",{\"1\":{\"392\":1,\"393\":1,\"394\":1}}],[\"try\",{\"0\":{\"1051\":1},\"1\":{\"249\":1,\"1034\":1,\"1048\":2,\"1051\":8,\"1052\":8,\"1053\":7,\"1054\":9,\"1055\":1,\"1348\":3,\"1349\":2,\"1350\":1,\"1357\":1}}],[\"true\",{\"1\":{\"245\":1,\"246\":1,\"288\":1,\"290\":1,\"294\":1,\"350\":3,\"351\":1,\"364\":1,\"380\":1,\"383\":2,\"403\":1,\"408\":2,\"455\":1,\"470\":2,\"482\":1,\"491\":4,\"512\":2,\"521\":1,\"528\":3,\"529\":2,\"530\":4,\"532\":2,\"538\":1,\"539\":3,\"540\":1,\"546\":2,\"547\":4,\"548\":4,\"563\":1,\"564\":5,\"565\":2,\"569\":1,\"575\":1,\"577\":4,\"578\":1,\"581\":1,\"603\":3,\"615\":1,\"624\":6,\"625\":2,\"632\":5,\"650\":2,\"651\":2,\"653\":8,\"669\":2,\"684\":2,\"694\":5,\"695\":2,\"721\":3,\"726\":5,\"737\":1,\"748\":2,\"749\":3,\"756\":1,\"757\":1,\"762\":2,\"763\":8,\"769\":1,\"776\":5,\"781\":4,\"787\":6,\"805\":1,\"807\":2,\"813\":2,\"819\":2,\"820\":3,\"825\":11,\"859\":2,\"861\":4,\"897\":1,\"898\":1,\"899\":5,\"903\":2,\"905\":6,\"917\":1,\"921\":1,\"928\":1,\"929\":1,\"934\":1,\"935\":3,\"936\":1,\"937\":1,\"943\":4,\"944\":2,\"945\":4,\"946\":2,\"948\":9,\"951\":6,\"952\":6,\"953\":2,\"954\":19,\"955\":2,\"969\":1,\"1001\":1,\"1003\":1,\"1009\":1,\"1014\":1,\"1017\":2,\"1018\":2,\"1020\":3,\"1047\":1,\"1058\":1,\"1069\":2,\"1080\":1,\"1100\":1,\"1101\":2,\"1102\":4,\"1109\":6,\"1110\":2,\"1111\":2,\"1115\":5,\"1116\":3,\"1126\":2,\"1130\":1,\"1157\":2,\"1197\":5,\"1200\":1,\"1201\":5,\"1202\":5,\"1203\":12,\"1204\":1,\"1217\":2,\"1218\":3,\"1220\":3,\"1233\":2,\"1253\":15,\"1254\":19,\"1255\":9,\"1319\":1,\"1329\":1,\"1334\":1,\"1438\":5,\"1476\":2,\"1486\":1,\"1504\":3,\"1518\":3,\"1525\":1,\"1561\":3,\"1651\":5,\"1692\":2}}],[\"ttf\",{\"1\":{\"79\":1}}],[\"template\",{\"1\":{\"1080\":1}}],[\"temp\",{\"1\":{\"473\":5,\"482\":2,\"488\":4,\"1080\":1}}],[\"testfinnally\",{\"1\":{\"1034\":2}}],[\"testcall\",{\"1\":{\"392\":2}}],[\"test\",{\"1\":{\"213\":2,\"805\":1,\"1033\":2,\"1034\":6,\"1035\":8,\"1329\":2,\"1427\":1,\"1526\":6,\"1581\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1}}],[\"teal\",{\"1\":{\"59\":1}}],[\"textcontent\",{\"1\":{\"1593\":1}}],[\"text`\",{\"1\":{\"245\":1}}],[\"text``string\",{\"1\":{\"245\":1}}],[\"text\",{\"0\":{\"81\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1},\"1\":{\"15\":1,\"59\":1,\"81\":8,\"82\":2,\"83\":3,\"85\":1,\"87\":1,\"117\":1,\"118\":2,\"215\":1,\"245\":3,\"329\":2,\"1060\":2,\"1285\":1,\"1286\":1,\"1287\":1,\"1436\":1,\"1449\":4,\"1611\":3,\"1612\":3,\"1613\":2,\"1614\":7}}],[\"touppercase\",{\"1\":{\"1496\":1}}],[\"touch\",{\"1\":{\"203\":1}}],[\"totalargs\",{\"1\":{\"1418\":4}}],[\"toboolean\",{\"0\":{\"945\":1}}],[\"tonumber\",{\"0\":{\"944\":1},\"1\":{\"1203\":4}}],[\"tolocalestring\",{\"1\":{\"806\":1}}],[\"tosource\",{\"1\":{\"806\":1}}],[\"tostring来检测\",{\"1\":{\"936\":1}}],[\"tostring\",{\"0\":{\"833\":1,\"936\":1,\"943\":1},\"1\":{\"548\":1,\"597\":2,\"603\":5,\"757\":1,\"806\":1,\"833\":1,\"834\":1,\"835\":1,\"837\":1,\"838\":7,\"905\":1,\"933\":1,\"936\":15,\"943\":3,\"946\":7,\"947\":1,\"951\":1,\"953\":1,\"955\":4,\"1047\":1,\"1111\":1,\"1130\":1,\"1155\":2,\"1156\":1,\"1220\":5,\"1504\":7}}],[\"tom\",{\"1\":{\"569\":6,\"599\":2,\"640\":5,\"656\":1}}],[\"toyota\",{\"1\":{\"246\":1,\"1109\":1,\"1110\":2}}],[\"tokenizing\",{\"1\":{\"464\":2,\"1666\":2}}],[\"token\",{\"1\":{\"236\":1,\"418\":1,\"559\":1,\"1405\":2,\"1666\":1}}],[\"tooltip提示\",{\"0\":{\"266\":1}}],[\"tool\",{\"1\":{\"198\":2,\"199\":2}}],[\"tools\",{\"1\":{\"196\":2,\"1285\":2,\"1287\":2}}],[\"to\",{\"1\":{\"48\":1,\"100\":1,\"392\":1,\"393\":1,\"394\":1,\"408\":3,\"548\":1,\"928\":3,\"1020\":2,\"1048\":1,\"1068\":1,\"1358\":1,\"1382\":5,\"1385\":1,\"1411\":2,\"1564\":1,\"1565\":2,\"1693\":1}}],[\"toprimitive\",{\"0\":{\"946\":1},\"1\":{\"944\":1,\"946\":9,\"951\":2,\"955\":2,\"1203\":2}}],[\"top\",{\"1\":{\"35\":1,\"38\":5,\"51\":1,\"56\":1,\"60\":1,\"82\":6,\"102\":3,\"215\":1,\"275\":1,\"276\":1,\"277\":1}}],[\"task\",{\"1\":{\"1357\":2,\"1532\":1,\"1552\":2}}],[\"tasks\",{\"1\":{\"1356\":2,\"1357\":2,\"1358\":3}}],[\"take\",{\"1\":{\"1286\":1}}],[\"tar\",{\"1\":{\"211\":2,\"212\":3,\"213\":4,\"215\":3}}],[\"targetsum\",{\"1\":{\"470\":6}}],[\"target\",{\"1\":{\"15\":1,\"402\":11,\"403\":8,\"408\":5,\"503\":8,\"515\":8,\"677\":2,\"737\":2,\"1114\":1,\"1361\":1,\"1375\":1,\"1436\":1,\"1524\":2,\"1525\":6}}],[\"tail\",{\"1\":{\"206\":1,\"500\":2,\"1014\":1,\"1214\":2,\"1365\":2}}],[\"tag\",{\"1\":{\"116\":2,\"170\":1}}],[\"table\",{\"1\":{\"44\":1,\"48\":2,\"325\":1,\"329\":18,\"439\":1}}],[\"timeline\",{\"1\":{\"1287\":1}}],[\"timeout\",{\"1\":{\"460\":2,\"1340\":2,\"1345\":2,\"1433\":2,\"1449\":3}}],[\"time\",{\"1\":{\"304\":2,\"371\":3,\"380\":4,\"383\":8,\"1352\":3,\"1424\":2,\"1425\":2,\"1426\":2,\"1427\":2}}],[\"timerid\",{\"1\":{\"1288\":2}}],[\"timers\",{\"1\":{\"458\":2,\"1534\":1}}],[\"timer\",{\"1\":{\"288\":7,\"289\":3,\"290\":7,\"292\":4,\"458\":1,\"1375\":9,\"1433\":3,\"1446\":4,\"1534\":1}}],[\"tips\",{\"1\":{\"344\":1,\"1449\":4}}],[\"tip\",{\"1\":{\"16\":1}}],[\"title>\",{\"1\":{\"120\":1,\"126\":1}}],[\"title\",{\"1\":{\"14\":2,\"1580\":2,\"1621\":1}}],[\"typedarray\",{\"0\":{\"995\":1},\"1\":{\"1302\":1,\"1306\":1,\"1310\":1}}],[\"typedarray``\",{\"1\":{\"989\":1}}],[\"typeerror\",{\"1\":{\"251\":1,\"408\":1,\"530\":1,\"538\":1,\"539\":3,\"540\":4,\"548\":1,\"563\":2,\"564\":1,\"629\":1,\"683\":1,\"813\":1,\"928\":4,\"929\":1,\"935\":1,\"1067\":1,\"1068\":1,\"1077\":1,\"1185\":1,\"1186\":1,\"1220\":2,\"1335\":1,\"1385\":2,\"1386\":4,\"1403\":2,\"1578\":1,\"1693\":1}}],[\"typeofnan\",{\"1\":{\"861\":3}}],[\"typeof\",{\"0\":{\"934\":1,\"1119\":1},\"1\":{\"249\":1,\"392\":1,\"393\":1,\"394\":1,\"402\":1,\"408\":1,\"540\":1,\"570\":1,\"807\":1,\"849\":1,\"861\":1,\"929\":2,\"933\":1,\"934\":12,\"1116\":2,\"1119\":1,\"1120\":1,\"1122\":1,\"1124\":6,\"1125\":6,\"1126\":3,\"1127\":3,\"1128\":2,\"1129\":3,\"1130\":6,\"1131\":4,\"1132\":3,\"1243\":2,\"1398\":1,\"1456\":1,\"1483\":1,\"1502\":2,\"1581\":1,\"1694\":3}}],[\"type=get\",{\"1\":{\"716\":1}}],[\"type=ethernet\",{\"1\":{\"220\":1}}],[\"type=\",{\"1\":{\"118\":2,\"130\":1,\"1285\":1,\"1286\":1,\"1287\":1,\"1436\":1,\"1611\":3,\"1612\":3,\"1613\":2,\"1614\":7}}],[\"type\",{\"1\":{\"15\":5,\"215\":4,\"329\":1,\"664\":1,\"716\":1,\"1047\":3,\"1203\":17,\"1375\":3,\"1466\":4,\"1469\":8,\"1470\":6,\"1504\":12}}],[\"oct\",{\"1\":{\"1048\":1}}],[\"octal\",{\"1\":{\"914\":1,\"929\":2}}],[\"oop\",{\"0\":{\"1725\":1},\"1\":{\"1473\":1}}],[\"oo\",{\"1\":{\"590\":1,\"1634\":1}}],[\"own\",{\"1\":{\"565\":1}}],[\"ownkeys\",{\"1\":{\"403\":3,\"613\":2}}],[\"owllai\",{\"1\":{\"392\":1}}],[\"owl\",{\"1\":{\"392\":6,\"393\":5,\"394\":5}}],[\"old\",{\"1\":{\"632\":1,\"1490\":2,\"1491\":1}}],[\"oldval\",{\"1\":{\"403\":2}}],[\"oldarrayproperty\",{\"1\":{\"402\":3}}],[\"olive\",{\"1\":{\"59\":1}}],[\"otherfun\",{\"1\":{\"1613\":6,\"1614\":3}}],[\"othervalue\",{\"1\":{\"1068\":1}}],[\"other\",{\"1\":{\"329\":1,\"1068\":1,\"1695\":1}}],[\"osi\",{\"0\":{\"317\":1},\"1\":{\"317\":1}}],[\"o点坐标\",{\"1\":{\"274\":1}}],[\"obejct\",{\"1\":{\"749\":1,\"936\":7}}],[\"observer\",{\"1\":{\"402\":3}}],[\"objcustom\",{\"1\":{\"1004\":8}}],[\"objecr\",{\"1\":{\"943\":1}}],[\"object|function\",{\"1\":{\"1581\":1}}],[\"objectfactory\",{\"1\":{\"1581\":1}}],[\"objects\",{\"1\":{\"1385\":1,\"1578\":2}}],[\"objectconstructor\",{\"1\":{\"730\":1,\"746\":1,\"791\":1,\"829\":1}}],[\"object2\",{\"1\":{\"716\":2}}],[\"object1\",{\"1\":{\"716\":2}}],[\"object\",{\"0\":{\"345\":1,\"367\":1,\"368\":1,\"377\":1,\"548\":1,\"652\":1,\"714\":1,\"715\":1,\"799\":1,\"936\":1,\"1130\":1,\"1747\":1},\"1\":{\"228\":1,\"229\":1,\"251\":1,\"274\":4,\"345\":1,\"367\":1,\"368\":1,\"377\":2,\"388\":1,\"401\":2,\"402\":5,\"408\":1,\"529\":4,\"530\":6,\"531\":3,\"538\":9,\"539\":13,\"540\":13,\"544\":1,\"545\":1,\"547\":7,\"548\":17,\"564\":1,\"565\":8,\"571\":1,\"572\":1,\"576\":3,\"578\":1,\"580\":1,\"586\":1,\"590\":1,\"599\":1,\"603\":1,\"620\":2,\"624\":13,\"625\":8,\"640\":4,\"648\":2,\"650\":5,\"651\":1,\"652\":2,\"653\":15,\"656\":2,\"659\":3,\"664\":1,\"676\":1,\"677\":1,\"678\":3,\"679\":1,\"682\":1,\"683\":1,\"684\":1,\"687\":1,\"688\":1,\"689\":1,\"692\":1,\"693\":1,\"694\":2,\"695\":2,\"698\":1,\"699\":1,\"701\":4,\"704\":1,\"705\":1,\"709\":1,\"710\":1,\"711\":3,\"713\":2,\"714\":2,\"715\":2,\"716\":3,\"719\":1,\"720\":1,\"721\":1,\"724\":1,\"725\":1,\"726\":1,\"729\":1,\"730\":2,\"731\":2,\"733\":1,\"734\":2,\"735\":2,\"736\":1,\"737\":4,\"740\":1,\"741\":1,\"742\":1,\"745\":1,\"746\":2,\"748\":3,\"749\":10,\"752\":1,\"754\":1,\"756\":1,\"757\":1,\"760\":1,\"761\":1,\"762\":1,\"763\":9,\"766\":1,\"767\":1,\"768\":3,\"769\":3,\"772\":1,\"773\":1,\"776\":8,\"779\":1,\"781\":3,\"784\":1,\"785\":1,\"787\":7,\"790\":1,\"791\":2,\"794\":1,\"795\":1,\"796\":2,\"799\":3,\"800\":5,\"802\":3,\"803\":20,\"804\":2,\"805\":4,\"806\":7,\"807\":10,\"810\":1,\"811\":1,\"812\":1,\"813\":6,\"816\":1,\"823\":1,\"824\":1,\"825\":6,\"828\":1,\"829\":4,\"830\":2,\"833\":1,\"837\":3,\"838\":6,\"841\":1,\"842\":1,\"843\":1,\"846\":1,\"917\":1,\"930\":3,\"933\":1,\"934\":4,\"936\":14,\"942\":1,\"943\":6,\"946\":4,\"949\":1,\"951\":18,\"954\":2,\"982\":1,\"1004\":3,\"1035\":1,\"1047\":1,\"1098\":2,\"1099\":1,\"1101\":2,\"1107\":1,\"1116\":2,\"1122\":3,\"1130\":7,\"1132\":3,\"1165\":2,\"1185\":1,\"1186\":1,\"1203\":2,\"1218\":3,\"1281\":2,\"1302\":1,\"1306\":1,\"1310\":1,\"1319\":1,\"1483\":1,\"1486\":1,\"1504\":12,\"1524\":2,\"1561\":2,\"1562\":2,\"1566\":2,\"1581\":1,\"1587\":1}}],[\"obj2\",{\"1\":{\"679\":2,\"1579\":4}}],[\"obj1\",{\"1\":{\"679\":2,\"1579\":2,\"1584\":1}}],[\"obj=\",{\"1\":{\"408\":1}}],[\"obj\",{\"1\":{\"343\":2,\"345\":2,\"353\":2,\"354\":3,\"367\":2,\"368\":2,\"377\":2,\"381\":6,\"392\":7,\"393\":5,\"394\":5,\"408\":1,\"548\":4,\"571\":6,\"572\":3,\"625\":2,\"699\":2,\"701\":3,\"713\":2,\"725\":2,\"753\":1,\"780\":1,\"817\":1,\"834\":1,\"842\":2,\"843\":2,\"935\":1,\"946\":5,\"951\":1,\"1106\":1,\"1165\":3,\"1176\":1,\"1186\":2,\"1218\":9,\"1319\":2,\"1389\":4,\"1457\":7,\"1504\":11,\"1522\":2,\"1523\":2,\"1525\":4,\"1526\":2,\"1529\":3,\"1587\":2}}],[\"ob\",{\"1\":{\"275\":1,\"276\":1}}],[\"oblique\",{\"1\":{\"74\":2}}],[\"ok\",{\"1\":{\"215\":1,\"1232\":2}}],[\"o\",{\"1\":{\"205\":1,\"215\":1,\"245\":4,\"274\":4,\"275\":4,\"276\":4,\"457\":1,\"458\":1,\"460\":1,\"482\":1,\"509\":5,\"524\":2,\"540\":4,\"547\":2,\"557\":1,\"683\":2,\"688\":2,\"693\":2,\"701\":2,\"705\":2,\"720\":2,\"730\":3,\"741\":2,\"746\":3,\"767\":2,\"773\":2,\"785\":2,\"791\":3,\"811\":2,\"824\":2,\"829\":3,\"930\":2,\"994\":2,\"1000\":2,\"1002\":4,\"1014\":5,\"1184\":1,\"1219\":1,\"1224\":2,\"1285\":1,\"1533\":1,\"1534\":4}}],[\"op\",{\"1\":{\"540\":1,\"1242\":6}}],[\"opt目录下面\",{\"1\":{\"198\":1,\"199\":1}}],[\"opt\",{\"1\":{\"186\":1,\"198\":2,\"199\":2,\"215\":2,\"1132\":1}}],[\"options=\",{\"1\":{\"161\":2}}],[\"open\",{\"1\":{\"1138\":1,\"1595\":1}}],[\"openssl\",{\"1\":{\"161\":2}}],[\"opening\",{\"1\":{\"116\":1}}],[\"operators\",{\"1\":{\"1200\":2}}],[\"operator\",{\"1\":{\"1197\":1,\"1238\":2}}],[\"operand\",{\"1\":{\"1120\":1}}],[\"opera\",{\"1\":{\"143\":1,\"144\":2,\"1549\":1,\"1550\":1}}],[\"opacity\",{\"1\":{\"108\":2}}],[\"or\",{\"1\":{\"1145\":1,\"1385\":1,\"1411\":1}}],[\"order1\",{\"1\":{\"1484\":2}}],[\"orderpromise\",{\"1\":{\"1354\":2}}],[\"orderlist\",{\"1\":{\"1354\":1}}],[\"orderitems\",{\"1\":{\"1353\":1}}],[\"ordering\",{\"1\":{\"59\":1}}],[\"order属性定义项目的排列顺序\",{\"1\":{\"332\":1}}],[\"order\",{\"1\":{\"332\":1,\"1203\":1,\"1354\":1,\"1484\":2}}],[\"oriented\",{\"1\":{\"228\":1}}],[\"originmoudle\",{\"1\":{\"1626\":1}}],[\"originmodule\",{\"1\":{\"1626\":1,\"1627\":2,\"1651\":4}}],[\"origin\",{\"0\":{\"101\":1},\"1\":{\"101\":2,\"175\":1,\"656\":3,\"887\":2}}],[\"overly\",{\"1\":{\"325\":1}}],[\"overline\",{\"1\":{\"83\":1}}],[\"overflow\",{\"0\":{\"87\":1},\"1\":{\"38\":2,\"87\":3,\"325\":1,\"329\":1}}],[\"outer\",{\"1\":{\"1287\":2,\"1375\":2,\"1407\":3}}],[\"outside\",{\"1\":{\"1077\":1}}],[\"outset\",{\"0\":{\"67\":1},\"1\":{\"61\":1,\"67\":1}}],[\"output\",{\"1\":{\"350\":1,\"351\":1,\"352\":1,\"679\":1,\"714\":2,\"715\":2,\"716\":2,\"861\":2,\"986\":1,\"1066\":2,\"1293\":3,\"1294\":3,\"1319\":2}}],[\"out\",{\"1\":{\"276\":1}}],[\"outline\",{\"0\":{\"60\":1},\"1\":{\"60\":5}}],[\"of适用遍历数\",{\"1\":{\"388\":1}}],[\"of遍历的只是数组内的元素\",{\"1\":{\"388\":1}}],[\"of遍历的是数组元素值\",{\"1\":{\"388\":2}}],[\"of的区别\",{\"0\":{\"388\":1}}],[\"off\",{\"1\":{\"217\":1}}],[\"of\",{\"0\":{\"356\":1,\"371\":1,\"989\":1,\"1004\":1},\"1\":{\"15\":5,\"356\":1,\"371\":1,\"388\":2,\"485\":1,\"488\":2,\"512\":1,\"563\":2,\"606\":2,\"701\":1,\"983\":1,\"989\":1,\"990\":1,\"993\":2,\"994\":1,\"995\":1,\"996\":2,\"997\":1,\"998\":1,\"999\":1,\"1000\":3,\"1001\":1,\"1002\":3,\"1003\":1,\"1004\":5,\"1234\":4,\"1312\":1,\"1329\":1,\"1357\":1,\"1393\":1,\"1403\":2,\"1411\":3,\"1606\":1}}],[\"onresize\",{\"1\":{\"1432\":2}}],[\"onclick=\",{\"1\":{\"1139\":1,\"1285\":1,\"1287\":1}}],[\"onchange=\",{\"1\":{\"1436\":1}}],[\"onchange\",{\"1\":{\"408\":4,\"1436\":1}}],[\"one\",{\"1\":{\"689\":3,\"927\":1,\"935\":3,\"1186\":1,\"1213\":2,\"1611\":2,\"1612\":3}}],[\"onboot=yes\",{\"1\":{\"220\":1}}],[\"on\",{\"1\":{\"217\":1,\"458\":1,\"1287\":1,\"1385\":1,\"1438\":2,\"1449\":2,\"1466\":2,\"1469\":2,\"1470\":2}}],[\"only\",{\"1\":{\"15\":2,\"417\":1,\"737\":3,\"1356\":1,\"1631\":1}}],[\"onfocus\",{\"1\":{\"15\":1}}],[\"nissan\",{\"1\":{\"1042\":2,\"1109\":1,\"1110\":2}}],[\"nicholas\",{\"1\":{\"576\":2,\"578\":2,\"579\":1,\"581\":1}}],[\"nitro\",{\"1\":{\"144\":1,\"1550\":1}}],[\"n+m\",{\"1\":{\"509\":5}}],[\"n++\",{\"1\":{\"494\":1,\"1192\":1}}],[\"n的值循环完后\",{\"1\":{\"494\":1}}],[\"negative\",{\"1\":{\"925\":1}}],[\"nextf\",{\"1\":{\"1350\":2}}],[\"next===undefined\",{\"1\":{\"473\":2}}],[\"next\",{\"1\":{\"473\":11,\"491\":10,\"1003\":1,\"1014\":2,\"1350\":7,\"1417\":12,\"1426\":2,\"1488\":4}}],[\"nexttick\",{\"0\":{\"459\":1},\"1\":{\"461\":1,\"1533\":2}}],[\"nextick\",{\"1\":{\"457\":1}}],[\"newmodule\",{\"1\":{\"1651\":1}}],[\"newmoudlename\",{\"1\":{\"1626\":1}}],[\"newfoo\",{\"1\":{\"1642\":2}}],[\"newsum\",{\"1\":{\"1418\":2}}],[\"newvalue\",{\"1\":{\"402\":3,\"408\":4,\"694\":2}}],[\"newargs\",{\"1\":{\"394\":2}}],[\"newpersonwithargs\",{\"1\":{\"394\":2}}],[\"newperson\",{\"1\":{\"394\":3}}],[\"new\",{\"0\":{\"1522\":1},\"1\":{\"249\":1,\"371\":1,\"372\":2,\"377\":1,\"380\":1,\"383\":2,\"392\":1,\"393\":1,\"394\":2,\"403\":1,\"408\":3,\"467\":1,\"488\":2,\"512\":1,\"515\":1,\"546\":1,\"547\":8,\"548\":2,\"569\":2,\"570\":1,\"571\":2,\"572\":3,\"575\":2,\"576\":2,\"579\":1,\"581\":2,\"584\":1,\"586\":1,\"587\":2,\"590\":2,\"591\":2,\"592\":3,\"597\":1,\"599\":3,\"602\":3,\"603\":1,\"604\":1,\"606\":1,\"613\":1,\"622\":1,\"624\":1,\"625\":3,\"629\":1,\"632\":1,\"635\":2,\"636\":1,\"640\":1,\"648\":1,\"651\":1,\"659\":2,\"662\":3,\"664\":1,\"684\":1,\"714\":2,\"716\":1,\"736\":2,\"749\":2,\"756\":1,\"757\":1,\"781\":1,\"800\":1,\"807\":9,\"813\":1,\"820\":2,\"837\":1,\"838\":2,\"905\":2,\"928\":1,\"929\":1,\"930\":3,\"934\":1,\"935\":4,\"948\":1,\"951\":1,\"986\":1,\"995\":1,\"996\":1,\"997\":1,\"1020\":1,\"1035\":3,\"1048\":1,\"1109\":3,\"1110\":2,\"1115\":3,\"1130\":4,\"1131\":1,\"1166\":1,\"1179\":1,\"1186\":1,\"1203\":4,\"1234\":1,\"1243\":2,\"1255\":2,\"1274\":1,\"1281\":2,\"1285\":2,\"1287\":1,\"1296\":1,\"1307\":1,\"1310\":1,\"1311\":1,\"1312\":1,\"1340\":1,\"1344\":1,\"1345\":1,\"1350\":1,\"1352\":1,\"1356\":1,\"1361\":1,\"1374\":1,\"1375\":2,\"1425\":2,\"1426\":1,\"1427\":1,\"1474\":2,\"1476\":3,\"1477\":1,\"1481\":1,\"1483\":2,\"1485\":3,\"1487\":1,\"1488\":2,\"1489\":2,\"1490\":1,\"1491\":1,\"1492\":1,\"1497\":1,\"1505\":2,\"1521\":3,\"1522\":2,\"1523\":1,\"1524\":2,\"1525\":2,\"1526\":3,\"1533\":2,\"1581\":7,\"1584\":8,\"1587\":1,\"1588\":1}}],[\"netx\",{\"1\":{\"1014\":1}}],[\"netstat\",{\"1\":{\"223\":2}}],[\"netmask=255\",{\"1\":{\"220\":1}}],[\"network\",{\"1\":{\"220\":2,\"1533\":1}}],[\"net\",{\"1\":{\"215\":2}}],[\"num++\",{\"1\":{\"962\":1,\"971\":1}}],[\"num4\",{\"1\":{\"923\":1}}],[\"num3\",{\"1\":{\"923\":1}}],[\"num2++\",{\"1\":{\"1375\":1}}],[\"num2\",{\"1\":{\"506\":7,\"923\":1,\"1293\":1,\"1375\":5,\"1383\":3,\"1452\":4,\"1456\":2,\"1457\":8}}],[\"num1++\",{\"1\":{\"1375\":1}}],[\"num1\",{\"1\":{\"506\":8,\"923\":1,\"1293\":1,\"1375\":5,\"1383\":14,\"1452\":4,\"1456\":2,\"1457\":8}}],[\"numstring\",{\"1\":{\"913\":5}}],[\"nums2\",{\"1\":{\"500\":11}}],[\"nums1\",{\"1\":{\"500\":17}}],[\"nums\",{\"1\":{\"476\":37,\"482\":10,\"488\":88,\"503\":10,\"515\":11,\"521\":4,\"524\":8,\"1365\":2}}],[\"num\",{\"1\":{\"348\":2,\"349\":4,\"365\":1,\"384\":2,\"488\":7,\"503\":3,\"659\":5,\"664\":1,\"924\":2,\"955\":5,\"962\":2,\"971\":2,\"1012\":5,\"1080\":1,\"1319\":2,\"1349\":2,\"1385\":16,\"1390\":4,\"1452\":2}}],[\"number对象\",{\"1\":{\"800\":1}}],[\"numberstring\",{\"1\":{\"909\":2}}],[\"numbers\",{\"1\":{\"343\":3,\"1365\":2,\"1393\":2}}],[\"number+1\",{\"1\":{\"301\":1}}],[\"number\",{\"0\":{\"1124\":1},\"1\":{\"23\":1,\"251\":1,\"299\":1,\"301\":5,\"304\":3,\"467\":1,\"470\":1,\"476\":2,\"479\":1,\"485\":2,\"488\":4,\"497\":1,\"500\":4,\"503\":3,\"544\":1,\"547\":1,\"548\":4,\"563\":1,\"668\":2,\"762\":1,\"800\":1,\"807\":3,\"853\":1,\"857\":1,\"858\":1,\"859\":1,\"861\":9,\"898\":4,\"899\":3,\"903\":5,\"909\":1,\"913\":2,\"917\":3,\"925\":4,\"926\":2,\"928\":2,\"929\":2,\"934\":2,\"936\":1,\"942\":1,\"943\":1,\"944\":10,\"946\":2,\"947\":1,\"948\":1,\"949\":1,\"951\":7,\"952\":1,\"953\":1,\"963\":2,\"1047\":1,\"1080\":1,\"1115\":4,\"1122\":2,\"1124\":8,\"1130\":1,\"1155\":2,\"1203\":5,\"1220\":1,\"1232\":2,\"1332\":3,\"1338\":1,\"1411\":1,\"1433\":1,\"1446\":1,\"1504\":3,\"1581\":3,\"1692\":9,\"1693\":1,\"1694\":7}}],[\"null则没有这个效果\",{\"1\":{\"1405\":1}}],[\"nullish\",{\"1\":{\"1164\":1}}],[\"nullliteral\",{\"1\":{\"248\":1}}],[\"null\",{\"0\":{\"1132\":1},\"1\":{\"245\":1,\"246\":1,\"288\":3,\"289\":1,\"290\":2,\"292\":2,\"343\":1,\"381\":7,\"402\":1,\"408\":1,\"470\":9,\"473\":5,\"476\":1,\"479\":4,\"491\":2,\"497\":5,\"538\":1,\"540\":1,\"544\":1,\"548\":2,\"563\":3,\"564\":1,\"565\":2,\"576\":1,\"646\":1,\"648\":2,\"673\":1,\"683\":1,\"762\":1,\"763\":2,\"800\":1,\"807\":2,\"828\":1,\"829\":1,\"838\":2,\"899\":1,\"905\":1,\"910\":1,\"917\":1,\"919\":5,\"934\":2,\"936\":2,\"943\":6,\"944\":2,\"945\":2,\"948\":3,\"951\":2,\"952\":4,\"954\":2,\"983\":2,\"1020\":1,\"1080\":2,\"1087\":1,\"1116\":3,\"1122\":1,\"1132\":5,\"1164\":1,\"1178\":1,\"1203\":3,\"1217\":4,\"1218\":3,\"1220\":2,\"1253\":1,\"1255\":4,\"1256\":2,\"1264\":1,\"1271\":1,\"1273\":2,\"1279\":1,\"1282\":2,\"1302\":2,\"1306\":1,\"1357\":1,\"1382\":1,\"1386\":2,\"1405\":2,\"1412\":1,\"1433\":1,\"1446\":1,\"1449\":1,\"1581\":1,\"1586\":5}}],[\"nan\",{\"0\":{\"857\":1,\"859\":1,\"926\":1},\"1\":{\"251\":1,\"348\":2,\"364\":3,\"548\":3,\"762\":4,\"763\":1,\"857\":1,\"858\":6,\"859\":10,\"861\":15,\"897\":1,\"898\":1,\"899\":1,\"902\":1,\"903\":3,\"904\":3,\"905\":1,\"909\":1,\"910\":5,\"913\":1,\"914\":3,\"926\":7,\"934\":1,\"944\":5,\"945\":2,\"948\":1,\"951\":12,\"952\":1,\"953\":1,\"954\":10,\"1020\":1,\"1080\":2,\"1124\":2,\"1203\":2,\"1253\":1,\"1255\":2,\"1380\":1,\"1382\":1}}],[\"native\",{\"1\":{\"250\":1,\"749\":2,\"943\":1,\"951\":1,\"1035\":1}}],[\"nagios\",{\"1\":{\"215\":5}}],[\"namedfoo\",{\"1\":{\"1646\":2}}],[\"named\",{\"1\":{\"1625\":1,\"1650\":1}}],[\"namebar\",{\"1\":{\"1166\":1}}],[\"namespace\",{\"1\":{\"1625\":1}}],[\"names\",{\"1\":{\"352\":2}}],[\"name=\",{\"1\":{\"342\":1}}],[\"name\",{\"0\":{\"1294\":1},\"1\":{\"28\":1,\"129\":2,\"175\":1,\"200\":1,\"215\":1,\"341\":4,\"342\":1,\"343\":3,\"345\":2,\"346\":8,\"352\":3,\"353\":3,\"354\":2,\"355\":8,\"367\":1,\"368\":2,\"377\":5,\"381\":4,\"392\":8,\"393\":5,\"394\":6,\"540\":2,\"546\":2,\"547\":1,\"550\":1,\"551\":5,\"569\":4,\"570\":4,\"571\":4,\"572\":3,\"575\":2,\"576\":6,\"578\":4,\"579\":2,\"581\":2,\"586\":4,\"587\":6,\"590\":4,\"592\":8,\"593\":5,\"599\":5,\"600\":1,\"607\":3,\"635\":1,\"636\":4,\"640\":6,\"656\":1,\"659\":12,\"662\":10,\"664\":1,\"726\":2,\"1048\":2,\"1102\":2,\"1166\":3,\"1293\":1,\"1294\":5,\"1295\":7,\"1296\":4,\"1303\":2,\"1307\":5,\"1319\":4,\"1323\":2,\"1329\":3,\"1334\":6,\"1381\":1,\"1389\":6,\"1401\":1,\"1449\":2,\"1474\":4,\"1481\":4,\"1483\":5,\"1485\":4,\"1486\":4,\"1487\":4,\"1489\":6,\"1490\":7,\"1491\":8,\"1492\":5,\"1497\":5,\"1658\":3,\"1685\":2}}],[\"npm\",{\"0\":{\"181\":1,\"1722\":1},\"2\":{\"183\":1}}],[\"nginx\",{\"1\":{\"153\":1,\"450\":1}}],[\"ngnix\",{\"1\":{\"153\":1}}],[\"nbsp\",{\"1\":{\"121\":1}}],[\"nov\",{\"1\":{\"1048\":1}}],[\"nosuchmethod\",{\"1\":{\"805\":1}}],[\"now\",{\"1\":{\"190\":2,\"288\":6,\"293\":5,\"294\":6,\"917\":3,\"1433\":4}}],[\"nowrap\",{\"1\":{\"48\":1,\"87\":1,\"92\":1,\"332\":1}}],[\"nodelist\",{\"1\":{\"999\":1,\"1185\":4}}],[\"node和浏览器事件循环机制的区别\",{\"0\":{\"461\":1}}],[\"node事件循环分为6个阶段\",{\"1\":{\"458\":1}}],[\"node独有\",{\"1\":{\"457\":1}}],[\"nodejs内部执行\",{\"1\":{\"458\":1}}],[\"nodejs\",{\"1\":{\"450\":1,\"1532\":1,\"1617\":1}}],[\"node\",{\"0\":{\"458\":1,\"1428\":1,\"1534\":1},\"1\":{\"161\":2,\"464\":1,\"470\":1,\"479\":7,\"497\":1,\"848\":1,\"1218\":2,\"1288\":5,\"1428\":1,\"1502\":2,\"1533\":2,\"1534\":7,\"1593\":2,\"1616\":4,\"1617\":1,\"1627\":1},\"2\":{\"163\":1}}],[\"no\",{\"1\":{\"103\":1,\"355\":4,\"429\":2,\"430\":1,\"540\":1,\"1042\":1,\"1580\":4}}],[\"non\",{\"1\":{\"91\":2,\"408\":1,\"538\":1,\"599\":1,\"768\":1,\"910\":1,\"926\":2,\"1101\":1,\"1185\":1,\"1186\":1,\"1547\":1}}],[\"nonextensible\",{\"1\":{\"813\":3}}],[\"nonenum\",{\"1\":{\"737\":3}}],[\"none\",{\"1\":{\"44\":1,\"59\":1,\"83\":1,\"84\":1,\"85\":1,\"88\":1,\"89\":1,\"100\":2,\"329\":2,\"430\":1,\"464\":1,\"1502\":4}}],[\"normal\",{\"1\":{\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"90\":1,\"91\":2,\"92\":3}}],[\"nothing\",{\"1\":{\"1651\":1}}],[\"notice\",{\"1\":{\"1356\":1}}],[\"note\",{\"1\":{\"929\":1}}],[\"not\",{\"1\":{\"15\":2,\"344\":2,\"392\":1,\"393\":1,\"394\":1,\"500\":1,\"538\":1,\"539\":2,\"540\":3,\"560\":2,\"629\":1,\"857\":1,\"919\":1,\"926\":1,\"928\":1,\"929\":2,\"1066\":1,\"1067\":1,\"1069\":1,\"1077\":1,\"1124\":1,\"1147\":1,\"1218\":1,\"1334\":1,\"1381\":1,\"1385\":1,\"1401\":1,\"1407\":4,\"1489\":1,\"1613\":1,\"1692\":1,\"1694\":1,\"1698\":1,\"1700\":1,\"1714\":1}}],[\"n\",{\"1\":{\"15\":8,\"313\":1,\"482\":1,\"488\":7,\"494\":6,\"500\":8,\"503\":1,\"509\":5,\"518\":5,\"521\":3,\"524\":2,\"859\":2,\"927\":1,\"929\":1,\"971\":2,\"1001\":3,\"1019\":3,\"1080\":1,\"1157\":3,\"1159\":1,\"1190\":2,\"1191\":3,\"1192\":2,\"1193\":3,\"1243\":5,\"1267\":2,\"1333\":4,\"1411\":4,\"1417\":2,\"1518\":6}}],[\"nth\",{\"1\":{\"15\":4}}],[\"rhs\",{\"1\":{\"1670\":17}}],[\"r++\",{\"1\":{\"467\":1}}],[\"ruby\",{\"1\":{\"329\":7}}],[\"runs\",{\"1\":{\"1319\":1}}],[\"runtime\",{\"1\":{\"1282\":1,\"1694\":1}}],[\"run\",{\"1\":{\"329\":1,\"551\":2,\"604\":4}}],[\"rip\",{\"1\":{\"311\":1}}],[\"rightarr\",{\"1\":{\"488\":3}}],[\"right===undefined\",{\"1\":{\"470\":1,\"479\":1,\"497\":1}}],[\"right\",{\"1\":{\"35\":1,\"38\":4,\"51\":2,\"56\":1,\"60\":1,\"81\":2,\"100\":1,\"102\":3,\"325\":1,\"470\":5,\"479\":5,\"497\":5,\"503\":4,\"1116\":2,\"1149\":2,\"1631\":1}}],[\"rcvd\",{\"1\":{\"301\":1}}],[\"rst\",{\"1\":{\"299\":2}}],[\"rpm\",{\"1\":{\"215\":5}}],[\"rank\",{\"1\":{\"1496\":1}}],[\"random\",{\"1\":{\"1312\":1,\"1561\":2}}],[\"range\",{\"1\":{\"488\":3}}],[\"rangeerror\",{\"1\":{\"251\":1}}],[\"ramesh\",{\"1\":{\"215\":1}}],[\"rar\",{\"1\":{\"211\":1}}],[\"radix\",{\"1\":{\"913\":6,\"947\":2}}],[\"radius\",{\"1\":{\"59\":1}}],[\"radial\",{\"1\":{\"30\":2}}],[\"radians\",{\"1\":{\"26\":1}}],[\"rad\",{\"1\":{\"26\":1}}],[\"rwxrw\",{\"1\":{\"208\":1}}],[\"rfc\",{\"1\":{\"309\":1}}],[\"rf\",{\"1\":{\"197\":3}}],[\"rm\",{\"1\":{\"197\":6,\"204\":2,\"215\":1,\"242\":1}}],[\"r\",{\"1\":{\"190\":2,\"197\":1,\"198\":1,\"199\":1,\"205\":1,\"208\":2,\"215\":1,\"467\":8,\"476\":11,\"488\":4,\"518\":4,\"653\":4,\"1156\":2,\"1496\":1,\"1670\":1}}],[\"row\",{\"1\":{\"329\":5}}],[\"rotate\",{\"1\":{\"272\":1}}],[\"routines\",{\"1\":{\"161\":1}}],[\"round\",{\"1\":{\"65\":2}}],[\"root文件夹\",{\"1\":{\"187\":1}}],[\"root$\",{\"1\":{\"187\":1}}],[\"root为超级用户\",{\"1\":{\"187\":1}}],[\"root\",{\"1\":{\"15\":1,\"186\":1,\"187\":3,\"215\":1,\"329\":5,\"470\":14,\"479\":8,\"497\":13,\"1282\":7}}],[\"rgbtohex\",{\"1\":{\"1156\":2}}],[\"rgb进制颜色字符串\",{\"1\":{\"1156\":1}}],[\"rgb颜色转16进制颜色\",{\"1\":{\"1156\":1}}],[\"rgb颜色字符串\",{\"1\":{\"1156\":1}}],[\"rgbarr\",{\"1\":{\"1156\":4}}],[\"rgba\",{\"1\":{\"28\":2,\"59\":1,\"108\":3,\"110\":1}}],[\"rgb\",{\"0\":{\"108\":1},\"1\":{\"28\":3,\"108\":6,\"110\":5,\"1156\":6}}],[\"rrggbb\",{\"1\":{\"28\":1}}],[\"render\",{\"1\":{\"1436\":1,\"1488\":3}}],[\"rendering\",{\"1\":{\"417\":1,\"1533\":1,\"1550\":1}}],[\"rejecr\",{\"1\":{\"1352\":1}}],[\"rejected\",{\"1\":{\"380\":2,\"1344\":1,\"1348\":2}}],[\"reject\",{\"1\":{\"371\":1,\"372\":3,\"380\":2,\"383\":4,\"1348\":3,\"1349\":1,\"1350\":2,\"1425\":1,\"1426\":1}}],[\"reg\",{\"1\":{\"748\":2,\"1080\":1}}],[\"regexp\",{\"1\":{\"251\":1,\"748\":1,\"917\":1,\"935\":1,\"1080\":1}}],[\"retrieve\",{\"1\":{\"1670\":1}}],[\"retrievex\",{\"1\":{\"1312\":3}}],[\"retries\",{\"1\":{\"1349\":2}}],[\"retained\",{\"1\":{\"1281\":1}}],[\"retangle\",{\"1\":{\"684\":7}}],[\"returns\",{\"1\":{\"1356\":1}}],[\"return\",{\"0\":{\"1030\":1},\"1\":{\"249\":1,\"253\":3,\"274\":2,\"288\":2,\"289\":1,\"290\":1,\"292\":1,\"293\":1,\"294\":1,\"343\":1,\"346\":1,\"349\":2,\"352\":1,\"371\":1,\"380\":1,\"383\":2,\"392\":1,\"393\":1,\"394\":2,\"402\":2,\"403\":4,\"408\":2,\"467\":2,\"470\":4,\"473\":7,\"476\":3,\"479\":3,\"482\":3,\"485\":3,\"488\":11,\"491\":4,\"494\":3,\"497\":5,\"500\":2,\"503\":3,\"506\":2,\"509\":5,\"512\":3,\"515\":1,\"518\":1,\"521\":2,\"524\":1,\"533\":1,\"534\":2,\"539\":1,\"540\":1,\"551\":1,\"571\":2,\"572\":1,\"586\":1,\"587\":2,\"590\":1,\"597\":2,\"600\":1,\"603\":1,\"604\":1,\"612\":1,\"613\":1,\"614\":1,\"615\":1,\"622\":1,\"629\":1,\"631\":1,\"640\":1,\"656\":1,\"659\":1,\"694\":1,\"726\":2,\"735\":1,\"737\":2,\"796\":1,\"820\":1,\"848\":1,\"861\":4,\"870\":2,\"875\":2,\"894\":1,\"910\":1,\"955\":5,\"1000\":2,\"1003\":3,\"1014\":1,\"1030\":1,\"1031\":1,\"1033\":8,\"1034\":12,\"1035\":5,\"1036\":6,\"1047\":1,\"1048\":1,\"1053\":7,\"1054\":2,\"1116\":3,\"1139\":1,\"1156\":4,\"1157\":1,\"1184\":1,\"1209\":2,\"1221\":3,\"1225\":2,\"1230\":2,\"1273\":1,\"1287\":2,\"1312\":5,\"1319\":4,\"1332\":1,\"1333\":1,\"1334\":5,\"1340\":2,\"1344\":2,\"1345\":2,\"1346\":1,\"1348\":2,\"1350\":7,\"1352\":2,\"1356\":1,\"1357\":1,\"1367\":1,\"1370\":2,\"1373\":2,\"1375\":4,\"1376\":4,\"1380\":1,\"1382\":1,\"1385\":8,\"1388\":1,\"1390\":2,\"1393\":2,\"1404\":2,\"1405\":2,\"1411\":1,\"1412\":1,\"1413\":2,\"1417\":26,\"1418\":3,\"1419\":1,\"1425\":2,\"1427\":2,\"1433\":2,\"1436\":1,\"1438\":4,\"1441\":3,\"1446\":2,\"1449\":1,\"1469\":1,\"1470\":3,\"1477\":2,\"1481\":1,\"1483\":1,\"1485\":3,\"1486\":1,\"1487\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":2,\"1492\":1,\"1497\":3,\"1503\":2,\"1504\":6,\"1505\":5,\"1509\":1,\"1510\":1,\"1516\":1,\"1518\":6,\"1525\":1,\"1526\":5,\"1529\":1,\"1572\":1,\"1581\":2,\"1587\":2,\"1589\":1,\"1617\":1,\"1652\":1,\"1681\":2,\"1708\":1,\"1709\":2,\"1710\":1}}],[\"react\",{\"0\":{\"1436\":1},\"1\":{\"584\":1,\"1436\":3,\"1488\":1,\"1490\":2,\"1626\":2,\"1632\":2,\"1636\":2}}],[\"readdatefields\",{\"1\":{\"1179\":1}}],[\"read\",{\"1\":{\"999\":2,\"1403\":2,\"1631\":1}}],[\"readstate变为complete\",{\"1\":{\"464\":1}}],[\"readstate\",{\"1\":{\"464\":1}}],[\"readystate\",{\"1\":{\"464\":1}}],[\"readfile\",{\"1\":{\"460\":1}}],[\"reason\",{\"1\":{\"380\":2}}],[\"requir\",{\"1\":{\"1428\":1}}],[\"requirejs\",{\"1\":{\"1617\":2}}],[\"require\",{\"1\":{\"460\":1,\"1235\":1,\"1349\":1,\"1593\":6,\"1616\":4,\"1617\":4,\"1618\":5,\"1636\":3}}],[\"requestheaders\",{\"1\":{\"430\":1}}],[\"request\",{\"1\":{\"152\":1,\"1352\":4}}],[\"reverse\",{\"1\":{\"473\":3,\"506\":1,\"1184\":3}}],[\"reverselist\",{\"1\":{\"473\":2}}],[\"revert区别\",{\"0\":{\"174\":1}}],[\"revert\",{\"0\":{\"177\":1},\"1\":{\"169\":1,\"177\":3,\"178\":1,\"329\":2}}],[\"reveive\",{\"1\":{\"403\":2}}],[\"rectangle\",{\"1\":{\"1083\":1,\"1493\":2}}],[\"rect\",{\"1\":{\"684\":3,\"1517\":4}}],[\"received\",{\"1\":{\"1458\":2}}],[\"receive\",{\"1\":{\"403\":2}}],[\"recv\",{\"1\":{\"303\":1}}],[\"reference\",{\"1\":{\"1564\":1,\"1565\":2}}],[\"referenceerror\",{\"1\":{\"251\":1,\"560\":2,\"564\":1,\"619\":1,\"919\":1,\"1066\":1,\"1067\":2,\"1069\":1,\"1217\":1,\"1334\":1,\"1407\":3,\"1692\":1,\"1694\":2,\"1698\":1}}],[\"refers\",{\"1\":{\"1411\":1}}],[\"ref\",{\"1\":{\"1281\":2}}],[\"reflect\",{\"1\":{\"403\":4,\"613\":2}}],[\"reflow\",{\"1\":{\"158\":1}}],[\"reboot\",{\"1\":{\"190\":1}}],[\"rebase\",{\"0\":{\"174\":1,\"175\":1},\"1\":{\"175\":3,\"178\":1}}],[\"replace\",{\"1\":{\"1156\":1,\"1496\":1}}],[\"repaint\",{\"1\":{\"158\":1}}],[\"repaint和reflow\",{\"1\":{\"158\":1}}],[\"repeatme\",{\"1\":{\"1543\":2}}],[\"repeat>\",{\"1\":{\"98\":1}}],[\"repeat\",{\"0\":{\"65\":1,\"103\":1},\"1\":{\"62\":1,\"65\":4,\"103\":4}}],[\"repeating\",{\"1\":{\"30\":2}}],[\"resize\",{\"1\":{\"1436\":4,\"1437\":1}}],[\"resize等\",{\"1\":{\"287\":1}}],[\"res3\",{\"1\":{\"1375\":2}}],[\"res2\",{\"1\":{\"1375\":2}}],[\"res1\",{\"1\":{\"1375\":2}}],[\"result2\",{\"1\":{\"1155\":1}}],[\"result\",{\"1\":{\"392\":2,\"393\":2,\"403\":6,\"622\":2,\"713\":1,\"1155\":1,\"1357\":4,\"1373\":4,\"1388\":2,\"1390\":1,\"1505\":2,\"1581\":4}}],[\"res\",{\"1\":{\"372\":4,\"380\":2,\"381\":2,\"383\":4,\"388\":6,\"467\":4,\"479\":6,\"485\":4,\"494\":4,\"506\":3,\"521\":3,\"955\":2,\"1190\":2,\"1191\":2,\"1192\":2,\"1193\":2,\"1344\":4,\"1346\":2,\"1348\":4,\"1352\":2,\"1427\":2,\"1533\":3}}],[\"resolved\",{\"1\":{\"1358\":1}}],[\"resolve\",{\"1\":{\"371\":2,\"372\":3,\"380\":2,\"383\":4,\"1340\":2,\"1345\":2,\"1348\":3,\"1350\":3,\"1352\":2,\"1356\":2,\"1425\":4,\"1426\":2,\"1427\":2,\"1533\":1}}],[\"reset\",{\"0\":{\"174\":1,\"176\":1},\"1\":{\"169\":1,\"176\":4,\"177\":1,\"178\":1,\"299\":1}}],[\"response\",{\"1\":{\"155\":1}}],[\"rest参数的写法\",{\"1\":{\"1393\":1}}],[\"restricted\",{\"1\":{\"1386\":2}}],[\"restart\",{\"1\":{\"215\":1,\"217\":1,\"220\":1}}],[\"rest\",{\"1\":{\"153\":1,\"1183\":8,\"1374\":1,\"1382\":1,\"1393\":1,\"1395\":1,\"1406\":1,\"1581\":2}}],[\"rel=\",{\"1\":{\"130\":1,\"131\":2}}],[\"relational\",{\"1\":{\"1200\":1}}],[\"relationship\",{\"1\":{\"11\":1}}],[\"relative时\",{\"1\":{\"40\":1}}],[\"relative\",{\"1\":{\"24\":2,\"35\":1,\"36\":2,\"38\":2,\"39\":1,\"40\":1,\"100\":1}}],[\"remainder\",{\"1\":{\"1012\":1}}],[\"removalbe\",{\"1\":{\"813\":1}}],[\"removeevenetlistener\",{\"1\":{\"1436\":1}}],[\"remove\",{\"1\":{\"215\":1,\"1286\":1}}],[\"remote\",{\"1\":{\"168\":1}}],[\"rem\",{\"1\":{\"24\":1}}],[\"redeclaration\",{\"1\":{\"1067\":1}}],[\"redefine\",{\"1\":{\"530\":1}}],[\"reducer\",{\"1\":{\"352\":2}}],[\"reduce\",{\"0\":{\"352\":1},\"1\":{\"352\":2,\"1376\":1}}],[\"red\",{\"1\":{\"2\":1,\"5\":1,\"7\":1,\"59\":1,\"108\":1,\"986\":2,\"1614\":1}}],[\"匹配相关\",{\"1\":{\"15\":1}}],[\"匹配用户界面上处于禁用状态的元素\",{\"1\":{\"15\":1}}],[\"匹配用户界面上处于可用状态的元素\",{\"1\":{\"15\":1}}],[\"匹配用户界面上处于选中状态的元素\",{\"1\":{\"15\":1}}],[\"匹配没有任何子元素\",{\"1\":{\"15\":1}}],[\"匹配父元素下的所有\",{\"1\":{\"15\":1}}],[\"匹配父元素下第一个类型为\",{\"1\":{\"15\":1}}],[\"匹配父元素仅有的一个子元素\",{\"1\":{\"15\":1}}],[\"匹配父元素的所有子元素中唯一的那个子元素\",{\"1\":{\"15\":1}}],[\"匹配父元素的倒数第\",{\"1\":{\"15\":2}}],[\"匹配父元素的第\",{\"1\":{\"15\":2}}],[\"匹配父元素的第一个子元素\",{\"1\":{\"15\":1}}],[\"匹配父元素的最后一个子元素\",{\"1\":{\"15\":1}}],[\"匹配\",{\"1\":{\"15\":1}}],[\"匹配不含有\",{\"1\":{\"15\":1}}],[\"匹配使用特殊语言的\",{\"1\":{\"15\":1}}],[\"s2\",{\"1\":{\"928\":2}}],[\"s1\",{\"1\":{\"928\":2}}],[\"sqrt\",{\"1\":{\"858\":1,\"926\":1}}],[\"square\",{\"1\":{\"605\":1,\"1083\":1,\"1332\":2,\"1493\":1}}],[\"squirrelfish\",{\"1\":{\"144\":1}}],[\"skin\",{\"1\":{\"635\":3,\"662\":3}}],[\"skew2\",{\"1\":{\"272\":1}}],[\"snapshot\",{\"1\":{\"1286\":3}}],[\"snaf\",{\"1\":{\"612\":1,\"613\":4,\"614\":1}}],[\"snmp\",{\"1\":{\"311\":1}}],[\"sleep\",{\"0\":{\"1428\":1},\"1\":{\"1422\":1,\"1424\":2,\"1425\":3,\"1426\":2,\"1427\":2,\"1428\":9}}],[\"sl\",{\"1\":{\"512\":2}}],[\"slow\",{\"1\":{\"491\":4}}],[\"slide\",{\"1\":{\"275\":1,\"276\":1}}],[\"slice也要取\",{\"1\":{\"494\":1}}],[\"slice\",{\"0\":{\"63\":1},\"1\":{\"63\":2,\"392\":1,\"394\":2,\"482\":1,\"494\":1,\"1183\":1,\"1312\":1,\"1393\":2,\"1413\":1,\"1587\":1}}],[\"swtich\",{\"1\":{\"963\":1}}],[\"swap\",{\"1\":{\"482\":2}}],[\"switch\",{\"0\":{\"963\":1,\"1039\":1},\"1\":{\"249\":1,\"958\":1,\"960\":1,\"1017\":1,\"1039\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1067\":3}}],[\"sir\",{\"1\":{\"1496\":1}}],[\"sign\",{\"1\":{\"1149\":1}}],[\"simulateinstanceof\",{\"1\":{\"1116\":1}}],[\"situaton\",{\"1\":{\"899\":1}}],[\"situation\",{\"1\":{\"899\":1}}],[\"sitipend\",{\"1\":{\"714\":1}}],[\"sid\",{\"1\":{\"640\":5}}],[\"side\",{\"1\":{\"417\":1,\"1083\":3,\"1165\":1}}],[\"singleton\",{\"1\":{\"1635\":1}}],[\"singly\",{\"1\":{\"473\":2,\"491\":1}}],[\"sin\",{\"1\":{\"1131\":1,\"1218\":1}}],[\"since\",{\"1\":{\"430\":1,\"838\":1}}],[\"sizing\",{\"0\":{\"58\":1},\"1\":{\"58\":1}}],[\"size>\",{\"1\":{\"71\":1}}],[\"size\",{\"0\":{\"73\":1,\"104\":1},\"1\":{\"24\":1,\"46\":1,\"71\":1,\"73\":1,\"102\":1,\"104\":1,\"215\":1,\"332\":3,\"1281\":2}}],[\"ss\",{\"1\":{\"928\":4}}],[\"ssr\",{\"1\":{\"417\":1}}],[\"ssh\",{\"1\":{\"215\":2,\"225\":1}}],[\"smartmodule\",{\"1\":{\"1651\":1}}],[\"smaller\",{\"1\":{\"1411\":1}}],[\"small\",{\"1\":{\"76\":1,\"714\":2,\"715\":2}}],[\"smtp\",{\"1\":{\"318\":1}}],[\"sym\",{\"1\":{\"928\":3}}],[\"symbol函数的参数只是表示对当前\",{\"1\":{\"928\":1}}],[\"symbols\",{\"1\":{\"928\":1}}],[\"symbol\",{\"0\":{\"613\":1,\"1127\":1},\"1\":{\"544\":2,\"546\":1,\"606\":1,\"611\":1,\"613\":6,\"729\":1,\"740\":1,\"741\":2,\"742\":5,\"753\":1,\"803\":2,\"917\":1,\"928\":18,\"946\":3,\"951\":1,\"955\":2,\"999\":1,\"1003\":1,\"1107\":2,\"1109\":1,\"1122\":2,\"1127\":6,\"1263\":1,\"1636\":1}}],[\"synchronous\",{\"1\":{\"1547\":1,\"1552\":1}}],[\"synchronize\",{\"1\":{\"299\":1}}],[\"synchronized\",{\"1\":{\"250\":1}}],[\"syntax\",{\"1\":{\"329\":1,\"929\":1,\"1218\":1,\"1631\":1,\"1667\":1}}],[\"syntaxerror\",{\"1\":{\"251\":1,\"557\":1,\"559\":1,\"929\":1,\"1033\":1,\"1066\":1,\"1068\":1,\"1076\":1,\"1165\":1,\"1218\":1,\"1329\":1,\"1381\":1,\"1395\":1,\"1400\":2,\"1401\":1,\"1405\":2,\"1655\":1,\"1693\":1}}],[\"syn=j\",{\"1\":{\"303\":1}}],[\"syn+ack\",{\"1\":{\"301\":2}}],[\"syn\",{\"1\":{\"299\":2,\"301\":7,\"302\":2,\"303\":4,\"313\":1}}],[\"sysconfig\",{\"1\":{\"220\":1}}],[\"systemctl\",{\"1\":{\"217\":3}}],[\"sys\",{\"1\":{\"186\":1}}],[\"scope2\",{\"1\":{\"1572\":6}}],[\"scope\",{\"1\":{\"1572\":4,\"1673\":2,\"1709\":4}}],[\"scopes\",{\"1\":{\"1570\":8,\"1571\":3,\"1572\":11,\"1709\":2}}],[\"science\",{\"1\":{\"1411\":1}}],[\"scp\",{\"1\":{\"215\":1}}],[\"script\",{\"0\":{\"1726\":1,\"1731\":1,\"1737\":1},\"1\":{\"464\":5,\"1533\":1}}],[\"script全部代码\",{\"1\":{\"457\":1}}],[\"scripts\",{\"1\":{\"161\":1,\"220\":1,\"1570\":1}}],[\"script>\",{\"1\":{\"131\":1,\"1285\":1,\"1286\":1,\"1287\":1,\"1611\":3,\"1612\":3,\"1613\":2,\"1614\":7,\"1617\":1,\"1618\":2}}],[\"scrolltop\",{\"1\":{\"1438\":6}}],[\"scroll\",{\"1\":{\"35\":1,\"105\":1,\"291\":1,\"325\":1,\"1438\":3}}],[\"sdb1\",{\"1\":{\"215\":2}}],[\"srv\",{\"1\":{\"186\":1}}],[\"src=\",{\"1\":{\"131\":1,\"1611\":2,\"1612\":2,\"1613\":1,\"1614\":6,\"1617\":1,\"1618\":1}}],[\"src\",{\"1\":{\"79\":1,\"130\":1,\"131\":1}}],[\"sbin\",{\"1\":{\"186\":1}}],[\"spidermonky\",{\"1\":{\"1550\":1}}],[\"spidermonkey\",{\"1\":{\"144\":1}}],[\"spread\",{\"1\":{\"1185\":1,\"1186\":1}}],[\"spa\",{\"1\":{\"1621\":1}}],[\"spawn\",{\"1\":{\"1350\":3}}],[\"sparsearray\",{\"1\":{\"1093\":1}}],[\"spacing\",{\"0\":{\"88\":1,\"89\":1}}],[\"space\",{\"0\":{\"92\":1},\"1\":{\"48\":1,\"65\":2,\"87\":1,\"332\":2}}],[\"sports\",{\"1\":{\"570\":1,\"571\":1,\"572\":1,\"575\":1}}],[\"splice\",{\"1\":{\"402\":2,\"488\":1,\"1376\":2}}],[\"split\",{\"1\":{\"375\":1,\"509\":2,\"512\":1,\"1156\":1,\"1184\":1}}],[\"spdu\",{\"1\":{\"317\":1}}],[\"sam\",{\"1\":{\"1307\":3}}],[\"salary\",{\"1\":{\"1102\":1}}],[\"saab\",{\"1\":{\"1060\":1}}],[\"saynum\",{\"1\":{\"1488\":7}}],[\"saynam\",{\"1\":{\"586\":1}}],[\"sayname\",{\"1\":{\"569\":4,\"570\":4,\"571\":2,\"572\":4,\"575\":5,\"576\":1,\"578\":2,\"579\":2,\"581\":1,\"590\":1,\"592\":6,\"593\":1,\"599\":2,\"607\":4,\"635\":1,\"659\":4,\"662\":4,\"1293\":2,\"1307\":4,\"1481\":2,\"1483\":2,\"1485\":4,\"1487\":2,\"1491\":1}}],[\"say\",{\"1\":{\"1474\":2,\"1492\":2}}],[\"sayhello\",{\"1\":{\"1474\":2}}],[\"sayhi\",{\"1\":{\"629\":4,\"631\":2,\"635\":1,\"656\":2,\"1293\":2,\"1490\":2,\"1491\":2}}],[\"sayage\",{\"1\":{\"659\":1,\"662\":4}}],[\"safari\",{\"1\":{\"143\":1,\"144\":1,\"436\":1,\"576\":1,\"1549\":1,\"1550\":1}}],[\"saturation\",{\"1\":{\"110\":1}}],[\"sans\",{\"1\":{\"71\":1}}],[\"successcallback\",{\"1\":{\"1458\":2}}],[\"success\",{\"1\":{\"1449\":2,\"1458\":2}}],[\"sum3\",{\"1\":{\"1417\":4}}],[\"sumnumbers\",{\"1\":{\"497\":1}}],[\"sumwithinitial\",{\"1\":{\"352\":2}}],[\"sum\",{\"1\":{\"343\":3,\"470\":5,\"476\":4,\"924\":2,\"1013\":1,\"1293\":2,\"1393\":3,\"1417\":2,\"1418\":2,\"1452\":6,\"1456\":2,\"1457\":9,\"1509\":2,\"1529\":3}}],[\"supported\",{\"1\":{\"929\":1}}],[\"superagent\",{\"1\":{\"1349\":3}}],[\"superclass\",{\"1\":{\"736\":3}}],[\"super\",{\"0\":{\"621\":1},\"1\":{\"250\":1,\"619\":7,\"621\":9,\"622\":10,\"623\":11,\"625\":3,\"684\":3,\"1361\":1,\"1375\":1,\"1436\":1,\"1490\":9,\"1491\":1,\"1492\":1}}],[\"supr\",{\"1\":{\"82\":1}}],[\"sudoers\",{\"1\":{\"215\":1}}],[\"sudo\",{\"1\":{\"215\":3}}],[\"sudo命令以系统管理者的身份执行指令\",{\"1\":{\"215\":1}}],[\"su\",{\"1\":{\"192\":1}}],[\"substr\",{\"1\":{\"1274\":1,\"1496\":1}}],[\"subclass\",{\"1\":{\"736\":4}}],[\"subobject\",{\"1\":{\"625\":3}}],[\"subarray\",{\"1\":{\"625\":2}}],[\"subtitle\",{\"1\":{\"562\":4}}],[\"sub\",{\"1\":{\"82\":1,\"684\":1}}],[\"sortnumbers\",{\"1\":{\"1393\":2}}],[\"sortarray\",{\"1\":{\"488\":8}}],[\"sort\",{\"1\":{\"476\":1,\"482\":1,\"488\":2,\"733\":1,\"734\":1,\"735\":1,\"1373\":3,\"1393\":2,\"1503\":6}}],[\"somevariable\",{\"1\":{\"1593\":1}}],[\"someresource\",{\"1\":{\"1288\":3}}],[\"sometext\",{\"1\":{\"1287\":2}}],[\"something\",{\"1\":{\"381\":8,\"1020\":2,\"1218\":2,\"1293\":3,\"1317\":2,\"1348\":1,\"1349\":1,\"1362\":1,\"1364\":3,\"1366\":1,\"1382\":1,\"1401\":2,\"1425\":1,\"1493\":2,\"1543\":1,\"1570\":1,\"1584\":4,\"1599\":1,\"1602\":1,\"1651\":1,\"1652\":1,\"1658\":1,\"1685\":3,\"1686\":1,\"1692\":2}}],[\"someelement\",{\"1\":{\"1273\":2}}],[\"some\",{\"0\":{\"350\":1},\"1\":{\"350\":1}}],[\"socket\",{\"1\":{\"301\":1,\"304\":1,\"464\":1}}],[\"softbind\",{\"1\":{\"1587\":2}}],[\"software\",{\"1\":{\"569\":1,\"576\":1,\"578\":2,\"579\":1,\"581\":1}}],[\"soft\",{\"1\":{\"176\":2}}],[\"sourcenode\",{\"1\":{\"1235\":1}}],[\"sourcemapconsumer\",{\"1\":{\"1235\":1}}],[\"sources\",{\"1\":{\"677\":2}}],[\"sourceforge\",{\"1\":{\"215\":4}}],[\"source\",{\"0\":{\"64\":1},\"1\":{\"62\":1,\"63\":1,\"64\":1,\"1235\":1,\"1670\":1}}],[\"solid\",{\"1\":{\"15\":2,\"61\":1,\"83\":1}}],[\"shelby\",{\"1\":{\"581\":3}}],[\"shift\",{\"1\":{\"402\":3,\"479\":1,\"1148\":1,\"1149\":2}}],[\"shift+m\",{\"1\":{\"215\":1}}],[\"shallow\",{\"1\":{\"1281\":1}}],[\"shap\",{\"1\":{\"684\":1}}],[\"shape\",{\"1\":{\"684\":6}}],[\"sharedworker\",{\"1\":{\"397\":1}}],[\"shadow\",{\"0\":{\"59\":1},\"1\":{\"59\":14}}],[\"short\",{\"1\":{\"250\":1}}],[\"shutdown\",{\"1\":{\"190\":4,\"191\":1}}],[\"shrink属性为0\",{\"1\":{\"332\":1}}],[\"shrink属性都为1\",{\"1\":{\"332\":1}}],[\"shrink属性定义了项目的缩小比例\",{\"1\":{\"332\":1}}],[\"shrink\",{\"1\":{\"48\":1,\"332\":2}}],[\"step\",{\"1\":{\"1350\":4}}],[\"stealing\",{\"1\":{\"635\":1}}],[\"stuff\",{\"1\":{\"1233\":1,\"1458\":4,\"1683\":1}}],[\"student\",{\"1\":{\"586\":1,\"590\":1,\"592\":1,\"604\":4,\"607\":1,\"615\":1,\"935\":7,\"937\":2,\"1115\":6}}],[\"still\",{\"1\":{\"1065\":3}}],[\"stipend\",{\"1\":{\"714\":1,\"715\":2}}],[\"sticky\",{\"0\":{\"38\":1},\"1\":{\"35\":1,\"38\":6}}],[\"store\",{\"1\":{\"429\":1}}],[\"stoppropagation\",{\"1\":{\"455\":1}}],[\"stop\",{\"1\":{\"217\":2}}],[\"strong\",{\"1\":{\"1614\":2}}],[\"strict\",{\"1\":{\"923\":1,\"1381\":1,\"1383\":1,\"1385\":2,\"1386\":2,\"1481\":1,\"1510\":2,\"1518\":1,\"1578\":3,\"1620\":1}}],[\"strings\",{\"1\":{\"905\":1}}],[\"stringify\",{\"1\":{\"531\":1,\"1288\":1}}],[\"string\",{\"0\":{\"378\":2,\"994\":1,\"1125\":1},\"1\":{\"245\":2,\"251\":1,\"467\":1,\"494\":2,\"506\":3,\"544\":2,\"546\":1,\"547\":1,\"558\":1,\"563\":1,\"580\":1,\"653\":1,\"730\":1,\"791\":1,\"800\":2,\"807\":5,\"835\":1,\"838\":2,\"869\":1,\"874\":1,\"885\":1,\"891\":1,\"913\":1,\"917\":3,\"928\":3,\"934\":1,\"936\":1,\"942\":1,\"943\":13,\"944\":1,\"946\":2,\"947\":3,\"948\":1,\"949\":2,\"951\":8,\"963\":3,\"989\":1,\"1047\":1,\"1080\":1,\"1109\":2,\"1115\":1,\"1122\":2,\"1125\":5,\"1130\":1,\"1156\":4,\"1203\":12,\"1256\":2,\"1338\":1,\"1504\":3}}],[\"str\",{\"1\":{\"378\":3,\"963\":2,\"1184\":5,\"1504\":1}}],[\"stream\",{\"1\":{\"298\":1}}],[\"stretch>\",{\"1\":{\"71\":1}}],[\"stretch\",{\"0\":{\"77\":1},\"1\":{\"65\":2,\"77\":1,\"332\":1}}],[\"standard\",{\"1\":{\"942\":1}}],[\"stack\",{\"1\":{\"512\":6,\"1259\":1,\"1532\":2,\"1552\":1,\"1556\":1,\"1557\":1}}],[\"statementlist\",{\"1\":{\"1073\":1}}],[\"statement2\",{\"1\":{\"1018\":1}}],[\"statement1\",{\"1\":{\"1018\":2}}],[\"statements\",{\"1\":{\"990\":1,\"1040\":3,\"1048\":1}}],[\"statement\",{\"1\":{\"974\":2,\"975\":1,\"981\":1,\"982\":1,\"986\":1,\"1008\":1,\"1009\":1,\"1018\":2,\"1019\":4,\"1024\":1,\"1027\":2,\"1033\":1,\"1041\":1,\"1059\":1}}],[\"state\",{\"1\":{\"413\":1,\"615\":1,\"632\":5,\"1486\":5}}],[\"status\",{\"1\":{\"166\":1,\"215\":2,\"217\":2,\"380\":3,\"1232\":3}}],[\"static\",{\"1\":{\"35\":2,\"36\":2,\"38\":1,\"39\":1,\"40\":2,\"51\":1,\"250\":1,\"587\":1,\"623\":2,\"628\":1,\"629\":2,\"630\":2,\"631\":1,\"632\":3,\"1489\":3,\"1492\":1,\"1620\":1}}],[\"starttime\",{\"1\":{\"1505\":3}}],[\"start\",{\"1\":{\"81\":2,\"217\":1,\"332\":3,\"1052\":2,\"1218\":7,\"1382\":4}}],[\"stylesheet\",{\"1\":{\"131\":2}}],[\"style\",{\"0\":{\"74\":1},\"1\":{\"61\":4,\"62\":1,\"74\":1,\"329\":2,\"1273\":1,\"1502\":4}}],[\"style>\",{\"1\":{\"60\":1,\"71\":1,\"83\":2}}],[\"send\",{\"1\":{\"1458\":1}}],[\"sendrequest\",{\"1\":{\"1355\":1}}],[\"sent\",{\"1\":{\"301\":1}}],[\"sep\",{\"1\":{\"1048\":1}}],[\"section\",{\"1\":{\"1593\":1}}],[\"sec\",{\"1\":{\"1428\":7}}],[\"seconds\",{\"1\":{\"1428\":1}}],[\"second\",{\"1\":{\"659\":1,\"1027\":1,\"1234\":2,\"1312\":1,\"1428\":1,\"1685\":1}}],[\"security\",{\"1\":{\"130\":2}}],[\"sea\",{\"1\":{\"1618\":3}}],[\"seat\",{\"1\":{\"986\":2}}],[\"seal\",{\"0\":{\"823\":1},\"1\":{\"539\":4,\"768\":1,\"776\":1,\"787\":2,\"803\":1,\"823\":1,\"824\":1,\"825\":2}}],[\"searchparams\",{\"1\":{\"716\":2}}],[\"search\",{\"1\":{\"503\":1}}],[\"sessionstorage\",{\"0\":{\"442\":1,\"444\":1}}],[\"self属性允许单个项目有与其他项目不一样的对齐方式\",{\"1\":{\"332\":1}}],[\"self\",{\"1\":{\"332\":1,\"394\":2,\"848\":3,\"1518\":4,\"1589\":3}}],[\"selectdrink\",{\"1\":{\"1353\":2}}],[\"selectpizza\",{\"1\":{\"1353\":2}}],[\"selection\",{\"1\":{\"16\":1}}],[\"selectors\",{\"1\":{\"11\":5,\"16\":2}}],[\"selector\",{\"0\":{\"4\":1},\"1\":{\"584\":1}}],[\"segment\",{\"1\":{\"304\":1,\"317\":1}}],[\"sequence\",{\"1\":{\"301\":5,\"304\":2}}],[\"sequance\",{\"1\":{\"299\":1}}],[\"seq\",{\"1\":{\"299\":1}}],[\"service命令用于运行system\",{\"1\":{\"215\":1}}],[\"service\",{\"1\":{\"161\":2,\"215\":3,\"217\":7,\"220\":1,\"1505\":2}}],[\"server\",{\"1\":{\"417\":1}}],[\"serve\",{\"1\":{\"161\":2}}],[\"serif\",{\"1\":{\"71\":2}}],[\"seo\",{\"1\":{\"129\":1}}],[\"semi\",{\"1\":{\"77\":2}}],[\"setrectsize\",{\"1\":{\"1517\":1}}],[\"setsize\",{\"1\":{\"1517\":1}}],[\"setweight\",{\"1\":{\"1497\":2}}],[\"setage\",{\"1\":{\"1497\":2}}],[\"setname\",{\"1\":{\"1497\":2}}],[\"setpropertyof\",{\"1\":{\"624\":4}}],[\"setprototypeof\",{\"0\":{\"828\":1},\"1\":{\"540\":1,\"624\":1,\"803\":1,\"828\":1,\"829\":2,\"830\":2}}],[\"setimmediate\",{\"0\":{\"460\":1},\"1\":{\"458\":3,\"460\":4,\"1533\":1,\"1534\":2}}],[\"setinterval\",{\"1\":{\"457\":1,\"458\":1,\"1288\":2,\"1375\":2,\"1462\":1,\"1533\":1,\"1537\":1,\"1538\":1,\"1539\":1,\"1540\":5,\"1541\":5,\"1542\":11,\"1543\":2,\"1549\":1}}],[\"setvalue\",{\"1\":{\"408\":2}}],[\"setting\",{\"1\":{\"408\":1}}],[\"settimeout还未执行的时候\",{\"1\":{\"1438\":1}}],[\"settimeout\",{\"0\":{\"460\":1},\"1\":{\"288\":2,\"289\":1,\"290\":2,\"292\":1,\"341\":2,\"371\":1,\"380\":1,\"383\":2,\"457\":1,\"458\":1,\"460\":3,\"849\":3,\"1066\":1,\"1288\":1,\"1303\":1,\"1312\":2,\"1340\":1,\"1345\":1,\"1352\":1,\"1356\":1,\"1375\":8,\"1424\":1,\"1425\":2,\"1426\":1,\"1427\":1,\"1433\":1,\"1438\":3,\"1446\":2,\"1449\":4,\"1462\":1,\"1533\":2,\"1537\":2,\"1538\":1,\"1539\":1,\"1541\":5,\"1542\":1,\"1543\":4,\"1549\":1,\"1579\":1,\"1580\":1,\"1685\":1,\"1710\":4}}],[\"setter\",{\"0\":{\"534\":1},\"1\":{\"402\":2,\"532\":5,\"534\":1,\"678\":1,\"706\":1,\"774\":1,\"1318\":1,\"1322\":3,\"1486\":2}}],[\"setter转化\",{\"1\":{\"401\":1}}],[\"set等拥有迭代器对象\",{\"1\":{\"388\":1}}],[\"set和map\",{\"0\":{\"357\":1}}],[\"set\",{\"0\":{\"997\":1,\"1186\":1},\"1\":{\"30\":1,\"161\":2,\"218\":1,\"377\":3,\"402\":1,\"403\":2,\"408\":2,\"467\":1,\"515\":1,\"533\":1,\"534\":4,\"563\":2,\"604\":3,\"615\":1,\"678\":1,\"688\":1,\"694\":1,\"695\":2,\"726\":1,\"989\":1,\"997\":1,\"1166\":1,\"1234\":2,\"1320\":1,\"1321\":2,\"1322\":3,\"1323\":1,\"1486\":2}}],[\"svg\",{\"1\":{\"28\":1}}],[\"s\",{\"1\":{\"15\":2,\"27\":2,\"110\":1,\"215\":1,\"242\":1,\"467\":11,\"494\":13,\"512\":9,\"668\":2,\"927\":1,\"1115\":3,\"1220\":5,\"1274\":2}}],[\"lhs\",{\"1\":{\"1670\":15,\"1709\":1}}],[\"ln2\",{\"1\":{\"1124\":1}}],[\"l++\",{\"1\":{\"476\":3}}],[\"ll\",{\"1\":{\"195\":1}}],[\"ls\",{\"1\":{\"195\":4,\"215\":3}}],[\"lt\",{\"1\":{\"121\":1}}],[\"l\",{\"1\":{\"110\":1,\"195\":1,\"213\":1,\"215\":3,\"467\":4,\"476\":8,\"488\":5,\"653\":6,\"1184\":2,\"1218\":2,\"1219\":2,\"1670\":1}}],[\"lodash\",{\"1\":{\"1413\":1,\"1436\":1,\"1446\":1,\"1635\":3}}],[\"loc\",{\"1\":{\"1218\":7}}],[\"location\",{\"1\":{\"1077\":2,\"1166\":1}}],[\"localsymbol\",{\"1\":{\"742\":1}}],[\"localstorage\",{\"0\":{\"442\":1,\"445\":1}}],[\"local\",{\"1\":{\"105\":1,\"1572\":2}}],[\"lowerright\",{\"1\":{\"1083\":1}}],[\"lowercase\",{\"1\":{\"84\":1}}],[\"lowright\",{\"1\":{\"1083\":1}}],[\"longestpalindrome\",{\"1\":{\"494\":1}}],[\"loadpageinto\",{\"1\":{\"1593\":1}}],[\"load事件\",{\"1\":{\"464\":1}}],[\"loading\",{\"1\":{\"464\":1}}],[\"loop2\",{\"1\":{\"1027\":2}}],[\"loop1\",{\"1\":{\"1027\":3}}],[\"loop\",{\"1\":{\"457\":1,\"1008\":1,\"1009\":1,\"1353\":1,\"1532\":1}}],[\"log目录中更改时间在7日以前的普通文件\",{\"1\":{\"215\":1}}],[\"log\",{\"1\":{\"166\":1,\"215\":1,\"235\":1,\"252\":2,\"275\":1,\"276\":1,\"341\":3,\"342\":1,\"343\":5,\"344\":1,\"345\":1,\"347\":1,\"348\":2,\"349\":1,\"350\":1,\"351\":1,\"352\":2,\"353\":1,\"354\":4,\"355\":2,\"364\":2,\"367\":1,\"368\":1,\"371\":1,\"372\":6,\"374\":3,\"375\":1,\"377\":3,\"378\":2,\"380\":1,\"383\":4,\"388\":5,\"392\":6,\"393\":5,\"394\":8,\"402\":1,\"403\":1,\"408\":3,\"460\":4,\"529\":4,\"530\":3,\"531\":2,\"533\":2,\"534\":2,\"538\":4,\"539\":6,\"540\":5,\"547\":5,\"548\":6,\"552\":3,\"556\":2,\"557\":2,\"560\":2,\"564\":5,\"565\":2,\"569\":5,\"570\":1,\"571\":1,\"572\":1,\"575\":2,\"576\":3,\"578\":2,\"579\":1,\"581\":4,\"586\":1,\"590\":1,\"592\":3,\"593\":1,\"599\":1,\"604\":1,\"606\":1,\"622\":2,\"623\":2,\"624\":4,\"625\":2,\"630\":2,\"632\":2,\"635\":4,\"636\":2,\"640\":3,\"648\":3,\"650\":2,\"651\":2,\"652\":1,\"653\":6,\"656\":1,\"659\":3,\"662\":4,\"679\":1,\"684\":3,\"689\":2,\"694\":2,\"695\":2,\"701\":2,\"714\":2,\"715\":1,\"716\":2,\"733\":1,\"734\":2,\"735\":1,\"742\":3,\"769\":5,\"776\":7,\"781\":4,\"787\":8,\"794\":1,\"795\":1,\"796\":1,\"807\":9,\"825\":5,\"843\":1,\"854\":6,\"861\":2,\"870\":1,\"875\":2,\"881\":2,\"920\":1,\"924\":2,\"928\":2,\"929\":10,\"955\":2,\"962\":1,\"971\":1,\"977\":1,\"985\":1,\"986\":1,\"993\":2,\"994\":1,\"995\":1,\"996\":2,\"997\":1,\"998\":1,\"1000\":2,\"1001\":1,\"1002\":2,\"1003\":1,\"1004\":6,\"1010\":1,\"1011\":1,\"1012\":1,\"1027\":1,\"1033\":1,\"1034\":3,\"1035\":5,\"1048\":1,\"1052\":3,\"1053\":5,\"1054\":3,\"1065\":7,\"1066\":3,\"1067\":2,\"1069\":2,\"1075\":1,\"1076\":2,\"1077\":1,\"1087\":6,\"1093\":1,\"1094\":2,\"1102\":3,\"1115\":11,\"1135\":2,\"1137\":3,\"1144\":1,\"1145\":1,\"1146\":1,\"1147\":1,\"1148\":1,\"1149\":1,\"1153\":5,\"1154\":2,\"1158\":1,\"1159\":2,\"1169\":2,\"1183\":6,\"1190\":2,\"1191\":2,\"1192\":2,\"1193\":2,\"1197\":2,\"1204\":4,\"1208\":2,\"1217\":1,\"1218\":1,\"1232\":1,\"1234\":1,\"1248\":1,\"1249\":1,\"1253\":1,\"1254\":1,\"1255\":21,\"1256\":2,\"1271\":1,\"1289\":1,\"1293\":3,\"1294\":3,\"1295\":4,\"1296\":1,\"1303\":1,\"1307\":1,\"1312\":1,\"1319\":5,\"1323\":6,\"1329\":6,\"1333\":1,\"1334\":8,\"1340\":1,\"1344\":3,\"1345\":2,\"1346\":1,\"1348\":3,\"1349\":1,\"1352\":2,\"1356\":3,\"1358\":1,\"1375\":8,\"1380\":4,\"1381\":2,\"1382\":7,\"1383\":8,\"1385\":4,\"1386\":5,\"1388\":2,\"1389\":3,\"1393\":1,\"1398\":2,\"1399\":4,\"1402\":1,\"1403\":4,\"1405\":1,\"1407\":8,\"1417\":3,\"1419\":3,\"1424\":1,\"1425\":2,\"1426\":1,\"1427\":1,\"1435\":1,\"1436\":3,\"1438\":2,\"1449\":2,\"1452\":2,\"1457\":4,\"1467\":4,\"1474\":1,\"1476\":2,\"1481\":1,\"1483\":1,\"1485\":2,\"1486\":2,\"1488\":4,\"1489\":2,\"1490\":1,\"1491\":1,\"1492\":1,\"1497\":1,\"1502\":1,\"1504\":1,\"1505\":6,\"1509\":1,\"1510\":2,\"1511\":1,\"1515\":1,\"1516\":2,\"1518\":6,\"1522\":1,\"1523\":1,\"1525\":2,\"1526\":3,\"1529\":2,\"1533\":6,\"1557\":1,\"1561\":7,\"1576\":3,\"1578\":3,\"1579\":5,\"1580\":2,\"1583\":1,\"1584\":7,\"1586\":2,\"1589\":1,\"1600\":1,\"1601\":1,\"1611\":3,\"1612\":4,\"1613\":4,\"1614\":3,\"1616\":2,\"1658\":1,\"1661\":4,\"1670\":7,\"1674\":1,\"1675\":2,\"1677\":1,\"1681\":2,\"1682\":1,\"1684\":2,\"1685\":3,\"1686\":4,\"1691\":5,\"1692\":4,\"1693\":1,\"1694\":2,\"1695\":2,\"1698\":1,\"1699\":4,\"1700\":6,\"1701\":4,\"1702\":2,\"1703\":1,\"1704\":2,\"1708\":1,\"1709\":4,\"1710\":1}}],[\"lexical\",{\"1\":{\"1673\":1}}],[\"lexing\",{\"1\":{\"464\":1,\"1666\":2}}],[\"leading\",{\"1\":{\"1312\":1}}],[\"leng\",{\"1\":{\"1413\":1}}],[\"length属性将失真\",{\"1\":{\"1406\":1}}],[\"length是一个数组属性\",{\"1\":{\"1109\":1}}],[\"length<=1\",{\"1\":{\"488\":1}}],[\"lengthoflongestsubstring\",{\"1\":{\"467\":1}}],[\"length\",{\"0\":{\"25\":1,\"1293\":1},\"1\":{\"23\":1,\"24\":2,\"381\":2,\"392\":1,\"467\":1,\"476\":1,\"479\":3,\"482\":1,\"485\":1,\"488\":11,\"494\":4,\"503\":1,\"506\":2,\"509\":6,\"512\":3,\"515\":1,\"521\":2,\"547\":1,\"562\":2,\"605\":1,\"625\":2,\"733\":1,\"742\":1,\"802\":1,\"807\":1,\"1011\":1,\"1060\":1,\"1094\":1,\"1109\":3,\"1184\":5,\"1185\":1,\"1218\":2,\"1219\":2,\"1293\":5,\"1319\":1,\"1382\":7,\"1390\":2,\"1395\":4,\"1406\":11,\"1413\":2,\"1417\":2,\"1418\":4,\"1419\":2,\"1493\":1,\"1564\":1,\"1565\":1,\"1572\":3}}],[\"len\",{\"1\":{\"476\":4,\"488\":3,\"562\":3,\"1219\":2,\"1413\":1,\"1418\":2}}],[\"levelorder\",{\"1\":{\"479\":1}}],[\"level\",{\"1\":{\"329\":1}}],[\"let有变量提升\",{\"1\":{\"341\":1}}],[\"let\",{\"0\":{\"341\":1,\"1066\":1,\"1076\":1,\"1692\":1},\"1\":{\"241\":1,\"242\":1,\"288\":6,\"289\":3,\"290\":2,\"292\":2,\"293\":2,\"294\":2,\"341\":3,\"343\":2,\"348\":1,\"349\":1,\"354\":1,\"371\":1,\"375\":1,\"388\":7,\"394\":2,\"402\":1,\"467\":4,\"473\":1,\"476\":4,\"479\":3,\"482\":10,\"485\":1,\"488\":25,\"491\":1,\"494\":2,\"500\":2,\"503\":1,\"506\":1,\"509\":5,\"512\":4,\"515\":2,\"518\":2,\"521\":1,\"524\":1,\"529\":3,\"530\":3,\"531\":4,\"534\":1,\"547\":5,\"552\":4,\"571\":2,\"572\":1,\"586\":1,\"599\":1,\"604\":1,\"606\":2,\"635\":2,\"640\":4,\"656\":3,\"659\":2,\"662\":2,\"672\":1,\"673\":1,\"769\":1,\"776\":2,\"787\":2,\"870\":3,\"894\":1,\"928\":6,\"929\":1,\"941\":1,\"943\":2,\"993\":4,\"994\":2,\"995\":2,\"996\":3,\"997\":2,\"998\":1,\"999\":2,\"1000\":1,\"1001\":2,\"1002\":2,\"1004\":8,\"1010\":1,\"1011\":1,\"1012\":1,\"1013\":1,\"1066\":12,\"1067\":10,\"1068\":3,\"1069\":2,\"1074\":2,\"1076\":3,\"1094\":1,\"1101\":1,\"1165\":1,\"1166\":5,\"1176\":1,\"1182\":2,\"1184\":1,\"1185\":2,\"1186\":3,\"1190\":1,\"1191\":1,\"1192\":1,\"1193\":1,\"1204\":2,\"1214\":5,\"1215\":2,\"1216\":2,\"1217\":11,\"1218\":21,\"1219\":1,\"1220\":4,\"1224\":6,\"1229\":2,\"1230\":2,\"1232\":2,\"1234\":3,\"1248\":1,\"1282\":1,\"1319\":1,\"1329\":1,\"1330\":1,\"1349\":1,\"1350\":1,\"1352\":3,\"1354\":4,\"1357\":1,\"1376\":1,\"1388\":2,\"1393\":1,\"1400\":2,\"1402\":1,\"1407\":7,\"1433\":1,\"1438\":3,\"1446\":1,\"1449\":1,\"1483\":1,\"1485\":1,\"1486\":1,\"1488\":1,\"1489\":1,\"1490\":1,\"1491\":1,\"1502\":2,\"1504\":5,\"1505\":1,\"1533\":1,\"1611\":2,\"1612\":2,\"1613\":1,\"1614\":1,\"1651\":1,\"1685\":2,\"1692\":4,\"1693\":3,\"1694\":9,\"1695\":8,\"1698\":2,\"1708\":1}}],[\"letter\",{\"0\":{\"88\":1},\"1\":{\"16\":2}}],[\"less\",{\"1\":{\"206\":1}}],[\"legacy\",{\"1\":{\"161\":2,\"929\":1}}],[\"leftarr\",{\"1\":{\"488\":3}}],[\"left===undefined\",{\"1\":{\"470\":1,\"479\":1,\"497\":1}}],[\"left\",{\"1\":{\"15\":1,\"35\":1,\"38\":5,\"51\":2,\"56\":1,\"81\":2,\"102\":3,\"277\":1,\"325\":1,\"470\":5,\"479\":5,\"497\":5,\"503\":5,\"1116\":9,\"1148\":1,\"1165\":1}}],[\"li>\",{\"1\":{\"1286\":1}}],[\"literal\",{\"1\":{\"1080\":2}}],[\"literals\",{\"1\":{\"245\":1}}],[\"lifetime\",{\"1\":{\"304\":1}}],[\"libuv\",{\"1\":{\"1532\":1,\"1534\":3}}],[\"lib64\",{\"1\":{\"186\":1}}],[\"lib\",{\"1\":{\"186\":1}}],[\"lightness\",{\"1\":{\"110\":1}}],[\"lighter\",{\"1\":{\"75\":1}}],[\"list3\",{\"1\":{\"1312\":1}}],[\"list2\",{\"1\":{\"1312\":1}}],[\"list1\",{\"1\":{\"1312\":1}}],[\"listnode\",{\"1\":{\"473\":6,\"491\":2}}],[\"list\",{\"1\":{\"44\":1,\"329\":4,\"343\":1,\"381\":5,\"473\":2,\"491\":1,\"557\":1,\"1183\":3,\"1286\":5,\"1312\":3,\"1621\":1}}],[\"linux中打包并压缩文件的扩展名\",{\"1\":{\"211\":1}}],[\"linux中打包文件的扩展名\",{\"1\":{\"211\":1}}],[\"linux中压缩文件的扩展名\",{\"1\":{\"211\":1}}],[\"linux常用命令\",{\"0\":{\"184\":1}}],[\"linux\",{\"0\":{\"186\":1,\"187\":1,\"1723\":1},\"1\":{\"153\":1},\"2\":{\"227\":1}}],[\"lineterminator\",{\"0\":{\"238\":1}}],[\"line>\",{\"1\":{\"83\":2}}],[\"linear\",{\"1\":{\"30\":2,\"100\":1,\"1550\":2}}],[\"line\",{\"0\":{\"93\":1},\"1\":{\"16\":2,\"82\":1,\"83\":1,\"86\":2,\"92\":1,\"93\":7,\"94\":1,\"205\":1,\"245\":2,\"927\":2,\"1218\":7}}],[\"linked\",{\"1\":{\"473\":2,\"491\":1}}],[\"link\",{\"1\":{\"15\":1,\"318\":1,\"438\":1}}],[\"li\",{\"1\":{\"15\":5}}],[\"latebloomer\",{\"1\":{\"1312\":4}}],[\"latin\",{\"1\":{\"234\":1}}],[\"largearr\",{\"1\":{\"1285\":1}}],[\"largeobj\",{\"1\":{\"1285\":2}}],[\"largest\",{\"1\":{\"488\":9}}],[\"labeled\",{\"1\":{\"1027\":2}}],[\"label\",{\"0\":{\"1023\":1}}],[\"labelname\",{\"1\":{\"959\":1,\"960\":1,\"967\":1,\"968\":1,\"969\":1}}],[\"lamborghini\",{\"1\":{\"986\":5}}],[\"layer\",{\"1\":{\"297\":1,\"318\":4,\"329\":1}}],[\"layout\",{\"1\":{\"48\":1}}],[\"lastindexof\",{\"1\":{\"859\":1}}],[\"last\",{\"1\":{\"15\":5,\"81\":3,\"205\":1,\"288\":4,\"293\":3,\"294\":4,\"304\":1,\"430\":8,\"1183\":2,\"1218\":4,\"1367\":3,\"1395\":1,\"1433\":5}}],[\"lang=\",{\"1\":{\"120\":1,\"132\":1}}],[\"language\",{\"1\":{\"115\":1}}],[\"lang\",{\"1\":{\"15\":1,\"132\":1}}],[\"v2\",{\"1\":{\"509\":4}}],[\"v1\",{\"1\":{\"509\":4}}],[\"version2\",{\"1\":{\"509\":16}}],[\"version1\",{\"1\":{\"509\":15}}],[\"vertical\",{\"0\":{\"82\":1},\"1\":{\"93\":1,\"94\":1}}],[\"vo\",{\"1\":{\"1566\":4,\"1570\":2,\"1571\":1,\"1572\":1,\"1709\":7}}],[\"volvo\",{\"1\":{\"1060\":1}}],[\"volatile\",{\"1\":{\"250\":1}}],[\"void\",{\"0\":{\"1135\":1},\"1\":{\"249\":1,\"500\":1,\"1135\":6,\"1137\":1,\"1138\":3,\"1139\":1,\"1243\":2}}],[\"vuex的5个核心属性\",{\"0\":{\"413\":1}}],[\"vuex的概念\",{\"0\":{\"412\":1}}],[\"vuex解决的问题\",{\"1\":{\"412\":1}}],[\"vuex是一个专为\",{\"1\":{\"412\":1}}],[\"vuex相关\",{\"0\":{\"411\":1}}],[\"vue3\",{\"0\":{\"400\":1,\"401\":1,\"403\":1},\"1\":{\"401\":1,\"403\":1}}],[\"vue2\",{\"0\":{\"400\":1,\"401\":1,\"402\":1},\"1\":{\"401\":2}}],[\"vue\",{\"0\":{\"1738\":1},\"1\":{\"161\":2,\"401\":1,\"412\":1,\"584\":1},\"2\":{\"405\":1,\"410\":1,\"415\":1}}],[\"v8\",{\"1\":{\"144\":1,\"1534\":2,\"1550\":1}}],[\"v\",{\"1\":{\"110\":1,\"212\":1,\"215\":1,\"753\":2,\"780\":2,\"817\":2,\"861\":3,\"1178\":1,\"1350\":2}}],[\"vacations\",{\"1\":{\"1166\":1}}],[\"van\",{\"1\":{\"581\":3}}],[\"var<\",{\"1\":{\"1285\":1}}],[\"variablename\",{\"1\":{\"1330\":1,\"1331\":1}}],[\"variable\",{\"1\":{\"938\":1,\"963\":4,\"990\":1,\"991\":1,\"1068\":1,\"1197\":4,\"1566\":1,\"1693\":1}}],[\"varient\",{\"0\":{\"76\":1},\"1\":{\"76\":1}}],[\"varient>\",{\"1\":{\"71\":1}}],[\"var有变量提升\",{\"1\":{\"341\":1}}],[\"var\",{\"0\":{\"1065\":1,\"1075\":1,\"1691\":1},\"1\":{\"186\":1,\"215\":2,\"235\":5,\"242\":1,\"243\":2,\"244\":2,\"245\":4,\"249\":1,\"252\":2,\"341\":2,\"388\":5,\"392\":1,\"394\":5,\"467\":1,\"473\":3,\"476\":1,\"479\":1,\"485\":1,\"488\":8,\"491\":1,\"494\":1,\"500\":2,\"503\":1,\"506\":1,\"509\":2,\"512\":1,\"515\":1,\"518\":1,\"521\":1,\"524\":1,\"597\":1,\"625\":1,\"807\":8,\"875\":3,\"881\":3,\"887\":3,\"917\":3,\"919\":1,\"920\":1,\"923\":4,\"924\":2,\"928\":1,\"930\":2,\"941\":1,\"962\":2,\"963\":1,\"971\":2,\"977\":1,\"985\":1,\"986\":3,\"1002\":1,\"1003\":2,\"1010\":1,\"1020\":1,\"1027\":1,\"1033\":1,\"1034\":3,\"1035\":3,\"1042\":1,\"1048\":4,\"1055\":1,\"1060\":4,\"1065\":4,\"1067\":2,\"1069\":1,\"1074\":1,\"1075\":3,\"1083\":5,\"1087\":2,\"1092\":1,\"1093\":1,\"1101\":1,\"1102\":1,\"1109\":4,\"1110\":2,\"1137\":2,\"1154\":2,\"1155\":3,\"1156\":6,\"1169\":2,\"1178\":3,\"1179\":2,\"1181\":3,\"1185\":2,\"1186\":2,\"1213\":5,\"1218\":10,\"1233\":1,\"1234\":1,\"1248\":3,\"1249\":1,\"1253\":7,\"1254\":7,\"1264\":5,\"1271\":1,\"1273\":4,\"1274\":7,\"1281\":4,\"1285\":2,\"1286\":2,\"1287\":2,\"1307\":1,\"1312\":8,\"1329\":1,\"1330\":1,\"1332\":1,\"1334\":2,\"1335\":1,\"1375\":6,\"1389\":2,\"1390\":1,\"1393\":1,\"1407\":7,\"1411\":1,\"1413\":4,\"1417\":1,\"1456\":1,\"1457\":1,\"1470\":1,\"1497\":1,\"1504\":1,\"1509\":1,\"1511\":1,\"1515\":1,\"1516\":1,\"1518\":2,\"1525\":1,\"1529\":1,\"1564\":2,\"1572\":1,\"1578\":3,\"1579\":5,\"1580\":1,\"1584\":4,\"1586\":2,\"1587\":3,\"1616\":2,\"1634\":1,\"1651\":1,\"1654\":3,\"1658\":1,\"1668\":1,\"1670\":1,\"1674\":1,\"1681\":2,\"1682\":1,\"1686\":2,\"1691\":9,\"1692\":4,\"1694\":3,\"1695\":8,\"1698\":2,\"1699\":2,\"1700\":2,\"1701\":3,\"1702\":3,\"1703\":1,\"1709\":6}}],[\"val3\",{\"1\":{\"716\":2}}],[\"val2\",{\"1\":{\"716\":2}}],[\"val1\",{\"1\":{\"716\":2}}],[\"val===undefined\",{\"1\":{\"470\":1,\"473\":2,\"479\":1,\"497\":1}}],[\"val\",{\"1\":{\"14\":13,\"403\":3,\"470\":6,\"473\":6,\"479\":4,\"491\":3,\"497\":4,\"534\":3,\"716\":2,\"734\":3,\"1165\":2,\"1321\":3,\"1376\":2,\"1393\":2,\"1449\":2}}],[\"valueisnan\",{\"1\":{\"861\":4}}],[\"value2\",{\"1\":{\"761\":2}}],[\"value1\",{\"1\":{\"761\":2}}],[\"valueof\",{\"1\":{\"548\":1,\"806\":1,\"946\":7,\"951\":1,\"952\":1,\"953\":2,\"955\":5}}],[\"valuewrapper\",{\"1\":{\"408\":3}}],[\"values\",{\"0\":{\"367\":1,\"841\":1},\"1\":{\"61\":1,\"329\":3,\"367\":3,\"803\":1,\"841\":1,\"842\":1,\"843\":1,\"1373\":2,\"1393\":2}}],[\"value\",{\"0\":{\"7\":1},\"1\":{\"110\":1,\"329\":2,\"380\":1,\"388\":3,\"402\":6,\"408\":17,\"528\":1,\"529\":2,\"538\":2,\"539\":2,\"540\":1,\"548\":3,\"578\":1,\"604\":2,\"615\":2,\"668\":3,\"671\":2,\"672\":2,\"673\":3,\"688\":1,\"689\":3,\"694\":1,\"695\":1,\"701\":4,\"716\":2,\"721\":1,\"726\":1,\"735\":1,\"776\":2,\"787\":2,\"796\":1,\"800\":7,\"813\":1,\"861\":3,\"925\":2,\"928\":1,\"949\":2,\"993\":5,\"994\":2,\"995\":2,\"996\":2,\"997\":2,\"1003\":4,\"1040\":2,\"1041\":1,\"1068\":2,\"1197\":4,\"1234\":3,\"1261\":1,\"1264\":1,\"1350\":2,\"1376\":4,\"1418\":2,\"1426\":1,\"1436\":1,\"1488\":4,\"1670\":1,\"1708\":2}}],[\"vm1292\",{\"1\":{\"1403\":1}}],[\"vmin\",{\"1\":{\"24\":2}}],[\"vmax\",{\"1\":{\"24\":2}}],[\"vh\",{\"1\":{\"24\":2}}],[\"vw\",{\"1\":{\"24\":2}}],[\"vim\",{\"1\":{\"205\":2}}],[\"vi\",{\"1\":{\"205\":1,\"215\":1}}],[\"viewprot\",{\"1\":{\"38\":1}}],[\"viewport\",{\"1\":{\"24\":1}}],[\"visibility\",{\"1\":{\"329\":1}}],[\"visible\",{\"1\":{\"38\":1,\"87\":2,\"615\":1,\"632\":5}}],[\"visited\",{\"1\":{\"15\":1}}],[\"<ul\",{\"1\":{\"1286\":1}}],[\"<uri>\",{\"1\":{\"100\":1}}],[\"<url>\",{\"1\":{\"29\":1}}],[\"<<=\",{\"1\":{\"1238\":3,\"1243\":1}}],[\"<<\",{\"1\":{\"1148\":2,\"1151\":1,\"1153\":2,\"1156\":2,\"1238\":1,\"1243\":1}}],[\"<anonymous>\",{\"1\":{\"1403\":2}}],[\"<a\",{\"1\":{\"1138\":1,\"1139\":2}}],[\"<a>\",{\"1\":{\"15\":2,\"50\":1,\"1138\":1}}],[\"<object>\",{\"1\":{\"540\":2}}],[\"<outline\",{\"1\":{\"60\":3}}],[\"<=\",{\"1\":{\"482\":2,\"503\":1,\"518\":1,\"1201\":3,\"1243\":1,\"1385\":4,\"1438\":2}}],[\"<rtc>\",{\"1\":{\"329\":1}}],[\"<rt>\",{\"1\":{\"329\":1}}],[\"<rb>\",{\"1\":{\"329\":1}}],[\"<ruby>\",{\"1\":{\"329\":1}}],[\"<caption>\",{\"1\":{\"329\":1}}],[\"<col>\",{\"1\":{\"329\":1}}],[\"<colgroup>\",{\"1\":{\"329\":1}}],[\"<color>\",{\"1\":{\"28\":1,\"59\":1,\"99\":1}}],[\"<cr>\",{\"1\":{\"238\":1}}],[\"<nbsp>\",{\"1\":{\"237\":1}}],[\"<number>\",{\"1\":{\"31\":2,\"63\":1}}],[\"<fun3>\",{\"1\":{\"1557\":1}}],[\"<fun2>\",{\"1\":{\"1557\":1}}],[\"<fun1>\",{\"1\":{\"1557\":1}}],[\"<flex\",{\"1\":{\"332\":2}}],[\"<ff>\",{\"1\":{\"237\":1}}],[\"<font\",{\"1\":{\"71\":6}}],[\"<vt>\",{\"1\":{\"237\":1}}],[\"<meta>\",{\"1\":{\"120\":1,\"127\":1,\"129\":1}}],[\"<meta\",{\"1\":{\"120\":1,\"126\":1,\"128\":1}}],[\"<h1>\",{\"1\":{\"126\":2}}],[\"<head>\",{\"1\":{\"120\":2,\"126\":2,\"130\":1}}],[\"<html\",{\"1\":{\"120\":1,\"132\":1}}],[\"<html>\",{\"1\":{\"24\":1,\"120\":1}}],[\"<\",{\"1\":{\"118\":1,\"120\":6,\"121\":3,\"122\":1,\"126\":1,\"132\":1,\"341\":2,\"351\":1,\"417\":1,\"467\":1,\"476\":6,\"479\":1,\"482\":5,\"488\":13,\"494\":3,\"509\":13,\"515\":1,\"521\":1,\"962\":1,\"971\":2,\"977\":1,\"1003\":1,\"1010\":1,\"1012\":1,\"1013\":1,\"1027\":2,\"1060\":2,\"1066\":1,\"1201\":3,\"1243\":1,\"1248\":1,\"1285\":2,\"1286\":3,\"1287\":2,\"1333\":1,\"1349\":1,\"1413\":2,\"1433\":1,\"1502\":2,\"1576\":3,\"1579\":1,\"1611\":2,\"1612\":1,\"1613\":1,\"1614\":2,\"1618\":1,\"1682\":1,\"1684\":3,\"1691\":1}}],[\"<button>移除列表<\",{\"1\":{\"1286\":1}}],[\"<button\",{\"1\":{\"1285\":1,\"1287\":1}}],[\"<br>\",{\"1\":{\"1060\":1}}],[\"<base>\",{\"1\":{\"120\":1}}],[\"<backgroundn>\",{\"1\":{\"111\":1}}],[\"<background2>\",{\"1\":{\"111\":1}}],[\"<background1>\",{\"1\":{\"111\":1}}],[\"<background\",{\"1\":{\"98\":5,\"102\":2}}],[\"<body>\",{\"1\":{\"120\":2,\"126\":1,\"1285\":1,\"1286\":1,\"1287\":1}}],[\"<box>\",{\"1\":{\"101\":2}}],[\"<td>\",{\"1\":{\"329\":1}}],[\"<tr>\",{\"1\":{\"329\":1}}],[\"<tfoot>\",{\"1\":{\"329\":1}}],[\"<tbody>\",{\"1\":{\"329\":3}}],[\"<table>\",{\"1\":{\"329\":2}}],[\"<tab>\",{\"1\":{\"237\":1}}],[\"<title>我的测试页面<\",{\"1\":{\"126\":1}}],[\"<title>我的测试站点<\",{\"1\":{\"120\":1}}],[\"<title>\",{\"1\":{\"115\":5,\"120\":2,\"126\":2}}],[\"<time>\",{\"1\":{\"27\":1}}],[\"<text\",{\"1\":{\"83\":5}}],[\"<li>项目1<\",{\"1\":{\"1286\":1}}],[\"<link\",{\"1\":{\"130\":1,\"131\":1}}],[\"<link>元素经常位于文档的头部\",{\"1\":{\"131\":1}}],[\"<link>\",{\"1\":{\"120\":1}}],[\"<line\",{\"1\":{\"71\":1}}],[\"<ls>\",{\"1\":{\"238\":1}}],[\"<lf>\",{\"1\":{\"238\":1}}],[\"<length>\",{\"1\":{\"23\":1,\"47\":1,\"59\":1,\"82\":1,\"86\":1,\"88\":1,\"89\":1,\"102\":1,\"104\":1}}],[\"<div>\",{\"1\":{\"48\":1,\"51\":2,\"136\":1}}],[\"<sp>\",{\"1\":{\"237\":1}}],[\"<span>\",{\"1\":{\"37\":1}}],[\"<script\",{\"1\":{\"131\":1,\"1285\":1,\"1286\":1,\"1287\":1,\"1611\":3,\"1612\":3,\"1613\":2,\"1614\":7,\"1617\":1,\"1618\":1}}],[\"<script>seajs\",{\"1\":{\"1618\":1}}],[\"<script>元素也应当放在文档的头部\",{\"1\":{\"131\":1}}],[\"<script>\",{\"1\":{\"120\":1,\"131\":2,\"450\":1,\"1075\":1,\"1533\":1,\"1614\":1,\"1617\":1,\"1618\":1}}],[\"<style>\",{\"1\":{\"120\":1}}],[\"<string>\",{\"1\":{\"29\":1}}],[\"<shadow>\",{\"1\":{\"59\":3}}],[\"<ps>\",{\"1\":{\"238\":1}}],[\"<p\",{\"1\":{\"117\":1}}],[\"<percent>\",{\"1\":{\"102\":1}}],[\"<percentag>\",{\"1\":{\"47\":1}}],[\"<percentage>\",{\"1\":{\"31\":1,\"63\":1,\"82\":1,\"86\":1,\"89\":1,\"104\":1}}],[\"<position>\",{\"1\":{\"102\":2}}],[\"<pre>\",{\"1\":{\"92\":1}}],[\"<p>这是我的页面<\",{\"1\":{\"120\":1}}],[\"<p>这是一段话<\",{\"1\":{\"116\":1}}],[\"<p>\",{\"1\":{\"4\":1,\"6\":1,\"48\":1,\"121\":1}}],[\"<gradient>\",{\"1\":{\"30\":1}}],[\"<input\",{\"1\":{\"118\":2,\"1436\":1}}],[\"<integer>\",{\"1\":{\"31\":1}}],[\"<img>\",{\"1\":{\"47\":1}}],[\"<image>\",{\"1\":{\"30\":1}}],[\"<identifier>\",{\"1\":{\"29\":1}}],[\"所声明的是对象\",{\"1\":{\"1693\":1}}],[\"所声明的变量均存在暂时性死区\",{\"1\":{\"1068\":1}}],[\"所控制\",{\"1\":{\"1681\":1}}],[\"所创建的气泡中\",{\"1\":{\"1674\":1}}],[\"所创建的作用域\",{\"1\":{\"1674\":2}}],[\"所创建的实例的原型对象\",{\"1\":{\"645\":1}}],[\"所指向的对象身上\",{\"1\":{\"1616\":1}}],[\"所引用\",{\"1\":{\"1581\":2}}],[\"所在的作用域\",{\"1\":{\"1375\":2}}],[\"所处理的就是对象\",{\"1\":{\"930\":1}}],[\"所谓\",{\"1\":{\"1468\":1}}],[\"所谓松散类型就是可以用于保存任何类型的数据\",{\"1\":{\"1063\":1}}],[\"所谓的\",{\"1\":{\"873\":1}}],[\"所谓流动性并非看上去的宽度\",{\"1\":{\"50\":1}}],[\"所执行的指令就好像是\",{\"1\":{\"215\":1}}],[\"所采用的内核\",{\"1\":{\"143\":1}}],[\"所有执行环境都被销毁\",{\"1\":{\"1709\":1}}],[\"所有需要暴露给外界的功能都会成为这个对象\",{\"1\":{\"1683\":1}}],[\"所有同步任务及异步任务按照\",{\"1\":{\"1552\":1}}],[\"所有同步任务都在主线程上执行\",{\"1\":{\"1532\":1}}],[\"所有实例都会通过原型链引用到\",{\"1\":{\"1475\":1}}],[\"所有语句的集合\",{\"1\":{\"1328\":1}}],[\"所有变量都加上标记\",{\"1\":{\"1282\":1}}],[\"所有浏览器下都是10\",{\"1\":{\"1137\":1}}],[\"所有其他值\",{\"1\":{\"1020\":1}}],[\"所有可枚举的属性都会被返回一次\",{\"1\":{\"983\":1}}],[\"所有可能的全排列\",{\"1\":{\"521\":1}}],[\"所有主流浏览器均支持该函数\",{\"1\":{\"868\":1,\"873\":1,\"878\":1,\"884\":1,\"890\":1,\"897\":1,\"902\":1,\"908\":1,\"913\":1}}],[\"所有主流浏览器均支持该属性\",{\"1\":{\"864\":1}}],[\"所有主流浏览器都支持\",{\"1\":{\"81\":1}}],[\"所有经过标准内置对象创建的值均能通过\",{\"1\":{\"835\":1}}],[\"所有对象从\",{\"1\":{\"804\":1}}],[\"所有\",{\"1\":{\"774\":1,\"1142\":1}}],[\"所有继承了\",{\"1\":{\"754\":1}}],[\"所有的\",{\"1\":{\"1350\":1}}],[\"所有的构造器的\",{\"1\":{\"653\":1}}],[\"所有的后代元素也不会再显示\",{\"1\":{\"329\":1}}],[\"所有函数和对象最终都是由\",{\"1\":{\"647\":1}}],[\"所有在类中定义的方法\",{\"1\":{\"629\":1}}],[\"所有原生引用类型\",{\"1\":{\"580\":1}}],[\"所有原型对象都会自动获得一个\",{\"1\":{\"576\":1}}],[\"所有通过对象直接量创建的对象都具有同一个原型对象\",{\"1\":{\"565\":1}}],[\"所有全局变量都是\",{\"1\":{\"560\":1}}],[\"所有已有属性仍可以被修改\",{\"1\":{\"539\":1}}],[\"所有已有属性变为不可配置\",{\"1\":{\"539\":1,\"540\":1}}],[\"所有数字之和\",{\"1\":{\"497\":1}}],[\"所有defer脚本会按照在文档出现的顺序执行\",{\"1\":{\"464\":1}}],[\"所有组件都可以拿到里面的数据\",{\"1\":{\"412\":1}}],[\"所有属性必须在data对象上存在才能让vue将它转换为响应式\",{\"1\":{\"401\":1}}],[\"所有元素对象\",{\"1\":{\"12\":1}}],[\"所以无论是在函数里面还是在外面调用函数里面的函数都可以访问到\",{\"1\":{\"1710\":1}}],[\"所以无法通过定义\",{\"1\":{\"81\":1}}],[\"所以给\",{\"1\":{\"1709\":1}}],[\"所以给它们设置属性不会报错\",{\"1\":{\"563\":1}}],[\"所以虽然\",{\"1\":{\"1709\":1}}],[\"所以变量的声明无效\",{\"1\":{\"1703\":1}}],[\"所以变量的声明无作用\",{\"1\":{\"1329\":1}}],[\"所以就算使用相同的标识符也不会覆盖外部作用域的变量\",{\"1\":{\"1695\":1}}],[\"所以就报错了\",{\"1\":{\"1407\":1}}],[\"所以控制台输出\",{\"1\":{\"1677\":2}}],[\"所以要借助工具来编译运行\",{\"1\":{\"1619\":1}}],[\"所以同步加载没有问题\",{\"1\":{\"1617\":1}}],[\"所以加载起来比较快\",{\"1\":{\"1617\":1}}],[\"所以加不加引号都可以\",{\"1\":{\"550\":1}}],[\"所以也就不能用作构造函数\",{\"1\":{\"1589\":1}}],[\"所以才叫\",{\"1\":{\"1562\":1}}],[\"所以才会有类似\",{\"1\":{\"762\":1}}],[\"所以程序结束之前\",{\"1\":{\"1557\":1}}],[\"所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文\",{\"1\":{\"1557\":1}}],[\"所以并行需要多个线程在同一时间执行多件事情\",{\"1\":{\"1547\":1}}],[\"所以先执行\",{\"1\":{\"1541\":1}}],[\"所以会发生全局属性被重写的现象\",{\"1\":{\"1511\":1}}],[\"所以会得到与前一种写法不同的结果\",{\"1\":{\"1221\":1}}],[\"所以在节点创建好的时候\",{\"1\":{\"1502\":1}}],[\"所以在修改原型对象对的时候\",{\"1\":{\"1476\":1}}],[\"所以在滚动事件中引入函数的节流是一个非常好的实践\",{\"1\":{\"1438\":1}}],[\"所以在电影的播放中基本是以每秒\",{\"1\":{\"1431\":1}}],[\"所以在代码中的任意位置声明变量总是等效于在代码开头声明\",{\"1\":{\"1065\":1}}],[\"所以最后输出的就是\",{\"1\":{\"1407\":1}}],[\"所以最大利润为\",{\"1\":{\"485\":1}}],[\"所以指向外层的全局变量\",{\"1\":{\"1407\":1}}],[\"所以指定的\",{\"1\":{\"974\":1}}],[\"所以输出是\",{\"1\":{\"1407\":1}}],[\"所以输出的是\",{\"1\":{\"1375\":1}}],[\"所以为了使用数组的方法\",{\"1\":{\"1393\":1}}],[\"所以应该根据实际场景进行合理设置\",{\"1\":{\"1382\":1}}],[\"所以应该取m+1到n\",{\"1\":{\"494\":1}}],[\"所以当然也就不能用call\",{\"1\":{\"1375\":1}}],[\"所以当他们的大小已知时\",{\"1\":{\"1279\":1}}],[\"所以建议生产环境下去除控制台打印\",{\"1\":{\"1289\":1}}],[\"所以他们的内存也无法被回收\",{\"1\":{\"1289\":1}}],[\"所以对象\",{\"1\":{\"1284\":1}}],[\"所以对它们进行解构赋值时都会报错\",{\"1\":{\"1220\":1}}],[\"所以说标记清除算法可以取代引用计数算法\",{\"1\":{\"1282\":1}}],[\"所以声明一个全局变量的时候\",{\"1\":{\"1279\":1}}],[\"所以你可以这么写\",{\"1\":{\"1242\":1}}],[\"所以函数\",{\"1\":{\"1217\":1}}],[\"所以函数也有\",{\"1\":{\"644\":1}}],[\"所以返回对象本身\",{\"1\":{\"1194\":1}}],[\"所以三级没有权限\",{\"1\":{\"1161\":1}}],[\"所以认为有权限\",{\"1\":{\"1161\":1}}],[\"所以利用这个特性可以用来做\",{\"1\":{\"1160\":1}}],[\"所以全部都是\",{\"1\":{\"1160\":1}}],[\"所以结果和上个示例一样\",{\"1\":{\"1579\":1}}],[\"所以结果总是非负的\",{\"1\":{\"1150\":1}}],[\"所以结束循环\",{\"1\":{\"476\":1}}],[\"所以该操作也称为\",{\"1\":{\"1149\":1}}],[\"所以该赋值语句静默失败\",{\"1\":{\"769\":1}}],[\"所以这时执行\",{\"1\":{\"1709\":1}}],[\"所以这次的触发又作废了\",{\"1\":{\"1541\":1}}],[\"所以这一次的\",{\"1\":{\"1540\":1}}],[\"所以这个数是一个负数\",{\"1\":{\"1147\":1}}],[\"所以这种内核比较流行\",{\"1\":{\"143\":1}}],[\"所以可以用\",{\"1\":{\"1137\":1}}],[\"所以数组遍历不一定按次序访问元素\",{\"1\":{\"983\":1}}],[\"所以数组类型实现响应式\",{\"1\":{\"402\":1}}],[\"所以能成立\",{\"1\":{\"955\":1}}],[\"所以采用\",{\"1\":{\"936\":1}}],[\"所以引用类型的值是按引用访问的\",{\"1\":{\"917\":1}}],[\"所以直接继承\",{\"1\":{\"624\":1}}],[\"所以它后面不能跟变量声明语句\",{\"1\":{\"1652\":1}}],[\"所以它是一个模块之中最早执行的\",{\"1\":{\"1636\":1}}],[\"所以它能从对象中取值或对对象进行修改\",{\"1\":{\"1516\":1}}],[\"所以它们互不相等\",{\"1\":{\"1204\":1}}],[\"所以它会调用相关\",{\"1\":{\"678\":1}}],[\"所以它不继承任何属性\",{\"1\":{\"565\":1}}],[\"所以它的权重是最高的\",{\"1\":{\"18\":1}}],[\"所以o\",{\"1\":{\"557\":1}}],[\"所以较方括号运算符相比\",{\"1\":{\"557\":1}}],[\"所以只取得自定义的属性\",{\"1\":{\"531\":1}}],[\"所以不会报错\",{\"1\":{\"1693\":1}}],[\"所以不能使用表达式和变量\",{\"1\":{\"1634\":1}}],[\"所以不能用\",{\"1\":{\"1400\":1}}],[\"所以不能用作构造函数\",{\"1\":{\"1375\":1}}],[\"所以不是同一个变量\",{\"1\":{\"1407\":1}}],[\"所以不执行\",{\"1\":{\"1253\":1}}],[\"所以不存在根节点到叶子节点的路径\",{\"1\":{\"470\":1}}],[\"所以不再占据原来那层的空间\",{\"1\":{\"37\":1}}],[\"所以其长度为\",{\"1\":{\"467\":3}}],[\"所以自然而然就实现了我们手动改变this指向的目的\",{\"1\":{\"392\":1}}],[\"所以从第二个开始参数截取\",{\"1\":{\"392\":1}}],[\"所以文档声明是必须的\",{\"1\":{\"321\":1}}],[\"所以如果服务端的数据全部发送完\",{\"1\":{\"304\":1}}],[\"所以如果当你发现一个\",{\"1\":{\"39\":1}}],[\"所以发送\",{\"1\":{\"304\":1}}],[\"所以我们先不考虑它\",{\"1\":{\"1582\":1}}],[\"所以我们来聊聊\",{\"1\":{\"1560\":1}}],[\"所以我们可以让定义原型对象中的那几个方法都返回用以调用方法的实例对象的引用\",{\"1\":{\"1497\":1}}],[\"所以我们在使用和实现自定义apply方法的代码里只需要修改对应的部分就行了\",{\"1\":{\"393\":1}}],[\"所以我们需要三次握手来确认这个过程\",{\"1\":{\"303\":1}}],[\"所以我们应该尽量减少repaint和reflow\",{\"1\":{\"158\":1}}],[\"所以块级注释对于被注释的代码块来说是不安全的\",{\"1\":{\"242\":1}}],[\"所以第二种情况下\",{\"1\":{\"105\":1}}],[\"所以既是第一行也是最后一行\",{\"1\":{\"81\":1}}],[\"所以\",{\"1\":{\"38\":1,\"85\":1,\"253\":1,\"309\":1,\"332\":1,\"500\":1,\"509\":1,\"530\":1,\"622\":1,\"624\":1,\"647\":1,\"848\":1,\"955\":1,\"1203\":1,\"1217\":1,\"1375\":3,\"1398\":1,\"1407\":1,\"1417\":1,\"1457\":1,\"1540\":1,\"1551\":2,\"1581\":1,\"1593\":1,\"1621\":2,\"1652\":1,\"1670\":1,\"1704\":1,\"1709\":1}}],[\"所以覆盖掉了之前的\",{\"1\":{\"18\":1}}],[\"所以将其称为\",{\"1\":{\"15\":1}}],[\"hair\",{\"1\":{\"635\":3,\"662\":3}}],[\"handleinputchange\",{\"1\":{\"1436\":2}}],[\"handlewindowresize\",{\"1\":{\"1436\":3}}],[\"handler\",{\"1\":{\"408\":4,\"1375\":2}}],[\"handling\",{\"1\":{\"1375\":1,\"1595\":1}}],[\"hand\",{\"1\":{\"1165\":1}}],[\"hanging\",{\"1\":{\"86\":2}}],[\"hascycle\",{\"1\":{\"491\":1}}],[\"haspathsum\",{\"1\":{\"470\":3}}],[\"has\",{\"1\":{\"467\":1,\"515\":1,\"1066\":1,\"1076\":1,\"1400\":2}}],[\"hasownproperty\",{\"0\":{\"752\":1},\"1\":{\"388\":1,\"565\":2,\"577\":3,\"603\":4,\"731\":1,\"752\":1,\"753\":1,\"754\":1,\"756\":2,\"757\":4,\"806\":1,\"986\":1,\"1004\":3}}],[\"hash\",{\"1\":{\"176\":3,\"177\":1}}],[\"have\",{\"1\":{\"329\":1,\"1042\":1}}],[\"hard\",{\"1\":{\"176\":2}}],[\"hoc\",{\"1\":{\"1710\":2}}],[\"hook\",{\"1\":{\"1626\":1}}],[\"hoisting\",{\"1\":{\"1065\":1}}],[\"honda\",{\"1\":{\"1042\":2,\"1109\":1}}],[\"home\",{\"1\":{\"186\":1,\"215\":1}}],[\"host头部判断请求的服务程序\",{\"1\":{\"464\":1}}],[\"hostnamectl\",{\"1\":{\"218\":1}}],[\"hostname\",{\"1\":{\"215\":1,\"218\":1}}],[\"hosts文件\",{\"1\":{\"464\":1}}],[\"hosts\",{\"1\":{\"150\":1}}],[\"host\",{\"1\":{\"148\":1}}],[\"hover\",{\"1\":{\"15\":2,\"270\":1,\"277\":1}}],[\"href\",{\"1\":{\"131\":1}}],[\"href=\",{\"1\":{\"130\":1,\"131\":1,\"1138\":1,\"1139\":2}}],[\"hypertext\",{\"1\":{\"115\":1}}],[\"hue\",{\"1\":{\"110\":1}}],[\"h\",{\"1\":{\"110\":1,\"190\":2,\"215\":1,\"1184\":1,\"1219\":1}}],[\"hsb\",{\"1\":{\"110\":1}}],[\"hsv\",{\"1\":{\"110\":1}}],[\"hsla\",{\"1\":{\"28\":2,\"110\":3}}],[\"hsl\",{\"0\":{\"110\":1},\"1\":{\"28\":2,\"110\":8}}],[\"http1\",{\"1\":{\"464\":2}}],[\"httpd\",{\"1\":{\"153\":2,\"215\":6}}],[\"http\",{\"1\":{\"152\":2,\"153\":2,\"156\":2,\"215\":2,\"318\":1,\"417\":1,\"429\":1,\"1139\":1,\"1403\":3,\"1502\":1,\"1549\":2}}],[\"https默认端口443\",{\"1\":{\"148\":1}}],[\"https\",{\"1\":{\"100\":1,\"148\":1,\"1349\":1,\"1458\":1}}],[\"html5\",{\"1\":{\"1551\":1}}],[\"html解析过程中会逐步显示页面\",{\"1\":{\"464\":1}}],[\"html解析器遇到没有\",{\"1\":{\"464\":1}}],[\"html出现过很多版本\",{\"1\":{\"321\":1}}],[\"html默认是流式布局的\",{\"1\":{\"158\":1}}],[\"html>\",{\"1\":{\"120\":4,\"132\":1}}],[\"html简述\",{\"0\":{\"114\":1}}],[\"html\",{\"0\":{\"115\":1,\"116\":1,\"120\":1,\"121\":1,\"122\":1,\"125\":1,\"126\":1,\"131\":1,\"135\":1,\"1717\":1,\"1734\":1},\"1\":{\"2\":2,\"4\":1,\"6\":1,\"36\":1,\"39\":1,\"115\":4,\"120\":3,\"121\":1,\"122\":1,\"126\":3,\"127\":1,\"130\":1,\"131\":3,\"132\":1,\"136\":1,\"139\":1,\"153\":1,\"155\":1,\"215\":3,\"235\":3,\"329\":16,\"417\":1,\"438\":1,\"1138\":1,\"1496\":1,\"1533\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1617\":1,\"1618\":1,\"1621\":2},\"2\":{\"124\":1,\"134\":1,\"138\":1,\"323\":1}}],[\"h1\",{\"1\":{\"99\":1}}],[\"his\",{\"1\":{\"1670\":1}}],[\"hint\",{\"1\":{\"946\":1}}],[\"hi\",{\"1\":{\"408\":4,\"1490\":1,\"1491\":1}}],[\"hight\",{\"1\":{\"93\":1}}],[\"hidden\",{\"1\":{\"38\":1,\"325\":1}}],[\"heapsize\",{\"1\":{\"488\":4}}],[\"heapify\",{\"1\":{\"482\":3}}],[\"heap\",{\"1\":{\"482\":7,\"1259\":1,\"1286\":2,\"1532\":1}}],[\"headandtail\",{\"1\":{\"1365\":2}}],[\"head\",{\"1\":{\"169\":1,\"176\":4,\"178\":1,\"473\":18,\"491\":9,\"1214\":2,\"1365\":2}}],[\"headers\",{\"1\":{\"1403\":2}}],[\"header\",{\"1\":{\"152\":1,\"155\":1,\"1621\":1}}],[\"head>\",{\"1\":{\"120\":1,\"126\":1}}],[\"hello\",{\"1\":{\"408\":3,\"606\":2,\"622\":2,\"629\":2,\"630\":2,\"631\":2,\"635\":1,\"656\":2,\"757\":1,\"870\":1,\"875\":1,\"914\":1,\"948\":1,\"954\":6,\"1004\":3,\"1080\":2,\"1115\":1,\"1169\":4,\"1184\":1,\"1197\":2,\"1218\":7,\"1219\":2,\"1234\":2,\"1273\":2,\"1340\":2,\"1344\":2,\"1348\":5,\"1398\":6,\"1399\":6,\"1424\":1,\"1426\":1,\"1427\":2,\"1474\":2,\"1579\":6}}],[\"helper\",{\"1\":{\"494\":3,\"497\":4}}],[\"help\",{\"1\":{\"191\":1}}],[\"height>\",{\"1\":{\"71\":1}}],[\"height\",{\"0\":{\"47\":1,\"93\":1},\"1\":{\"45\":2,\"47\":1,\"58\":1,\"62\":1,\"82\":2,\"93\":1,\"104\":2,\"277\":1,\"662\":3,\"1438\":4,\"1517\":2}}],[\"hexx\",{\"1\":{\"1156\":4}}],[\"hextorgb\",{\"1\":{\"1156\":2}}],[\"hexadecimal\",{\"1\":{\"914\":1}}],[\"hex\",{\"0\":{\"109\":1},\"1\":{\"28\":1,\"109\":1,\"110\":1,\"929\":1,\"1156\":3}}],[\"45\",{\"1\":{\"1691\":1}}],[\"456\",{\"1\":{\"506\":1}}],[\"48\",{\"1\":{\"1542\":1}}],[\"44\",{\"1\":{\"671\":1}}],[\"491\",{\"1\":{\"497\":2}}],[\"495\",{\"1\":{\"497\":2}}],[\"493\",{\"1\":{\"245\":1}}],[\"4xx\",{\"1\":{\"464\":1}}],[\"404\",{\"1\":{\"1714\":1}}],[\"40\",{\"1\":{\"351\":1,\"497\":2,\"1542\":1}}],[\"400\",{\"1\":{\"75\":2}}],[\"42\",{\"1\":{\"245\":2,\"713\":3,\"894\":3,\"917\":1,\"1047\":1,\"1226\":1,\"1232\":2,\"1256\":1,\"1542\":1,\"1579\":2}}],[\"4em\",{\"1\":{\"59\":1}}],[\"4\",{\"0\":{\"15\":1,\"151\":1,\"265\":1,\"335\":1,\"344\":1,\"377\":1,\"391\":1,\"425\":1,\"432\":1,\"435\":1,\"439\":1,\"509\":1},\"1\":{\"25\":1,\"59\":1,\"63\":1,\"77\":2,\"208\":1,\"235\":2,\"239\":1,\"252\":2,\"270\":2,\"274\":1,\"304\":1,\"341\":1,\"343\":2,\"347\":1,\"348\":2,\"349\":1,\"350\":1,\"352\":2,\"374\":6,\"392\":1,\"470\":3,\"473\":2,\"476\":3,\"482\":4,\"485\":2,\"491\":1,\"497\":4,\"503\":2,\"515\":1,\"524\":4,\"528\":1,\"559\":1,\"689\":2,\"859\":1,\"955\":1,\"962\":1,\"1000\":2,\"1011\":1,\"1012\":1,\"1054\":1,\"1083\":1,\"1087\":2,\"1091\":1,\"1092\":1,\"1130\":1,\"1161\":3,\"1175\":1,\"1183\":4,\"1184\":1,\"1214\":2,\"1216\":2,\"1221\":1,\"1243\":1,\"1249\":1,\"1253\":2,\"1254\":3,\"1260\":1,\"1319\":1,\"1332\":1,\"1365\":4,\"1375\":3,\"1382\":2,\"1416\":2,\"1418\":2,\"1419\":2,\"1496\":1,\"1503\":4,\"1509\":1,\"1533\":2,\"1584\":2,\"1674\":1,\"1693\":1}}],[\"dry\",{\"1\":{\"1461\":1}}],[\"drinkdata\",{\"1\":{\"1353\":1}}],[\"duplicate\",{\"1\":{\"1381\":1,\"1401\":1}}],[\"duration\",{\"1\":{\"1166\":1}}],[\"dhcp\",{\"1\":{\"311\":1}}],[\"data2\",{\"1\":{\"1611\":2}}],[\"data1\",{\"1\":{\"1611\":3}}],[\"database\",{\"1\":{\"1179\":1}}],[\"datagram\",{\"1\":{\"309\":1}}],[\"data\",{\"1\":{\"215\":1,\"318\":1,\"403\":1,\"528\":1,\"695\":3,\"1232\":2,\"1449\":6,\"1502\":4,\"1534\":1,\"1611\":4,\"1612\":16,\"1613\":13,\"1614\":5,\"1617\":1}}],[\"datefields\",{\"1\":{\"1179\":1}}],[\"datefield\",{\"1\":{\"1179\":1}}],[\"dates\",{\"1\":{\"905\":1}}],[\"date\",{\"1\":{\"215\":1,\"251\":1,\"288\":3,\"293\":2,\"294\":2,\"838\":2,\"905\":2,\"917\":1,\"935\":1,\"946\":1,\"953\":1,\"955\":1,\"1130\":1,\"1179\":2,\"1274\":2,\"1433\":1,\"1505\":2}}],[\"dashed\",{\"1\":{\"61\":1,\"83\":1}}],[\"dfs\",{\"2\":{\"472\":1,\"499\":1}}],[\"df\",{\"1\":{\"215\":1}}],[\"d文件下\",{\"1\":{\"215\":1}}],[\"dd\",{\"1\":{\"205\":1}}],[\"dns递归查询\",{\"1\":{\"464\":1}}],[\"dns缓存\",{\"1\":{\"464\":1}}],[\"dns2=8\",{\"1\":{\"220\":1}}],[\"dns1=192\",{\"1\":{\"220\":1}}],[\"dns\",{\"1\":{\"150\":6,\"220\":1,\"311\":1,\"318\":1}}],[\"dns解析\",{\"0\":{\"150\":1}}],[\"dns解析url对应的ip\",{\"1\":{\"147\":1}}],[\"doanotherthing\",{\"1\":{\"1683\":1}}],[\"doadd\",{\"1\":{\"1390\":3}}],[\"don\",{\"1\":{\"1673\":1}}],[\"done\",{\"1\":{\"1003\":2,\"1345\":2,\"1350\":1,\"1356\":1,\"1358\":1,\"1488\":4}}],[\"dosomethingelse\",{\"1\":{\"1681\":7}}],[\"dosomething\",{\"1\":{\"1253\":2,\"1375\":3,\"1681\":8,\"1683\":1}}],[\"dosomethingimportant\",{\"1\":{\"246\":1}}],[\"doctor\",{\"1\":{\"569\":1,\"586\":1,\"590\":1,\"592\":1}}],[\"doctype是html5的文档声明\",{\"1\":{\"321\":1}}],[\"doctype\",{\"1\":{\"120\":3}}],[\"document\",{\"1\":{\"464\":8,\"887\":2,\"999\":1,\"1185\":1,\"1274\":1,\"1286\":2,\"1288\":1,\"1375\":2,\"1435\":1,\"1470\":2,\"1502\":4,\"1593\":1}}],[\"dog\",{\"1\":{\"381\":5,\"1253\":2,\"1254\":1}}],[\"doing\",{\"1\":{\"354\":2}}],[\"do\",{\"0\":{\"974\":1},\"1\":{\"249\":1,\"381\":8,\"500\":1,\"969\":1,\"974\":1,\"975\":1,\"976\":5,\"977\":1,\"1020\":2,\"1233\":1,\"1293\":3,\"1317\":2,\"1348\":1,\"1349\":1,\"1362\":1,\"1364\":3,\"1366\":1,\"1382\":1,\"1401\":2,\"1425\":1,\"1458\":4,\"1493\":2,\"1543\":1,\"1570\":1,\"1599\":1,\"1602\":1,\"1658\":1,\"1685\":3,\"1686\":1,\"1692\":2}}],[\"double\",{\"1\":{\"83\":1}}],[\"dotted\",{\"1\":{\"61\":1,\"83\":1}}],[\"dom0\",{\"1\":{\"1466\":1}}],[\"domcontentloaded\",{\"1\":{\"464\":1}}],[\"dom\",{\"0\":{\"999\":1,\"1286\":1},\"1\":{\"15\":1,\"16\":2,\"18\":1,\"39\":1,\"63\":1,\"402\":1,\"437\":3,\"438\":2,\"439\":1,\"464\":1,\"999\":1,\"1274\":1,\"1282\":1,\"1286\":8,\"1432\":4,\"1466\":1,\"1549\":3,\"1551\":3,\"1579\":1,\"1621\":2}}],[\"detect\",{\"1\":{\"1621\":1}}],[\"detectisnan\",{\"1\":{\"861\":1}}],[\"detached\",{\"1\":{\"1286\":1}}],[\"details\",{\"1\":{\"1166\":3}}],[\"destructing\",{\"1\":{\"1212\":1}}],[\"desc\",{\"1\":{\"1166\":1}}],[\"descriptors\",{\"1\":{\"803\":4}}],[\"descriptor\",{\"1\":{\"528\":1,\"1486\":3}}],[\"describe\",{\"1\":{\"170\":1}}],[\"designation\",{\"1\":{\"1102\":1}}],[\"deepfreeze\",{\"1\":{\"540\":3}}],[\"delaylog\",{\"1\":{\"1356\":1,\"1358\":1}}],[\"delayedlog\",{\"1\":{\"1356\":1}}],[\"delay\",{\"1\":{\"288\":6,\"289\":3,\"290\":3,\"292\":2,\"293\":2,\"294\":2,\"1312\":1,\"1345\":4,\"1356\":3,\"1446\":1}}],[\"deleteproperty\",{\"1\":{\"403\":2}}],[\"delete\",{\"0\":{\"1097\":1},\"1\":{\"249\":1,\"392\":1,\"393\":1,\"528\":1,\"530\":3,\"538\":1,\"539\":1,\"564\":10,\"576\":1,\"756\":1,\"787\":1,\"1065\":2,\"1097\":1,\"1098\":3,\"1100\":2,\"1101\":5,\"1102\":3,\"1110\":2,\"1243\":2,\"1318\":1,\"1319\":1,\"1329\":1,\"1620\":2}}],[\"debounce\",{\"1\":{\"290\":1,\"1446\":1,\"1449\":2}}],[\"debouncedelayexecution\",{\"1\":{\"289\":1}}],[\"debounceimmediateexecutionplus\",{\"1\":{\"288\":1}}],[\"debounceimmediateexecution\",{\"1\":{\"288\":1}}],[\"debugger\",{\"1\":{\"249\":1}}],[\"def\",{\"1\":{\"1040\":1}}],[\"definition\",{\"1\":{\"470\":1,\"473\":2,\"479\":1,\"491\":1,\"497\":1}}],[\"defineproperties\",{\"0\":{\"687\":1},\"1\":{\"687\":1,\"688\":1,\"689\":1,\"803\":1}}],[\"defineproperty更加的清晰\",{\"1\":{\"403\":1}}],[\"defineproperty把这些属性全部转为getter\",{\"1\":{\"402\":1}}],[\"defineproperty不具备监听数组的方法\",{\"1\":{\"402\":1}}],[\"defineproperty\",{\"0\":{\"692\":1},\"1\":{\"401\":3,\"402\":3,\"529\":4,\"530\":6,\"531\":1,\"538\":3,\"539\":3,\"540\":1,\"578\":1,\"678\":1,\"692\":1,\"693\":1,\"694\":2,\"695\":1,\"803\":1,\"813\":2,\"1101\":1,\"1319\":1,\"1483\":1}}],[\"definedproperty\",{\"1\":{\"599\":1,\"1319\":1}}],[\"defined\",{\"1\":{\"560\":2,\"919\":1,\"1066\":1,\"1067\":1,\"1069\":1,\"1218\":1,\"1334\":1,\"1407\":4,\"1692\":1,\"1694\":1,\"1698\":1}}],[\"define\",{\"1\":{\"538\":1,\"539\":2,\"540\":1,\"1617\":1,\"1618\":1}}],[\"definereactive\",{\"1\":{\"402\":2}}],[\"defaultinterface\",{\"1\":{\"1601\":2}}],[\"defaultn\",{\"1\":{\"1366\":1}}],[\"default1\",{\"1\":{\"1366\":1}}],[\"default\",{\"1\":{\"249\":1,\"613\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1233\":1,\"1256\":2,\"1436\":1,\"1600\":2,\"1601\":1,\"1625\":1,\"1643\":1,\"1644\":2,\"1645\":1,\"1650\":1,\"1652\":8,\"1655\":1}}],[\"defaultslist\",{\"1\":{\"1312\":3}}],[\"defaults\",{\"1\":{\"215\":1}}],[\"defer><\",{\"1\":{\"131\":1}}],[\"defer\",{\"1\":{\"131\":1,\"438\":1,\"464\":1}}],[\"demo\",{\"1\":{\"215\":2}}],[\"developer\",{\"1\":{\"1102\":1,\"1285\":1,\"1287\":1}}],[\"device=ens00\",{\"1\":{\"220\":1}}],[\"dev\",{\"1\":{\"186\":1,\"215\":2}}],[\"declare\",{\"1\":{\"1312\":4}}],[\"declaredbutundefinedvariable\",{\"1\":{\"1129\":1}}],[\"declared\",{\"1\":{\"1066\":1,\"1076\":1,\"1400\":2}}],[\"declarative\",{\"1\":{\"632\":1}}],[\"declaration\",{\"0\":{\"5\":1},\"1\":{\"1068\":1,\"1693\":1}}],[\"dec\",{\"1\":{\"1048\":2}}],[\"decimal\",{\"1\":{\"914\":1}}],[\"decodeduri\",{\"1\":{\"887\":2}}],[\"decodedftpuri\",{\"1\":{\"881\":2}}],[\"decodeuricomponent\",{\"0\":{\"873\":1},\"1\":{\"251\":1,\"873\":1,\"874\":2,\"875\":1,\"886\":1,\"887\":1}}],[\"decodeuri\",{\"0\":{\"868\":1},\"1\":{\"251\":1,\"868\":1,\"869\":2,\"870\":1,\"880\":1,\"881\":1}}],[\"decoration\",{\"0\":{\"83\":1},\"1\":{\"83\":7}}],[\"degrees\",{\"1\":{\"26\":1}}],[\"deg\",{\"1\":{\"26\":1}}],[\"d\",{\"1\":{\"17\":1,\"208\":1,\"354\":2,\"381\":1,\"539\":1,\"689\":1,\"820\":9,\"1068\":3,\"1156\":1,\"1179\":1,\"1181\":3,\"1216\":2,\"1219\":2,\"1227\":1,\"1253\":1,\"1254\":1,\"1273\":1,\"1274\":1,\"1564\":2,\"1565\":2}}],[\"dialogbox\",{\"1\":{\"1595\":3}}],[\"dir\",{\"1\":{\"1570\":1}}],[\"direction>\",{\"1\":{\"332\":1}}],[\"direction属性和flex\",{\"1\":{\"332\":1}}],[\"direction\",{\"1\":{\"81\":1,\"332\":1}}],[\"digit\",{\"1\":{\"910\":1}}],[\"digital\",{\"1\":{\"161\":1}}],[\"diff算法等内容\",{\"1\":{\"402\":1}}],[\"diff\",{\"1\":{\"166\":1,\"1033\":1}}],[\"discrete\",{\"1\":{\"1606\":1}}],[\"disable\",{\"1\":{\"217\":1}}],[\"disabled=\",{\"1\":{\"118\":1}}],[\"disabled\",{\"1\":{\"15\":1,\"118\":3}}],[\"distribute\",{\"1\":{\"85\":1}}],[\"display属性有哪些值\",{\"0\":{\"329\":1}}],[\"display为none等不必显示的节点\",{\"1\":{\"157\":1}}],[\"display\",{\"0\":{\"44\":1},\"1\":{\"37\":1,\"40\":1,\"45\":1,\"46\":3,\"50\":3,\"94\":1,\"325\":1,\"329\":35,\"464\":1,\"1502\":4}}],[\"divided\",{\"1\":{\"1012\":1}}],[\"divisor\",{\"1\":{\"1012\":5}}],[\"div\",{\"0\":{\"136\":1},\"1\":{\"14\":1,\"51\":1,\"136\":1,\"270\":1,\"272\":1,\"274\":1,\"277\":1,\"1185\":1,\"1274\":1,\"1502\":14}}],[\"也无论它如何被调用\",{\"1\":{\"1676\":1}}],[\"也无法添加新属性\",{\"1\":{\"539\":1}}],[\"也无法删除已有属性\",{\"1\":{\"539\":1}}],[\"也就让两者失去了关系\",{\"1\":{\"1616\":1}}],[\"也就是使用\",{\"1\":{\"1564\":1}}],[\"也就是使用变量\",{\"1\":{\"1271\":1}}],[\"也就是活动对象上的各种属性才能被访问\",{\"1\":{\"1562\":1}}],[\"也就是后面方法中操作的对象\",{\"1\":{\"1497\":1}}],[\"也就是用户停止了某个连续的操作\",{\"1\":{\"1446\":1}}],[\"也就是将一个\",{\"1\":{\"1411\":2}}],[\"也就是内存泄漏\",{\"1\":{\"1281\":1}}],[\"也就是全局对象\",{\"1\":{\"1569\":1}}],[\"也就是全局对象自身\",{\"1\":{\"848\":1}}],[\"也就是全局变量不会被当成垃圾变量回收\",{\"1\":{\"1279\":1}}],[\"也就是求二进制的反码\",{\"1\":{\"1147\":1}}],[\"也就是不能修改\",{\"1\":{\"825\":1}}],[\"也就是上述的特殊的匿名函数\",{\"1\":{\"653\":1}}],[\"也就是让该函数的实例化对象们都可以找到公用的属性和方法\",{\"1\":{\"645\":1}}],[\"也就是让返回函数的原型对象和person函数的原型对象映射\",{\"1\":{\"394\":1}}],[\"也就是这个函数\",{\"1\":{\"645\":1}}],[\"也就是实例化一个对象\",{\"1\":{\"592\":1}}],[\"也就是文档对象开始\",{\"1\":{\"453\":1}}],[\"也就是\",{\"1\":{\"392\":1,\"417\":1,\"944\":1,\"1052\":1,\"1242\":1,\"1335\":1,\"1547\":1,\"1616\":1,\"1675\":1,\"1677\":1}}],[\"也就是语句后紧跟着换行\",{\"1\":{\"253\":1}}],[\"也就是第一个字母小写\",{\"1\":{\"246\":1}}],[\"也就是说声明提升了\",{\"1\":{\"1698\":1}}],[\"也就是说这段代码中的任何声明\",{\"1\":{\"1681\":1}}],[\"也就是说在判断时应当先考虑是否可以存在显式绑定\",{\"1\":{\"1583\":1}}],[\"也就是说它会应用默认绑定\",{\"1\":{\"1579\":1}}],[\"也就是说它能访问到其外层定义的变量\",{\"1\":{\"1455\":1}}],[\"也就是说某个对象引用计数法认为它应该被回收的话\",{\"1\":{\"1282\":1}}],[\"也就是说不能直接操作对象的内存空间\",{\"1\":{\"917\":1}}],[\"也就是说指向同一个内存地址\",{\"1\":{\"552\":1}}],[\"也就是说无论哪一方向另一方发送数据之前\",{\"1\":{\"300\":1}}],[\"也就是说如果我们在用\",{\"1\":{\"235\":1}}],[\"也就是说对网页代码的兼容性较低\",{\"1\":{\"143\":1}}],[\"也就是说\",{\"1\":{\"75\":1,\"115\":1,\"215\":1,\"235\":1,\"509\":1,\"571\":1,\"619\":1,\"625\":1,\"799\":1,\"859\":1,\"892\":1,\"920\":1,\"930\":1,\"1092\":1,\"1101\":1,\"1218\":1,\"1256\":1,\"1345\":1,\"1374\":1,\"1387\":1,\"1402\":1,\"1406\":1,\"1466\":1,\"1525\":1,\"1529\":1,\"1593\":2,\"1617\":1,\"1631\":1,\"1635\":1}}],[\"也就是宽度为\",{\"1\":{\"52\":1}}],[\"也就是出现在该页面加载的浏览器标签中的内容\",{\"1\":{\"120\":1}}],[\"也就是出现在\",{\"1\":{\"51\":1}}],[\"也就是父节点\",{\"1\":{\"39\":1}}],[\"也指向这个空对象\",{\"1\":{\"1616\":1}}],[\"也到期了\",{\"1\":{\"1540\":1}}],[\"也属于偏函数的范畴\",{\"1\":{\"1504\":1}}],[\"也接受预设的参数提供给原函数\",{\"1\":{\"1311\":1}}],[\"也包含一个指向\",{\"1\":{\"1281\":1}}],[\"也被赋值为\",{\"1\":{\"1242\":1}}],[\"也要作为变量赋值\",{\"1\":{\"1218\":1}}],[\"也许更好理解\",{\"1\":{\"919\":1}}],[\"也会绑定到\",{\"1\":{\"1589\":1}}],[\"也会报错\",{\"1\":{\"1407\":1}}],[\"也会得到相同的结果\",{\"1\":{\"1382\":1}}],[\"也会得到\",{\"1\":{\"904\":1}}],[\"也会直接修改\",{\"1\":{\"394\":1}}],[\"也返回\",{\"1\":{\"898\":1}}],[\"也同样\",{\"1\":{\"706\":1}}],[\"也有提升\",{\"1\":{\"1694\":1}}],[\"也有自己的方法\",{\"1\":{\"656\":1}}],[\"也有它自己的原型\",{\"1\":{\"646\":1}}],[\"也为了从视觉上更好地封装原型的功能\",{\"1\":{\"578\":1}}],[\"也只会在实例中设置这个属性\",{\"1\":{\"576\":1}}],[\"也是现行大多数\",{\"1\":{\"1689\":1}}],[\"也是显式绑定的一种\",{\"1\":{\"1584\":1}}],[\"也是如此\",{\"1\":{\"1557\":1}}],[\"也是最常用的\",{\"1\":{\"1014\":1}}],[\"也是一个全局变量一样的道理\",{\"1\":{\"1616\":1}}],[\"也是一个隐藏函数\",{\"1\":{\"534\":1}}],[\"也是一种前测试循环语句\",{\"1\":{\"1007\":1}}],[\"也是对象才拥有的\",{\"1\":{\"647\":1}}],[\"也是俗称的ie内核\",{\"1\":{\"436\":1}}],[\"也比较简洁\",{\"1\":{\"277\":1}}],[\"也定义了一些关键字\",{\"1\":{\"233\":1}}],[\"也称为\",{\"1\":{\"1673\":1}}],[\"也称为成员函数\",{\"1\":{\"229\":1}}],[\"也称为特殊性\",{\"1\":{\"16\":1}}],[\"也称静态类型\",{\"1\":{\"229\":1}}],[\"也称动态类型\",{\"1\":{\"229\":1}}],[\"也都可以正常工作\",{\"1\":{\"115\":1}}],[\"也可以将\",{\"1\":{\"1658\":1}}],[\"也可以对\",{\"1\":{\"1616\":1}}],[\"也可以开启多个线程\",{\"1\":{\"1547\":1}}],[\"也可以把这些请求封装成一个函数\",{\"1\":{\"1502\":1}}],[\"也可以继承到派生类中\",{\"1\":{\"1492\":1}}],[\"也可以用在\",{\"1\":{\"1603\":1}}],[\"也可以用\",{\"1\":{\"1459\":1}}],[\"也可以用来拼接字符串\",{\"1\":{\"1169\":1}}],[\"也可以采用下面的写法\",{\"1\":{\"1376\":1}}],[\"也可以是绝对路径\",{\"1\":{\"1632\":1}}],[\"也可以是声明在任何函数外的变量\",{\"1\":{\"1065\":1}}],[\"也可以是一个对象\",{\"1\":{\"647\":1}}],[\"也可以使用全局变量\",{\"1\":{\"1135\":1}}],[\"也可以使用\",{\"1\":{\"993\":1}}],[\"也可以使用节流\",{\"1\":{\"287\":1}}],[\"也可以转为布尔值\",{\"1\":{\"928\":1}}],[\"也可以当作对象使用\",{\"1\":{\"621\":1}}],[\"也可以创建自定义的构造函数\",{\"1\":{\"590\":1}}],[\"也可以输入域名查询网站\",{\"1\":{\"150\":1}}],[\"也可以在一段文档中划分标记出使用另一种语言书写的内容\",{\"1\":{\"136\":1}}],[\"也可取其他数值来指定颜色\",{\"1\":{\"110\":1}}],[\"也可能是非矩形\",{\"1\":{\"60\":1}}],[\"也叫单词化\",{\"1\":{\"1674\":1}}],[\"也叫拉姆达函数\",{\"1\":{\"1332\":1}}],[\"也叫内存泄漏\",{\"1\":{\"1284\":1}}],[\"也叫伪经典继承\",{\"1\":{\"662\":1}}],[\"也叫\",{\"1\":{\"110\":1,\"1496\":1}}],[\"也不再安全\",{\"1\":{\"1694\":1}}],[\"也不会实例化一个类\",{\"1\":{\"1581\":1}}],[\"也不会导致以前的代码无法运行\",{\"1\":{\"1399\":1}}],[\"也不要中断后面的异步操作\",{\"1\":{\"1348\":1}}],[\"也不能为一个属性设置多个\",{\"1\":{\"1322\":1}}],[\"也不能直接将输入的字符串转换为整数形式\",{\"1\":{\"506\":1}}],[\"也不为\",{\"1\":{\"1161\":1}}],[\"也不可配置\",{\"1\":{\"825\":1}}],[\"也不需要发起请求\",{\"1\":{\"430\":1}}],[\"也不协商缓存\",{\"1\":{\"429\":1}}],[\"也不放大\",{\"1\":{\"332\":1}}],[\"也不用在某些情况下使用九宫格了\",{\"1\":{\"62\":1}}],[\"也不是真正的编程语言\",{\"1\":{\"2\":1}}],[\"也将被选择\",{\"1\":{\"14\":1}}],[\"==\",{\"1\":{\"392\":1,\"393\":1,\"394\":1,\"402\":3,\"403\":1,\"470\":4,\"476\":6,\"482\":1,\"488\":1,\"494\":1,\"497\":3,\"509\":3,\"512\":1,\"515\":1,\"540\":2,\"569\":2,\"575\":1,\"581\":1,\"592\":1,\"672\":1,\"762\":5,\"849\":1,\"861\":1,\"929\":1,\"946\":2,\"951\":1,\"952\":8,\"955\":10,\"962\":1,\"971\":1,\"1020\":1,\"1027\":2,\"1048\":1,\"1116\":2,\"1200\":1,\"1202\":7,\"1203\":17,\"1243\":3,\"1253\":3,\"1254\":1,\"1390\":2,\"1418\":1,\"1581\":1}}],[\"===\",{\"1\":{\"349\":1,\"350\":1,\"355\":2,\"402\":1,\"408\":1,\"482\":1,\"485\":1,\"491\":2,\"500\":2,\"503\":1,\"521\":1,\"547\":2,\"565\":2,\"587\":2,\"620\":1,\"624\":6,\"625\":1,\"645\":1,\"650\":2,\"651\":2,\"652\":1,\"653\":11,\"737\":1,\"748\":2,\"749\":3,\"762\":2,\"859\":1,\"861\":3,\"928\":1,\"929\":1,\"937\":1,\"971\":1,\"1094\":1,\"1116\":4,\"1124\":6,\"1125\":4,\"1126\":3,\"1127\":3,\"1128\":2,\"1129\":3,\"1130\":6,\"1131\":4,\"1132\":2,\"1157\":1,\"1160\":1,\"1200\":1,\"1202\":2,\"1204\":4,\"1209\":1,\"1217\":2,\"1220\":2,\"1243\":1,\"1319\":1,\"1334\":2,\"1398\":1,\"1413\":1,\"1417\":4,\"1418\":1,\"1456\":1,\"1476\":1,\"1502\":2,\"1504\":5,\"1518\":4,\"1525\":2,\"1561\":2,\"1587\":1,\"1593\":1,\"1634\":1}}],[\"=>\",{\"1\":{\"341\":2,\"346\":5,\"347\":1,\"348\":1,\"350\":1,\"351\":1,\"352\":2,\"355\":2,\"371\":2,\"372\":8,\"375\":1,\"377\":3,\"380\":3,\"383\":8,\"402\":1,\"408\":1,\"460\":5,\"470\":1,\"476\":1,\"482\":4,\"488\":1,\"497\":2,\"524\":1,\"607\":1,\"668\":2,\"671\":1,\"672\":1,\"673\":1,\"701\":1,\"716\":1,\"859\":1,\"1066\":1,\"1094\":1,\"1115\":1,\"1221\":2,\"1340\":1,\"1344\":3,\"1345\":2,\"1346\":1,\"1348\":3,\"1352\":4,\"1353\":1,\"1355\":1,\"1356\":2,\"1362\":1,\"1364\":3,\"1365\":2,\"1366\":1,\"1367\":2,\"1369\":1,\"1370\":1,\"1371\":1,\"1373\":2,\"1375\":11,\"1376\":10,\"1393\":1,\"1407\":2,\"1417\":1,\"1418\":6,\"1424\":2,\"1426\":1,\"1433\":1,\"1436\":2,\"1438\":1,\"1446\":1,\"1449\":1,\"1533\":4,\"1550\":4,\"1577\":3,\"1589\":2,\"1593\":2,\"1595\":3,\"1597\":1,\"1599\":1,\"1600\":1,\"1601\":1,\"1602\":1}}],[\"=\",{\"0\":{\"385\":1},\"1\":{\"14\":1,\"23\":1,\"27\":1,\"58\":2,\"59\":1,\"235\":5,\"242\":2,\"243\":2,\"244\":2,\"245\":6,\"246\":3,\"252\":6,\"253\":2,\"288\":13,\"289\":4,\"290\":9,\"292\":4,\"293\":3,\"294\":6,\"341\":4,\"343\":4,\"344\":2,\"345\":2,\"346\":5,\"347\":1,\"348\":3,\"349\":2,\"350\":2,\"351\":2,\"352\":6,\"353\":3,\"354\":8,\"355\":3,\"364\":1,\"365\":1,\"367\":2,\"368\":2,\"371\":1,\"374\":3,\"375\":1,\"377\":3,\"378\":1,\"381\":19,\"384\":2,\"385\":4,\"388\":9,\"392\":7,\"393\":6,\"394\":14,\"402\":4,\"403\":6,\"408\":14,\"455\":1,\"460\":1,\"467\":10,\"470\":11,\"473\":20,\"476\":19,\"479\":12,\"482\":19,\"485\":11,\"488\":63,\"491\":13,\"494\":6,\"497\":12,\"500\":22,\"503\":11,\"506\":18,\"509\":23,\"512\":8,\"515\":9,\"518\":10,\"521\":6,\"524\":8,\"529\":5,\"530\":5,\"531\":2,\"533\":2,\"534\":5,\"538\":7,\"539\":5,\"540\":13,\"546\":2,\"547\":7,\"548\":6,\"550\":1,\"551\":2,\"552\":7,\"556\":1,\"557\":1,\"559\":6,\"560\":1,\"561\":2,\"562\":3,\"563\":5,\"564\":1,\"565\":1,\"569\":7,\"570\":6,\"571\":6,\"572\":3,\"575\":6,\"576\":7,\"578\":2,\"579\":2,\"581\":3,\"586\":7,\"587\":4,\"590\":6,\"592\":10,\"593\":3,\"597\":6,\"599\":3,\"600\":1,\"603\":3,\"604\":2,\"605\":1,\"606\":1,\"607\":3,\"612\":1,\"613\":4,\"614\":1,\"615\":4,\"619\":4,\"622\":4,\"623\":3,\"624\":3,\"625\":4,\"629\":1,\"632\":3,\"635\":6,\"636\":3,\"640\":11,\"648\":2,\"650\":1,\"651\":2,\"652\":2,\"656\":4,\"659\":19,\"662\":10,\"664\":7,\"668\":1,\"671\":1,\"672\":1,\"673\":1,\"679\":2,\"684\":7,\"689\":2,\"694\":3,\"695\":1,\"701\":2,\"713\":3,\"714\":4,\"715\":4,\"716\":4,\"721\":1,\"726\":1,\"733\":1,\"734\":1,\"735\":2,\"736\":5,\"737\":4,\"742\":6,\"748\":3,\"749\":2,\"756\":3,\"757\":2,\"769\":3,\"776\":3,\"781\":3,\"787\":3,\"794\":1,\"795\":1,\"796\":2,\"807\":9,\"813\":2,\"819\":4,\"820\":9,\"825\":2,\"830\":1,\"837\":1,\"838\":1,\"843\":1,\"859\":1,\"870\":3,\"875\":3,\"880\":1,\"881\":3,\"887\":3,\"894\":3,\"917\":3,\"919\":1,\"923\":4,\"924\":2,\"928\":8,\"929\":1,\"930\":2,\"935\":4,\"943\":2,\"946\":1,\"955\":8,\"962\":2,\"963\":4,\"971\":4,\"977\":1,\"986\":6,\"993\":2,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"999\":1,\"1001\":2,\"1002\":1,\"1003\":1,\"1004\":8,\"1010\":2,\"1011\":2,\"1012\":6,\"1013\":2,\"1014\":1,\"1020\":3,\"1027\":4,\"1033\":1,\"1034\":3,\"1035\":6,\"1042\":1,\"1048\":9,\"1060\":4,\"1065\":4,\"1066\":5,\"1067\":3,\"1068\":6,\"1069\":2,\"1075\":2,\"1076\":5,\"1080\":10,\"1083\":7,\"1087\":2,\"1092\":1,\"1093\":2,\"1094\":2,\"1102\":1,\"1109\":4,\"1110\":3,\"1115\":6,\"1116\":1,\"1137\":2,\"1154\":2,\"1155\":3,\"1156\":6,\"1159\":2,\"1161\":7,\"1165\":2,\"1166\":5,\"1169\":3,\"1176\":1,\"1178\":3,\"1179\":2,\"1181\":3,\"1182\":2,\"1183\":8,\"1184\":1,\"1185\":4,\"1186\":5,\"1190\":2,\"1191\":2,\"1192\":2,\"1193\":2,\"1197\":3,\"1202\":3,\"1204\":4,\"1207\":6,\"1213\":5,\"1214\":5,\"1215\":2,\"1216\":2,\"1217\":36,\"1218\":42,\"1219\":2,\"1220\":4,\"1221\":5,\"1224\":6,\"1226\":3,\"1227\":3,\"1229\":3,\"1230\":2,\"1232\":2,\"1233\":8,\"1234\":1,\"1235\":1,\"1238\":29,\"1242\":3,\"1243\":6,\"1246\":6,\"1248\":5,\"1249\":1,\"1253\":8,\"1254\":8,\"1256\":2,\"1264\":5,\"1266\":4,\"1267\":3,\"1271\":2,\"1273\":5,\"1274\":7,\"1281\":8,\"1282\":3,\"1285\":3,\"1286\":2,\"1287\":2,\"1288\":4,\"1294\":2,\"1295\":2,\"1303\":1,\"1307\":6,\"1312\":12,\"1319\":5,\"1323\":3,\"1329\":2,\"1331\":1,\"1332\":2,\"1333\":1,\"1334\":4,\"1335\":1,\"1345\":1,\"1349\":3,\"1350\":2,\"1352\":3,\"1353\":4,\"1354\":5,\"1355\":2,\"1357\":1,\"1358\":1,\"1362\":1,\"1364\":3,\"1365\":2,\"1366\":3,\"1367\":4,\"1369\":1,\"1370\":1,\"1371\":1,\"1373\":4,\"1375\":10,\"1376\":7,\"1382\":3,\"1383\":6,\"1385\":1,\"1388\":3,\"1389\":6,\"1390\":1,\"1393\":3,\"1398\":2,\"1399\":1,\"1400\":3,\"1401\":1,\"1402\":3,\"1403\":10,\"1404\":4,\"1405\":4,\"1406\":4,\"1407\":26,\"1411\":1,\"1412\":1,\"1413\":6,\"1417\":3,\"1418\":12,\"1419\":3,\"1424\":1,\"1425\":1,\"1427\":1,\"1428\":2,\"1433\":6,\"1435\":1,\"1436\":2,\"1438\":12,\"1441\":3,\"1446\":4,\"1449\":3,\"1452\":2,\"1456\":1,\"1457\":4,\"1466\":1,\"1467\":1,\"1469\":4,\"1470\":2,\"1474\":4,\"1476\":3,\"1481\":3,\"1483\":3,\"1484\":2,\"1485\":4,\"1486\":3,\"1487\":3,\"1488\":2,\"1489\":3,\"1490\":5,\"1491\":4,\"1492\":5,\"1497\":8,\"1502\":13,\"1504\":11,\"1505\":12,\"1509\":1,\"1510\":1,\"1511\":2,\"1515\":1,\"1516\":2,\"1518\":4,\"1522\":2,\"1523\":2,\"1524\":2,\"1525\":2,\"1526\":7,\"1529\":1,\"1533\":1,\"1557\":2,\"1561\":3,\"1564\":4,\"1565\":1,\"1566\":1,\"1570\":2,\"1571\":1,\"1572\":9,\"1578\":4,\"1579\":10,\"1580\":3,\"1581\":2,\"1583\":2,\"1584\":8,\"1586\":2,\"1587\":5,\"1588\":1,\"1589\":6,\"1593\":4,\"1603\":3,\"1611\":2,\"1612\":3,\"1613\":3,\"1614\":2,\"1616\":10,\"1631\":2,\"1634\":1,\"1651\":5,\"1654\":4,\"1658\":1,\"1661\":5,\"1666\":2,\"1668\":1,\"1670\":7,\"1674\":1,\"1677\":2,\"1681\":2,\"1682\":2,\"1683\":1,\"1684\":2,\"1685\":2,\"1686\":2,\"1691\":5,\"1692\":4,\"1693\":5,\"1694\":1,\"1695\":6,\"1699\":2,\"1700\":3,\"1701\":2,\"1702\":2,\"1708\":2,\"1709\":12,\"1710\":1}}],[\"的行为方式正是\",{\"1\":{\"1695\":1}}],[\"的行为会出乎我们意料\",{\"1\":{\"1579\":1}}],[\"的发展阶段\",{\"1\":{\"1695\":1}}],[\"的语义相似\",{\"1\":{\"1693\":1}}],[\"的语法糖\",{\"1\":{\"1427\":1}}],[\"的用法跟\",{\"1\":{\"1693\":1}}],[\"的另一个非常普遍的进阶用法是把它们当作函数调用并传递参数进去\",{\"1\":{\"1686\":1}}],[\"的另一个最简单的用法是使一个函数拥有预设的初始参数\",{\"1\":{\"1312\":1}}],[\"的适用条件\",{\"1\":{\"1681\":1}}],[\"的访问权限不仅没有必要\",{\"1\":{\"1681\":1}}],[\"的气泡被完全包含在\",{\"1\":{\"1674\":1}}],[\"的代码在生成前\",{\"1\":{\"1698\":1}}],[\"的代码如下\",{\"1\":{\"1375\":1}}],[\"的代表了程序语法结构的树\",{\"1\":{\"1667\":1}}],[\"的名义导出\",{\"1\":{\"1642\":1}}],[\"的应用就可以看出\",{\"1\":{\"1621\":1}}],[\"的职位\",{\"1\":{\"1621\":1}}],[\"的思想\",{\"1\":{\"1621\":1}}],[\"的限制\",{\"1\":{\"1620\":1}}],[\"的模块自动采用严格模式\",{\"1\":{\"1620\":1}}],[\"的模块化语法\",{\"1\":{\"1619\":2}}],[\"的输出接口\",{\"1\":{\"1599\":1}}],[\"的四种标准规则\",{\"1\":{\"1589\":1}}],[\"的箭头函数\",{\"1\":{\"1588\":1}}],[\"的能力\",{\"1\":{\"1587\":1}}],[\"的强制绑定\",{\"1\":{\"1580\":1}}],[\"的改变都是意想不到的\",{\"1\":{\"1579\":1}}],[\"的声明方式\",{\"1\":{\"1579\":1}}],[\"的默认绑定\",{\"1\":{\"1578\":1}}],[\"的默认值为\",{\"1\":{\"1702\":1}}],[\"的默认值是一个匿名函数\",{\"1\":{\"1407\":2}}],[\"的默认值等于变量\",{\"1\":{\"1407\":1}}],[\"的绑定对象\",{\"1\":{\"1586\":1}}],[\"的绑定对象传入\",{\"1\":{\"1586\":1}}],[\"的绑定规则完全取决于调用位置\",{\"1\":{\"1578\":1}}],[\"的绑定\",{\"1\":{\"1576\":1}}],[\"的绑定过程之前\",{\"1\":{\"1576\":1}}],[\"的调用\",{\"1\":{\"1633\":1}}],[\"的调用的位置\",{\"1\":{\"1576\":1}}],[\"的调用位置\",{\"1\":{\"1576\":4}}],[\"的调用将被废弃\",{\"1\":{\"1540\":1}}],[\"的叫法\",{\"1\":{\"1575\":1}}],[\"的变量\",{\"1\":{\"1652\":1,\"1668\":1,\"1670\":1}}],[\"的变量或方法\",{\"1\":{\"1652\":1}}],[\"的变量对象\",{\"1\":{\"1562\":1}}],[\"的变量是松散类型的\",{\"1\":{\"1063\":1}}],[\"的全局函数和全局属性的占位符\",{\"1\":{\"1561\":1}}],[\"的全局对象\",{\"1\":{\"1282\":1}}],[\"的计算能力\",{\"1\":{\"1551\":1}}],[\"的计算结果应该是某个属性的引用\",{\"1\":{\"1098\":1}}],[\"的单线程是指一个程序进程\",{\"1\":{\"1551\":1}}],[\"的单线程\",{\"1\":{\"1551\":1}}],[\"的单独值将导致元素的行为类似于一个列表元素\",{\"1\":{\"329\":1}}],[\"的运行通常是在浏览器环境中进行的\",{\"1\":{\"1548\":1}}],[\"的处理时长不能比设定的间隔长\",{\"1\":{\"1542\":1,\"1543\":1}}],[\"的异步任务根据事件分类分为两种\",{\"1\":{\"1533\":1}}],[\"的宿主环境来实现的\",{\"1\":{\"1532\":1}}],[\"的两个函数通过\",{\"1\":{\"1505\":1}}],[\"的描述符\",{\"1\":{\"1486\":1}}],[\"的技巧\",{\"1\":{\"1466\":1}}],[\"的执行环境被弹出执行环境栈\",{\"1\":{\"1709\":1}}],[\"的执行早于\",{\"1\":{\"1633\":1}}],[\"的执行上下文\",{\"1\":{\"1557\":1}}],[\"的执行上下文并不是回调函数定义时的那个上下文\",{\"1\":{\"1457\":1}}],[\"的执行线程\",{\"1\":{\"1551\":1}}],[\"的执行顺序\",{\"1\":{\"1203\":1}}],[\"的使用\",{\"0\":{\"1457\":1}}],[\"的使用都会强制浏览器进行冗长的变量名称查找\",{\"1\":{\"893\":1}}],[\"的话\",{\"1\":{\"1477\":1,\"1586\":1}}],[\"的话就继续执行函数\",{\"1\":{\"1438\":1}}],[\"的话符号位为负用\",{\"1\":{\"1160\":1}}],[\"的逻辑硬编码在\",{\"1\":{\"1502\":1}}],[\"的逻辑来处理不爽\",{\"1\":{\"1426\":1}}],[\"的逻辑值\",{\"1\":{\"1200\":1}}],[\"的效果\",{\"1\":{\"1422\":1}}],[\"的函数\",{\"1\":{\"1416\":1,\"1418\":1}}],[\"的函数只能返回一个值\",{\"1\":{\"1179\":1}}],[\"的定义为\",{\"1\":{\"1411\":1}}],[\"的定义解释\",{\"1\":{\"946\":1}}],[\"的引擎不会立即移除对它的支持\",{\"1\":{\"1408\":1}}],[\"的引用就是\",{\"1\":{\"1670\":1}}],[\"的引用是一个\",{\"1\":{\"1670\":1}}],[\"的引用\",{\"1\":{\"1281\":1,\"1579\":1,\"1616\":3}}],[\"的引用数据类型\",{\"1\":{\"1264\":1}}],[\"的内部\",{\"1\":{\"1675\":1}}],[\"的内部变量\",{\"1\":{\"1407\":1}}],[\"的内存\",{\"1\":{\"1284\":1}}],[\"的内存空间\",{\"1\":{\"1264\":1}}],[\"的机制\",{\"1\":{\"1375\":1,\"1589\":1}}],[\"的机器数按位非之后就变成了全为\",{\"1\":{\"1160\":1}}],[\"的优点\",{\"1\":{\"1427\":1}}],[\"的优势并发执行这些非阻塞异步函数\",{\"1\":{\"1353\":1}}],[\"的优先级要高于\",{\"1\":{\"429\":1}}],[\"的优先级高\",{\"1\":{\"38\":1}}],[\"的第二个参数是一个对象\",{\"1\":{\"1403\":1}}],[\"的第二个参数跟在\",{\"1\":{\"1312\":1}}],[\"的第一个参数是个函数\",{\"1\":{\"1710\":1}}],[\"的第一个参数\",{\"1\":{\"1311\":1}}],[\"的第一个元素\",{\"1\":{\"15\":1}}],[\"的标记\",{\"1\":{\"1282\":1}}],[\"的指针变化\",{\"1\":{\"1693\":1}}],[\"的指针\",{\"1\":{\"1281\":1}}],[\"的指向理解为执行时所指向的执行上下文\",{\"1\":{\"1575\":1}}],[\"的指向问题\",{\"1\":{\"1476\":1}}],[\"的指向\",{\"1\":{\"1375\":1,\"1555\":1,\"1589\":1}}],[\"的指向取决于对象创建时的实现方式\",{\"1\":{\"649\":1}}],[\"的指向默认指向\",{\"1\":{\"599\":1}}],[\"的过程中\",{\"1\":{\"1279\":1}}],[\"的解释器将会消耗完系统中所有可用的内存\",{\"1\":{\"1279\":1}}],[\"的解析和执行\",{\"1\":{\"1549\":1}}],[\"的解析\",{\"1\":{\"438\":1}}],[\"的范围\",{\"1\":{\"1274\":1}}],[\"的所有数据都保存在堆内存中\",{\"1\":{\"1260\":1}}],[\"的真值表\",{\"1\":{\"1254\":1}}],[\"的世界中\",{\"1\":{\"1253\":1}}],[\"的规则是\",{\"1\":{\"1222\":1}}],[\"的规则有所不同\",{\"1\":{\"946\":1}}],[\"的结果\",{\"1\":{\"1203\":6}}],[\"的示例\",{\"1\":{\"1201\":1,\"1202\":1}}],[\"的典型应用场景\",{\"1\":{\"1197\":1}}],[\"的合并数组\",{\"1\":{\"1181\":2}}],[\"的情况下才使用\",{\"1\":{\"1695\":1}}],[\"的情况下不会引起错误\",{\"1\":{\"1164\":1}}],[\"的情况\",{\"1\":{\"1691\":1}}],[\"的情况总结\",{\"1\":{\"858\":1}}],[\"的判断\",{\"1\":{\"1160\":1}}],[\"的补码\",{\"1\":{\"1160\":1}}],[\"的反码表示\",{\"1\":{\"1160\":1}}],[\"的二进制表示向右移动\",{\"1\":{\"1151\":2}}],[\"的二进制串向左移动\",{\"1\":{\"1151\":1}}],[\"的位置\",{\"1\":{\"1674\":1}}],[\"的位置扩展\",{\"1\":{\"1172\":1}}],[\"的位置开始\",{\"1\":{\"352\":1}}],[\"的位表示中\",{\"1\":{\"1151\":3}}],[\"的地方插入会产生副作用的表达式\",{\"1\":{\"1135\":1}}],[\"的类型标签也成为了\",{\"1\":{\"1132\":1}}],[\"的理解不同\",{\"1\":{\"1100\":1}}],[\"的块级作用域之中\",{\"1\":{\"1074\":1}}],[\"的作用域中继续查找\",{\"1\":{\"1675\":1}}],[\"的作用域是声明了\",{\"1\":{\"1069\":1}}],[\"的作用是实现相邻计算机节点之间比特流的透明传送\",{\"1\":{\"318\":1}}],[\"的作用是\",{\"1\":{\"63\":1}}],[\"的返回结果\",{\"1\":{\"1597\":1}}],[\"的返回值\",{\"1\":{\"1053\":1,\"1242\":1}}],[\"的返回一个与给定值对应类型的对象\",{\"1\":{\"800\":1}}],[\"的表亲\",{\"1\":{\"1677\":1}}],[\"的表达式的值\",{\"1\":{\"1091\":1,\"1253\":1,\"1254\":1}}],[\"的表达式\",{\"1\":{\"1018\":1}}],[\"的表格中\",{\"1\":{\"48\":1}}],[\"的每个对象将继承\",{\"1\":{\"1004\":1}}],[\"的每个实例都会具有自己的继承与父类构造函数的属性的副本\",{\"1\":{\"635\":1}}],[\"的区别在于如果对应的位中任一个操作数为\",{\"1\":{\"1145\":1}}],[\"的区别\",{\"0\":{\"1004\":1},\"1\":{\"1616\":1}}],[\"的平台上运行\",{\"1\":{\"999\":1}}],[\"的循环\",{\"1\":{\"1000\":1}}],[\"的循环体使用花括号括起来的话\",{\"1\":{\"976\":1}}],[\"的循环语句的本次迭代\",{\"1\":{\"966\":1}}],[\"的方式动态植入\",{\"1\":{\"1505\":1}}],[\"的方式掺入业务逻辑模块中\",{\"1\":{\"1505\":1}}],[\"的方式就称为\",{\"1\":{\"948\":1}}],[\"的方法\",{\"1\":{\"599\":1,\"955\":1}}],[\"的形式\",{\"1\":{\"1601\":1}}],[\"的形式来调用\",{\"1\":{\"936\":1}}],[\"的形式调用\",{\"1\":{\"838\":1}}],[\"的检测使用\",{\"1\":{\"934\":1}}],[\"的含义是\",{\"1\":{\"1670\":1}}],[\"的含义是本该返回数值的操作未返回数值\",{\"1\":{\"926\":1}}],[\"的含义就是\",{\"1\":{\"1670\":1}}],[\"的含义就是读取\",{\"1\":{\"560\":1}}],[\"的浮点型数据在计算时容易丢失精度\",{\"1\":{\"924\":1}}],[\"的最初值就是原始数据类型\",{\"1\":{\"920\":1}}],[\"的最小矩形\",{\"1\":{\"36\":1}}],[\"的前缀是\",{\"1\":{\"913\":1}}],[\"的前缀来决定转换的进制基数\",{\"1\":{\"913\":1}}],[\"的有效组件进行编码\",{\"1\":{\"884\":1}}],[\"的参数形成一个单独作用域\",{\"1\":{\"1407\":1}}],[\"的参数\",{\"1\":{\"1407\":1}}],[\"的参数一个箭头函数\",{\"1\":{\"1375\":1}}],[\"的参数指定默认值\",{\"1\":{\"1221\":1}}],[\"的参数是一个对象时\",{\"1\":{\"1403\":1}}],[\"的参数是一个对象\",{\"1\":{\"1221\":1}}],[\"的参数表面上是一个数组\",{\"1\":{\"1221\":1}}],[\"的参数部分\",{\"1\":{\"873\":1}}],[\"的参考线为元素本身的\",{\"1\":{\"56\":1}}],[\"的参考线为文档流中左边元素和上面的元素\",{\"1\":{\"56\":1}}],[\"的一样\",{\"1\":{\"1083\":1}}],[\"的一部分\",{\"1\":{\"873\":1}}],[\"的一个引用\",{\"1\":{\"1579\":1,\"1616\":1}}],[\"的一个已编码的组件进行解码\",{\"1\":{\"873\":1}}],[\"的一个分支\",{\"1\":{\"143\":1}}],[\"的一个开源的分支\",{\"1\":{\"143\":1}}],[\"的初始值是\",{\"1\":{\"853\":1}}],[\"的环境\",{\"1\":{\"848\":1}}],[\"的现象\",{\"1\":{\"762\":1}}],[\"的键值对组成的二维数组\",{\"1\":{\"803\":1}}],[\"的键值对数组\",{\"1\":{\"699\":1}}],[\"的键名数组集合\",{\"1\":{\"803\":1}}],[\"的键名组成的数组\",{\"1\":{\"791\":1}}],[\"的键名\",{\"1\":{\"729\":1}}],[\"的某个方法的返回值出现的\",{\"1\":{\"858\":1,\"926\":1}}],[\"的某个\",{\"1\":{\"719\":1}}],[\"的目标对象\",{\"1\":{\"688\":1,\"693\":1}}],[\"的关系\",{\"1\":{\"653\":1}}],[\"的关键字后的类名\",{\"1\":{\"599\":1}}],[\"的构造器是\",{\"1\":{\"653\":1}}],[\"的构造器是它自身\",{\"1\":{\"653\":1}}],[\"的构造函数能在\",{\"1\":{\"635\":1}}],[\"的例子\",{\"1\":{\"625\":1,\"1376\":1}}],[\"的子类\",{\"1\":{\"625\":2}}],[\"的子元素\",{\"1\":{\"15\":1}}],[\"的拷贝\",{\"1\":{\"624\":1}}],[\"的实例赋值给\",{\"1\":{\"662\":1}}],[\"的实例\",{\"1\":{\"592\":1,\"621\":1,\"624\":3,\"936\":1,\"1382\":1,\"1477\":3}}],[\"的实现必须支持\",{\"1\":{\"234\":1}}],[\"的对象一定无法从\",{\"1\":{\"1282\":1}}],[\"的对象属性\",{\"0\":{\"1110\":1}}],[\"的对象都会继承到\",{\"1\":{\"754\":1}}],[\"的对象\",{\"1\":{\"572\":1,\"725\":1,\"1048\":1,\"1374\":1}}],[\"的原则\",{\"1\":{\"1263\":1}}],[\"的原码\",{\"1\":{\"1160\":1}}],[\"的原始值\",{\"1\":{\"1135\":1}}],[\"的原型方法\",{\"1\":{\"936\":1,\"1487\":1}}],[\"的原型上定义了方法\",{\"1\":{\"662\":1}}],[\"的原型\",{\"1\":{\"662\":1}}],[\"的原型定义了一个方法\",{\"1\":{\"662\":1}}],[\"的原型链\",{\"1\":{\"653\":1}}],[\"的原型链是否存在\",{\"1\":{\"653\":1}}],[\"的原型对象\",{\"1\":{\"648\":2,\"802\":1}}],[\"的原型对象是\",{\"1\":{\"565\":1}}],[\"的原理是通过\",{\"1\":{\"401\":1}}],[\"的可计算属性名\",{\"1\":{\"559\":1}}],[\"的可取属性值\",{\"1\":{\"83\":1}}],[\"的基础数据类型往往都会保存在变量对象中\",{\"1\":{\"1263\":1}}],[\"的基础上增加了透明度\",{\"1\":{\"108\":1,\"110\":1}}],[\"的基本数据类型包括\",{\"1\":{\"544\":1}}],[\"的赋值语句静默失败\",{\"1\":{\"530\":1}}],[\"的状态从\",{\"1\":{\"530\":1}}],[\"的数字组成\",{\"1\":{\"923\":1}}],[\"的数组\",{\"1\":{\"740\":1}}],[\"的数据结构\",{\"1\":{\"1262\":1}}],[\"的数据类型隐式转换主要分为三种情况\",{\"1\":{\"948\":1}}],[\"的数据类型\",{\"1\":{\"558\":1,\"800\":1}}],[\"的数据值\",{\"1\":{\"528\":1}}],[\"的数值\",{\"1\":{\"110\":1}}],[\"的特殊对象\",{\"1\":{\"1263\":1}}],[\"的特点\",{\"1\":{\"1260\":1}}],[\"的特性\",{\"1\":{\"528\":1}}],[\"的特定页面中使用\",{\"1\":{\"19\":1}}],[\"的各种特征\",{\"1\":{\"527\":1}}],[\"的和最大\",{\"1\":{\"524\":1}}],[\"的那种提升\",{\"1\":{\"1694\":1}}],[\"的那个函数\",{\"1\":{\"1069\":1}}],[\"的那\",{\"1\":{\"515\":1}}],[\"的字符串类型用于表示文本数据\",{\"1\":{\"927\":1}}],[\"的字符串\",{\"1\":{\"512\":1}}],[\"的字符串的\",{\"1\":{\"14\":1}}],[\"的空间存储分割后的修订号列表\",{\"1\":{\"509\":1}}],[\"的空隙\",{\"1\":{\"46\":1}}],[\"的修订号是\",{\"1\":{\"509\":2}}],[\"的修订号\",{\"1\":{\"509\":1}}],[\"的修订号分别为\",{\"1\":{\"509\":1}}],[\"的修订号相同\",{\"1\":{\"509\":1}}],[\"的算法解决此问题\",{\"1\":{\"482\":1}}],[\"的根节点到叶子节点的路径\",{\"1\":{\"470\":1}}],[\"的路径\",{\"1\":{\"470\":1}}],[\"的长度\",{\"1\":{\"467\":2,\"509\":2}}],[\"的回调会在这个阶段执行\",{\"1\":{\"1534\":1}}],[\"的回调\",{\"1\":{\"458\":1,\"1534\":1}}],[\"的属性或方法\",{\"1\":{\"1658\":1}}],[\"的属性值\",{\"1\":{\"1572\":1}}],[\"的属性值为\",{\"1\":{\"529\":1}}],[\"的属性成员和\",{\"1\":{\"1083\":1}}],[\"的属性和方法\",{\"1\":{\"637\":2}}],[\"的属性\",{\"1\":{\"403\":1,\"926\":1,\"1100\":1,\"1385\":1,\"1683\":1}}],[\"的集合\",{\"1\":{\"388\":1}}],[\"的整数\",{\"1\":{\"376\":1}}],[\"的任务分为两种同步和异步\",{\"1\":{\"457\":1}}],[\"的任务就是选择合适的网间路由和交换结点\",{\"1\":{\"318\":1}}],[\"的任务是通过应用进程间的交互来完成特定网络应用\",{\"1\":{\"318\":1}}],[\"的首部开销小\",{\"1\":{\"310\":1}}],[\"的程序往往都有个应用层的心跳检测机制\",{\"1\":{\"304\":1}}],[\"的主要用途是与用户互动\",{\"1\":{\"1551\":1}}],[\"的主要任务就是\",{\"1\":{\"318\":1}}],[\"的主要任务就是负责向两台主机进程之间的通信提供通用的\",{\"1\":{\"297\":1}}],[\"的主机不会收到第二次报文\",{\"1\":{\"303\":1}}],[\"的握手报文\",{\"1\":{\"303\":1}}],[\"的通信传输\",{\"1\":{\"300\":1}}],[\"的后置运算符\",{\"1\":{\"253\":1}}],[\"的保留字\",{\"1\":{\"250\":1}}],[\"的超集\",{\"1\":{\"234\":1}}],[\"的绝对路径\",{\"1\":{\"215\":1}}],[\"的文件列出来\",{\"1\":{\"215\":1}}],[\"的分支一样\",{\"1\":{\"143\":1}}],[\"的高市场占有率\",{\"1\":{\"143\":1}}],[\"的高度\",{\"1\":{\"24\":1,\"93\":1}}],[\"的缩写\",{\"1\":{\"130\":1,\"1124\":1}}],[\"的格式\",{\"1\":{\"109\":1}}],[\"的取值在\",{\"1\":{\"108\":1}}],[\"的取值如下\",{\"1\":{\"101\":1}}],[\"的资源引用\",{\"1\":{\"64\":1}}],[\"的祖先元素计算\",{\"1\":{\"51\":1}}],[\"的同时还设置了\",{\"1\":{\"40\":1}}],[\"的值是\",{\"1\":{\"1709\":2}}],[\"的值是赋值给windows的\",{\"1\":{\"1457\":1}}],[\"的值保存在一个变量里\",{\"1\":{\"1518\":1}}],[\"的值指向\",{\"1\":{\"1518\":1}}],[\"的值都没变\",{\"1\":{\"1407\":1}}],[\"的值都会成为\",{\"1\":{\"1242\":1}}],[\"的值所占的内存\",{\"1\":{\"1281\":1}}],[\"的值时\",{\"1\":{\"1204\":1}}],[\"的值做比较\",{\"1\":{\"1040\":1}}],[\"的值给调用程序\",{\"1\":{\"1034\":1}}],[\"的值一样\",{\"1\":{\"858\":1,\"926\":1}}],[\"的值表示不是一个数字\",{\"1\":{\"857\":1}}],[\"的值从一个或多个源对象拷贝到目标对象\",{\"1\":{\"676\":1}}],[\"的值的成员创建一个新数组\",{\"1\":{\"669\":1}}],[\"的值为\",{\"1\":{\"648\":1}}],[\"的值不会受影响\",{\"1\":{\"529\":1}}],[\"的值\",{\"1\":{\"39\":1,\"430\":1,\"528\":1,\"572\":1,\"1053\":2,\"1093\":1,\"1194\":1,\"1221\":1,\"1229\":1,\"1319\":1,\"1572\":1,\"1670\":2,\"1709\":3}}],[\"的堆叠顺序\",{\"1\":{\"39\":1}}],[\"的生效具有一定的条件限制\",{\"1\":{\"38\":1}}],[\"的时候会将声明放在暂时性死区内\",{\"1\":{\"1694\":1}}],[\"的时候执行\",{\"1\":{\"1465\":1}}],[\"的时候卖出\",{\"1\":{\"485\":1}}],[\"的时候买入\",{\"1\":{\"485\":1}}],[\"的时候\",{\"1\":{\"37\":1,\"394\":1,\"623\":1,\"1355\":1,\"1490\":1,\"1694\":1}}],[\"的部分\",{\"1\":{\"36\":1}}],[\"的宽度\",{\"1\":{\"24\":1,\"66\":1}}],[\"的元素将被用作初始值\",{\"1\":{\"352\":1}}],[\"的元素开始执行\",{\"1\":{\"352\":1}}],[\"的元素中\",{\"1\":{\"51\":1}}],[\"的元素\",{\"1\":{\"15\":1,\"36\":2}}],[\"的元素等等\",{\"1\":{\"15\":1}}],[\"的\",{\"1\":{\"14\":2,\"36\":1,\"81\":1,\"91\":1,\"130\":1,\"144\":1,\"271\":1,\"272\":1,\"298\":1,\"304\":1,\"310\":1,\"329\":14,\"464\":1,\"530\":1,\"576\":1,\"584\":1,\"621\":1,\"624\":1,\"653\":5,\"687\":1,\"692\":1,\"724\":1,\"725\":1,\"753\":1,\"803\":3,\"820\":1,\"880\":1,\"886\":1,\"946\":1,\"955\":1,\"1142\":1,\"1166\":1,\"1207\":1,\"1218\":1,\"1260\":1,\"1263\":1,\"1295\":3,\"1302\":1,\"1306\":2,\"1329\":1,\"1357\":1,\"1375\":2,\"1382\":1,\"1400\":1,\"1407\":1,\"1538\":1,\"1549\":1,\"1577\":1,\"1580\":1,\"1589\":3,\"1593\":3,\"1668\":1,\"1670\":2,\"1674\":1,\"1677\":1,\"1685\":1}}],[\"3509\",{\"1\":{\"1232\":1}}],[\"3的二进制表示为\",{\"1\":{\"1144\":1,\"1145\":2,\"1146\":1,\"1147\":1}}],[\"36\",{\"1\":{\"913\":1,\"1542\":1}}],[\"360浏览器\",{\"1\":{\"436\":1}}],[\"360\",{\"1\":{\"110\":2}}],[\"37\",{\"1\":{\"905\":5,\"1124\":1}}],[\"3a\",{\"1\":{\"887\":1}}],[\"345\",{\"1\":{\"716\":1}}],[\"34\",{\"1\":{\"716\":1}}],[\"336\",{\"1\":{\"716\":1}}],[\"33\",{\"1\":{\"509\":1}}],[\"3xx\",{\"1\":{\"464\":1}}],[\"3秒后\",{\"1\":{\"383\":1}}],[\"3秒后输出\",{\"1\":{\"380\":1}}],[\"39\",{\"1\":{\"351\":1,\"894\":1}}],[\"32\",{\"1\":{\"301\":2,\"1142\":3,\"1184\":3}}],[\"32位函数库\",{\"1\":{\"186\":1}}],[\"314e\",{\"1\":{\"910\":1}}],[\"31\",{\"1\":{\"215\":1,\"993\":1}}],[\"304\",{\"1\":{\"431\":1}}],[\"30\",{\"1\":{\"351\":1,\"993\":3,\"1390\":1,\"1412\":2,\"1541\":1}}],[\"301永久重定向响应\",{\"1\":{\"153\":1}}],[\"30分钟时间\",{\"1\":{\"150\":1}}],[\"300ms\",{\"1\":{\"1438\":1}}],[\"3000ms\",{\"1\":{\"1375\":1}}],[\"30000000000000000004\",{\"1\":{\"924\":1}}],[\"3000毫秒后我失败啦\",{\"1\":{\"380\":1}}],[\"3000毫秒后我成功啦\",{\"1\":{\"371\":1}}],[\"3000\",{\"1\":{\"371\":1,\"380\":1,\"383\":2,\"1345\":1,\"1375\":2,\"1710\":1}}],[\"300\",{\"1\":{\"75\":1,\"1356\":1,\"1390\":1,\"1438\":2,\"1449\":1}}],[\"3px\",{\"1\":{\"55\":1,\"59\":2,\"94\":1}}],[\"3\",{\"0\":{\"14\":1,\"135\":1,\"147\":1,\"150\":1,\"177\":1,\"259\":1,\"277\":1,\"290\":1,\"294\":1,\"332\":1,\"343\":1,\"369\":1,\"376\":1,\"385\":1,\"388\":1,\"394\":1,\"403\":1,\"411\":1,\"424\":1,\"428\":1,\"431\":1,\"438\":1,\"506\":1},\"1\":{\"48\":1,\"77\":2,\"143\":1,\"215\":5,\"235\":2,\"252\":4,\"253\":2,\"329\":1,\"341\":1,\"343\":4,\"347\":1,\"348\":2,\"349\":3,\"350\":1,\"352\":2,\"354\":4,\"365\":1,\"374\":6,\"377\":1,\"388\":8,\"392\":5,\"393\":4,\"394\":2,\"401\":1,\"467\":5,\"470\":4,\"473\":3,\"476\":3,\"479\":3,\"482\":3,\"485\":2,\"488\":5,\"491\":2,\"497\":1,\"500\":7,\"503\":2,\"506\":1,\"509\":1,\"512\":1,\"515\":4,\"518\":2,\"524\":2,\"530\":1,\"533\":1,\"547\":1,\"548\":2,\"559\":3,\"603\":2,\"623\":2,\"635\":2,\"659\":2,\"662\":2,\"672\":2,\"689\":2,\"716\":1,\"769\":1,\"776\":1,\"787\":1,\"825\":1,\"843\":2,\"910\":3,\"914\":1,\"924\":1,\"943\":4,\"955\":3,\"971\":1,\"986\":1,\"996\":3,\"997\":3,\"998\":2,\"1000\":2,\"1002\":1,\"1003\":1,\"1004\":6,\"1011\":1,\"1012\":1,\"1027\":2,\"1052\":2,\"1053\":4,\"1054\":1,\"1066\":3,\"1083\":2,\"1087\":2,\"1091\":2,\"1092\":1,\"1093\":3,\"1110\":4,\"1124\":1,\"1144\":1,\"1145\":2,\"1146\":1,\"1155\":1,\"1156\":1,\"1159\":1,\"1161\":1,\"1178\":1,\"1182\":1,\"1183\":4,\"1184\":2,\"1185\":1,\"1186\":4,\"1207\":3,\"1213\":1,\"1214\":5,\"1216\":2,\"1218\":11,\"1221\":13,\"1227\":2,\"1230\":1,\"1231\":2,\"1243\":1,\"1248\":1,\"1249\":1,\"1253\":1,\"1254\":1,\"1264\":2,\"1274\":2,\"1312\":4,\"1319\":1,\"1333\":1,\"1349\":2,\"1365\":4,\"1373\":2,\"1375\":3,\"1376\":4,\"1381\":3,\"1382\":6,\"1393\":2,\"1400\":1,\"1404\":10,\"1406\":2,\"1407\":4,\"1411\":2,\"1416\":2,\"1417\":3,\"1418\":2,\"1419\":8,\"1452\":2,\"1457\":2,\"1488\":2,\"1492\":1,\"1503\":4,\"1504\":1,\"1505\":4,\"1509\":1,\"1529\":2,\"1533\":2,\"1564\":1,\"1565\":1,\"1580\":2,\"1584\":4,\"1586\":4,\"1661\":1,\"1674\":1,\"1677\":3,\"1681\":2,\"1682\":1,\"1684\":2,\"1686\":2,\"1691\":3,\"1693\":4}}],[\"✅\",{\"1\":{\"13\":1,\"14\":3,\"15\":16,\"541\":4}}],[\"只提升声明部分\",{\"1\":{\"1700\":1}}],[\"只提供数据的不可靠传递\",{\"1\":{\"309\":1}}],[\"只输出\",{\"1\":{\"1658\":1}}],[\"只读性\",{\"0\":{\"1631\":1}}],[\"只使用词法作用域并完全抛弃错误\",{\"1\":{\"1589\":1}}],[\"只可以在派生类中使用\",{\"1\":{\"1490\":1}}],[\"只执行一段连续的输入事件的最后一次\",{\"1\":{\"1447\":1}}],[\"只执行最后提交的一次\",{\"1\":{\"1447\":1}}],[\"只包含那些没有对应形参的实参\",{\"1\":{\"1394\":1}}],[\"只会给指定索引所在位置赋值\",{\"1\":{\"1094\":1}}],[\"只会应用到这个元素的内容区\",{\"1\":{\"58\":1}}],[\"只在\",{\"1\":{\"1109\":1}}],[\"只在声明所在的块级作用域内有效\",{\"1\":{\"1068\":1}}],[\"只在循环开始之前执行一次\",{\"1\":{\"1009\":1}}],[\"只在属性存在于实例中时才返回\",{\"1\":{\"577\":1}}],[\"只获取不可枚举\",{\"0\":{\"737\":1}}],[\"只不过最后再将其结果取反\",{\"1\":{\"1255\":1}}],[\"只不过把原型继承的形式变成了寄生式继承\",{\"1\":{\"659\":1}}],[\"只不过可以用来创建对象而已\",{\"1\":{\"590\":1}}],[\"只不过这个程序可以将\",{\"1\":{\"144\":1}}],[\"只适用于\",{\"1\":{\"578\":1}}],[\"只要你愿意\",{\"1\":{\"1684\":1}}],[\"只要想把\",{\"1\":{\"1670\":1}}],[\"只要处于模块顶层就可以\",{\"1\":{\"1655\":1}}],[\"只要异步任务有了运行结果\",{\"1\":{\"1532\":1}}],[\"只要栈中的代码执行完毕\",{\"1\":{\"1532\":1}}],[\"只要这两个定义的签名\",{\"1\":{\"1390\":1}}],[\"只要在顶部过滤框\",{\"1\":{\"1286\":1}}],[\"只要像这样动态地分配了内存\",{\"1\":{\"1279\":1}}],[\"只要有可能\",{\"1\":{\"1222\":1}}],[\"只要有可能导致解构的歧义\",{\"1\":{\"1222\":1}}],[\"只要有一个为\",{\"1\":{\"1151\":1}}],[\"只要等号右边的值不是对象或数组\",{\"1\":{\"1220\":1}}],[\"只要等号两边的模式相同\",{\"1\":{\"1213\":1}}],[\"只要字符串开头的一部分符合整数的转换规则\",{\"1\":{\"913\":1}}],[\"只要字符串开头的一部分符合浮点数规则\",{\"1\":{\"909\":1}}],[\"只要同\",{\"1\":{\"591\":1}}],[\"只要创建一个新函数\",{\"1\":{\"576\":1}}],[\"只要记住\",{\"1\":{\"65\":1}}],[\"只设置\",{\"1\":{\"534\":1}}],[\"只允许\",{\"1\":{\"530\":1}}],[\"只允许数据在一个方向上传输\",{\"1\":{\"312\":1}}],[\"只需把关键字\",{\"1\":{\"1486\":1}}],[\"只需一个\",{\"1\":{\"941\":1}}],[\"只需在整数的末尾追加\",{\"1\":{\"929\":1}}],[\"只需使用\",{\"1\":{\"893\":1}}],[\"只需直接添加到类中\",{\"1\":{\"599\":1}}],[\"只需比较\",{\"1\":{\"509\":1}}],[\"只需要在构造方法中定义\",{\"1\":{\"1483\":1}}],[\"只需要类声明\",{\"1\":{\"1482\":1}}],[\"只需要知道创建了一个管理员和用户\",{\"1\":{\"587\":1}}],[\"只需要知道\",{\"1\":{\"120\":1}}],[\"只需要\",{\"1\":{\"81\":1}}],[\"只需要更改选择器\",{\"1\":{\"4\":1}}],[\"只存在请求头中\",{\"1\":{\"443\":1}}],[\"只处理本身\",{\"1\":{\"403\":1}}],[\"只意味着这一方向上没有数据流动\",{\"1\":{\"304\":1}}],[\"只有执行到变量的声明语句时\",{\"1\":{\"1694\":1}}],[\"只有执行该声明的时候才能使用\",{\"1\":{\"1066\":1,\"1692\":1}}],[\"只有加载完成\",{\"1\":{\"1617\":1}}],[\"只有用户点击了按钮\",{\"1\":{\"1595\":1}}],[\"只有运行时才知道\",{\"1\":{\"1593\":1}}],[\"只有到当进入一个执行上下文中\",{\"1\":{\"1562\":1}}],[\"只有栈顶的上下文处于执行中\",{\"1\":{\"1557\":1}}],[\"只有足够的空闲时间\",{\"1\":{\"1444\":1}}],[\"只有一次能生效\",{\"1\":{\"1431\":1}}],[\"只有一个任务执行完毕\",{\"1\":{\"457\":1}}],[\"只有当前任务执行完毕后\",{\"1\":{\"1552\":1}}],[\"只有当函数\",{\"1\":{\"1403\":1}}],[\"只有当指定条件为\",{\"1\":{\"1017\":1}}],[\"只有这三个操作依次完成\",{\"1\":{\"1345\":1}}],[\"只有数组长度等于\",{\"1\":{\"1319\":1}}],[\"只有数值类型的值\",{\"1\":{\"899\":1}}],[\"只有不将大括号写在行首\",{\"1\":{\"1218\":1}}],[\"只有调用\",{\"1\":{\"619\":1}}],[\"只有undefined和null才算假值\",{\"1\":{\"381\":1}}],[\"只有\",{\"1\":{\"310\":1,\"619\":1,\"848\":1,\"1074\":1,\"1218\":1,\"1345\":1}}],[\"只有三次握手完毕后\",{\"1\":{\"301\":1}}],[\"只有在两个操作数都是\",{\"1\":{\"1254\":1}}],[\"只有在两个操作数都为\",{\"1\":{\"1253\":1}}],[\"只有在必要时才使用后置操作符\",{\"1\":{\"1194\":1}}],[\"只有在类内部代码可用\",{\"1\":{\"600\":1}}],[\"只有在缺少了分号就无法正确解析代码时\",{\"1\":{\"253\":1}}],[\"只有在缺少了分号无法正确解析代码时\",{\"1\":{\"252\":1}}],[\"只有在需要覆盖全站或外链\",{\"1\":{\"19\":1}}],[\"只支持\",{\"1\":{\"230\":1,\"450\":1}}],[\"只能删除属性\",{\"1\":{\"1620\":1}}],[\"只能用类名直接访问\",{\"1\":{\"1489\":1}}],[\"只能在函数内部访问到\",{\"1\":{\"1708\":1}}],[\"只能在函数内部使用\",{\"1\":{\"1334\":1}}],[\"只能在内部使用\",{\"1\":{\"1484\":1}}],[\"只能使用\",{\"1\":{\"1483\":1}}],[\"只能使用条件运算符\",{\"1\":{\"1197\":1}}],[\"只能有一次触发事件的回调函数执行\",{\"1\":{\"1431\":1}}],[\"只能是最后一个参数\",{\"1\":{\"1395\":1}}],[\"只能返回数组或对象\",{\"1\":{\"1179\":1}}],[\"只能将它们放在数组或对象里返回\",{\"1\":{\"1230\":1}}],[\"只能将\",{\"1\":{\"936\":1}}],[\"只能继承父类\",{\"1\":{\"637\":1}}],[\"只能通过检查传入函数中参数的类型和数量并作出不同的反应\",{\"1\":{\"1390\":1}}],[\"只能通过变通方法模拟实现\",{\"1\":{\"610\":1}}],[\"只能通过\",{\"1\":{\"599\":1}}],[\"只能兼容到ie11\",{\"1\":{\"401\":1}}],[\"只能遍历数组\",{\"1\":{\"356\":1}}],[\"只能对事物特征和变化规律的一种抽象\",{\"1\":{\"228\":1}}],[\"只能命中子元素\",{\"1\":{\"13\":1}}],[\"只移动\",{\"1\":{\"176\":1}}],[\"只是从活动状态变成非活动状态\",{\"1\":{\"1709\":1}}],[\"只是在\",{\"1\":{\"1694\":1}}],[\"只是在两端的内核里面维持\",{\"1\":{\"304\":1}}],[\"只是有影响\",{\"1\":{\"1694\":1}}],[\"只是一个值\",{\"1\":{\"1654\":1}}],[\"只是向外部暴露一些接口与外部其他模块通信\",{\"1\":{\"1606\":1}}],[\"只是对于函数的\",{\"1\":{\"1581\":1}}],[\"只是变量对象是规范上的或者说是引擎实现上的\",{\"1\":{\"1562\":1}}],[\"只是变量标识符不能重新分配\",{\"1\":{\"1068\":1}}],[\"只是说明闭包会带来内存占用\",{\"1\":{\"1287\":1}}],[\"只是存储\",{\"1\":{\"1274\":1}}],[\"只是方括号被花括号代替\",{\"1\":{\"1083\":1}}],[\"只是语法更简洁\",{\"1\":{\"593\":1}}],[\"只是意味着这一方向上没有数据流动了\",{\"1\":{\"304\":1}}],[\"只是其在元素名之前包含了一个斜杠\",{\"1\":{\"116\":1}}],[\"只是该值继承的\",{\"1\":{\"81\":1}}],[\"ffffff\",{\"1\":{\"1156\":2}}],[\"ffdde1\",{\"1\":{\"100\":1}}],[\"feb\",{\"1\":{\"1048\":1}}],[\"fetch\",{\"1\":{\"168\":1,\"1403\":8}}],[\"fxx123\",{\"1\":{\"914\":1}}],[\"fs\",{\"1\":{\"460\":3,\"1627\":2}}],[\"fn3\",{\"1\":{\"1364\":1}}],[\"fn2\",{\"1\":{\"1364\":1,\"1404\":6}}],[\"fn1\",{\"1\":{\"1364\":1,\"1404\":6}}],[\"fn\",{\"1\":{\"288\":6,\"289\":3,\"290\":3,\"292\":2,\"293\":2,\"294\":3,\"341\":2,\"342\":3,\"343\":3,\"346\":5,\"371\":6,\"380\":4,\"381\":5,\"383\":8,\"394\":10,\"1033\":1,\"1034\":3,\"1035\":6,\"1053\":4,\"1115\":2,\"1253\":2,\"1254\":1,\"1281\":1,\"1294\":2,\"1329\":2,\"1334\":20,\"1346\":1,\"1362\":1,\"1366\":1,\"1367\":2,\"1369\":1,\"1370\":2,\"1371\":1,\"1375\":4,\"1382\":7,\"1383\":4,\"1385\":11,\"1398\":5,\"1399\":1,\"1400\":1,\"1401\":2,\"1402\":3,\"1403\":9,\"1405\":7,\"1407\":28,\"1413\":2,\"1416\":2,\"1417\":23,\"1418\":8,\"1419\":4,\"1433\":3,\"1438\":2,\"1441\":1,\"1446\":2,\"1449\":3,\"1477\":5,\"1485\":3,\"1505\":7,\"1511\":2,\"1515\":2,\"1516\":3,\"1518\":6,\"1522\":2,\"1523\":2,\"1525\":4,\"1526\":6,\"1579\":3,\"1587\":3,\"1597\":2,\"1620\":2,\"1710\":2}}],[\"futhark\",{\"1\":{\"1550\":1}}],[\"futurereservedword\",{\"1\":{\"248\":1}}],[\"fun1\",{\"1\":{\"1557\":5}}],[\"fun2\",{\"1\":{\"1557\":6}}],[\"fun3\",{\"1\":{\"1557\":5}}],[\"fun\",{\"1\":{\"1295\":4,\"1433\":1,\"1578\":1}}],[\"funciont\",{\"1\":{\"1346\":1}}],[\"func2\",{\"1\":{\"1303\":2}}],[\"func1\",{\"1\":{\"1303\":2}}],[\"funcs\",{\"1\":{\"1287\":1}}],[\"func其实就是person函数\",{\"1\":{\"392\":1}}],[\"func\",{\"1\":{\"392\":6,\"393\":4,\"1165\":1,\"1287\":1,\"1301\":1,\"1302\":2,\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1407\":5,\"1446\":4,\"1466\":4,\"1469\":8,\"1470\":6}}],[\"functionality\",{\"1\":{\"1606\":1}}],[\"functionexpression\",{\"1\":{\"1565\":1}}],[\"functioncontext\",{\"1\":{\"1557\":3}}],[\"functions\",{\"1\":{\"1385\":1}}],[\"functionbody\",{\"1\":{\"1327\":1,\"1328\":2,\"1330\":1,\"1331\":1}}],[\"functionname\",{\"1\":{\"1327\":1,\"1328\":2,\"1330\":1,\"1331\":1}}],[\"function\",{\"0\":{\"1077\":1,\"1131\":1},\"1\":{\"246\":1,\"249\":1,\"251\":1,\"274\":1,\"288\":6,\"289\":3,\"290\":4,\"292\":3,\"293\":2,\"294\":2,\"341\":1,\"342\":1,\"343\":2,\"349\":1,\"371\":2,\"380\":1,\"383\":2,\"392\":7,\"393\":6,\"394\":8,\"402\":4,\"408\":3,\"467\":1,\"470\":1,\"473\":5,\"476\":1,\"479\":2,\"482\":2,\"485\":1,\"488\":11,\"491\":2,\"494\":2,\"497\":1,\"500\":1,\"503\":1,\"506\":1,\"509\":2,\"512\":1,\"515\":1,\"518\":1,\"521\":2,\"524\":1,\"539\":1,\"540\":2,\"547\":1,\"551\":4,\"569\":2,\"570\":3,\"571\":2,\"572\":2,\"575\":2,\"576\":2,\"578\":4,\"579\":2,\"581\":2,\"586\":2,\"590\":2,\"592\":8,\"597\":2,\"599\":1,\"614\":1,\"624\":2,\"629\":1,\"635\":4,\"636\":2,\"640\":2,\"647\":4,\"648\":2,\"651\":1,\"653\":19,\"656\":2,\"659\":9,\"662\":4,\"664\":2,\"668\":2,\"684\":3,\"694\":2,\"695\":3,\"726\":1,\"734\":1,\"735\":1,\"736\":5,\"737\":1,\"749\":2,\"756\":1,\"781\":3,\"796\":1,\"807\":1,\"820\":4,\"830\":1,\"838\":2,\"848\":2,\"849\":1,\"861\":3,\"893\":2,\"894\":1,\"917\":1,\"928\":1,\"934\":3,\"935\":2,\"936\":3,\"943\":4,\"948\":1,\"951\":4,\"954\":2,\"955\":7,\"986\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1004\":4,\"1014\":1,\"1033\":2,\"1034\":4,\"1035\":3,\"1047\":1,\"1048\":2,\"1053\":2,\"1065\":1,\"1077\":2,\"1115\":4,\"1116\":2,\"1122\":1,\"1131\":6,\"1137\":1,\"1156\":2,\"1157\":1,\"1178\":3,\"1184\":1,\"1186\":1,\"1204\":2,\"1209\":1,\"1217\":1,\"1221\":3,\"1225\":2,\"1230\":2,\"1231\":2,\"1233\":3,\"1253\":2,\"1254\":1,\"1273\":2,\"1281\":2,\"1285\":2,\"1286\":1,\"1287\":3,\"1288\":1,\"1293\":3,\"1294\":4,\"1295\":2,\"1296\":3,\"1302\":1,\"1303\":3,\"1306\":1,\"1307\":4,\"1310\":1,\"1312\":6,\"1319\":1,\"1326\":1,\"1327\":1,\"1328\":2,\"1329\":8,\"1331\":1,\"1332\":3,\"1333\":1,\"1334\":6,\"1335\":3,\"1338\":2,\"1340\":2,\"1344\":2,\"1345\":1,\"1348\":3,\"1349\":1,\"1350\":11,\"1352\":2,\"1353\":2,\"1355\":1,\"1356\":4,\"1357\":1,\"1358\":1,\"1367\":1,\"1373\":2,\"1375\":11,\"1376\":3,\"1380\":1,\"1381\":2,\"1382\":7,\"1383\":3,\"1385\":4,\"1386\":8,\"1388\":1,\"1389\":2,\"1390\":3,\"1393\":4,\"1395\":4,\"1398\":2,\"1399\":1,\"1400\":1,\"1401\":2,\"1402\":1,\"1403\":4,\"1404\":2,\"1405\":3,\"1406\":6,\"1407\":10,\"1411\":4,\"1412\":1,\"1413\":2,\"1417\":20,\"1418\":2,\"1419\":4,\"1425\":5,\"1426\":2,\"1427\":3,\"1433\":4,\"1435\":1,\"1438\":4,\"1441\":2,\"1446\":4,\"1449\":4,\"1452\":4,\"1456\":2,\"1457\":4,\"1458\":4,\"1466\":1,\"1467\":2,\"1469\":4,\"1470\":4,\"1474\":2,\"1476\":2,\"1481\":2,\"1483\":1,\"1485\":1,\"1489\":1,\"1493\":1,\"1497\":4,\"1502\":8,\"1503\":2,\"1504\":7,\"1505\":15,\"1509\":2,\"1510\":3,\"1511\":1,\"1514\":1,\"1515\":1,\"1516\":2,\"1518\":6,\"1522\":1,\"1523\":1,\"1525\":1,\"1526\":3,\"1529\":1,\"1543\":1,\"1557\":3,\"1564\":5,\"1565\":1,\"1566\":1,\"1570\":2,\"1572\":1,\"1576\":3,\"1578\":4,\"1579\":6,\"1580\":3,\"1581\":1,\"1583\":1,\"1584\":3,\"1586\":2,\"1587\":4,\"1589\":2,\"1603\":1,\"1611\":3,\"1613\":6,\"1614\":4,\"1616\":3,\"1617\":3,\"1618\":2,\"1651\":1,\"1652\":1,\"1654\":3,\"1655\":1,\"1658\":1,\"1670\":4,\"1674\":2,\"1677\":2,\"1681\":4,\"1682\":2,\"1683\":2,\"1684\":1,\"1685\":5,\"1686\":3,\"1691\":2,\"1692\":3,\"1694\":2,\"1695\":2,\"1700\":7,\"1701\":6,\"1703\":1,\"1704\":2,\"1708\":2,\"1709\":3,\"1710\":3}}],[\"fulfilled\",{\"1\":{\"380\":1,\"1338\":1}}],[\"fullwidth\",{\"1\":{\"84\":2}}],[\"full\",{\"1\":{\"84\":1,\"1367\":2}}],[\"ftpuri\",{\"1\":{\"881\":2}}],[\"ftp\",{\"1\":{\"215\":1,\"881\":3,\"887\":3}}],[\"ftp等\",{\"1\":{\"148\":1}}],[\"f00\",{\"1\":{\"99\":1}}],[\"fadein\",{\"1\":{\"1496\":1}}],[\"fadeout\",{\"1\":{\"1496\":1}}],[\"fac\",{\"1\":{\"1333\":2}}],[\"factorial\",{\"1\":{\"1333\":2}}],[\"face\",{\"1\":{\"79\":1}}],[\"falls\",{\"1\":{\"1166\":1}}],[\"false\",{\"1\":{\"245\":1,\"246\":1,\"288\":1,\"294\":1,\"349\":1,\"350\":1,\"381\":2,\"470\":4,\"491\":4,\"512\":3,\"521\":1,\"529\":4,\"530\":10,\"531\":2,\"539\":2,\"540\":2,\"548\":2,\"564\":4,\"569\":1,\"577\":1,\"578\":1,\"592\":1,\"603\":1,\"625\":1,\"671\":1,\"688\":3,\"689\":3,\"735\":1,\"737\":1,\"756\":1,\"757\":2,\"762\":2,\"763\":3,\"769\":1,\"776\":4,\"787\":4,\"807\":1,\"813\":1,\"820\":1,\"825\":3,\"852\":3,\"861\":4,\"897\":1,\"898\":2,\"899\":5,\"903\":1,\"905\":8,\"921\":1,\"928\":1,\"929\":1,\"935\":2,\"943\":2,\"944\":2,\"945\":3,\"948\":8,\"951\":3,\"952\":3,\"953\":4,\"954\":8,\"974\":1,\"1003\":1,\"1017\":1,\"1018\":1,\"1020\":5,\"1080\":1,\"1100\":1,\"1101\":1,\"1109\":2,\"1110\":2,\"1115\":5,\"1116\":2,\"1126\":1,\"1139\":2,\"1157\":2,\"1158\":1,\"1197\":4,\"1203\":9,\"1204\":3,\"1218\":1,\"1233\":1,\"1253\":22,\"1254\":15,\"1255\":15,\"1273\":1,\"1329\":1,\"1375\":1,\"1382\":1,\"1398\":1,\"1438\":3,\"1446\":1,\"1466\":1,\"1469\":1,\"1470\":1,\"1486\":1,\"1488\":4,\"1518\":1,\"1525\":1}}],[\"fast\",{\"1\":{\"491\":6}}],[\"favorites\",{\"1\":{\"130\":1}}],[\"favicon\",{\"1\":{\"130\":3}}],[\"fantasy\",{\"1\":{\"71\":1}}],[\"family\",{\"0\":{\"72\":1},\"1\":{\"71\":1,\"72\":1,\"79\":2}}],[\"family>\",{\"1\":{\"71\":1}}],[\"f33\",{\"1\":{\"61\":1}}],[\"flase\",{\"1\":{\"945\":3}}],[\"flatmap\",{\"0\":{\"375\":1},\"1\":{\"375\":1}}],[\"flat\",{\"0\":{\"374\":1},\"1\":{\"374\":3}}],[\"flag\",{\"1\":{\"299\":4}}],[\"floor\",{\"1\":{\"482\":1,\"488\":2,\"503\":1,\"506\":1,\"1012\":1}}],[\"flood\",{\"1\":{\"303\":1}}],[\"flower\",{\"1\":{\"1312\":3}}],[\"flow属性是flex\",{\"1\":{\"332\":1}}],[\"flow\",{\"1\":{\"329\":6,\"332\":2}}],[\"flock\",{\"1\":{\"143\":1}}],[\"float\",{\"1\":{\"40\":2,\"250\":1,\"325\":1,\"329\":3}}],[\"flex属性是flex\",{\"1\":{\"332\":1}}],[\"flex是flexible\",{\"1\":{\"332\":1}}],[\"flex弹性布局\",{\"0\":{\"332\":1}}],[\"flex\",{\"1\":{\"44\":1,\"325\":2,\"329\":8,\"332\":19}}],[\"fixing\",{\"1\":{\"1411\":1}}],[\"fixed等非\",{\"1\":{\"39\":1}}],[\"fixed\",{\"1\":{\"35\":1,\"36\":1,\"37\":1,\"38\":2,\"40\":1,\"51\":1,\"105\":1,\"325\":1,\"439\":1}}],[\"fifo\",{\"1\":{\"1262\":1}}],[\"fifteen\",{\"1\":{\"344\":1}}],[\"five\",{\"1\":{\"1175\":1}}],[\"fibonacci\",{\"1\":{\"1001\":2}}],[\"finnally\",{\"1\":{\"1053\":2,\"1054\":1}}],[\"finish\",{\"1\":{\"299\":1}}],[\"fin\",{\"1\":{\"299\":2,\"304\":12}}],[\"final\",{\"1\":{\"250\":1}}],[\"finally\",{\"0\":{\"372\":1,\"1053\":1},\"1\":{\"249\":1,\"372\":2,\"1034\":3,\"1036\":1,\"1051\":3,\"1053\":5,\"1054\":3}}],[\"findincollection\",{\"1\":{\"1418\":3}}],[\"findindex\",{\"1\":{\"355\":2,\"859\":1}}],[\"findkthlargest\",{\"1\":{\"482\":2}}],[\"findarr\",{\"1\":{\"355\":3}}],[\"find和findindex\",{\"0\":{\"355\":1}}],[\"find\",{\"0\":{\"215\":1},\"1\":{\"200\":1,\"215\":6,\"355\":2,\"1418\":4}}],[\"firsr\",{\"1\":{\"1367\":1}}],[\"firstmethod\",{\"1\":{\"820\":1}}],[\"firstsecond\",{\"1\":{\"246\":1}}],[\"first\",{\"1\":{\"15\":3,\"16\":5,\"288\":3,\"659\":1,\"1027\":1,\"1183\":7,\"1218\":4,\"1234\":2,\"1367\":2}}],[\"firewalld\",{\"1\":{\"217\":3}}],[\"firefox\",{\"1\":{\"143\":1,\"436\":2,\"576\":1,\"1549\":1,\"1550\":1}}],[\"filter<s\",{\"1\":{\"668\":1}}],[\"filter\",{\"0\":{\"349\":1,\"667\":1},\"1\":{\"349\":1,\"667\":1,\"668\":2,\"671\":1,\"672\":1,\"673\":1,\"737\":2,\"1094\":1,\"1286\":1}}],[\"file2\",{\"1\":{\"212\":1}}],[\"file1\",{\"1\":{\"212\":1}}],[\"filename\",{\"1\":{\"205\":1,\"460\":1,\"1593\":1}}],[\"file\",{\"1\":{\"131\":2,\"215\":1}}],[\"fill\",{\"1\":{\"48\":1,\"63\":2,\"488\":1}}],[\"fit\",{\"1\":{\"48\":2}}],[\"found\",{\"1\":{\"1714\":1}}],[\"formal\",{\"1\":{\"1395\":1}}],[\"formatting\",{\"1\":{\"325\":1}}],[\"form\",{\"1\":{\"1382\":1}}],[\"ford\",{\"1\":{\"1060\":1}}],[\"foreach\",{\"0\":{\"347\":1},\"1\":{\"347\":1,\"402\":1,\"524\":1,\"540\":1,\"695\":1,\"701\":1,\"734\":2,\"983\":1,\"1356\":1,\"1393\":1,\"1419\":5,\"1580\":1}}],[\"for循环\",{\"1\":{\"341\":1}}],[\"for\",{\"0\":{\"356\":2,\"371\":1,\"388\":2,\"980\":1,\"989\":1,\"1004\":2,\"1007\":1},\"1\":{\"249\":1,\"341\":2,\"349\":1,\"356\":2,\"371\":1,\"388\":9,\"402\":1,\"467\":1,\"470\":1,\"473\":2,\"476\":1,\"479\":2,\"482\":2,\"485\":1,\"488\":16,\"491\":1,\"494\":1,\"497\":1,\"509\":3,\"512\":1,\"515\":1,\"518\":1,\"521\":1,\"528\":1,\"531\":4,\"565\":2,\"577\":1,\"606\":2,\"700\":2,\"701\":1,\"731\":1,\"792\":1,\"962\":1,\"969\":2,\"971\":2,\"980\":1,\"981\":1,\"983\":9,\"985\":1,\"986\":2,\"989\":1,\"990\":1,\"993\":2,\"994\":1,\"995\":1,\"996\":2,\"997\":1,\"998\":1,\"999\":1,\"1000\":3,\"1001\":2,\"1002\":3,\"1003\":1,\"1004\":12,\"1007\":1,\"1008\":1,\"1010\":1,\"1011\":1,\"1012\":1,\"1013\":2,\"1014\":3,\"1027\":4,\"1066\":2,\"1067\":1,\"1234\":4,\"1248\":4,\"1349\":1,\"1357\":2,\"1375\":1,\"1385\":1,\"1393\":1,\"1413\":1,\"1428\":3,\"1502\":2,\"1504\":1,\"1682\":2,\"1691\":2,\"1692\":1}}],[\"foo函数执行上下文\",{\"1\":{\"1709\":1}}],[\"foobar\",{\"1\":{\"1685\":2}}],[\"foocontext\",{\"1\":{\"1570\":1,\"1709\":6}}],[\"foo++\",{\"1\":{\"1243\":1}}],[\"footer\",{\"1\":{\"329\":1}}],[\"foo\",{\"1\":{\"245\":3,\"529\":12,\"530\":15,\"531\":7,\"533\":4,\"534\":6,\"538\":16,\"539\":13,\"540\":19,\"547\":8,\"548\":4,\"550\":1,\"551\":6,\"552\":7,\"557\":2,\"559\":5,\"560\":3,\"561\":2,\"563\":1,\"564\":6,\"565\":2,\"599\":4,\"606\":2,\"612\":1,\"613\":4,\"614\":1,\"629\":6,\"630\":2,\"631\":2,\"632\":2,\"645\":2,\"648\":8,\"650\":3,\"651\":7,\"652\":3,\"694\":7,\"701\":3,\"721\":2,\"733\":2,\"734\":4,\"735\":4,\"742\":4,\"748\":2,\"749\":1,\"756\":7,\"757\":5,\"763\":1,\"769\":9,\"776\":10,\"781\":3,\"787\":11,\"794\":2,\"795\":2,\"796\":3,\"813\":4,\"819\":3,\"825\":8,\"837\":2,\"917\":6,\"919\":6,\"920\":2,\"927\":1,\"934\":1,\"1000\":2,\"1004\":7,\"1067\":7,\"1077\":6,\"1127\":1,\"1166\":1,\"1169\":5,\"1183\":2,\"1213\":5,\"1214\":3,\"1215\":2,\"1217\":2,\"1218\":26,\"1230\":2,\"1233\":3,\"1243\":56,\"1249\":2,\"1253\":3,\"1254\":1,\"1256\":2,\"1296\":3,\"1319\":12,\"1323\":5,\"1329\":9,\"1334\":8,\"1335\":4,\"1340\":2,\"1344\":4,\"1345\":3,\"1346\":1,\"1348\":5,\"1349\":2,\"1350\":2,\"1355\":1,\"1371\":1,\"1375\":12,\"1380\":5,\"1381\":4,\"1382\":7,\"1383\":2,\"1386\":13,\"1388\":2,\"1389\":4,\"1467\":5,\"1474\":2,\"1515\":2,\"1516\":4,\"1518\":10,\"1561\":6,\"1564\":1,\"1570\":3,\"1576\":5,\"1578\":11,\"1579\":26,\"1580\":8,\"1583\":9,\"1584\":9,\"1586\":5,\"1589\":6,\"1611\":4,\"1612\":8,\"1613\":7,\"1614\":4,\"1616\":8,\"1631\":2,\"1633\":3,\"1634\":3,\"1635\":3,\"1641\":4,\"1642\":2,\"1644\":3,\"1645\":1,\"1646\":6,\"1652\":2,\"1654\":5,\"1655\":2,\"1670\":10,\"1674\":5,\"1675\":3,\"1676\":2,\"1677\":5,\"1682\":2,\"1684\":4,\"1685\":4,\"1691\":6,\"1692\":2,\"1693\":6,\"1694\":3,\"1695\":3,\"1700\":17,\"1708\":5,\"1709\":18}}],[\"fonts\",{\"1\":{\"1621\":1}}],[\"font\",{\"0\":{\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1},\"1\":{\"24\":2,\"46\":1,\"71\":5,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"79\":4}}],[\"focus\",{\"1\":{\"15\":1,\"1376\":2}}],[\"friend\",{\"1\":{\"579\":2}}],[\"friendship\",{\"1\":{\"640\":8,\"656\":2}}],[\"friends\",{\"1\":{\"569\":8,\"581\":6,\"640\":9,\"656\":1}}],[\"frozen\",{\"1\":{\"540\":1}}],[\"fromentries\",{\"0\":{\"377\":1,\"709\":1},\"1\":{\"377\":2,\"709\":1,\"710\":1,\"711\":2,\"713\":1,\"714\":2,\"715\":2,\"716\":2}}],[\"from\",{\"1\":{\"275\":1,\"392\":1,\"521\":1,\"576\":2,\"1185\":1,\"1382\":4,\"1394\":1,\"1436\":2,\"1593\":1,\"1619\":3,\"1626\":3,\"1627\":2,\"1628\":1,\"1631\":2,\"1632\":2,\"1633\":1,\"1634\":4,\"1635\":3,\"1636\":1,\"1640\":1,\"1641\":2,\"1642\":1,\"1643\":1,\"1644\":2,\"1645\":1,\"1646\":6,\"1652\":2,\"1658\":5,\"1661\":5}}],[\"frames\",{\"1\":{\"848\":1}}],[\"frame\",{\"1\":{\"317\":1}}],[\"fragment\",{\"1\":{\"148\":1}}],[\"freeze\",{\"0\":{\"704\":1},\"1\":{\"540\":6,\"704\":1,\"705\":1,\"768\":1,\"776\":3,\"803\":1}}],[\"free\",{\"1\":{\"215\":2,\"1284\":1}}],[\"fr\",{\"1\":{\"15\":1}}],[\"f\",{\"1\":{\"13\":5,\"197\":1,\"204\":1,\"212\":1,\"215\":4,\"547\":1,\"551\":2,\"689\":2,\"701\":1,\"749\":2,\"914\":1,\"923\":1,\"951\":1,\"1139\":2,\"1197\":1,\"1217\":4,\"1218\":2,\"1225\":2,\"1231\":4,\"1253\":1,\"1254\":1,\"1274\":1,\"1395\":1,\"1407\":1,\"1634\":1}}],[\"2b\",{\"1\":{\"1202\":1}}],[\"2的二进制表示为\",{\"1\":{\"1146\":1,\"1148\":1}}],[\"28\",{\"1\":{\"1102\":1,\"1541\":2}}],[\"2e64\",{\"1\":{\"899\":1}}],[\"2em\",{\"1\":{\"55\":1}}],[\"2f192\",{\"1\":{\"887\":1}}],[\"2f\",{\"1\":{\"887\":2}}],[\"262\",{\"1\":{\"527\":1,\"930\":1}}],[\"21\",{\"1\":{\"388\":1,\"586\":1,\"590\":1,\"592\":1,\"993\":1,\"1202\":1}}],[\"2147483648\",{\"1\":{\"245\":1}}],[\"2^53\",{\"1\":{\"376\":2}}],[\"24\",{\"1\":{\"355\":2,\"1431\":3}}],[\"240\",{\"1\":{\"54\":1,\"110\":1}}],[\"29\",{\"1\":{\"351\":1,\"576\":1,\"578\":2,\"579\":1,\"581\":1}}],[\"295147905179352830000\",{\"1\":{\"245\":1}}],[\"25\",{\"1\":{\"342\":1,\"497\":2,\"569\":1,\"586\":1,\"590\":1,\"592\":1,\"1412\":1}}],[\"255\",{\"1\":{\"108\":7,\"110\":4,\"220\":2,\"995\":1,\"1156\":6}}],[\"2msl\",{\"1\":{\"304\":2}}],[\"2``string\",{\"1\":{\"245\":1}}],[\"23\",{\"1\":{\"215\":1,\"524\":1,\"1403\":1,\"1474\":1}}],[\"229\",{\"1\":{\"924\":1}}],[\"228\",{\"1\":{\"716\":1}}],[\"22\",{\"1\":{\"215\":2,\"345\":1,\"353\":2,\"354\":2,\"367\":2,\"368\":2,\"377\":5,\"470\":1,\"546\":2,\"547\":1,\"569\":1,\"571\":1,\"572\":1,\"575\":1,\"659\":1,\"1490\":2,\"1491\":2,\"1492\":1,\"1497\":2}}],[\"2px\",{\"1\":{\"55\":1,\"59\":3,\"61\":1}}],[\"2015\",{\"1\":{\"1067\":1,\"1321\":1}}],[\"2014\",{\"1\":{\"245\":1}}],[\"2010\",{\"1\":{\"215\":1}}],[\"200状态\",{\"1\":{\"430\":1}}],[\"2000毫秒后我成功啦\",{\"1\":{\"371\":1,\"380\":1}}],[\"2000\",{\"1\":{\"371\":1,\"380\":1,\"383\":2,\"1345\":1,\"1425\":2}}],[\"200\",{\"1\":{\"75\":1,\"431\":1,\"1390\":1}}],[\"20\",{\"0\":{\"503\":1},\"1\":{\"51\":2,\"215\":2,\"310\":1,\"313\":1,\"344\":1,\"479\":2,\"540\":2,\"954\":8,\"993\":3,\"1243\":1,\"1264\":2,\"1266\":1,\"1267\":1,\"1271\":1,\"1390\":2,\"1412\":1,\"1438\":2,\"1540\":1}}],[\"20px\",{\"1\":{\"51\":2}}],[\"2d\",{\"1\":{\"30\":1,\"272\":1}}],[\"2\",{\"0\":{\"13\":1,\"125\":1,\"142\":1,\"149\":1,\"176\":1,\"258\":1,\"273\":1,\"289\":1,\"293\":1,\"326\":1,\"329\":1,\"342\":1,\"362\":1,\"365\":1,\"366\":1,\"368\":1,\"372\":1,\"375\":1,\"381\":1,\"384\":1,\"393\":1,\"402\":1,\"406\":1,\"408\":1,\"413\":1,\"418\":1,\"421\":1,\"423\":1,\"430\":1,\"437\":1,\"500\":1},\"1\":{\"59\":2,\"77\":2,\"131\":1,\"150\":1,\"190\":2,\"205\":1,\"208\":1,\"215\":7,\"235\":2,\"243\":1,\"244\":1,\"253\":2,\"304\":1,\"329\":1,\"341\":1,\"343\":7,\"344\":1,\"346\":2,\"347\":1,\"348\":4,\"349\":4,\"350\":2,\"352\":2,\"354\":5,\"364\":1,\"365\":1,\"374\":7,\"388\":8,\"392\":5,\"393\":4,\"394\":2,\"467\":1,\"470\":4,\"473\":4,\"476\":7,\"479\":1,\"482\":12,\"485\":2,\"488\":7,\"491\":3,\"494\":2,\"497\":2,\"500\":9,\"503\":4,\"506\":1,\"509\":3,\"512\":2,\"515\":4,\"518\":7,\"524\":4,\"529\":5,\"530\":3,\"533\":3,\"534\":3,\"538\":2,\"539\":2,\"540\":1,\"547\":1,\"548\":2,\"551\":2,\"552\":2,\"557\":1,\"559\":1,\"570\":1,\"587\":2,\"597\":1,\"603\":2,\"622\":2,\"623\":1,\"624\":1,\"632\":2,\"659\":4,\"664\":1,\"672\":2,\"689\":1,\"701\":3,\"733\":1,\"734\":3,\"742\":1,\"761\":1,\"769\":4,\"776\":3,\"787\":5,\"794\":1,\"795\":2,\"825\":2,\"843\":2,\"859\":2,\"894\":1,\"910\":1,\"913\":2,\"914\":2,\"924\":2,\"934\":1,\"943\":2,\"946\":6,\"951\":5,\"953\":2,\"955\":3,\"977\":1,\"986\":1,\"996\":3,\"997\":3,\"998\":2,\"1000\":3,\"1002\":1,\"1003\":1,\"1004\":5,\"1011\":1,\"1012\":1,\"1018\":2,\"1019\":2,\"1033\":1,\"1034\":3,\"1035\":4,\"1040\":2,\"1052\":1,\"1053\":3,\"1054\":4,\"1060\":1,\"1065\":2,\"1066\":3,\"1067\":1,\"1075\":2,\"1076\":3,\"1083\":6,\"1087\":1,\"1091\":1,\"1092\":1,\"1093\":2,\"1115\":1,\"1130\":1,\"1146\":1,\"1147\":2,\"1148\":1,\"1150\":3,\"1155\":2,\"1156\":1,\"1159\":1,\"1161\":4,\"1178\":3,\"1181\":2,\"1182\":1,\"1183\":4,\"1184\":1,\"1185\":1,\"1186\":5,\"1201\":1,\"1207\":5,\"1208\":2,\"1213\":2,\"1214\":6,\"1216\":4,\"1217\":5,\"1218\":2,\"1221\":2,\"1224\":1,\"1229\":1,\"1230\":2,\"1231\":2,\"1243\":1,\"1246\":3,\"1248\":1,\"1249\":1,\"1264\":2,\"1293\":1,\"1312\":4,\"1319\":1,\"1329\":2,\"1333\":1,\"1365\":4,\"1367\":1,\"1370\":1,\"1373\":2,\"1375\":3,\"1376\":6,\"1380\":3,\"1381\":2,\"1382\":10,\"1383\":6,\"1388\":2,\"1390\":1,\"1393\":2,\"1400\":1,\"1403\":2,\"1405\":6,\"1406\":2,\"1407\":9,\"1411\":2,\"1416\":2,\"1417\":3,\"1418\":4,\"1419\":8,\"1452\":2,\"1457\":2,\"1488\":2,\"1492\":1,\"1504\":1,\"1505\":3,\"1516\":2,\"1523\":2,\"1526\":5,\"1529\":2,\"1533\":2,\"1564\":1,\"1570\":1,\"1578\":6,\"1579\":6,\"1580\":6,\"1581\":1,\"1583\":3,\"1584\":6,\"1586\":6,\"1589\":1,\"1593\":1,\"1661\":3,\"1666\":2,\"1668\":1,\"1670\":10,\"1674\":3,\"1677\":3,\"1681\":4,\"1682\":1,\"1684\":2,\"1686\":3,\"1693\":2,\"1695\":4,\"1699\":3,\"1700\":2,\"1704\":2,\"1709\":8,\"1710\":1}}],[\"以供\",{\"1\":{\"1708\":1}}],[\"以外的值\",{\"1\":{\"1587\":1}}],[\"以外的数字\",{\"1\":{\"245\":1}}],[\"以表达式方式定义函数时都不需要名称\",{\"1\":{\"1330\":1}}],[\"以二进制的形式展示的话\",{\"1\":{\"1159\":1}}],[\"以特定的方式组合操作二进制数中对应的位\",{\"1\":{\"1144\":1}}],[\"以进入下一次循环条件判断\",{\"1\":{\"1009\":1}}],[\"以确定变量在机器代码中的位置并设置其值\",{\"1\":{\"893\":1}}],[\"以确保web的长期发展和全球互通\",{\"1\":{\"139\":1}}],[\"以某种方式来增强这个对象\",{\"1\":{\"656\":1}}],[\"以这种方式创建函数\",{\"1\":{\"592\":1}}],[\"以这种方式重设\",{\"1\":{\"578\":1}}],[\"以前是\",{\"1\":{\"436\":1}}],[\"以前有很多网页也是根据这个内核的标准来编写的\",{\"1\":{\"143\":1}}],[\"以此来判断资源是否修改\",{\"1\":{\"430\":2}}],[\"以此来实现用户的冒充\",{\"1\":{\"418\":1}}],[\"以此类推\",{\"1\":{\"59\":1,\"509\":1,\"646\":1}}],[\"以往采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝\",{\"1\":{\"412\":1}}],[\"以上代码等同于\",{\"1\":{\"1702\":1}}],[\"以上代码的第一种写法中\",{\"1\":{\"1184\":1}}],[\"以上\",{\"1\":{\"1543\":1}}],[\"以上的代码的\",{\"1\":{\"1375\":1}}],[\"以上的这些模式非常脆弱\",{\"1\":{\"412\":1}}],[\"以上版本可行\",{\"1\":{\"983\":1}}],[\"以上方法都可以实现在本地多个标签页之间进行通信\",{\"1\":{\"397\":1}}],[\"以上是\",{\"1\":{\"250\":1}}],[\"以建立服务端对客户端的连接\",{\"1\":{\"301\":1}}],[\"以免后续处理中\",{\"1\":{\"292\":1}}],[\"以对角线切割为\",{\"1\":{\"270\":1}}],[\"以避免被当成是行注释符号\",{\"1\":{\"245\":1}}],[\"以g为单位输出内存的使用量\",{\"1\":{\"215\":1}}],[\"以只读模式打开文件\",{\"1\":{\"205\":1}}],[\"以及允许私有成员的存在\",{\"1\":{\"1711\":1}}],[\"以及这一行\",{\"1\":{\"1684\":2}}],[\"以及如何查找\",{\"1\":{\"1670\":1}}],[\"以及组件里的\",{\"1\":{\"1621\":2}}],[\"以及静态资源图片\",{\"1\":{\"1621\":1}}],[\"以及静态资源图片组合一个集合体\",{\"1\":{\"1621\":1}}],[\"以及操作\",{\"1\":{\"1551\":1}}],[\"以及第\",{\"1\":{\"1538\":1}}],[\"以及其他声明\",{\"1\":{\"1065\":1}}],[\"以及对象从其构造函数原型中继承的属性\",{\"1\":{\"983\":1}}],[\"以及不能修改已有属性的值\",{\"1\":{\"706\":1}}],[\"以及是否可以修改属性描述符的特性\",{\"1\":{\"530\":1}}],[\"以及是否可以修改\",{\"1\":{\"528\":1}}],[\"以及它自身是否参与到块或者内联格式化上下文\",{\"1\":{\"329\":1}}],[\"以及该行之后的三行\",{\"1\":{\"215\":1}}],[\"以及还要加载图片\",{\"1\":{\"157\":1}}],[\"以及\",{\"1\":{\"153\":1,\"544\":1,\"1282\":2,\"1537\":1,\"1580\":1,\"1670\":1}}],[\"以及使用\",{\"1\":{\"152\":1}}],[\"以太网协议\",{\"1\":{\"152\":2}}],[\"以报文段为单位\",{\"1\":{\"152\":1}}],[\"以告诉浏览器在解析完成\",{\"1\":{\"131\":1}}],[\"以分号\",{\"1\":{\"121\":1}}],[\"以后的最高位比\",{\"1\":{\"245\":1}}],[\"以后的章节中会学到更多相关的内容\",{\"1\":{\"120\":1}}],[\"以后为元素设置样式信息时更加方便\",{\"1\":{\"117\":1}}],[\"以连接到另一个页面\",{\"1\":{\"115\":1}}],[\"以产生多种多样的色光\",{\"1\":{\"108\":1}}],[\"以逗号分隔\",{\"1\":{\"59\":1}}],[\"以便后续逻辑可以调用\",{\"1\":{\"1504\":1}}],[\"以便让\",{\"1\":{\"1470\":1}}],[\"以便随时查看\",{\"1\":{\"1289\":1}}],[\"以便当分配的内存不再使用时\",{\"1\":{\"1276\":1}}],[\"以便处理不久后到来的新请求\",{\"1\":{\"156\":1}}],[\"以便\",{\"1\":{\"30\":1}}],[\"以\",{\"1\":{\"12\":1,\"130\":1,\"153\":1,\"215\":1,\"242\":2,\"656\":1,\"946\":1}}],[\"以唯一标识符\",{\"1\":{\"12\":1}}],[\"以文档语言对象类型作为选择符\",{\"1\":{\"12\":1}}],[\"以下面的例子为例\",{\"1\":{\"1572\":1}}],[\"以下三个变量在箭头函数之中也是不存在的\",{\"1\":{\"1375\":1}}],[\"以下情况需要重点考虑\",{\"1\":{\"1101\":1}}],[\"以下示例中使用\",{\"1\":{\"1243\":1}}],[\"以下示例创建一个类型为\",{\"1\":{\"1048\":1}}],[\"以下示例显示了与\",{\"1\":{\"1004\":1}}],[\"以下没有意义\",{\"1\":{\"1002\":1}}],[\"以下均返回\",{\"1\":{\"914\":2}}],[\"以下写法无效\",{\"1\":{\"632\":1}}],[\"以下分别解释\",{\"1\":{\"464\":1}}],[\"以下关键字\",{\"1\":{\"249\":1}}],[\"以下代码为\",{\"1\":{\"242\":1}}],[\"以下\",{\"1\":{\"2\":1}}],[\"类方法遮蔽\",{\"0\":{\"1491\":1}}],[\"类支持在原型上定义访问器属性\",{\"1\":{\"1486\":1}}],[\"类和普通函数的共性\",{\"0\":{\"1485\":1}}],[\"类和对象是不同的实体\",{\"1\":{\"230\":1}}],[\"类构造函数\",{\"0\":{\"1480\":1}}],[\"类就是对象的模版\",{\"1\":{\"1473\":1}}],[\"类来处理\",{\"1\":{\"924\":1}}],[\"类数组借用\",{\"1\":{\"1419\":1}}],[\"类数组\",{\"0\":{\"734\":1,\"795\":1}}],[\"类数组对象\",{\"1\":{\"393\":1,\"734\":1}}],[\"类式继承\",{\"1\":{\"684\":1}}],[\"类内部只有静态方法\",{\"1\":{\"632\":1}}],[\"类相当于实例的原型\",{\"1\":{\"629\":1}}],[\"类通过\",{\"1\":{\"619\":1}}],[\"类上\",{\"1\":{\"603\":1}}],[\"类必须使用\",{\"1\":{\"602\":1}}],[\"类中的所有方法都是不可枚举的\",{\"1\":{\"1483\":1}}],[\"类中的所有方法都是\",{\"1\":{\"599\":1}}],[\"类中的方法无需添加\",{\"1\":{\"599\":1}}],[\"类声明\",{\"0\":{\"1483\":1}}],[\"类声明中的代码自动强行运行在严格模式下\",{\"1\":{\"1483\":1}}],[\"类声明中的代码自动强行运行在\",{\"1\":{\"599\":1}}],[\"类声明不能提升\",{\"1\":{\"599\":1,\"1483\":1}}],[\"类声明和函数声明的区别和特点\",{\"1\":{\"599\":1,\"1483\":1}}],[\"类也是通过\",{\"1\":{\"599\":1}}],[\"类的静态属性只需在上述的实例属性写法前加上\",{\"1\":{\"632\":1}}],[\"类的静态属性无法直接在类内部直接定义\",{\"1\":{\"632\":1}}],[\"类的静态成员包括\",{\"1\":{\"628\":1}}],[\"类的原型对象\",{\"0\":{\"624\":1}}],[\"类的继承是按照下面的模式实现的\",{\"1\":{\"624\":1}}],[\"类的继承\",{\"0\":{\"618\":1}}],[\"类的方法内部如果含有\",{\"1\":{\"607\":1}}],[\"类的属性名\",{\"1\":{\"605\":1}}],[\"类的所有实例共享一个原型对象\",{\"1\":{\"603\":1}}],[\"类的所有方法都定义在类的\",{\"1\":{\"599\":1}}],[\"类的组成\",{\"0\":{\"601\":1}}],[\"类的表达式\",{\"0\":{\"600\":1}}],[\"类的实例属性可以用等式\",{\"1\":{\"632\":1}}],[\"类的实例\",{\"1\":{\"599\":1,\"607\":1}}],[\"类的声明式\",{\"0\":{\"599\":1}}],[\"类的基本语法\",{\"0\":{\"596\":1}}],[\"类有两种表现形式\",{\"1\":{\"598\":1,\"1484\":1}}],[\"类选择器\",{\"1\":{\"336\":1,\"337\":1}}],[\"类选择符\",{\"1\":{\"12\":1,\"17\":2}}],[\"类与类之间的关系\",{\"1\":{\"229\":1}}],[\"类可以为程序提供模版和结构\",{\"1\":{\"229\":1}}],[\"类定义了事物的属性和它可以做到的\",{\"1\":{\"229\":1}}],[\"类定义了一件事物的抽象特点\",{\"1\":{\"229\":1}}],[\"类型将会强制转为字符串\",{\"1\":{\"1107\":1}}],[\"类型会被\",{\"1\":{\"1018\":1}}],[\"类型会被自动确定\",{\"1\":{\"917\":1}}],[\"类型对象\",{\"1\":{\"953\":1}}],[\"类型都会遵循一个原则\",{\"1\":{\"951\":1}}],[\"类型都为\",{\"1\":{\"945\":1}}],[\"类型和\",{\"1\":{\"951\":1}}],[\"类型等非\",{\"1\":{\"949\":1}}],[\"类型之后\",{\"1\":{\"946\":1}}],[\"类型的属性名或者数组索引\",{\"1\":{\"1107\":1}}],[\"类型的\",{\"1\":{\"955\":1}}],[\"类型的数据的时候\",{\"1\":{\"949\":1}}],[\"类型的数组集合\",{\"1\":{\"803\":1}}],[\"类型的值都是\",{\"1\":{\"948\":1}}],[\"类型的规则\",{\"1\":{\"943\":1}}],[\"类型转换的例外是使用\",{\"1\":{\"1200\":1}}],[\"类型转换规则表\",{\"1\":{\"948\":1}}],[\"类型转换\",{\"0\":{\"941\":1}}],[\"类型检测的方法\",{\"1\":{\"933\":1}}],[\"类型检测\",{\"0\":{\"933\":1}}],[\"类型再进行判断\",{\"1\":{\"903\":1}}],[\"类型外的数字均返回\",{\"1\":{\"898\":1}}],[\"类型声明\",{\"1\":{\"668\":1,\"730\":1,\"746\":1,\"791\":1,\"829\":1}}],[\"类型值\",{\"1\":{\"546\":1,\"780\":1,\"817\":1,\"835\":1}}],[\"类型或者\",{\"1\":{\"949\":1}}],[\"类型或者默认值\",{\"1\":{\"946\":1}}],[\"类型或\",{\"1\":{\"544\":1,\"546\":1,\"951\":2,\"1302\":1,\"1306\":1}}],[\"类型\",{\"1\":{\"544\":2,\"548\":1,\"668\":1,\"730\":1,\"746\":1,\"791\":1,\"829\":1,\"869\":1,\"874\":1,\"885\":1,\"898\":2,\"903\":3,\"909\":1,\"913\":4,\"943\":4,\"944\":3,\"946\":3,\"948\":5,\"949\":1,\"951\":6,\"982\":2,\"1122\":1,\"1197\":1,\"1263\":1,\"1302\":4,\"1306\":4,\"1310\":4}}],[\"类型可以在运行时变更\",{\"1\":{\"230\":1}}],[\"类型理论中的一个概念\",{\"1\":{\"229\":1}}],[\"类型去解析响应内容\",{\"1\":{\"155\":1}}],[\"类型选择符\",{\"1\":{\"12\":1}}],[\"类\",{\"0\":{\"1482\":1,\"1743\":1},\"1\":{\"15\":1,\"229\":2,\"596\":1,\"930\":1,\"999\":1}}],[\"类似地\",{\"1\":{\"1586\":1}}],[\"类似于在浏览器端的\",{\"1\":{\"1616\":1}}],[\"类似于\",{\"1\":{\"1488\":1,\"1593\":1}}],[\"类似于全局对象\",{\"1\":{\"846\":1}}],[\"类似数组的对象都有一个\",{\"1\":{\"1219\":1}}],[\"类似的方法还有\",{\"1\":{\"949\":1}}],[\"类似\",{\"1\":{\"2\":1,\"1014\":1}}],[\"ecstack\",{\"1\":{\"1557\":11,\"1572\":2,\"1709\":1}}],[\"ecs\",{\"1\":{\"1557\":1}}],[\"ecmascrpt\",{\"1\":{\"1018\":1}}],[\"ecmascript6\",{\"1\":{\"250\":1,\"946\":1}}],[\"ecmascript5\",{\"1\":{\"234\":1,\"576\":1,\"578\":1,\"938\":1,\"983\":1}}],[\"ecmascript3\",{\"1\":{\"234\":1,\"250\":2}}],[\"ecmascript\",{\"1\":{\"233\":2,\"246\":2,\"576\":1,\"590\":2,\"592\":1,\"596\":2,\"640\":1,\"644\":1,\"917\":1,\"928\":1,\"930\":1,\"942\":1,\"983\":1,\"1063\":1,\"1065\":1,\"1067\":1,\"1069\":2,\"1132\":1,\"1238\":1,\"1255\":1,\"1302\":1,\"1311\":1,\"1321\":1,\"1625\":1,\"1650\":1,\"1695\":1}}],[\"ecma\",{\"1\":{\"527\":1,\"930\":1}}],[\"edge\",{\"1\":{\"1550\":1}}],[\"edgehtml\",{\"1\":{\"1550\":2}}],[\"equality\",{\"1\":{\"1200\":1}}],[\"equivalent\",{\"1\":{\"329\":1}}],[\"eq\",{\"1\":{\"955\":2}}],[\"e6\",{\"1\":{\"881\":1,\"887\":1}}],[\"e5\",{\"1\":{\"870\":1,\"875\":1,\"881\":2,\"887\":2}}],[\"e4\",{\"1\":{\"870\":1,\"875\":1,\"881\":2,\"887\":2}}],[\"eye\",{\"1\":{\"635\":3,\"662\":3}}],[\"err\",{\"1\":{\"372\":4,\"383\":4,\"1052\":3,\"1053\":3,\"1054\":7,\"1055\":2,\"1344\":2,\"1348\":1,\"1349\":1,\"1352\":2,\"1357\":1,\"1593\":2}}],[\"errorcallback\",{\"1\":{\"1458\":2}}],[\"error2\",{\"1\":{\"1047\":1}}],[\"error\",{\"1\":{\"161\":1,\"242\":1,\"251\":1,\"383\":1,\"392\":1,\"393\":1,\"394\":1,\"579\":1,\"917\":1,\"1034\":1,\"1052\":2,\"1053\":2,\"1054\":7,\"1218\":2,\"1344\":2,\"1348\":4,\"1349\":1,\"1449\":6,\"1458\":2,\"1593\":1,\"1595\":2,\"1631\":1,\"1654\":3,\"1694\":1}}],[\"es2015+\",{\"1\":{\"1109\":1}}],[\"es2017\",{\"1\":{\"698\":1,\"724\":1,\"841\":1}}],[\"es3\",{\"1\":{\"926\":1}}],[\"es5\",{\"0\":{\"586\":1,\"1481\":1},\"1\":{\"551\":2,\"593\":1,\"597\":1,\"599\":2,\"603\":2,\"604\":1,\"619\":1,\"624\":1,\"926\":1,\"1074\":1,\"1178\":1,\"1181\":2,\"1183\":1,\"1295\":4,\"1375\":3,\"1376\":1,\"1398\":1,\"1481\":1,\"1483\":1,\"1581\":1,\"1619\":1,\"1691\":2}}],[\"es12\",{\"0\":{\"382\":1}}],[\"es11\",{\"0\":{\"379\":1}}],[\"es10\",{\"0\":{\"373\":1}}],[\"es9\",{\"0\":{\"370\":1}}],[\"es8\",{\"0\":{\"366\":1},\"1\":{\"698\":1,\"724\":1,\"841\":1}}],[\"es7\",{\"0\":{\"363\":1},\"1\":{\"1427\":1}}],[\"established\",{\"1\":{\"301\":1,\"303\":1}}],[\"es6+\",{\"1\":{\"1619\":1}}],[\"es6以上常用语法\",{\"0\":{\"362\":1}}],[\"es6的常用语法\",{\"0\":{\"340\":1}}],[\"es6\",{\"0\":{\"587\":1,\"593\":1,\"1295\":1,\"1482\":1,\"1619\":1},\"1\":{\"249\":1,\"544\":1,\"551\":2,\"559\":2,\"597\":1,\"599\":1,\"610\":1,\"621\":1,\"622\":1,\"625\":4,\"632\":1,\"946\":1,\"955\":1,\"1067\":1,\"1074\":2,\"1178\":1,\"1181\":2,\"1183\":1,\"1217\":1,\"1222\":1,\"1295\":5,\"1375\":1,\"1382\":1,\"1398\":1,\"1399\":1,\"1473\":1,\"1482\":1,\"1483\":1,\"1588\":1,\"1589\":1,\"1618\":1,\"1619\":2,\"1620\":2,\"1636\":3,\"1655\":1,\"1695\":1}}],[\"es6中的简略表示方法\",{\"1\":{\"245\":1}}],[\"escape\",{\"1\":{\"878\":1}}],[\"esc\",{\"1\":{\"205\":3}}],[\"ef\",{\"1\":{\"221\":1}}],[\"etag文件改动\",{\"1\":{\"430\":1}}],[\"etage\",{\"1\":{\"430\":1}}],[\"etag\",{\"1\":{\"430\":3}}],[\"eth0\",{\"1\":{\"220\":1}}],[\"etc\",{\"1\":{\"186\":1,\"205\":1,\"215\":2,\"220\":1,\"1534\":1}}],[\"everything\",{\"1\":{\"1651\":1}}],[\"every\",{\"0\":{\"351\":1},\"1\":{\"351\":1}}],[\"events\",{\"1\":{\"1533\":3}}],[\"eventloop\",{\"1\":{\"457\":1,\"1552\":1}}],[\"event\",{\"1\":{\"455\":2,\"457\":1,\"1353\":1,\"1375\":2,\"1532\":1,\"1595\":1}}],[\"evening\",{\"1\":{\"354\":3}}],[\"even\",{\"1\":{\"350\":3}}],[\"evaluation\",{\"1\":{\"1416\":1}}],[\"evaluates\",{\"1\":{\"1020\":2}}],[\"eval\",{\"0\":{\"890\":1,\"893\":1},\"1\":{\"251\":1,\"584\":1,\"848\":1,\"890\":3,\"891\":3,\"892\":3,\"893\":7,\"894\":2,\"1556\":1,\"1620\":2}}],[\"evalerror\",{\"1\":{\"251\":1}}],[\"ev\",{\"1\":{\"215\":1}}],[\"ee9ca7\",{\"1\":{\"100\":1}}],[\"else\",{\"1\":{\"249\":1,\"288\":2,\"290\":1,\"476\":2,\"482\":1,\"488\":1,\"500\":3,\"503\":2,\"512\":2,\"515\":1,\"737\":1,\"1017\":4,\"1018\":1,\"1019\":3,\"1033\":1,\"1041\":1,\"1048\":1,\"1197\":4,\"1209\":1,\"1217\":1,\"1253\":1,\"1385\":4,\"1390\":1,\"1433\":1,\"1449\":2,\"1466\":2,\"1469\":2,\"1470\":2,\"1596\":1,\"1634\":1}}],[\"el5\",{\"1\":{\"215\":2}}],[\"ellipsis\",{\"1\":{\"87\":1}}],[\"elements\",{\"1\":{\"329\":1}}],[\"element\",{\"1\":{\"11\":2,\"16\":1,\"350\":3,\"1466\":6,\"1469\":10,\"1470\":6}}],[\"eacharr\",{\"1\":{\"347\":2}}],[\"each\",{\"1\":{\"86\":2}}],[\"engine\",{\"1\":{\"1550\":1}}],[\"engineer\",{\"1\":{\"569\":1,\"576\":1,\"578\":2,\"579\":1,\"581\":1}}],[\"entry\",{\"1\":{\"996\":2}}],[\"entries\",{\"0\":{\"368\":1,\"698\":1},\"1\":{\"368\":3,\"698\":1,\"699\":1,\"701\":4,\"710\":2,\"711\":1,\"713\":3,\"716\":1,\"803\":1}}],[\"encodeduri\",{\"1\":{\"887\":3}}],[\"encodeduristring\",{\"1\":{\"869\":2,\"874\":3}}],[\"encodedftpuri\",{\"1\":{\"881\":3}}],[\"encodeuricomponent\",{\"0\":{\"884\":1},\"1\":{\"251\":1,\"875\":1,\"880\":2,\"884\":1,\"885\":2,\"886\":2,\"887\":1}}],[\"encodeuri\",{\"0\":{\"878\":1},\"1\":{\"251\":1,\"869\":1,\"870\":1,\"878\":1,\"879\":1,\"880\":2,\"881\":1,\"886\":1}}],[\"encapsulation\",{\"1\":{\"229\":1}}],[\"enumerable\",{\"1\":{\"531\":3,\"548\":2,\"578\":2,\"599\":1,\"688\":1,\"689\":1,\"694\":2,\"695\":1,\"721\":1,\"726\":2,\"735\":1,\"776\":2,\"787\":2,\"796\":1,\"819\":2,\"825\":5,\"852\":1,\"1486\":1}}],[\"enumberable\",{\"1\":{\"528\":1,\"532\":2}}],[\"enum\",{\"1\":{\"250\":1,\"737\":4}}],[\"envelope\",{\"1\":{\"161\":1}}],[\"en\",{\"1\":{\"130\":1,\"1323\":3}}],[\"ensp\",{\"1\":{\"121\":1}}],[\"endtime\",{\"1\":{\"1505\":2}}],[\"end\",{\"1\":{\"81\":2,\"332\":3,\"1052\":1,\"1329\":1,\"1438\":2}}],[\"enabled\",{\"1\":{\"15\":1}}],[\"exception\",{\"1\":{\"813\":1,\"1055\":1}}],[\"exist\",{\"1\":{\"756\":1}}],[\"exit\",{\"1\":{\"192\":1}}],[\"extensible\",{\"1\":{\"538\":2,\"539\":2,\"540\":3,\"768\":1}}],[\"extends\",{\"1\":{\"249\":1,\"619\":3,\"621\":1,\"622\":2,\"623\":2,\"624\":2,\"625\":3,\"631\":1,\"668\":1,\"1436\":1,\"1490\":3,\"1491\":1,\"1492\":1,\"1493\":1}}],[\"ext2\",{\"1\":{\"215\":1}}],[\"extraordinary\",{\"1\":{\"899\":1}}],[\"extra\",{\"1\":{\"77\":2}}],[\"example2\",{\"1\":{\"548\":1}}],[\"example1\",{\"1\":{\"548\":1}}],[\"example\",{\"1\":{\"215\":1,\"1139\":1,\"1230\":4,\"1403\":3,\"1405\":2,\"1458\":1,\"1502\":1}}],[\"execution\",{\"1\":{\"1532\":1,\"1552\":1,\"1557\":1}}],[\"execute\",{\"1\":{\"1356\":1,\"1357\":1,\"1358\":1}}],[\"exec\",{\"1\":{\"215\":2}}],[\"exponent\",{\"1\":{\"1207\":1,\"1209\":3}}],[\"export命令规定的是\",{\"1\":{\"1654\":1}}],[\"exports\",{\"1\":{\"1616\":40,\"1618\":3,\"1650\":1}}],[\"export2\",{\"1\":{\"1599\":2,\"1603\":1}}],[\"export1\",{\"1\":{\"1599\":2,\"1603\":1}}],[\"export\",{\"0\":{\"1649\":1},\"1\":{\"249\":1,\"613\":1,\"1436\":1,\"1593\":1,\"1619\":1,\"1640\":1,\"1641\":2,\"1642\":1,\"1643\":1,\"1644\":2,\"1645\":1,\"1646\":3,\"1649\":1,\"1650\":1,\"1651\":9,\"1652\":5,\"1654\":9,\"1655\":2,\"1658\":5,\"1661\":7}}],[\"expr\",{\"1\":{\"1165\":1,\"1319\":2}}],[\"expression\",{\"1\":{\"245\":1,\"975\":1,\"981\":1,\"982\":1,\"1008\":2,\"1009\":2,\"1014\":1,\"1031\":1,\"1034\":1,\"1035\":1,\"1040\":2,\"1041\":1,\"1046\":1,\"1059\":2,\"1087\":3,\"1098\":2,\"1197\":2,\"1317\":2,\"1321\":2,\"1613\":1,\"1686\":1}}],[\"expires\",{\"1\":{\"429\":3,\"464\":2}}],[\"expected\",{\"1\":{\"350\":1,\"351\":1,\"352\":1,\"861\":2}}],[\"explorer\",{\"1\":{\"144\":1,\"1550\":1}}],[\"expanded\",{\"1\":{\"77\":4}}],[\"ex\",{\"1\":{\"24\":1}}],[\"emsp\",{\"1\":{\"121\":1}}],[\"employee\",{\"1\":{\"1102\":4}}],[\"emphasis\",{\"1\":{\"83\":1}}],[\"empty\",{\"1\":{\"15\":1,\"1014\":1,\"1093\":1,\"1094\":2,\"1625\":1}}],[\"em\",{\"1\":{\"24\":1}}],[\"e~f\",{\"1\":{\"13\":1}}],[\"e+f\",{\"1\":{\"13\":1}}],[\"e>f\",{\"1\":{\"13\":1}}],[\"e\",{\"1\":{\"12\":5,\"13\":5,\"14\":14,\"15\":41,\"16\":10,\"17\":1,\"381\":1,\"570\":1,\"571\":1,\"572\":1,\"575\":1,\"689\":2,\"1000\":3,\"1048\":3,\"1181\":3,\"1184\":1,\"1219\":3,\"1253\":1,\"1254\":1,\"1273\":1,\"1348\":2,\"1350\":4,\"1436\":5}}],[\"描述符置为\",{\"1\":{\"776\":1,\"787\":1}}],[\"描述了属性\",{\"1\":{\"527\":1}}],[\"描述\",{\"0\":{\"969\":1,\"976\":1,\"983\":1,\"1025\":1,\"1311\":1,\"1318\":1,\"1322\":1},\"1\":{\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"960\":1,\"968\":1,\"982\":1,\"1067\":1,\"1151\":1,\"1201\":1,\"1202\":1,\"1207\":1,\"1302\":1,\"1306\":1,\"1310\":1}}],[\"1byte\",{\"1\":{\"1284\":1}}],[\"1反码二进制表示\",{\"1\":{\"1147\":1}}],[\"1的反码减1\",{\"1\":{\"1147\":1}}],[\"1的二进制表示为\",{\"1\":{\"1144\":2,\"1145\":1,\"1146\":1,\"1147\":1,\"1148\":1,\"1149\":1}}],[\"1的区间\",{\"1\":{\"494\":1}}],[\"1false\",{\"1\":{\"951\":1}}],[\"1function\",{\"1\":{\"951\":2}}],[\"1true\",{\"1\":{\"951\":2}}],[\"1e+21\",{\"1\":{\"943\":2}}],[\"1e21\",{\"1\":{\"943\":2}}],[\"1em\",{\"1\":{\"55\":3,\"59\":2}}],[\"1报错\",{\"1\":{\"557\":1}}],[\"1增加了\",{\"1\":{\"464\":1}}],[\"1秒后\",{\"1\":{\"383\":1}}],[\"1是es10之前\",{\"1\":{\"376\":1}}],[\"18\",{\"0\":{\"358\":1,\"494\":1},\"1\":{\"392\":6,\"393\":5,\"394\":5,\"636\":2,\"659\":1,\"726\":2,\"1243\":1,\"1537\":1,\"1538\":2,\"1539\":1}}],[\"17\",{\"0\":{\"357\":1,\"491\":1},\"1\":{\"914\":1,\"1142\":1,\"1158\":1,\"1243\":1}}],[\"1415926\",{\"1\":{\"1693\":1}}],[\"14more\",{\"1\":{\"910\":1}}],[\"14\",{\"0\":{\"354\":1,\"482\":1},\"1\":{\"910\":2,\"1124\":1,\"1155\":1,\"1243\":1,\"1693\":1}}],[\"130\",{\"1\":{\"671\":1}}],[\"134\",{\"1\":{\"506\":1}}],[\"13\",{\"0\":{\"353\":1,\"479\":1},\"1\":{\"349\":2,\"351\":1,\"470\":1,\"497\":2,\"914\":1,\"1243\":1}}],[\"15ms\",{\"1\":{\"1543\":1}}],[\"15px\",{\"1\":{\"914\":1}}],[\"15e2\",{\"1\":{\"914\":1}}],[\"15\",{\"0\":{\"355\":1,\"485\":1},\"1\":{\"344\":1,\"479\":2,\"515\":1,\"914\":4,\"1048\":1,\"1142\":1,\"1243\":1,\"1267\":1,\"1412\":2,\"1581\":1,\"1681\":2}}],[\"1k+\",{\"1\":{\"303\":1}}],[\"1998\",{\"1\":{\"1109\":1,\"1329\":1}}],[\"1990\",{\"1\":{\"245\":1}}],[\"19\",{\"0\":{\"359\":1,\"497\":1},\"1\":{\"1243\":1}}],[\"1974\",{\"1\":{\"245\":1}}],[\"1954\",{\"1\":{\"245\":1}}],[\"192\",{\"1\":{\"215\":1,\"881\":3,\"887\":2}}],[\"160\",{\"1\":{\"1497\":2}}],[\"16进制颜色字符串\",{\"1\":{\"1156\":2}}],[\"16进制颜色值转rgb\",{\"1\":{\"1156\":1}}],[\"16\",{\"0\":{\"356\":1,\"488\":1},\"1\":{\"239\":1,\"913\":1,\"914\":3,\"927\":1,\"1156\":4,\"1243\":1}}],[\"168\",{\"1\":{\"215\":2,\"220\":3,\"881\":3,\"887\":3}}],[\"16px\",{\"1\":{\"59\":1}}],[\"1+2+4=7\",{\"1\":{\"209\":1}}],[\"1110\",{\"1\":{\"1155\":1,\"1160\":1}}],[\"11111101\",{\"1\":{\"1147\":1}}],[\"11111110\",{\"1\":{\"1147\":1}}],[\"11111111\",{\"1\":{\"1147\":6}}],[\"1111\",{\"1\":{\"914\":1,\"1160\":3}}],[\"112\",{\"1\":{\"716\":1}}],[\"11\",{\"0\":{\"158\":1,\"351\":1,\"473\":1},\"1\":{\"349\":2,\"374\":2,\"388\":1,\"470\":1,\"506\":1,\"515\":1,\"951\":3,\"993\":1,\"1094\":1,\"1190\":2,\"1192\":1,\"1243\":1,\"1380\":1}}],[\"12\",{\"0\":{\"352\":1,\"476\":1},\"1\":{\"349\":1,\"374\":2,\"497\":2,\"503\":2,\"625\":1,\"671\":1,\"859\":1,\"914\":1,\"1048\":1,\"1207\":1,\"1243\":1,\"1312\":1,\"1376\":2,\"1674\":1}}],[\"123456\",{\"1\":{\"1375\":1}}],[\"1234567890\",{\"1\":{\"245\":1}}],[\"1234\",{\"1\":{\"927\":1}}],[\"123\",{\"1\":{\"246\":1,\"388\":4,\"506\":1,\"550\":1,\"653\":1,\"914\":1,\"936\":1,\"1218\":2,\"1220\":1,\"1255\":1,\"1273\":1,\"1419\":1,\"1502\":1}}],[\"120\",{\"1\":{\"110\":1,\"1385\":3}}],[\"12px\",{\"1\":{\"46\":1,\"94\":1}}],[\"10a\",{\"1\":{\"944\":1}}],[\"10n\",{\"1\":{\"929\":3}}],[\"1035\",{\"1\":{\"716\":1}}],[\"1026\",{\"1\":{\"497\":2}}],[\"101服务器的opt目录下\",{\"1\":{\"215\":1}}],[\"101\",{\"1\":{\"215\":1,\"1402\":1}}],[\"10\",{\"0\":{\"157\":1,\"350\":1,\"470\":1},\"1\":{\"110\":2,\"344\":1,\"348\":1,\"349\":1,\"351\":1,\"352\":1,\"374\":2,\"497\":1,\"506\":2,\"509\":2,\"671\":1,\"672\":1,\"689\":1,\"716\":1,\"854\":1,\"914\":6,\"923\":1,\"929\":3,\"943\":4,\"944\":2,\"951\":2,\"953\":3,\"954\":2,\"962\":1,\"971\":1,\"977\":2,\"993\":3,\"1010\":1,\"1012\":4,\"1013\":2,\"1060\":1,\"1094\":3,\"1137\":2,\"1142\":1,\"1147\":1,\"1190\":1,\"1191\":1,\"1192\":2,\"1193\":2,\"1207\":1,\"1243\":1,\"1248\":1,\"1266\":1,\"1267\":1,\"1312\":3,\"1383\":7,\"1390\":2,\"1393\":1,\"1412\":2,\"1418\":1,\"1428\":1,\"1497\":1,\"1537\":1,\"1538\":1,\"1541\":1,\"1543\":2,\"1614\":1,\"1682\":1}}],[\"10px\",{\"1\":{\"59\":1}}],[\"1001\",{\"1\":{\"1142\":1}}],[\"100f\",{\"1\":{\"861\":1}}],[\"1000000\",{\"1\":{\"1428\":1}}],[\"1000000000\",{\"1\":{\"384\":1}}],[\"100000\",{\"1\":{\"1012\":1}}],[\"10000\",{\"1\":{\"1012\":2}}],[\"1000毫秒后我失败啦\",{\"1\":{\"380\":1}}],[\"1000毫秒后我成功啦\",{\"1\":{\"371\":2,\"383\":1}}],[\"1000\",{\"1\":{\"51\":2,\"371\":2,\"380\":1,\"383\":2,\"854\":1,\"1001\":1,\"1012\":2,\"1160\":1,\"1285\":1,\"1287\":1,\"1288\":1,\"1312\":1,\"1345\":1,\"1352\":2,\"1375\":2,\"1424\":1,\"1426\":1,\"1427\":1,\"1435\":3,\"1685\":1}}],[\"1000ms\",{\"1\":{\"27\":1,\"1427\":1}}],[\"100\",{\"1\":{\"24\":4,\"37\":1,\"48\":1,\"50\":3,\"75\":1,\"110\":3,\"206\":1,\"220\":1,\"694\":2,\"763\":2,\"881\":3,\"887\":3,\"924\":1,\"934\":1,\"1012\":2,\"1142\":1,\"1266\":1,\"1303\":1,\"1375\":7,\"1390\":2,\"1402\":2,\"1431\":2,\"1436\":3,\"1438\":2,\"1502\":3,\"1579\":1,\"1580\":1}}],[\"1s\",{\"1\":{\"27\":1}}],[\"1px\",{\"1\":{\"15\":2,\"59\":1}}],[\"1\",{\"0\":{\"12\":1,\"114\":1,\"139\":1,\"148\":1,\"175\":1,\"181\":1,\"257\":1,\"270\":1,\"286\":1,\"288\":1,\"292\":1,\"324\":1,\"325\":1,\"340\":1,\"341\":1,\"363\":1,\"364\":1,\"367\":1,\"371\":1,\"374\":1,\"380\":1,\"383\":1,\"392\":1,\"400\":1,\"401\":1,\"407\":1,\"412\":1,\"416\":1,\"417\":1,\"422\":1,\"429\":1,\"436\":1,\"467\":1},\"1\":{\"17\":4,\"18\":1,\"25\":1,\"29\":1,\"63\":1,\"77\":2,\"108\":1,\"156\":2,\"205\":1,\"208\":1,\"215\":6,\"220\":5,\"234\":2,\"235\":2,\"242\":2,\"243\":1,\"245\":2,\"253\":2,\"301\":2,\"304\":2,\"313\":2,\"332\":1,\"341\":1,\"343\":7,\"347\":1,\"348\":3,\"349\":3,\"350\":1,\"351\":1,\"352\":4,\"354\":5,\"355\":2,\"364\":2,\"374\":6,\"376\":1,\"381\":2,\"384\":1,\"388\":9,\"392\":7,\"393\":7,\"394\":3,\"467\":5,\"470\":4,\"473\":4,\"476\":27,\"479\":3,\"482\":13,\"485\":6,\"488\":27,\"491\":5,\"494\":6,\"497\":5,\"500\":20,\"503\":10,\"506\":5,\"509\":28,\"512\":2,\"515\":6,\"518\":11,\"524\":10,\"529\":5,\"530\":4,\"531\":4,\"534\":2,\"538\":6,\"539\":4,\"540\":8,\"547\":4,\"548\":5,\"551\":1,\"552\":3,\"556\":3,\"557\":4,\"559\":3,\"563\":9,\"564\":2,\"587\":1,\"597\":1,\"622\":1,\"623\":1,\"624\":1,\"625\":1,\"659\":4,\"662\":2,\"664\":1,\"672\":2,\"679\":2,\"689\":1,\"701\":3,\"714\":2,\"715\":2,\"721\":2,\"733\":1,\"734\":3,\"735\":1,\"737\":1,\"761\":1,\"769\":4,\"776\":7,\"787\":7,\"794\":1,\"795\":2,\"796\":1,\"802\":1,\"805\":1,\"825\":2,\"838\":1,\"843\":2,\"854\":2,\"858\":1,\"859\":3,\"861\":1,\"894\":2,\"924\":1,\"926\":1,\"927\":1,\"934\":1,\"943\":6,\"944\":4,\"946\":6,\"948\":1,\"951\":48,\"952\":5,\"954\":7,\"955\":6,\"962\":1,\"971\":1,\"986\":1,\"993\":1,\"996\":3,\"997\":3,\"998\":2,\"1000\":3,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":5,\"1011\":2,\"1012\":3,\"1018\":1,\"1019\":4,\"1027\":2,\"1033\":1,\"1034\":2,\"1035\":4,\"1040\":2,\"1048\":2,\"1052\":2,\"1053\":4,\"1054\":4,\"1065\":3,\"1066\":2,\"1067\":4,\"1075\":1,\"1076\":4,\"1080\":1,\"1083\":3,\"1087\":6,\"1091\":1,\"1092\":1,\"1093\":4,\"1094\":2,\"1109\":1,\"1115\":1,\"1124\":1,\"1125\":1,\"1130\":3,\"1142\":1,\"1144\":4,\"1145\":3,\"1146\":3,\"1147\":4,\"1148\":2,\"1149\":2,\"1151\":5,\"1156\":1,\"1157\":2,\"1159\":7,\"1160\":11,\"1161\":4,\"1165\":1,\"1178\":4,\"1181\":2,\"1182\":1,\"1183\":5,\"1185\":1,\"1186\":5,\"1194\":3,\"1201\":1,\"1202\":8,\"1207\":4,\"1208\":2,\"1209\":2,\"1213\":2,\"1214\":6,\"1215\":1,\"1216\":4,\"1217\":14,\"1218\":12,\"1221\":4,\"1224\":1,\"1229\":1,\"1230\":2,\"1231\":2,\"1243\":1,\"1246\":2,\"1248\":1,\"1249\":1,\"1255\":1,\"1260\":2,\"1264\":2,\"1273\":2,\"1281\":3,\"1282\":1,\"1293\":1,\"1312\":6,\"1319\":7,\"1329\":5,\"1333\":2,\"1346\":2,\"1365\":4,\"1367\":1,\"1370\":1,\"1373\":2,\"1375\":4,\"1376\":10,\"1380\":4,\"1381\":2,\"1382\":12,\"1383\":7,\"1385\":12,\"1386\":2,\"1388\":2,\"1390\":2,\"1393\":1,\"1395\":2,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":7,\"1405\":12,\"1406\":4,\"1407\":8,\"1411\":2,\"1413\":1,\"1416\":2,\"1417\":8,\"1418\":5,\"1419\":9,\"1428\":1,\"1431\":1,\"1452\":2,\"1457\":2,\"1488\":6,\"1490\":1,\"1503\":4,\"1504\":1,\"1505\":5,\"1511\":3,\"1515\":2,\"1516\":2,\"1522\":2,\"1526\":2,\"1529\":2,\"1533\":2,\"1564\":3,\"1565\":3,\"1570\":1,\"1580\":2,\"1581\":1,\"1583\":3,\"1587\":1,\"1589\":2,\"1614\":2,\"1631\":2,\"1634\":1,\"1654\":8,\"1661\":3,\"1681\":2,\"1685\":1,\"1692\":2,\"1695\":4,\"1700\":4,\"1701\":3,\"1702\":4,\"1703\":2,\"1704\":1,\"1708\":1,\"1710\":1}}],[\"伪命题\",{\"1\":{\"1422\":1}}],[\"伪元素选择器\",{\"1\":{\"336\":1}}],[\"伪元素选择符\",{\"0\":{\"16\":1},\"1\":{\"11\":1,\"17\":1}}],[\"伪元素和伪类很像\",{\"1\":{\"16\":1}}],[\"伪类选择器和属性选择器具有中等优先级\",{\"1\":{\"337\":1}}],[\"伪类选择器和属性选择器的样式\",{\"1\":{\"337\":1}}],[\"伪类选择器\",{\"1\":{\"336\":1}}],[\"伪类选择符和属性选择符\",{\"1\":{\"17\":1}}],[\"伪类选择符\",{\"0\":{\"15\":1},\"1\":{\"11\":1,\"17\":1}}],[\"伪类括号效果\",{\"0\":{\"258\":1}}],[\"伪类光圈\",{\"0\":{\"257\":1}}],[\"伪类\",{\"1\":{\"15\":1}}],[\"伪类就是一个选择处于特定状态的元素的选择器\",{\"1\":{\"15\":1}}],[\"awesome\",{\"1\":{\"1683\":1}}],[\"await\",{\"0\":{\"369\":1,\"371\":1,\"1427\":1},\"1\":{\"371\":1,\"1243\":2,\"1338\":6,\"1340\":2,\"1341\":2,\"1342\":3,\"1345\":4,\"1346\":2,\"1348\":13,\"1349\":3,\"1352\":3,\"1353\":4,\"1354\":3,\"1355\":2,\"1356\":4,\"1357\":1,\"1358\":1,\"1427\":3,\"1603\":3}}],[\"at\",{\"1\":{\"1403\":2}}],[\"attachevent\",{\"1\":{\"1466\":3,\"1469\":2,\"1470\":2}}],[\"attachment\",{\"0\":{\"105\":1}}],[\"attachment>\",{\"1\":{\"98\":1}}],[\"attr\",{\"1\":{\"625\":2,\"635\":4,\"662\":6}}],[\"attributes\",{\"1\":{\"687\":1,\"688\":2,\"692\":1,\"693\":3,\"719\":1,\"724\":1,\"725\":1}}],[\"attribute\",{\"1\":{\"11\":1,\"527\":1,\"564\":1}}],[\"att|=\",{\"1\":{\"14\":1}}],[\"att$=\",{\"1\":{\"14\":1}}],[\"att^=\",{\"1\":{\"14\":1}}],[\"att~=\",{\"1\":{\"14\":1}}],[\"att=\",{\"1\":{\"14\":1}}],[\"att\",{\"1\":{\"14\":9}}],[\"a3\",{\"1\":{\"1264\":1,\"1417\":2,\"1661\":2}}],[\"a2\",{\"1\":{\"1264\":1,\"1417\":2,\"1661\":2}}],[\"a1\",{\"1\":{\"1264\":1,\"1417\":2,\"1661\":2}}],[\"ajax\",{\"1\":{\"1233\":1,\"1449\":2,\"1458\":1,\"1502\":2,\"1538\":1,\"1621\":1}}],[\"a>\",{\"1\":{\"1138\":1,\"1139\":2}}],[\"aug\",{\"1\":{\"1048\":1}}],[\"auth=1\",{\"1\":{\"587\":1}}],[\"auth\",{\"1\":{\"587\":7}}],[\"auto\",{\"1\":{\"37\":1,\"47\":1,\"48\":2,\"55\":3,\"85\":1,\"87\":1,\"104\":1,\"325\":1,\"332\":1}}],[\"aa\",{\"1\":{\"1201\":1}}],[\"aad\",{\"1\":{\"953\":1}}],[\"aaa\",{\"1\":{\"928\":2,\"1217\":1,\"1218\":10}}],[\"a4\",{\"1\":{\"881\":1,\"887\":1}}],[\"a5\",{\"1\":{\"870\":1,\"875\":1}}],[\"a0\",{\"1\":{\"870\":1,\"875\":1}}],[\"admin\",{\"1\":{\"587\":4}}],[\"addevent\",{\"1\":{\"1466\":3,\"1468\":1,\"1469\":8,\"1470\":2}}],[\"addeventlistener\",{\"1\":{\"1273\":1,\"1286\":1,\"1375\":1,\"1435\":1,\"1436\":1,\"1466\":3,\"1469\":2,\"1470\":2,\"1595\":1}}],[\"addition\",{\"1\":{\"1412\":2}}],[\"addone\",{\"1\":{\"1411\":2}}],[\"addsomenumber\",{\"1\":{\"1390\":3}}],[\"addstrings\",{\"1\":{\"506\":1}}],[\"addthemult\",{\"1\":{\"1376\":1}}],[\"addthenmult\",{\"1\":{\"1376\":1}}],[\"adddrinktocart\",{\"1\":{\"1353\":1}}],[\"addpizzatocart\",{\"1\":{\"1353\":1}}],[\"address\",{\"1\":{\"1166\":2}}],[\"add\",{\"1\":{\"165\":1,\"506\":4,\"999\":1,\"1221\":3,\"1393\":3,\"1411\":4,\"1452\":4,\"1456\":1,\"1457\":8,\"1509\":2,\"1510\":4,\"1652\":3}}],[\"amd\",{\"0\":{\"1617\":1},\"1\":{\"1617\":5,\"1618\":3}}],[\"am\",{\"1\":{\"1312\":1}}],[\"amy\",{\"1\":{\"569\":3,\"640\":5,\"656\":1}}],[\"amp\",{\"1\":{\"121\":1}}],[\"age=time\",{\"1\":{\"464\":1}}],[\"age=xxx\",{\"1\":{\"429\":1}}],[\"age=18\",{\"1\":{\"342\":1}}],[\"age\",{\"1\":{\"342\":1,\"345\":2,\"353\":3,\"354\":3,\"367\":1,\"368\":2,\"377\":5,\"392\":6,\"393\":5,\"394\":6,\"430\":1,\"546\":2,\"547\":1,\"569\":3,\"570\":3,\"571\":3,\"572\":1,\"575\":1,\"576\":1,\"578\":2,\"579\":1,\"581\":1,\"586\":3,\"590\":3,\"592\":6,\"593\":2,\"619\":5,\"635\":2,\"636\":2,\"659\":7,\"662\":4,\"726\":3,\"1102\":2,\"1166\":1,\"1474\":3,\"1490\":4,\"1491\":5,\"1492\":5,\"1497\":5}}],[\"axis\",{\"1\":{\"332\":2}}],[\"aop\",{\"0\":{\"1505\":1},\"1\":{\"1505\":5}}],[\"aob\",{\"1\":{\"275\":1}}],[\"ao\",{\"1\":{\"275\":1,\"276\":1,\"1562\":1,\"1564\":2,\"1565\":2,\"1566\":3,\"1570\":1,\"1571\":2,\"1572\":6,\"1709\":9}}],[\"a点坐标\",{\"1\":{\"274\":1}}],[\"ast\",{\"1\":{\"1667\":1,\"1668\":2,\"1670\":1}}],[\"assignment\",{\"1\":{\"1068\":1,\"1165\":1,\"1238\":2,\"1693\":1}}],[\"assign\",{\"0\":{\"676\":1},\"1\":{\"676\":1,\"677\":1,\"678\":1,\"679\":1,\"803\":1}}],[\"as\",{\"1\":{\"408\":1,\"1619\":1,\"1626\":2,\"1627\":2,\"1642\":1,\"1644\":1,\"1645\":1,\"1646\":2,\"1651\":3,\"1652\":2,\"1654\":1,\"1658\":2,\"1661\":1}}],[\"asynchronous\",{\"1\":{\"1547\":1,\"1552\":1}}],[\"asyncfn\",{\"1\":{\"371\":2}}],[\"async\",{\"0\":{\"369\":1,\"1427\":1},\"1\":{\"371\":1,\"438\":1,\"464\":2,\"1233\":1,\"1338\":12,\"1340\":3,\"1341\":2,\"1342\":1,\"1344\":5,\"1345\":3,\"1346\":1,\"1348\":5,\"1349\":2,\"1350\":3,\"1352\":1,\"1353\":3,\"1355\":1,\"1356\":4,\"1357\":1,\"1358\":1,\"1427\":3,\"1603\":2,\"1618\":1}}],[\"asi\",{\"1\":{\"253\":2}}],[\"ascii\",{\"1\":{\"234\":1,\"239\":1,\"246\":1,\"953\":1}}],[\"arity\",{\"1\":{\"1411\":1}}],[\"arithmetic\",{\"1\":{\"1149\":1}}],[\"are\",{\"1\":{\"1358\":1,\"1386\":2}}],[\"ary\",{\"1\":{\"1094\":1}}],[\"articleparagraphs\",{\"1\":{\"999\":2}}],[\"article\",{\"1\":{\"999\":2}}],[\"arbitraryproperty\",{\"1\":{\"820\":2}}],[\"arr3\",{\"1\":{\"1181\":3}}],[\"arrcustom\",{\"1\":{\"1004\":8}}],[\"arr2\",{\"1\":{\"715\":2,\"1181\":3}}],[\"arr1\",{\"1\":{\"715\":2,\"1181\":3}}],[\"arrproto\",{\"1\":{\"402\":3}}],[\"arr\",{\"1\":{\"347\":2,\"348\":1,\"354\":4,\"364\":3,\"371\":2,\"374\":6,\"375\":2,\"377\":2,\"381\":5,\"388\":11,\"482\":13,\"625\":5,\"668\":2,\"672\":2,\"673\":2,\"859\":4,\"1011\":3,\"1093\":2,\"1094\":4,\"1185\":1,\"1186\":2,\"1218\":8,\"1319\":3,\"1418\":6,\"1419\":2}}],[\"array类型或\",{\"1\":{\"1310\":1}}],[\"arraylike\",{\"1\":{\"1185\":4}}],[\"array<t>\",{\"1\":{\"668\":1}}],[\"array1\",{\"1\":{\"351\":2,\"352\":2}}],[\"array\",{\"0\":{\"347\":1,\"348\":1,\"349\":1,\"350\":1,\"351\":1,\"352\":1,\"374\":1,\"375\":1,\"715\":1,\"993\":1,\"1745\":1},\"1\":{\"251\":1,\"349\":2,\"350\":2,\"388\":2,\"392\":1,\"394\":2,\"402\":2,\"488\":2,\"521\":1,\"580\":1,\"590\":1,\"625\":4,\"667\":1,\"668\":3,\"710\":1,\"734\":2,\"737\":1,\"917\":1,\"934\":1,\"935\":1,\"936\":2,\"938\":2,\"942\":1,\"943\":2,\"944\":1,\"983\":1,\"989\":1,\"1004\":5,\"1101\":1,\"1109\":1,\"1110\":2,\"1185\":2,\"1264\":1,\"1285\":1,\"1287\":1,\"1302\":1,\"1306\":1,\"1312\":1,\"1329\":1,\"1376\":8,\"1382\":3,\"1393\":4,\"1394\":1,\"1419\":5,\"1441\":1,\"1503\":3,\"1504\":3}}],[\"around\",{\"1\":{\"332\":1}}],[\"argn\",{\"1\":{\"1305\":1,\"1306\":1,\"1310\":1,\"1328\":1}}],[\"arg2\",{\"1\":{\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1328\":1}}],[\"arg1\",{\"1\":{\"1305\":1,\"1306\":1,\"1309\":1,\"1310\":1,\"1328\":1,\"1329\":2,\"1340\":2}}],[\"arg\",{\"1\":{\"606\":2,\"1327\":1,\"1328\":1,\"1331\":1,\"1418\":2}}],[\"argument\",{\"1\":{\"557\":1,\"998\":2,\"1312\":1}}],[\"arguments变量的写法\",{\"1\":{\"1393\":1}}],[\"arguments\",{\"0\":{\"998\":1,\"1380\":1},\"1\":{\"251\":1,\"288\":2,\"289\":1,\"290\":1,\"292\":1,\"293\":1,\"294\":2,\"392\":2,\"393\":3,\"394\":2,\"402\":1,\"625\":1,\"989\":1,\"998\":1,\"1293\":1,\"1312\":1,\"1361\":1,\"1374\":1,\"1375\":4,\"1382\":10,\"1383\":15,\"1385\":7,\"1386\":6,\"1388\":1,\"1390\":5,\"1393\":4,\"1408\":6,\"1411\":1,\"1413\":4,\"1418\":1,\"1419\":4,\"1438\":1,\"1441\":2,\"1449\":1,\"1505\":4,\"1562\":3,\"1564\":2,\"1565\":2,\"1566\":2,\"1572\":4,\"1587\":2,\"1620\":5,\"1685\":1,\"1707\":1,\"1709\":2}}],[\"argsarray\",{\"1\":{\"1301\":1,\"1302\":1}}],[\"args\",{\"1\":{\"288\":5,\"289\":2,\"290\":3,\"392\":3,\"393\":1,\"394\":2,\"606\":4,\"625\":2,\"1165\":1,\"1178\":6,\"1350\":1,\"1375\":2,\"1382\":6,\"1406\":1,\"1413\":7,\"1417\":9,\"1418\":8,\"1433\":3,\"1446\":3}}],[\"arp\",{\"1\":{\"152\":1}}],[\"a~f\",{\"1\":{\"239\":1}}],[\"aba\",{\"1\":{\"494\":1}}],[\"ab\",{\"1\":{\"275\":1,\"276\":1,\"881\":1,\"887\":1}}],[\"abstract\",{\"1\":{\"250\":1,\"1667\":1}}],[\"absolute\",{\"0\":{\"25\":1},\"1\":{\"35\":1,\"36\":2,\"37\":2,\"38\":1,\"39\":1,\"40\":2,\"51\":2,\"100\":1,\"325\":1,\"439\":1}}],[\"ab+c\",{\"1\":{\"245\":1}}],[\"abcabcbb\",{\"1\":{\"467\":1}}],[\"abc\",{\"1\":{\"235\":10,\"467\":1,\"559\":3,\"604\":2,\"689\":5,\"953\":2,\"1102\":1,\"1125\":1,\"1130\":1,\"1218\":1,\"1294\":2,\"1334\":2,\"1389\":2}}],[\"animate\",{\"1\":{\"1621\":1}}],[\"anonymous\",{\"1\":{\"1296\":2,\"1332\":1}}],[\"another\",{\"1\":{\"927\":1,\"1411\":1}}],[\"ans\",{\"1\":{\"476\":4,\"488\":3,\"506\":3}}],[\"anything\",{\"1\":{\"500\":1,\"1651\":1}}],[\"any\",{\"0\":{\"383\":1},\"1\":{\"383\":2,\"668\":2,\"730\":1,\"746\":2,\"761\":2,\"829\":2}}],[\"and\",{\"1\":{\"344\":2,\"737\":2,\"1144\":1,\"1385\":1,\"1386\":4,\"1490\":2,\"1491\":1}}],[\"an\",{\"1\":{\"223\":2,\"329\":1,\"350\":1,\"1047\":1,\"1349\":1,\"1417\":2}}],[\"activation\",{\"1\":{\"1562\":2,\"1566\":1}}],[\"active\",{\"1\":{\"15\":1}}],[\"actions\",{\"1\":{\"413\":1}}],[\"accord\",{\"1\":{\"1109\":1}}],[\"accumulator\",{\"1\":{\"352\":2}}],[\"accessed\",{\"1\":{\"1385\":1,\"1386\":2}}],[\"access\",{\"1\":{\"341\":1}}],[\"acknowledgment\",{\"1\":{\"301\":2,\"304\":1}}],[\"acknowledge\",{\"1\":{\"299\":1}}],[\"ack\",{\"1\":{\"299\":2,\"301\":1,\"302\":2,\"304\":5}}],[\"ack标志的数据包以示传达确认信息\",{\"1\":{\"151\":1}}],[\"apr\",{\"1\":{\"1048\":1}}],[\"api\",{\"1\":{\"397\":2,\"1458\":1,\"1532\":1,\"1534\":2,\"1681\":1}}],[\"apdu\",{\"1\":{\"317\":1}}],[\"apps\",{\"1\":{\"1621\":1}}],[\"app\",{\"1\":{\"1617\":1,\"1618\":1}}],[\"appendchild\",{\"1\":{\"1502\":2}}],[\"appenddiv\",{\"1\":{\"1502\":10}}],[\"application\",{\"1\":{\"318\":1,\"1411\":2}}],[\"apply和call的唯一区别就在于\",{\"1\":{\"393\":1}}],[\"apply方法\",{\"1\":{\"391\":1}}],[\"apply\",{\"0\":{\"393\":1,\"1300\":1},\"1\":{\"288\":3,\"289\":1,\"290\":2,\"292\":1,\"293\":1,\"294\":2,\"343\":1,\"393\":2,\"394\":1,\"625\":2,\"635\":2,\"838\":1,\"936\":1,\"1178\":4,\"1300\":1,\"1301\":1,\"1302\":1,\"1303\":1,\"1375\":1,\"1413\":1,\"1433\":2,\"1438\":1,\"1441\":1,\"1446\":2,\"1449\":1,\"1457\":2,\"1505\":4,\"1529\":3,\"1580\":2,\"1581\":1,\"1584\":1,\"1586\":3,\"1587\":2,\"1588\":1,\"1590\":1}}],[\"apple\",{\"1\":{\"144\":1}}],[\"app00\",{\"1\":{\"187\":4}}],[\"apache\",{\"1\":{\"153\":1}}],[\"apos\",{\"1\":{\"121\":1}}],[\"alse\",{\"1\":{\"899\":1}}],[\"alert\",{\"1\":{\"659\":1,\"949\":2,\"1034\":1,\"1042\":4,\"1307\":1,\"1335\":2,\"1390\":2}}],[\"already\",{\"1\":{\"540\":1,\"1066\":1,\"1076\":1,\"1400\":2}}],[\"alive\",{\"1\":{\"156\":1}}],[\"align\",{\"0\":{\"81\":1,\"82\":1},\"1\":{\"81\":8,\"85\":1,\"93\":1,\"94\":1,\"332\":6}}],[\"alpha\",{\"1\":{\"108\":1}}],[\"allowed\",{\"1\":{\"1381\":1,\"1401\":1}}],[\"allocation\",{\"1\":{\"1287\":1}}],[\"allsettled\",{\"0\":{\"380\":1},\"1\":{\"380\":1}}],[\"allnames\",{\"1\":{\"352\":3}}],[\"all\",{\"1\":{\"81\":1,\"91\":3,\"215\":1,\"329\":1,\"383\":1,\"684\":1,\"910\":1,\"1353\":1,\"1354\":2,\"1355\":2,\"1358\":2,\"1602\":1,\"1603\":1}}],[\"alt\",{\"1\":{\"3\":1}}],[\"available\",{\"1\":{\"48\":1}}],[\"a\",{\"1\":{\"17\":1,\"50\":1,\"195\":1,\"200\":1,\"203\":1,\"205\":1,\"206\":4,\"209\":2,\"212\":1,\"213\":2,\"215\":2,\"241\":1,\"242\":4,\"243\":2,\"245\":5,\"252\":8,\"253\":4,\"274\":10,\"275\":4,\"276\":4,\"343\":4,\"344\":3,\"348\":2,\"354\":6,\"381\":1,\"385\":6,\"388\":5,\"392\":5,\"393\":3,\"394\":4,\"408\":1,\"470\":1,\"476\":2,\"479\":1,\"482\":2,\"497\":1,\"529\":12,\"530\":15,\"531\":4,\"533\":4,\"534\":9,\"538\":8,\"539\":5,\"540\":9,\"547\":1,\"552\":2,\"557\":2,\"559\":6,\"560\":7,\"563\":7,\"564\":6,\"629\":1,\"673\":2,\"679\":2,\"689\":5,\"694\":2,\"695\":2,\"701\":5,\"715\":2,\"721\":2,\"726\":2,\"733\":1,\"734\":2,\"742\":5,\"748\":1,\"756\":4,\"757\":2,\"769\":4,\"776\":8,\"787\":7,\"794\":1,\"795\":1,\"796\":1,\"807\":6,\"819\":2,\"820\":2,\"825\":4,\"843\":1,\"857\":1,\"870\":2,\"875\":2,\"880\":2,\"917\":3,\"923\":1,\"926\":1,\"928\":4,\"929\":2,\"943\":2,\"946\":3,\"951\":3,\"955\":13,\"986\":1,\"996\":2,\"1035\":6,\"1052\":2,\"1053\":2,\"1054\":5,\"1065\":6,\"1066\":2,\"1068\":2,\"1075\":3,\"1076\":8,\"1077\":1,\"1087\":5,\"1124\":1,\"1130\":1,\"1151\":13,\"1154\":5,\"1161\":1,\"1181\":3,\"1182\":2,\"1183\":2,\"1185\":1,\"1186\":1,\"1201\":3,\"1202\":4,\"1203\":13,\"1204\":3,\"1214\":2,\"1216\":2,\"1217\":4,\"1219\":2,\"1221\":2,\"1224\":1,\"1226\":3,\"1230\":1,\"1242\":6,\"1243\":5,\"1248\":1,\"1253\":16,\"1254\":1,\"1255\":1,\"1266\":4,\"1267\":2,\"1271\":3,\"1273\":2,\"1274\":1,\"1281\":7,\"1282\":4,\"1294\":2,\"1303\":3,\"1312\":4,\"1319\":3,\"1335\":1,\"1356\":2,\"1367\":3,\"1373\":4,\"1376\":10,\"1382\":2,\"1395\":4,\"1406\":5,\"1411\":4,\"1418\":2,\"1489\":1,\"1503\":4,\"1511\":4,\"1522\":2,\"1523\":2,\"1526\":7,\"1550\":1,\"1561\":4,\"1564\":2,\"1565\":1,\"1578\":9,\"1579\":19,\"1580\":2,\"1583\":3,\"1584\":9,\"1586\":7,\"1589\":4,\"1596\":1,\"1613\":1,\"1616\":2,\"1631\":3,\"1661\":9,\"1666\":3,\"1668\":3,\"1670\":23,\"1674\":4,\"1675\":4,\"1676\":2,\"1677\":5,\"1681\":10,\"1682\":2,\"1684\":4,\"1686\":5,\"1698\":2,\"1699\":8,\"1700\":1,\"1701\":14,\"1702\":7,\"1703\":3,\"1704\":3,\"1709\":18,\"1710\":2}}],[\"afterfn\",{\"1\":{\"1505\":2}}],[\"aftervalue\",{\"1\":{\"1376\":4}}],[\"after选择器\",{\"1\":{\"256\":1}}],[\"after\",{\"1\":{\"16\":2,\"557\":1,\"664\":1,\"1312\":1,\"1356\":1,\"1376\":4,\"1425\":1,\"1505\":5}}],[\"选择饮料\",{\"1\":{\"1353\":2}}],[\"选择披萨\",{\"1\":{\"1353\":2}}],[\"选择排序\",{\"1\":{\"488\":1}}],[\"选择性确认\",{\"1\":{\"301\":1}}],[\"选择具有\",{\"1\":{\"14\":7}}],[\"选择\",{\"1\":{\"13\":1,\"1534\":1}}],[\"选择紧贴在\",{\"1\":{\"13\":1}}],[\"选择所有作为\",{\"1\":{\"13\":1}}],[\"选择所有被\",{\"1\":{\"13\":1}}],[\"选择符优先级\",{\"1\":{\"17\":1}}],[\"选择符的元素\",{\"1\":{\"15\":1}}],[\"选择符名称\",{\"1\":{\"12\":1,\"13\":1}}],[\"选择符分为五类\",{\"1\":{\"11\":1}}],[\"选择符\",{\"0\":{\"11\":1},\"1\":{\"12\":2,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":3}}],[\"选择符与优先级\",{\"0\":{\"10\":1}}],[\"选择器权重\",{\"0\":{\"336\":1}}],[\"选择器权重相同\",{\"1\":{\"18\":1}}],[\"选择器执行不同方向的动画\",{\"1\":{\"270\":1}}],[\"选择器覆盖靠前的\",{\"1\":{\"18\":1}}],[\"选择器\",{\"0\":{\"4\":1}}],[\"将内部函数的调用传给\",{\"1\":{\"1710\":1}}],[\"将函数声明理解成前面讨论的\",{\"1\":{\"1670\":1}}],[\"将这些文件输出的常量\",{\"1\":{\"1661\":1}}],[\"将这个数组命名为\",{\"1\":{\"1417\":1}}],[\"将各种常量写在不同的文件里面\",{\"1\":{\"1661\":1}}],[\"将各个声明分隔开\",{\"1\":{\"7\":1}}],[\"将默认和命名导出组合在同一个模块中是不好的做法\",{\"1\":{\"1652\":1}}],[\"将源模块中的所有内容作为对象导入\",{\"1\":{\"1627\":1}}],[\"将输入的变量重命名\",{\"1\":{\"1626\":1}}],[\"将一个复杂的程序依据一定的规则\",{\"1\":{\"1606\":1}}],[\"将一系列提交重新应用到新的基底上\",{\"1\":{\"178\":1}}],[\"将新对象的隐式原型对象关联构造函数的显式原型对象\",{\"1\":{\"1581\":1}}],[\"将新创建的对象\",{\"1\":{\"659\":1}}],[\"将活动对象压入\",{\"1\":{\"1572\":1}}],[\"将事件队列中首个事件推进主线程执行\",{\"1\":{\"1552\":1}}],[\"将来也不会改变\",{\"1\":{\"1551\":1}}],[\"将进入队列等候\",{\"1\":{\"1542\":1}}],[\"将继续排队等待执行\",{\"1\":{\"1539\":1}}],[\"将相加和作为参数传入回调函数\",{\"1\":{\"1452\":2}}],[\"将目标方法\",{\"1\":{\"1446\":1}}],[\"将目前目录及其子目录下所有最近\",{\"1\":{\"215\":1}}],[\"将目前目录及其子目录下所有延伸档名是\",{\"1\":{\"215\":1}}],[\"将目前目录其其下子目录中所有一般文件列出\",{\"1\":{\"215\":1}}],[\"将参数和对应的结果保存在对象中\",{\"1\":{\"1441\":1}}],[\"将多参数函数转换成多个单参数函数\",{\"1\":{\"1411\":1}}],[\"将多个小的提交合并成一个更为清晰的提交历史\",{\"1\":{\"175\":1}}],[\"将返回没有指定默认值的参数个数\",{\"1\":{\"1406\":1}}],[\"将触发该参数等于默认值\",{\"1\":{\"1405\":1}}],[\"将它右边操作数的值赋给它左边的操作数\",{\"1\":{\"1238\":1}}],[\"将试图将其转换成数字类型\",{\"1\":{\"1207\":1}}],[\"将变量的值赋值给自增表达式的结果\",{\"1\":{\"1194\":1}}],[\"将不会起任何作用\",{\"1\":{\"1101\":1}}],[\"将不同的功能封装成不同的全局函数\",{\"1\":{\"1611\":1}}],[\"将不同的属性名分配给变量\",{\"1\":{\"982\":1}}],[\"将不同属性的值分配给变量\",{\"1\":{\"991\":1}}],[\"将赋值给未声明变量的值在执行赋值时将其隐式地创建为全局变量\",{\"1\":{\"1065\":1}}],[\"将以任何特定的顺序返回索引\",{\"1\":{\"983\":1}}],[\"将以下行添加到\",{\"1\":{\"130\":1}}],[\"将遵循以下规则\",{\"1\":{\"951\":1}}],[\"将字符串转换为整数并返回\",{\"1\":{\"913\":1}}],[\"将某些不能强制转换为数字类型的值的非数字类型的值转换为数字类型的值时\",{\"1\":{\"904\":1}}],[\"将引发\",{\"1\":{\"874\":1}}],[\"将已编码\",{\"1\":{\"869\":1}}],[\"将要被密封的对象\",{\"1\":{\"824\":1}}],[\"将标记为不可扩展的对象\",{\"1\":{\"811\":1}}],[\"将标志比特位\",{\"1\":{\"301\":1}}],[\"将数字值\",{\"1\":{\"762\":1}}],[\"将数据和操作捆绑在一起\",{\"1\":{\"229\":1}}],[\"将数据段打包\",{\"1\":{\"152\":1}}],[\"将私有方法移出模块\",{\"1\":{\"614\":1}}],[\"将私有方法的名字命名为一个\",{\"1\":{\"613\":1}}],[\"将构造函数当作函数\",{\"0\":{\"591\":1}}],[\"将无法再使用\",{\"1\":{\"530\":1}}],[\"将待排序列分割成若干长度的子序列\",{\"1\":{\"488\":1}}],[\"将左边数组\",{\"1\":{\"488\":1}}],[\"将他们添加到文档中\",{\"1\":{\"464\":1}}],[\"将解析到的元素和文本节点添加到文档中\",{\"1\":{\"464\":1}}],[\"将请求转发到服务程序\",{\"1\":{\"464\":1}}],[\"将基本数据类型包装在对象中\",{\"1\":{\"408\":1}}],[\"将传入属性转为getter\",{\"1\":{\"402\":1}}],[\"将传入的data属性进行深度监听\",{\"1\":{\"402\":1}}],[\"将消息存储在localstorage或sessionstorage中\",{\"1\":{\"397\":1}}],[\"将覆盖标签选择器和伪元素选择器的样式\",{\"1\":{\"337\":1}}],[\"将覆盖类选择器\",{\"1\":{\"337\":1}}],[\"将覆盖外部和嵌入样式表中的所有选择器\",{\"1\":{\"337\":1}}],[\"将覆盖其他规则的样式\",{\"1\":{\"337\":1}}],[\"将比特组装成帧和点到点的传递\",{\"1\":{\"317\":1}}],[\"将被附加到作为属性的导入对象上\",{\"1\":{\"1627\":1}}],[\"将被推至任务队列\",{\"1\":{\"1552\":1}}],[\"将被执行\",{\"1\":{\"1322\":1}}],[\"将被转为\",{\"1\":{\"944\":2}}],[\"将被冻结的对象\",{\"1\":{\"705\":1}}],[\"将被其他选择器的样式所覆盖\",{\"1\":{\"337\":1}}],[\"将被\",{\"1\":{\"253\":1}}],[\"将被asi转换为\",{\"1\":{\"253\":1}}],[\"将在结尾插入一个分号\",{\"1\":{\"253\":1}}],[\"将其\",{\"1\":{\"1308\":1}}],[\"将其解释为代码块\",{\"1\":{\"1218\":1}}],[\"将其解析为\",{\"1\":{\"252\":1}}],[\"将其放入任务队列中\",{\"1\":{\"457\":1}}],[\"将其保存在与网站的索引页面相同的目录中\",{\"1\":{\"130\":1}}],[\"将语句分隔开\",{\"1\":{\"252\":1}}],[\"将会没有间隔的重复执行\",{\"1\":{\"1543\":1}}],[\"将会没有间隔地重复执行\",{\"1\":{\"1542\":1}}],[\"将会立即执行\",{\"1\":{\"1542\":1}}],[\"将会引发异常\",{\"1\":{\"891\":1}}],[\"将会根据参数\",{\"1\":{\"800\":1}}],[\"将会在行结尾插入一个分号\",{\"1\":{\"253\":1}}],[\"将会被\",{\"1\":{\"253\":1}}],[\"将会抛出错误\",{\"1\":{\"245\":3,\"1698\":1}}],[\"将会导致它们之间产生一个微小的空隙\",{\"1\":{\"46\":1}}],[\"将接口与实现分离的过程\",{\"1\":{\"229\":1}}],[\"将和ls文件相关的文件都查找出来\",{\"1\":{\"215\":1}}],[\"将文件时间属性修改为当前系统时间\",{\"1\":{\"203\":1}}],[\"将根目录下的所有文件全部删除\",{\"1\":{\"197\":1}}],[\"将当前目录下的所有目录和文件全部删除\",{\"1\":{\"197\":1}}],[\"将所有源模块的命名导出公开为属性和方法\",{\"1\":{\"1627\":1}}],[\"将所有更改丢弃\",{\"1\":{\"176\":1}}],[\"将所有字符转换成\",{\"1\":{\"84\":1}}],[\"将更改放回工作目录\",{\"1\":{\"176\":1}}],[\"将本地opt目录下的data文件发送到192\",{\"1\":{\"215\":1}}],[\"将本地提交移动到远程提交的后面\",{\"1\":{\"175\":1}}],[\"将本地提交与远程同步\",{\"1\":{\"175\":1}}],[\"将本地分支推送到远程仓库\",{\"1\":{\"167\":1}}],[\"将暂存区的更改提交到本地仓库\",{\"1\":{\"165\":1}}],[\"将工作目录中的更改添加到暂存区\",{\"1\":{\"165\":1}}],[\"将页面展示给用户\",{\"1\":{\"158\":1}}],[\"将红\",{\"1\":{\"108\":1}}],[\"将背景图像等比缩放到宽度或高度与容器的宽度或高度相等\",{\"1\":{\"104\":1}}],[\"将背景图像等比缩放到\",{\"1\":{\"104\":1}}],[\"将溢出部分替换为\",{\"1\":{\"87\":1}}],[\"将溢出部分裁切掉\",{\"1\":{\"87\":1}}],[\"将保留原样\",{\"1\":{\"84\":1}}],[\"将每个单词转换成小写\",{\"1\":{\"84\":1}}],[\"将每个单词转换成大写\",{\"1\":{\"84\":1}}],[\"将每个单词的第一个字母转换成大写\",{\"1\":{\"84\":1}}],[\"将\",{\"1\":{\"63\":1,\"198\":1,\"199\":1,\"272\":1,\"301\":1,\"438\":1,\"662\":1,\"938\":1,\"1151\":1,\"1502\":1,\"1619\":2,\"1658\":1,\"1668\":1,\"1709\":2}}],[\"将对象设置为\",{\"1\":{\"45\":1}}],[\"将伪元素选择符\",{\"1\":{\"16\":1}}],[\"将属性与属性值分隔开\",{\"1\":{\"7\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"0\":1}}],[\"它对这段代码的处理方式会和预期的情况有所不同\",{\"1\":{\"1670\":1}}],[\"它具有可以独立展示内容的特点\",{\"1\":{\"1621\":1}}],[\"它总会手动在\",{\"1\":{\"1580\":1}}],[\"它引用的是\",{\"1\":{\"1579\":1}}],[\"它引用的是全局对象的\",{\"1\":{\"1561\":1}}],[\"它\",{\"1\":{\"1579\":1}}],[\"它通过函数的\",{\"1\":{\"1562\":1}}],[\"它依然会使用这个新对象作为调用上下文\",{\"1\":{\"1525\":1}}],[\"它甚至也是一些\",{\"1\":{\"1496\":1}}],[\"它都要对浏览器所支持的能力进行检查\",{\"1\":{\"1466\":1}}],[\"它作为一个参数传递给其他的代码\",{\"1\":{\"1452\":1}}],[\"它就会退出主线程\",{\"1\":{\"1538\":1}}],[\"它就会释放那些引用次数为\",{\"1\":{\"1281\":1}}],[\"它就构成构造函数调用\",{\"1\":{\"1522\":1}}],[\"它就是一个真正的数组\",{\"1\":{\"1393\":1}}],[\"它必须有一个明确的参数\",{\"1\":{\"1322\":1}}],[\"它始终不会被回收\",{\"1\":{\"1282\":1}}],[\"它往往要求开发者来确定在程序中哪一块内存不再需要并且释放它\",{\"1\":{\"1276\":1}}],[\"它一定是最后被放进去\",{\"1\":{\"1260\":1}}],[\"它一旦把应用程序发给网络层的数据发送出去\",{\"1\":{\"309\":1}}],[\"它和\",{\"1\":{\"1616\":1}}],[\"它和下面的代码基本等价\",{\"1\":{\"1246\":1}}],[\"它和一级权限与一下\",{\"1\":{\"1161\":1}}],[\"它首先从最内部的作用域\",{\"1\":{\"1675\":1}}],[\"它首先计算左操作数\",{\"1\":{\"1246\":1}}],[\"它首先会初始化一些环境的参数\",{\"1\":{\"153\":1}}],[\"它最终会被自动地释放\",{\"1\":{\"1097\":1}}],[\"它相对于\",{\"1\":{\"1041\":1}}],[\"它将两个表达式\",{\"1\":{\"1248\":1}}],[\"它将成为全局对象的属性\",{\"1\":{\"1065\":1}}],[\"它将不会丢失其值\",{\"1\":{\"1065\":1}}],[\"它将初始化表达式和自增表达式合并入一个表达式中以用于\",{\"1\":{\"1013\":1}}],[\"它将和周围的内容一起流动\",{\"1\":{\"329\":1}}],[\"它只引用但不实际包含变量对象\",{\"1\":{\"1707\":1}}],[\"它只关心它们从何处调用\",{\"1\":{\"1677\":1}}],[\"它只能在循环体内使用\",{\"1\":{\"969\":1}}],[\"它只有处于\",{\"1\":{\"15\":1}}],[\"它期望传入的\",{\"1\":{\"949\":1}}],[\"它从来没有被定义过或者是初始化过\",{\"1\":{\"919\":1}}],[\"它从指定属性的众多外观中选择一个值\",{\"1\":{\"7\":1}}],[\"它使用与调用者相同的权限执行代码\",{\"1\":{\"893\":1}}],[\"它是实现软件的图形用户界面\",{\"1\":{\"1621\":1}}],[\"它是看不到\",{\"1\":{\"1616\":1}}],[\"它是运行时执行\",{\"1\":{\"1593\":1}}],[\"它是一个构造函数\",{\"1\":{\"1581\":1}}],[\"它是一个类数组对象\",{\"1\":{\"1382\":1}}],[\"它是一组\",{\"1\":{\"927\":1}}],[\"它是固定的\",{\"1\":{\"1375\":1}}],[\"它是对引用计数法的改良\",{\"1\":{\"1282\":1}}],[\"它是两个操作数串的结合\",{\"1\":{\"1169\":1}}],[\"它是全局作用域的一个变量\",{\"1\":{\"920\":1}}],[\"它是全局\",{\"1\":{\"861\":1}}],[\"它是从一个对象指向一个函数\",{\"1\":{\"647\":1}}],[\"它是从一个函数指向另一个对象\",{\"1\":{\"645\":1}}],[\"它立即返回\",{\"1\":{\"859\":1}}],[\"它确保可以在有无窗口的各种环境下正常工作\",{\"1\":{\"848\":1}}],[\"它生成一个具有两个元素的类数组的对象\",{\"1\":{\"711\":1}}],[\"它分配属性\",{\"1\":{\"678\":1}}],[\"它默认指向\",{\"1\":{\"607\":1}}],[\"它会初始化新创建的对象\",{\"1\":{\"1581\":1}}],[\"它会形成一个作用域\",{\"1\":{\"1556\":1}}],[\"它会显式返回\",{\"1\":{\"1526\":1}}],[\"它会清除前一次的定时器并设置另一个\",{\"1\":{\"1445\":1}}],[\"它会根据两边值类型进行数据类型隐式转换\",{\"1\":{\"951\":1}}],[\"它会将该值转换为\",{\"1\":{\"951\":1}}],[\"它会在轮询的各个阶段结束时\",{\"1\":{\"459\":1}}],[\"它会不断的轮询任务队列\",{\"1\":{\"457\":1}}],[\"它会监听得到的请求\",{\"1\":{\"153\":1}}],[\"它拥有独立的内存空间\",{\"1\":{\"422\":1}}],[\"它返回一个布尔值\",{\"1\":{\"351\":1}}],[\"它不能与另一个\",{\"1\":{\"1318\":1}}],[\"它不是数组\",{\"1\":{\"1185\":1}}],[\"它不是一个对应相应匹配表达式的权重值\",{\"1\":{\"18\":1}}],[\"它不记录数组元素\",{\"1\":{\"1004\":1}}],[\"它不和任何类型的值相等\",{\"1\":{\"953\":1}}],[\"它不像\",{\"1\":{\"919\":1}}],[\"它不会修改数组\",{\"1\":{\"350\":1}}],[\"它行为类似于\",{\"1\":{\"329\":1}}],[\"它等同于\",{\"1\":{\"329\":4}}],[\"它定义了一个块级别的盒子\",{\"1\":{\"329\":1}}],[\"它要么为它的内容建立新的区块格式化上下文\",{\"1\":{\"329\":1}}],[\"它要求发送设备和接收设备都有独立的接收和发送能力\",{\"1\":{\"312\":1}}],[\"它实际上是一种切换方向的单工通信\",{\"1\":{\"312\":1}}],[\"它有\",{\"1\":{\"131\":1}}],[\"它包含了任何人类语言中的大部分的字符\",{\"1\":{\"128\":1}}],[\"它包含了所有你想包含在\",{\"1\":{\"120\":1}}],[\"它在浏览器关闭时出栈\",{\"1\":{\"1557\":1}}],[\"它在代码中的引用数不一定是\",{\"1\":{\"1282\":1}}],[\"它在处理操作数之前执行隐式类型转换\",{\"1\":{\"929\":1}}],[\"它在属性和元素名称之间\",{\"1\":{\"117\":1}}],[\"它在段落文本的开始之前\",{\"1\":{\"116\":1}}],[\"它可以是嵌套的函数\",{\"1\":{\"1065\":1}}],[\"它可以表示任意精度格式的整数\",{\"1\":{\"929\":1}}],[\"它可以将多个原始值或者其他对象聚合在一起\",{\"1\":{\"544\":1}}],[\"它可以在不同的标签页之间进行通信\",{\"1\":{\"397\":1}}],[\"它可以帮助避免以后的一些问题\",{\"1\":{\"120\":1}}],[\"它可以与父元素的同级兄弟定位元素或其他自由的定位元素来比较\",{\"1\":{\"39\":1}}],[\"它可能会产生奇特的结果\",{\"1\":{\"116\":1}}],[\"它们大都是从\",{\"1\":{\"1681\":1}}],[\"它们是\",{\"1\":{\"1674\":1}}],[\"它们是局部变量\",{\"1\":{\"1673\":1}}],[\"它们只是利用作用域的规则强制所有标识符都不能注入到共享作用域中\",{\"1\":{\"1684\":1}}],[\"它们只是在函数体内有定义\",{\"1\":{\"1673\":1}}],[\"它们只是被\",{\"1\":{\"1581\":1}}],[\"它们想替代的是\",{\"1\":{\"1589\":1}}],[\"它们甚至都不能说是一种特殊的函数类型\",{\"1\":{\"1581\":1}}],[\"它们并不会属于某个类\",{\"1\":{\"1581\":1}}],[\"它们在任务队列中加入各种事件\",{\"1\":{\"1532\":1}}],[\"它们在大多数情况下都会有缓存\",{\"1\":{\"150\":1}}],[\"它们通常初始化新对象\",{\"1\":{\"1526\":1}}],[\"它们都作用于一个假定的对象\",{\"1\":{\"1517\":1}}],[\"它们都不可达\",{\"1\":{\"1282\":1}}],[\"它们都无法获取\",{\"1\":{\"848\":1}}],[\"它们值的大小是不固定的\",{\"1\":{\"1264\":1}}],[\"它们能感受到的参数就是\",{\"1\":{\"1221\":1}}],[\"它们实际上不是原始表达式\",{\"1\":{\"1083\":1}}],[\"它们之间的主要区别在于它们的迭代方式\",{\"1\":{\"1004\":1}}],[\"它们之前或者之后并不会产生换行\",{\"1\":{\"329\":1}}],[\"它们两个完全一样\",{\"1\":{\"645\":1}}],[\"它们引用的仍然是最初的原型\",{\"1\":{\"579\":1}}],[\"它们不是数据类型\",{\"1\":{\"557\":1}}],[\"它们包含两个方法分别是\",{\"1\":{\"532\":1}}],[\"它们可以是任意\",{\"1\":{\"1083\":1}}],[\"它们可以访问自己\",{\"1\":{\"464\":1}}],[\"它们可以在那些情况下使用\",{\"1\":{\"121\":1}}],[\"它们共享相同的代码和数据\",{\"1\":{\"423\":1}}],[\"它们被伪盒子\",{\"1\":{\"329\":1}}],[\"它们会执行严格的相等和不相等比较\",{\"1\":{\"1200\":1}}],[\"它们会创建一个独立的上下文\",{\"1\":{\"325\":1}}],[\"它们会在某些场景下显示\",{\"1\":{\"130\":1}}],[\"它们与下面的html标记是等效的\",{\"1\":{\"256\":1}}],[\"它们尝试描述比\",{\"1\":{\"110\":1}}],[\"它们的实质是\",{\"1\":{\"1654\":1}}],[\"它们的命名空间是独立的\",{\"1\":{\"1383\":1}}],[\"它们的区别在于传播方向不同\",{\"1\":{\"454\":1}}],[\"它们的子孙后代可以扮演几个不同的角色\",{\"1\":{\"329\":1}}],[\"它们的\",{\"1\":{\"59\":1,\"1375\":1}}],[\"它所表现的含义是\",{\"1\":{\"48\":1}}],[\"它的词法作用域都只由函数被声明时所处的位置决定\",{\"1\":{\"1676\":1}}],[\"它的前面确实加上了对\",{\"1\":{\"1579\":1}}],[\"它的主要作用是\",{\"1\":{\"1505\":1}}],[\"它的主要工作是跟踪内存的分配和使用\",{\"1\":{\"1276\":1}}],[\"它的值是\",{\"1\":{\"1386\":1}}],[\"它的标识符可以是数字或字符串\",{\"1\":{\"1322\":1}}],[\"它的存取数据的方式\",{\"1\":{\"1261\":1}}],[\"它的操作数可以是任意类型\",{\"1\":{\"1246\":1}}],[\"它的原型就是\",{\"1\":{\"650\":1}}],[\"它的构造函数就是它自己\",{\"1\":{\"647\":1}}],[\"它的作用就是包含可以由特定类型的所有实例共享的属性和方法\",{\"1\":{\"645\":1}}],[\"它的作用是保存页面的一些元数据\",{\"1\":{\"126\":1}}],[\"它的含义是函数的原型对象\",{\"1\":{\"645\":1}}],[\"它的第\",{\"1\":{\"485\":1}}],[\"它的默认值为auto\",{\"1\":{\"332\":1}}],[\"它的所有子元素自动成为容器成员\",{\"1\":{\"332\":1}}],[\"它的行为像关联的\",{\"1\":{\"329\":1}}],[\"它的行为\",{\"1\":{\"229\":1}}],[\"它的优点就是网页浏览速度较快\",{\"1\":{\"143\":1}}],[\"它的表示方法是\",{\"1\":{\"108\":1}}],[\"它的两端对齐行为对段落的最后一行无效\",{\"1\":{\"85\":1}}],[\"它的\",{\"1\":{\"36\":1}}],[\"它选择了一个或多个需要添加样式的元素\",{\"1\":{\"4\":1}}],[\"在没有必要的情况下\",{\"1\":{\"1711\":1}}],[\"在作用域链中\",{\"1\":{\"1707\":1}}],[\"在未赋值的情况下\",{\"1\":{\"1698\":1}}],[\"在未被访问前的样式\",{\"1\":{\"15\":1}}],[\"在预编译阶段\",{\"1\":{\"1698\":1}}],[\"在嵌套的作用域内使用\",{\"1\":{\"1695\":1}}],[\"在声明提升的过程中\",{\"1\":{\"1709\":1}}],[\"在声明赋值没有到达之前\",{\"1\":{\"1694\":1}}],[\"在声明的变量前添加\",{\"1\":{\"1651\":1}}],[\"在任意代码片段外部添加包装函数\",{\"1\":{\"1684\":1}}],[\"在任何时间进行引用\",{\"1\":{\"1708\":1}}],[\"在任何地方均可调用\",{\"1\":{\"1561\":1}}],[\"在任何提供之前提供一个给定的参数序列\",{\"1\":{\"1308\":1}}],[\"在任何对象中都可以创建任意数量的属性\",{\"1\":{\"557\":1}}],[\"在多层嵌套作用域中允许定义同名标识符\",{\"1\":{\"1676\":1}}],[\"在多数情况下\",{\"1\":{\"1200\":1}}],[\"在当前的作用域集合中\",{\"1\":{\"1670\":1}}],[\"在当前目录下创建名为a的txt文件\",{\"1\":{\"203\":1}}],[\"在当前目录下创建一个名为tools的目录\",{\"1\":{\"196\":1}}],[\"在各大框架及\",{\"1\":{\"1667\":1}}],[\"在传统编译语言的流程中\",{\"1\":{\"1665\":1}}],[\"在传统的编程软件中\",{\"1\":{\"1284\":1}}],[\"在接口名与模块内部变量之间\",{\"1\":{\"1654\":1}}],[\"在导出时重命名\",{\"1\":{\"1651\":1}}],[\"在两个语句中加载\",{\"1\":{\"1635\":1}}],[\"在两个相邻节点间的链路上传送帧\",{\"1\":{\"318\":1}}],[\"在两个相邻节点之间传送数据时\",{\"1\":{\"318\":1}}],[\"在静态解析阶段执行\",{\"1\":{\"1636\":1}}],[\"在静态分析阶段\",{\"1\":{\"1634\":1}}],[\"在静态方法中\",{\"1\":{\"621\":1}}],[\"在模块内部可以使用\",{\"1\":{\"1617\":1}}],[\"在模块内部使用\",{\"1\":{\"1617\":1}}],[\"在推广过程中对模块定义的规范化产出\",{\"1\":{\"1617\":1}}],[\"在语法上\",{\"1\":{\"1593\":1}}],[\"在语句块里声明的变量作用域是其所在的函数或者\",{\"1\":{\"1075\":1}}],[\"在必要时使用\",{\"1\":{\"1589\":1}}],[\"在看代码之前先回忆一下硬绑定是如何工作的\",{\"1\":{\"1584\":1}}],[\"在分析隐式绑定时\",{\"1\":{\"1580\":1}}],[\"在理解\",{\"1\":{\"1576\":1}}],[\"在进入执行上下文时会给变量对象添加形参\",{\"1\":{\"1565\":1}}],[\"在进入执行上下文后\",{\"1\":{\"1564\":1}}],[\"在进行dns解析时\",{\"1\":{\"150\":1}}],[\"在变量对象中以函数名建立一个属性\",{\"1\":{\"1564\":1}}],[\"在变量对象中数据发生拷贝操作时\",{\"1\":{\"1266\":1}}],[\"在顶层\",{\"1\":{\"1561\":1}}],[\"在异步任务准备就绪后\",{\"1\":{\"1552\":1}}],[\"在了解闭包之前\",{\"1\":{\"1707\":1}}],[\"在了解\",{\"1\":{\"1547\":1}}],[\"在末尾再间隔10毫秒来调用该程序\",{\"1\":{\"1543\":1}}],[\"在很多地方都见过这种技术\",{\"1\":{\"1543\":1}}],[\"在排队\",{\"1\":{\"1541\":1,\"1542\":1}}],[\"在鼠标点击事件执行时\",{\"1\":{\"1540\":1}}],[\"在鼠标点击与释放之间发生的事件\",{\"1\":{\"15\":1}}],[\"在代码运行之前\",{\"1\":{\"1633\":1}}],[\"在代码执行阶段\",{\"1\":{\"1565\":2}}],[\"在代码块还在运行期间\",{\"1\":{\"1538\":1}}],[\"在代码加载的时候就立刻进行一次判断\",{\"1\":{\"1470\":1}}],[\"在表达式\",{\"1\":{\"1525\":1}}],[\"在面向对象程序设计中\",{\"1\":{\"1514\":1}}],[\"在实际开发中\",{\"1\":{\"1500\":1}}],[\"在实际场景中可能是这样的\",{\"1\":{\"1438\":1}}],[\"在派生类中\",{\"1\":{\"1490\":1}}],[\"在类中\",{\"1\":{\"1488\":1}}],[\"在类的外部\",{\"1\":{\"612\":1}}],[\"在类的内部也可以使用\",{\"1\":{\"604\":1}}],[\"在类的实例上调用方法\",{\"1\":{\"599\":1}}],[\"在命名规则上\",{\"1\":{\"1477\":1}}],[\"在典型的\",{\"1\":{\"1473\":1}}],[\"在介绍惰性函数\",{\"1\":{\"1467\":1}}],[\"在指定的时间间隔之后运行代码\",{\"1\":{\"1445\":1}}],[\"在指定目录下创建一个名为tools的目录\",{\"1\":{\"196\":1}}],[\"在条件一等待的这段时间间隔内再次调用此动作则将重新计算时间间隔\",{\"1\":{\"1444\":1}}],[\"在频繁触发的情况下\",{\"1\":{\"1444\":1}}],[\"在开头的判断中被\",{\"1\":{\"1438\":1}}],[\"在滚动过程中\",{\"1\":{\"1438\":1}}],[\"在人眼的视觉中就会形成一个连贯的动画\",{\"1\":{\"1431\":1}}],[\"在计算机科学中\",{\"1\":{\"1411\":1,\"1416\":1}}],[\"在不确定请求返回的时间时\",{\"1\":{\"1502\":1}}],[\"在不设置参数默认值时\",{\"1\":{\"1407\":1}}],[\"在不使用css的情况下\",{\"1\":{\"136\":1}}],[\"在向参数传递引用类型的值时\",{\"1\":{\"1389\":1}}],[\"在向参数传递基本类型的值时\",{\"1\":{\"1388\":1}}],[\"在非严格模式下\",{\"1\":{\"1381\":1}}],[\"在某个时间内只有一件事情在执行\",{\"1\":{\"1547\":1}}],[\"在某些业务场景下\",{\"1\":{\"1353\":1}}],[\"在某一时刻\",{\"1\":{\"312\":1}}],[\"在对象字面量中\",{\"1\":{\"1322\":1}}],[\"在对象中的函数是能够用\",{\"1\":{\"1101\":1}}],[\"在现有对象上定义取值函数\",{\"1\":{\"1319\":1}}],[\"在现代浏览器中\",{\"1\":{\"926\":1}}],[\"在fun函数运行时指定的\",{\"1\":{\"1306\":1}}],[\"在chrome浏览器中会显示\",{\"1\":{\"1294\":1,\"1334\":1}}],[\"在ctx对象上新增一个属性func\",{\"1\":{\"392\":1,\"393\":1}}],[\"在定时器完成工作的时候\",{\"1\":{\"1288\":1}}],[\"在定义变量时就完成了内存分配\",{\"1\":{\"1273\":1}}],[\"在使用不定参数或默认参数的函数中禁止使用\",{\"1\":{\"1408\":1}}],[\"在使用完这个变量的对象之后\",{\"1\":{\"1279\":1}}],[\"在使用协商缓存时\",{\"1\":{\"430\":1}}],[\"在局部作用域中\",{\"1\":{\"1279\":1}}],[\"在编写\",{\"1\":{\"1279\":1}}],[\"在内存中给数值变量分配空间\",{\"1\":{\"1271\":1}}],[\"在内存的表示为\",{\"1\":{\"1160\":1}}],[\"在内存的表示的二进制符号全为\",{\"1\":{\"1160\":1}}],[\"在用于赋值时\",{\"1\":{\"1249\":1}}],[\"在用户计算机上运行恶意代码\",{\"1\":{\"893\":1}}],[\"在需要返回值的场合\",{\"1\":{\"1197\":1}}],[\"在探索一个对象的内容时\",{\"1\":{\"1164\":1}}],[\"在引用为空\",{\"1\":{\"1164\":1}}],[\"在引用内容是对象的情况下\",{\"1\":{\"1068\":1}}],[\"在高版本函数作用域中也会被重写\",{\"1\":{\"1137\":1}}],[\"在句点和左方括号之前的表达式总是会首先计算\",{\"1\":{\"1087\":1}}],[\"在块级作用域之外不可引用\",{\"1\":{\"1074\":1}}],[\"在块中的变量初始化之前\",{\"1\":{\"1067\":1}}],[\"在所有函数之外声明的变量\",{\"1\":{\"1069\":1}}],[\"在严格模式下调用\",{\"1\":{\"1578\":1}}],[\"在严格模式下\",{\"1\":{\"1386\":2,\"1510\":1}}],[\"在严格模式下抛出typeerror\",{\"1\":{\"1065\":1}}],[\"在严格模式下会抛出referenceerror异常\",{\"1\":{\"1065\":1}}],[\"在严格模式下会报错\",{\"1\":{\"533\":1}}],[\"在退出循环后\",{\"1\":{\"1002\":1}}],[\"在每次迭代中\",{\"1\":{\"991\":1}}],[\"在每个对象上都支持一个属性\",{\"1\":{\"576\":1}}],[\"在每个规则集里要用分号\",{\"1\":{\"7\":1}}],[\"在每个声明里要用冒号\",{\"1\":{\"7\":1}}],[\"在其他函数中创建函数是不明智的\",{\"1\":{\"1711\":1}}],[\"在其他模块也可以读取改写后的值\",{\"1\":{\"1631\":1}}],[\"在其他地方使用将会报语法错误\",{\"1\":{\"969\":1}}],[\"在其链接地址已被访问过时的样式\",{\"1\":{\"15\":1}}],[\"在循环开始处指定的条件判断语句会重复检测\",{\"1\":{\"969\":1}}],[\"在字符串中的每个元素占据了字符串的位置\",{\"1\":{\"927\":1}}],[\"在操作对象时\",{\"1\":{\"917\":1,\"1264\":1}}],[\"在程序运行过程中\",{\"1\":{\"917\":1}}],[\"在程序运行中可以修改和创建它们\",{\"1\":{\"558\":1}}],[\"在松散模式下\",{\"1\":{\"848\":1}}],[\"在以前\",{\"1\":{\"848\":1}}],[\"在以这种模式创建的对象中\",{\"1\":{\"572\":1}}],[\"在该对象原型链上搜寻\",{\"1\":{\"780\":1}}],[\"在该阶段如果没有timer的话\",{\"1\":{\"458\":1}}],[\"在主线程上执行\",{\"1\":{\"1552\":1}}],[\"在主线程上排队执行的任务\",{\"1\":{\"457\":1}}],[\"在主要考虑对象而\",{\"1\":{\"656\":1}}],[\"在原型链中查找属性或方法\",{\"1\":{\"648\":1}}],[\"在创建实例对象时被自动添加\",{\"1\":{\"648\":1}}],[\"在函数里没有用\",{\"1\":{\"1694\":1}}],[\"在函数执行上下文中\",{\"1\":{\"1562\":1}}],[\"在函数调用的时候\",{\"1\":{\"1477\":1}}],[\"在函数调用中将一个数组变为参数序列\",{\"1\":{\"343\":1}}],[\"在函数被调用时处理函数\",{\"0\":{\"1469\":1}}],[\"在函数的开头判断这个标记是否为\",{\"1\":{\"1438\":1}}],[\"在函数体内可以通过\",{\"1\":{\"1382\":1}}],[\"在函数中\",{\"1\":{\"1293\":1,\"1707\":1}}],[\"在函数内使用严格模式或手动释放全局变量的内存\",{\"1\":{\"1285\":1}}],[\"在函数内部使用\",{\"1\":{\"1588\":1}}],[\"在函数内部是使用\",{\"1\":{\"1338\":1}}],[\"在函数内部和函数外部都可以使用\",{\"1\":{\"1334\":1}}],[\"在函数内部声明的变量\",{\"1\":{\"1069\":1}}],[\"在函数内部以某种方式增强对象\",{\"1\":{\"656\":1}}],[\"在函数内部\",{\"1\":{\"640\":1}}],[\"在子类构造函数的原型上定义方法\",{\"1\":{\"662\":1}}],[\"在子类调用父类方法\",{\"1\":{\"623\":1}}],[\"在子类的\",{\"1\":{\"623\":2}}],[\"在子类的静态方法中通过\",{\"1\":{\"623\":1}}],[\"在子类的构造函数中\",{\"1\":{\"619\":1}}],[\"在子类普通方法中通过\",{\"1\":{\"622\":1}}],[\"在普通方法之中\",{\"1\":{\"622\":1}}],[\"在普通方法中\",{\"1\":{\"621\":1,\"622\":1}}],[\"在调用函数的内部不会创建新的对象\",{\"1\":{\"1477\":1}}],[\"在调用的时候传入一个对象\",{\"1\":{\"1382\":1}}],[\"在调用新函数时\",{\"1\":{\"1308\":1}}],[\"在调用该方法之后被添加到数组中的元素不会被\",{\"1\":{\"669\":1}}],[\"在调用\",{\"1\":{\"619\":1,\"1677\":1}}],[\"在构造函数中访问\",{\"1\":{\"1490\":1}}],[\"在构造函数中绑定this\",{\"1\":{\"607\":1}}],[\"在构造函数\",{\"1\":{\"635\":1}}],[\"在构造函数的末尾添加一个\",{\"1\":{\"571\":1}}],[\"在全局作用域中定义的函数实际上只能被某个对象调用\",{\"1\":{\"592\":1}}],[\"在运行时会自动出现在执行环境中\",{\"1\":{\"590\":1}}],[\"在运行时类型无法改变\",{\"1\":{\"230\":1}}],[\"在于判断接口最终用哪个类实例化\",{\"1\":{\"584\":1}}],[\"在单独使用时\",{\"1\":{\"577\":1}}],[\"在给对象设置属性之前\",{\"1\":{\"562\":1}}],[\"在方括号运算符内部可以使用表达式\",{\"1\":{\"559\":1}}],[\"在冻结自身之前冻结属性\",{\"1\":{\"540\":1}}],[\"在设置属性值时调用\",{\"1\":{\"534\":1}}],[\"在获取属性值时调用\",{\"1\":{\"533\":1}}],[\"在写入属性时调用的函数\",{\"1\":{\"532\":1}}],[\"在写入访问器属性时\",{\"1\":{\"532\":1}}],[\"在读取属性时调用的函数\",{\"1\":{\"532\":1}}],[\"在读取访问器属性时\",{\"1\":{\"532\":1}}],[\"在比较修订号时\",{\"1\":{\"509\":1}}],[\"在第一次调用过程中\",{\"1\":{\"1465\":1}}],[\"在第\",{\"1\":{\"485\":2,\"1537\":1,\"1542\":2}}],[\"在执行\",{\"1\":{\"974\":1}}],[\"在执行自比较中\",{\"1\":{\"861\":1}}],[\"在执行代码的时候将所有函数压入执行栈中\",{\"1\":{\"457\":1}}],[\"在执行virtual\",{\"1\":{\"402\":1}}],[\"在头信息中添加\",{\"1\":{\"430\":1}}],[\"在过期时间以内\",{\"1\":{\"429\":1}}],[\"在返回的时候\",{\"1\":{\"407\":1}}],[\"在数据变动时发布消息给订阅者\",{\"1\":{\"401\":1}}],[\"在本地实现一个聊天室\",{\"0\":{\"397\":1}}],[\"在本例中也就是person函数\",{\"1\":{\"394\":1}}],[\"在本例中就是person\",{\"1\":{\"392\":1,\"393\":1}}],[\"在上个代码片段中\",{\"1\":{\"1675\":1}}],[\"在上述情况中\",{\"1\":{\"1135\":1}}],[\"在上述例子中\",{\"1\":{\"117\":1}}],[\"在上面的第二步中\",{\"1\":{\"1670\":1}}],[\"在上面的示例中为\",{\"1\":{\"1052\":1}}],[\"在上面的代码中\",{\"1\":{\"392\":1}}],[\"在正常的流中\",{\"1\":{\"329\":2}}],[\"在同一时间内多件事情能被交替地处理\",{\"1\":{\"1547\":1}}],[\"在同一时间内有几件事情并行在处理\",{\"1\":{\"1547\":1}}],[\"在同一个bfc容器内的相邻块级元素的外边距不会发生重叠\",{\"1\":{\"325\":1}}],[\"在同一组背景定义中\",{\"1\":{\"99\":1}}],[\"在浏览器运行环境中运行的就是浏览器进程\",{\"1\":{\"1551\":1}}],[\"在浏览器运行环境中由浏览器内核引擎实现\",{\"1\":{\"1532\":1}}],[\"在浏览器中叫\",{\"1\":{\"1282\":1}}],[\"在浏览器地址栏输入url\",{\"1\":{\"464\":1}}],[\"在浏览器发展的过程中\",{\"1\":{\"321\":1}}],[\"在浏览器的\",{\"1\":{\"130\":1}}],[\"在互联网使用的各种协议中最重要和最著名的就是\",{\"1\":{\"318\":1}}],[\"在互联网中应用层协议很多\",{\"1\":{\"318\":1}}],[\"在三次握手协议中\",{\"1\":{\"303\":1}}],[\"在三角形\",{\"1\":{\"275\":1}}],[\"在通信双方中的任何一方主动关闭连接之前\",{\"1\":{\"301\":1}}],[\"在经过\",{\"1\":{\"289\":1}}],[\"在间隔时间内触发\",{\"1\":{\"288\":1}}],[\"在一些流行的\",{\"1\":{\"1579\":1}}],[\"在一些特殊情况下会阻塞在这里\",{\"1\":{\"1534\":1}}],[\"在一个方法里面可能会涉及到一些兼容性的问题\",{\"1\":{\"1466\":1}}],[\"在一个文件夹中递归查询包含指定字符串的文件\",{\"1\":{\"215\":1}}],[\"在一定时间间隔内的连续触发只执行最后一次\",{\"1\":{\"289\":1}}],[\"在一定时间间隔内的连续触发只执行首次\",{\"1\":{\"288\":2}}],[\"在直线\",{\"1\":{\"275\":3}}],[\"在下面这段中\",{\"1\":{\"253\":1}}],[\"在下面的例子中\",{\"1\":{\"244\":1}}],[\"在下面的实时输出中\",{\"1\":{\"121\":1}}],[\"在有些计算机硬件和软件里\",{\"1\":{\"239\":1}}],[\"在这之中定义的所有变量在代码块外都是不可见的\",{\"1\":{\"1689\":1}}],[\"在这段延迟时间过去之后\",{\"1\":{\"1543\":1}}],[\"在这\",{\"1\":{\"1538\":1}}],[\"在这里找到了\",{\"1\":{\"1675\":1}}],[\"在这里引入函数防抖就能很好地解决这个问题\",{\"1\":{\"1449\":1}}],[\"在这里最艰难的任务是找到所分配的内存确实已经不再需要了\",{\"1\":{\"1276\":1}}],[\"在这里相当于\",{\"1\":{\"621\":1}}],[\"在这些情况下\",{\"1\":{\"1000\":1}}],[\"在这种情况下\",{\"1\":{\"485\":1,\"1100\":1,\"1526\":1,\"1695\":1}}],[\"在这种关系中一个对象或者类包含了其他的对象和类\",{\"1\":{\"229\":1}}],[\"在这种关系中\",{\"1\":{\"229\":1}}],[\"在这个代码片段中\",{\"1\":{\"1681\":1}}],[\"在这个阶段中\",{\"1\":{\"1555\":1}}],[\"在这个惰性载入的\",{\"1\":{\"1469\":1}}],[\"在这个单位时间内\",{\"1\":{\"1431\":1}}],[\"在这个作用域里面\",{\"1\":{\"1407\":1}}],[\"在这个位置可以读取和写入值\",{\"1\":{\"528\":1}}],[\"在这个文档中被允许使用的字符集\",{\"1\":{\"128\":1}}],[\"在这个示例中\",{\"1\":{\"116\":1}}],[\"在这个例子中是全局作用域\",{\"1\":{\"1684\":1}}],[\"在这个例子中有三个逐级嵌套的作用域\",{\"1\":{\"1674\":1}}],[\"在这个例子中\",{\"1\":{\"569\":1}}],[\"在这个例子中每个\",{\"1\":{\"81\":1}}],[\"在这个例子中就是\",{\"1\":{\"4\":1}}],[\"在文件中查找字符串\",{\"1\":{\"215\":1}}],[\"在光标所在行的下面另起一新行插入\",{\"1\":{\"205\":1}}],[\"在光标所在字符后开始插入\",{\"1\":{\"205\":1}}],[\"在光标所在字符前开始插入\",{\"1\":{\"205\":1}}],[\"在撤销多个提交时\",{\"1\":{\"177\":1}}],[\"在拉取远程更改之前\",{\"1\":{\"175\":1}}],[\"在配置文件\",{\"1\":{\"161\":1}}],[\"在启动vue项目时出现错误\",{\"1\":{\"161\":1}}],[\"在建立连接前\",{\"1\":{\"152\":1}}],[\"在前面的步骤我们已经得到服务器的\",{\"1\":{\"152\":1}}],[\"在前面所有步骤都没有缓存的情况下\",{\"1\":{\"150\":1}}],[\"在发送数据时\",{\"1\":{\"152\":1,\"318\":1}}],[\"在处理\",{\"1\":{\"143\":1}}],[\"在你的站点增加自定义图标\",{\"0\":{\"130\":1}}],[\"在默认情况下使用\",{\"1\":{\"1695\":1}}],[\"在默认情况下\",{\"1\":{\"51\":1,\"576\":1,\"1312\":1}}],[\"在渲染页面自动生成图像\",{\"1\":{\"30\":1}}],[\"在网页上提供一个资源地址\",{\"1\":{\"29\":1}}],[\"在\",{\"0\":{\"121\":1,\"131\":1},\"1\":{\"18\":1,\"58\":1,\"108\":2,\"121\":1,\"143\":1,\"144\":1,\"156\":1,\"215\":1,\"301\":1,\"304\":1,\"309\":2,\"318\":2,\"329\":1,\"381\":1,\"430\":1,\"437\":1,\"531\":1,\"599\":1,\"644\":1,\"646\":1,\"662\":1,\"848\":2,\"930\":1,\"948\":1,\"969\":4,\"971\":2,\"1017\":1,\"1054\":1,\"1067\":2,\"1074\":1,\"1132\":1,\"1138\":1,\"1142\":1,\"1151\":3,\"1253\":1,\"1279\":1,\"1311\":1,\"1318\":1,\"1322\":1,\"1413\":1,\"1432\":1,\"1435\":1,\"1436\":1,\"1452\":1,\"1466\":1,\"1483\":1,\"1502\":1,\"1505\":1,\"1514\":1,\"1534\":1,\"1541\":1,\"1542\":1,\"1561\":3,\"1569\":1,\"1581\":2,\"1589\":1,\"1606\":1,\"1616\":1,\"1670\":1,\"1673\":1,\"1695\":2,\"1698\":2,\"1710\":1}}],[\"在属性的右边\",{\"1\":{\"7\":1}}],[\"中又称\",{\"1\":{\"1695\":1}}],[\"中引申出来的\",{\"1\":{\"1681\":1}}],[\"中引入了类\",{\"1\":{\"1473\":1}}],[\"中引入\",{\"1\":{\"946\":1}}],[\"中就找到了它\",{\"1\":{\"1675\":1}}],[\"中对变量作用域的描述\",{\"1\":{\"1673\":1}}],[\"中我们都会看到它的身影\",{\"1\":{\"1667\":1}}],[\"中查找\",{\"1\":{\"1632\":1,\"1675\":1,\"1677\":2}}],[\"中这样描述它\",{\"1\":{\"1581\":1}}],[\"中定义还是先定义再添加为引用属性\",{\"1\":{\"1579\":1}}],[\"中定义的所有对象初始化代码\",{\"1\":{\"635\":1}}],[\"中提及到\",{\"1\":{\"1569\":1}}],[\"中也有介绍\",{\"1\":{\"1561\":1}}],[\"中竟然调用了\",{\"1\":{\"1557\":1}}],[\"中等待执行\",{\"1\":{\"1552\":1}}],[\"中只有一个\",{\"1\":{\"1551\":1}}],[\"中事件循环的实现是依靠的\",{\"1\":{\"1534\":1}}],[\"中则由\",{\"1\":{\"1532\":1}}],[\"中函数也是对象\",{\"1\":{\"1529\":1}}],[\"中函数也是对象的一种\",{\"1\":{\"1452\":1}}],[\"中实现\",{\"1\":{\"1505\":1}}],[\"中经常用到的写法\",{\"1\":{\"1488\":1}}],[\"中经常使用的\",{\"1\":{\"109\":1}}],[\"中创建类的方法\",{\"1\":{\"1481\":1}}],[\"中近类的结构\",{\"0\":{\"1481\":1}}],[\"中不存在类的概念\",{\"1\":{\"1473\":1}}],[\"中不能直接访问它们\",{\"1\":{\"527\":1}}],[\"中使用构造函数不同的是\",{\"1\":{\"1483\":1}}],[\"中使用\",{\"1\":{\"1432\":1,\"1436\":1}}],[\"中有一套自己的模型\",{\"1\":{\"1534\":1}}],[\"中有两种语法可以完成方法调用\",{\"1\":{\"1514\":1}}],[\"中有自己的垃圾回收机制\",{\"1\":{\"1284\":1}}],[\"中有出现的使用者\",{\"1\":{\"215\":1}}],[\"中并没有严格意义上区分栈内存与堆内存\",{\"1\":{\"1260\":1}}],[\"中并且下标为\",{\"1\":{\"503\":1}}],[\"中取得所需的数据\",{\"1\":{\"1204\":1}}],[\"中取出前\",{\"1\":{\"482\":1}}],[\"中共有\",{\"1\":{\"1143\":1}}],[\"中可以写带有副作用的表达式\",{\"1\":{\"1138\":1}}],[\"中你不会想使用单独的语句块\",{\"1\":{\"1075\":1}}],[\"中一般都是数字\",{\"1\":{\"1014\":1}}],[\"中假值只有\",{\"1\":{\"945\":1}}],[\"中了解\",{\"1\":{\"942\":1}}],[\"中是否存在一个构造函数的\",{\"1\":{\"935\":1}}],[\"中是否具有指定的\",{\"1\":{\"752\":1}}],[\"中数值的范围是有效位数的\",{\"1\":{\"925\":1}}],[\"中默认的进制数\",{\"1\":{\"923\":1}}],[\"中具体的\",{\"1\":{\"891\":1}}],[\"中所有函数的参数都是按值传递的\",{\"1\":{\"1387\":1}}],[\"中所有能识别的转义序列转换成原字符\",{\"1\":{\"869\":1}}],[\"中所有对象的基类\",{\"1\":{\"799\":1}}],[\"中去除可枚举的属性\",{\"1\":{\"737\":1}}],[\"中描述了原型链的概念\",{\"1\":{\"644\":1}}],[\"中明文规定\",{\"1\":{\"632\":1}}],[\"中允许继承原生构造函数定义子类\",{\"1\":{\"625\":1}}],[\"中管这个指针叫做\",{\"1\":{\"576\":1}}],[\"中保存的是一个稳妥对象\",{\"1\":{\"572\":1}}],[\"中下标为\",{\"1\":{\"509\":2}}],[\"中因此返回\",{\"1\":{\"503\":1}}],[\"中仅存的\",{\"1\":{\"500\":1}}],[\"中没有元素\",{\"1\":{\"500\":1}}],[\"中没有直接的映射\",{\"1\":{\"329\":1}}],[\"中最长的回文子串\",{\"1\":{\"494\":1}}],[\"中间件代理跨域\",{\"1\":{\"450\":1}}],[\"中间变量\",{\"1\":{\"392\":1}}],[\"中配置\",{\"1\":{\"161\":1}}],[\"中应用\",{\"0\":{\"131\":1}}],[\"中的值的时候\",{\"1\":{\"1709\":1}}],[\"中的值是由一个表示类型的标签和实际数据值表示的\",{\"1\":{\"1132\":1}}],[\"中的变量\",{\"1\":{\"1675\":1}}],[\"中的属性都不能访问\",{\"1\":{\"1566\":1}}],[\"中的运行环境大概包括三种情况\",{\"1\":{\"1556\":1}}],[\"中的程序任务可以分为两种\",{\"1\":{\"1552\":1}}],[\"中的事件循环存在于\",{\"1\":{\"1534\":1}}],[\"中的所有同步任务执行完毕\",{\"1\":{\"1532\":1}}],[\"中的所有对象都来自\",{\"1\":{\"804\":1}}],[\"中的所有对象都是由\",{\"1\":{\"799\":1}}],[\"中的参数在内部用一个数组表示\",{\"1\":{\"1382\":1}}],[\"中的函数显然满足高阶函数的条件\",{\"1\":{\"1500\":1}}],[\"中的函数定义并未指定函数形参的类型\",{\"1\":{\"1380\":1}}],[\"中的函数就是对象\",{\"1\":{\"592\":1}}],[\"中的基础数据类型\",{\"1\":{\"1263\":1}}],[\"中的任何值\",{\"1\":{\"1255\":1}}],[\"中的语句块那样处理事物\",{\"1\":{\"1075\":1}}],[\"中的最大值\",{\"1\":{\"925\":1}}],[\"中的最小值\",{\"1\":{\"925\":1}}],[\"中的对象中都有一个\",{\"1\":{\"646\":1}}],[\"中的其他函数\",{\"1\":{\"590\":1}}],[\"中的构造函数可用来创建特定类型的对象\",{\"1\":{\"590\":1}}],[\"中的元素\",{\"1\":{\"500\":1}}],[\"中的元素数目\",{\"1\":{\"500\":1}}],[\"中的\",{\"1\":{\"298\":1,\"329\":1,\"430\":1,\"503\":1,\"596\":1,\"799\":1,\"891\":1,\"1055\":1,\"1069\":1,\"1579\":1}}],[\"中的数字\",{\"1\":{\"245\":2}}],[\"中的那些字符也可能出现在正则表达式字面量里\",{\"1\":{\"242\":1}}],[\"中的内容置为注释\",{\"1\":{\"122\":1}}],[\"中的一种\",{\"1\":{\"40\":1}}],[\"中包含特殊字符\",{\"0\":{\"121\":1}}],[\"中表示方法譬如\",{\"1\":{\"108\":1}}],[\"中文名为空位合并运算符\",{\"1\":{\"381\":1}}],[\"中文名为可选链\",{\"1\":{\"381\":1}}],[\"中文\",{\"1\":{\"91\":1}}],[\"中\",{\"1\":{\"6\":1,\"48\":1,\"51\":1,\"121\":1,\"144\":2,\"156\":1,\"301\":1,\"500\":2,\"527\":1,\"599\":1,\"644\":1,\"848\":3,\"926\":1,\"948\":1,\"1017\":1,\"1053\":1,\"1067\":2,\"1138\":1,\"1197\":1,\"1318\":1,\"1322\":1,\"1438\":1,\"1469\":1,\"1483\":1,\"1525\":1,\"1534\":1,\"1561\":2,\"1576\":2,\"1581\":1,\"1606\":1,\"1616\":2,\"1668\":1,\"1670\":2,\"1691\":1,\"1698\":1}}],[\"如上代码又输出了自定义的\",{\"1\":{\"1658\":1}}],[\"如上代码中的\",{\"1\":{\"1658\":1}}],[\"如上两种写法都会报错\",{\"1\":{\"1654\":1}}],[\"如两个模块的\",{\"1\":{\"1612\":1}}],[\"如此的设计\",{\"1\":{\"1593\":1}}],[\"如此反复循环\",{\"1\":{\"1533\":1}}],[\"如此一来\",{\"1\":{\"635\":1}}],[\"如下所示为\",{\"1\":{\"1691\":1}}],[\"如下列出四种方法可以在编码中改变\",{\"1\":{\"1588\":1}}],[\"如下\",{\"1\":{\"1552\":1,\"1572\":1}}],[\"如下面定义了一个变量\",{\"1\":{\"1487\":1}}],[\"如下的代码将在控制台输出\",{\"1\":{\"1069\":1}}],[\"如今很多网站为了提高用户体验\",{\"1\":{\"1449\":1}}],[\"如非声明变量可以被删除\",{\"1\":{\"1065\":1}}],[\"如以下代码所示\",{\"1\":{\"930\":1}}],[\"如在浏览器中的\",{\"1\":{\"848\":1}}],[\"如虚拟主机使用http\",{\"1\":{\"464\":1}}],[\"如内存空间\",{\"1\":{\"423\":1}}],[\"如字符串\",{\"1\":{\"408\":1,\"898\":1}}],[\"如何判断一个数是否在数组里面\",{\"1\":{\"1160\":1}}],[\"如何阻止事件冒泡\",{\"0\":{\"455\":1}}],[\"如何解决跨域问题\",{\"0\":{\"450\":1}}],[\"如何避免回流重绘\",{\"1\":{\"439\":1}}],[\"如何让proxy去监听基本数据类型\",{\"0\":{\"408\":1}}],[\"如何实现call方法\",{\"1\":{\"392\":1}}],[\"如何换行\",{\"1\":{\"332\":1}}],[\"如何创建bfc\",{\"1\":{\"325\":1}}],[\"如同步信息\",{\"1\":{\"318\":1}}],[\"如域名系统\",{\"1\":{\"318\":1}}],[\"如直播\",{\"1\":{\"310\":1}}],[\"如图\",{\"1\":{\"275\":1}}],[\"如http默认端口80\",{\"1\":{\"148\":1}}],[\"如无兄弟元素则为父元素的左内侧和上内侧\",{\"1\":{\"56\":1}}],[\"如果处于动态作用域\",{\"1\":{\"1677\":1}}],[\"如果处于词法作用域\",{\"1\":{\"1677\":1}}],[\"如果处于块级作用域内\",{\"1\":{\"1655\":1}}],[\"如果代码中引用了\",{\"1\":{\"1676\":1}}],[\"如果作用域中有该变量则进行赋值\",{\"1\":{\"1670\":1}}],[\"如果作为new关键字使用这个fn函数\",{\"1\":{\"394\":1}}],[\"如果否\",{\"1\":{\"1670\":1}}],[\"如果词法单元生成器在判断\",{\"1\":{\"1666\":1}}],[\"如果多次重复执行同一句\",{\"1\":{\"1635\":1}}],[\"如果输入变量是对象类型\",{\"1\":{\"1631\":1}}],[\"如果输入不是数字类型\",{\"1\":{\"861\":1}}],[\"如果模块有\",{\"1\":{\"1600\":1}}],[\"如果模式中出现圆括号该怎么处理\",{\"1\":{\"1222\":1}}],[\"如果满足条件\",{\"1\":{\"1596\":1}}],[\"如果满足这个就返回true\",{\"1\":{\"470\":1}}],[\"如果可以给默认绑定指定一个全局对象和\",{\"1\":{\"1587\":1}}],[\"如果某个调用位置应用多条规则\",{\"1\":{\"1582\":1}}],[\"如果某个方法之前加上星号\",{\"1\":{\"606\":1}}],[\"如果变量存在赋值操作\",{\"1\":{\"1701\":1}}],[\"如果变量或函数没有声明就被使用\",{\"1\":{\"1698\":1}}],[\"如果变量名称与已经声明的形式参数或函数相同\",{\"1\":{\"1564\":1}}],[\"如果变量名与属性名不一致\",{\"1\":{\"1218\":1}}],[\"如果变量对象已经存在相同名称的属性\",{\"1\":{\"1564\":1}}],[\"如果看的不是很懂的话\",{\"1\":{\"1561\":1}}],[\"如果其中一行代码报错\",{\"1\":{\"1547\":1}}],[\"如果其中一个操作数不是布尔值\",{\"1\":{\"1254\":1}}],[\"如果其中一个操作值是对象\",{\"1\":{\"952\":1}}],[\"如果其中一个操作值为字符串\",{\"1\":{\"952\":1}}],[\"如果其中一个操作值为布尔值\",{\"1\":{\"952\":1}}],[\"如果队列中没有其它消息\",{\"1\":{\"1543\":1}}],[\"如果构造函数执行后没有返回其他对象\",{\"1\":{\"1581\":1}}],[\"如果构造函数显式地使用\",{\"1\":{\"1526\":1}}],[\"如果构造函数使用\",{\"1\":{\"1526\":1}}],[\"如果构造函数没有形参\",{\"1\":{\"1524\":1}}],[\"如果构造函数调用在圆括号内包含一组实参列表\",{\"1\":{\"1523\":1}}],[\"如果想传值进去\",{\"1\":{\"1710\":1}}],[\"如果想设置跨模块的常量\",{\"1\":{\"1661\":1}}],[\"如果想同时加载多个模块\",{\"1\":{\"1602\":1}}],[\"如果想访问这个外部函数的\",{\"1\":{\"1518\":1}}],[\"如果想创建一个普通的空对象\",{\"1\":{\"548\":1}}],[\"如果嵌套函数作为函数调用\",{\"1\":{\"1518\":1}}],[\"如果嵌套函数作为方法调用\",{\"1\":{\"1518\":1}}],[\"如果调用表达式包含一个提取属性的动作\",{\"1\":{\"1515\":1}}],[\"如果调用者函数中没有\",{\"1\":{\"1045\":1}}],[\"如果浏览器支持其中的一种方法\",{\"1\":{\"1466\":1}}],[\"如果还不支持\",{\"1\":{\"1466\":1}}],[\"如果前一个定时器尚未执行\",{\"1\":{\"1445\":1}}],[\"如果前一个定时器已经执行过了\",{\"1\":{\"1445\":1}}],[\"如果前缀是\",{\"1\":{\"913\":1}}],[\"如果遇到相同的\",{\"1\":{\"1441\":1}}],[\"如果为\",{\"1\":{\"1438\":1}}],[\"如果写成下面这样\",{\"1\":{\"1407\":1}}],[\"如果此时\",{\"1\":{\"1407\":1}}],[\"如果非尾部的参数设置默认值\",{\"1\":{\"1405\":1}}],[\"如果结合函数参数的默认值\",{\"1\":{\"1403\":1}}],[\"如果觉得上面的可读性比较差\",{\"1\":{\"1376\":1}}],[\"如果失败\",{\"1\":{\"1349\":1}}],[\"如果试着改变一个属性的值\",{\"1\":{\"1322\":1}}],[\"如果过滤出东西\",{\"1\":{\"1286\":1}}],[\"如果包含对这个值引用的变量又取得了另外一个值\",{\"1\":{\"1281\":1}}],[\"如果这个回调函数一直执行\",{\"1\":{\"1446\":1}}],[\"如果这个函数处于非严格模式下\",{\"1\":{\"1302\":1,\"1306\":1}}],[\"如果这个值再被赋值给另一个变量\",{\"1\":{\"1281\":1}}],[\"如果这个元素有任何的\",{\"1\":{\"58\":1}}],[\"如果给参数\",{\"1\":{\"1253\":1}}],[\"如果给定的函数不存在\",{\"1\":{\"1164\":1}}],[\"如果第一个操作数为\",{\"1\":{\"1253\":1}}],[\"如果第一个操作数是\",{\"1\":{\"1253\":1,\"1254\":2}}],[\"如果第一个操作数是假值\",{\"1\":{\"1197\":1}}],[\"如果第一个操作数能够决定结果\",{\"1\":{\"1253\":1,\"1254\":1}}],[\"如果等号右边是数值和布尔值\",{\"1\":{\"1220\":1}}],[\"如果等号右边不是数组\",{\"1\":{\"1216\":1}}],[\"如果解构模式是嵌套的对象\",{\"1\":{\"1218\":1}}],[\"如果解构失败\",{\"1\":{\"1218\":1,\"1221\":1}}],[\"如果解构不成功\",{\"1\":{\"1215\":1}}],[\"如果默认值是一个表达式\",{\"1\":{\"1217\":1}}],[\"如果两边操作数不相等时返回\",{\"1\":{\"1202\":1}}],[\"如果两边操作数相等时返回\",{\"1\":{\"1202\":1}}],[\"如果两个操作值都是字符串\",{\"1\":{\"953\":1}}],[\"如果两个操作值都是数值\",{\"1\":{\"953\":1}}],[\"如果两个操作值都是对象\",{\"1\":{\"952\":1}}],[\"如果两个操作数不是相同的类型\",{\"1\":{\"1200\":1}}],[\"如果两个操作数都不是\",{\"1\":{\"951\":1}}],[\"如果两个操作数中只要存在一个操作数为\",{\"1\":{\"951\":1}}],[\"如果无定义则使用一个默认值\",{\"1\":{\"1197\":1}}],[\"如果无法成功转换成数字\",{\"1\":{\"951\":1}}],[\"如果求值结果是\",{\"1\":{\"1197\":2}}],[\"如果将\",{\"1\":{\"1407\":1,\"1586\":1}}],[\"如果将一个具名函数赋值给一个变量\",{\"1\":{\"1295\":1}}],[\"如果将一个匿名函数赋值给一个变量\",{\"1\":{\"1295\":1}}],[\"如果将扩展运算符用于数组赋值\",{\"1\":{\"1183\":1}}],[\"如果将类方法内部的方法提取出来单独使用\",{\"1\":{\"607\":1}}],[\"如果url含有\",{\"1\":{\"1160\":1}}],[\"如果任意一个位是\",{\"1\":{\"1144\":1}}],[\"如果对应两个操作位有且仅有一个\",{\"1\":{\"1146\":1}}],[\"如果对应的位都为\",{\"1\":{\"1144\":1}}],[\"如果对象的原型链上有一个与待删除属性同名的属性\",{\"1\":{\"1101\":1}}],[\"如果对象表达式后跟随一对方括号\",{\"1\":{\"1087\":1}}],[\"如果对象表达式后跟随句点和标识符\",{\"1\":{\"1087\":1}}],[\"如果对象没有\",{\"1\":{\"953\":1}}],[\"如果对象需要定义很多方法\",{\"1\":{\"592\":1}}],[\"如果对象不存在\",{\"1\":{\"560\":1}}],[\"如果对象有更多的层级\",{\"1\":{\"402\":1}}],[\"如果命名的属性不存在\",{\"1\":{\"1087\":1}}],[\"如果计算结果不是对象\",{\"1\":{\"1087\":1}}],[\"如果计算结果是\",{\"1\":{\"1087\":1}}],[\"如果使用严格模式\",{\"1\":{\"1578\":1}}],[\"如果使用了构造方法\",{\"1\":{\"1490\":1}}],[\"如果使用\",{\"1\":{\"1069\":1,\"1256\":1,\"1694\":1}}],[\"如果内部的\",{\"1\":{\"1054\":1}}],[\"如果从整个软件工程来看\",{\"1\":{\"1621\":1}}],[\"如果从\",{\"1\":{\"1053\":1}}],[\"如果没成功\",{\"1\":{\"1052\":1}}],[\"如果没有函数名\",{\"1\":{\"1685\":1}}],[\"如果没有找到\",{\"1\":{\"1569\":1}}],[\"如果没有对象调用\",{\"1\":{\"1477\":1}}],[\"如果没有执行完就清除掉\",{\"1\":{\"1444\":1}}],[\"如果没有向参数\",{\"1\":{\"1254\":1}}],[\"如果没有指向这个属性的引用了\",{\"1\":{\"1097\":1}}],[\"如果没有关键词\",{\"1\":{\"1041\":1}}],[\"如果没有参数或者参数多于一个就需要加括号\",{\"1\":{\"1364\":1}}],[\"如果没有参数\",{\"1\":{\"930\":1}}],[\"如果没有提供\",{\"1\":{\"913\":1}}],[\"如果没有查找到相关属性或方法\",{\"1\":{\"648\":1}}],[\"如果没有资源修改\",{\"1\":{\"430\":1}}],[\"如果没有命中强缓存\",{\"1\":{\"430\":1}}],[\"如果没有进行判断\",{\"1\":{\"394\":1}}],[\"如果没有则取window\",{\"1\":{\"392\":1,\"393\":1}}],[\"如果没有父元素\",{\"1\":{\"332\":1}}],[\"如果没有事先告诉浏览器\",{\"1\":{\"321\":1}}],[\"如果没有第三次握手\",{\"1\":{\"303\":1}}],[\"如果没有\",{\"1\":{\"39\":1,\"392\":1,\"458\":1,\"1034\":1,\"1398\":1,\"1670\":1}}],[\"如果匹配成功\",{\"1\":{\"1039\":1}}],[\"如果函数不需要函数名\",{\"1\":{\"1684\":1}}],[\"如果函数并不关心\",{\"1\":{\"1586\":1}}],[\"如果函数或者方法调用之前带有关键字\",{\"1\":{\"1522\":1}}],[\"如果函数名称有所改变\",{\"1\":{\"1469\":1}}],[\"如果函数\",{\"1\":{\"1403\":2}}],[\"如果函数没有括号\",{\"1\":{\"1370\":1}}],[\"如果函数体只有一个表达式\",{\"1\":{\"1369\":1}}],[\"如果函数体里只有一句return\",{\"1\":{\"346\":1}}],[\"如果函数调用时在前面加上了\",{\"1\":{\"1035\":1}}],[\"如果条件式为\",{\"1\":{\"1018\":1}}],[\"如果找到的枚举属性是对象自己的\",{\"1\":{\"1004\":1}}],[\"如果找不到会按照顺序使用其他字体\",{\"1\":{\"78\":1}}],[\"如果检测结果为\",{\"1\":{\"969\":1}}],[\"如果运算符两边均为原始数据类型时\",{\"1\":{\"951\":1}}],[\"如果指定的字符串中包含非数字字符\",{\"1\":{\"909\":1,\"913\":1}}],[\"如果指定的数字为非\",{\"1\":{\"903\":1}}],[\"如果指定的数字为\",{\"1\":{\"897\":1,\"903\":1}}],[\"如果参数的默认值是一个函数\",{\"1\":{\"1407\":1}}],[\"如果参数不是\",{\"1\":{\"955\":1}}],[\"如果参数\",{\"1\":{\"874\":1,\"891\":2,\"898\":1,\"903\":1,\"1398\":1}}],[\"如果参数自身就是对象\",{\"1\":{\"807\":1}}],[\"如果参数为原始数据类型\",{\"1\":{\"807\":1}}],[\"如果参数是一个原始类型的值\",{\"1\":{\"547\":1}}],[\"如果省略了\",{\"1\":{\"800\":1}}],[\"如果只是模块名\",{\"1\":{\"1632\":1}}],[\"如果只想获取键名\",{\"1\":{\"1234\":1}}],[\"如果只有一个操作值是数值\",{\"1\":{\"953\":1}}],[\"如果只有一个参数\",{\"1\":{\"346\":1}}],[\"如果只需要获取可枚举属性\",{\"1\":{\"731\":1}}],[\"如果合并源包含\",{\"1\":{\"678\":1}}],[\"如果已声明了一个变量但还未进行初始化\",{\"1\":{\"864\":1}}],[\"如果已经存在的元素被改变了\",{\"1\":{\"669\":1}}],[\"如果已缓存\",{\"1\":{\"464\":1}}],[\"如果提供\",{\"1\":{\"669\":1}}],[\"如果提供了\",{\"1\":{\"59\":2}}],[\"如果原型对象中也找不到\",{\"1\":{\"646\":1}}],[\"如果静态方法包含\",{\"1\":{\"630\":1}}],[\"如果子类没有定义构造函数\",{\"1\":{\"619\":1}}],[\"如果因某个实现中缺少某个方法\",{\"1\":{\"580\":1}}],[\"如果我们在实例中添加了一个属性\",{\"1\":{\"576\":1}}],[\"如果在一个模块之中\",{\"1\":{\"1639\":1}}],[\"如果在一个方法前\",{\"1\":{\"629\":1}}],[\"如果在电梯门块关闭之前\",{\"1\":{\"1444\":1}}],[\"如果在同一个单位时间内某事件被触发多次\",{\"1\":{\"1431\":1}}],[\"如果在\",{\"1\":{\"1052\":2}}],[\"如果在已经创建了实例的情况下重写原型\",{\"1\":{\"570\":1}}],[\"如果在数组中找到一个元素使得提供的函数返回\",{\"1\":{\"350\":1}}],[\"如果取消某一个变量对于原对象的引用\",{\"1\":{\"552\":1}}],[\"如果不想调用\",{\"1\":{\"1490\":1}}],[\"如果不想遍历原型方法和属性的话\",{\"1\":{\"388\":1}}],[\"如果不支持\",{\"1\":{\"1466\":1}}],[\"如果不做特殊处理的话\",{\"1\":{\"1312\":1}}],[\"如果不需要的话\",{\"1\":{\"1279\":1}}],[\"如果不用扩展运算\",{\"1\":{\"1184\":1}}],[\"如果不能确定哪些属性必定存在\",{\"1\":{\"1164\":1}}],[\"如果不是因为某些特殊任务而需要闭包\",{\"1\":{\"1711\":1}}],[\"如果不是\",{\"1\":{\"1346\":1}}],[\"如果不是会报语法错误\",{\"1\":{\"1033\":1}}],[\"如果不是字符串也会自动转换成字符串\",{\"1\":{\"550\":1}}],[\"如果不调用\",{\"1\":{\"619\":1}}],[\"如果不同过\",{\"1\":{\"591\":1}}],[\"如果不同的变量名指向同一个对象\",{\"1\":{\"552\":1}}],[\"如果把函数传入语言内置的函数而不是传入你自己声明的函数\",{\"1\":{\"1579\":1}}],[\"如果把\",{\"1\":{\"1159\":1}}],[\"如果把对象所有自身属性变为不可配置\",{\"1\":{\"539\":1}}],[\"如果把一个空对象变得不可扩展\",{\"1\":{\"539\":1}}],[\"如果把这两个函数放入一个\",{\"1\":{\"460\":1}}],[\"如果属性值为函数\",{\"1\":{\"551\":1}}],[\"如果属性值仅为\",{\"1\":{\"14\":1}}],[\"如果属性同时具有\",{\"1\":{\"532\":1}}],[\"如果版本号不存在某个下标处的修订号\",{\"1\":{\"509\":1}}],[\"如果版本号没有指定某个下标处的修订号\",{\"1\":{\"509\":1}}],[\"如果目标对象中的属性具有相同的键\",{\"1\":{\"678\":1}}],[\"如果目标值存在返回下标\",{\"1\":{\"503\":1}}],[\"如果目录不存在报错\",{\"1\":{\"194\":1}}],[\"如果字符串以非数字字符开头\",{\"1\":{\"909\":1,\"913\":1}}],[\"如果字符串的反序与原始字符串相同\",{\"1\":{\"494\":1}}],[\"如果字符没有相应的\",{\"1\":{\"84\":1}}],[\"如果链表中存在环\",{\"1\":{\"491\":1}}],[\"如果链表中有某个节点\",{\"1\":{\"491\":1}}],[\"如果验证缓存新鲜\",{\"1\":{\"464\":1}}],[\"如果请求资源在缓存中并且新鲜\",{\"1\":{\"464\":1}}],[\"如果请求的文件是真实存在的\",{\"1\":{\"153\":1}}],[\"如果设置了默认值的参数不是尾参数\",{\"1\":{\"1406\":1}}],[\"如果设置里有timer\",{\"1\":{\"458\":1}}],[\"如果设置强缓存\",{\"1\":{\"430\":1}}],[\"如果存在匹配\",{\"1\":{\"1040\":1}}],[\"如果存在\",{\"1\":{\"457\":1,\"470\":1,\"1552\":1}}],[\"如果文件在1秒内修改\",{\"1\":{\"430\":1}}],[\"如果文件存在\",{\"1\":{\"203\":1}}],[\"如果资源可缓存\",{\"1\":{\"464\":1}}],[\"如果资源未缓存\",{\"1\":{\"464\":1}}],[\"如果资源修改\",{\"1\":{\"430\":1}}],[\"如果资源发生修改\",{\"1\":{\"430\":1}}],[\"如果资源没有发生修改\",{\"1\":{\"430\":1}}],[\"如果缓存资源有效\",{\"1\":{\"429\":1}}],[\"如果数据改变\",{\"1\":{\"402\":1}}],[\"如果数组中能找到此元素\",{\"1\":{\"364\":1}}],[\"如果数组或对象中的元素是引用类型的元素\",{\"1\":{\"343\":1}}],[\"如果是有状态的解析过程\",{\"1\":{\"1674\":1}}],[\"如果是函数执行上下文\",{\"1\":{\"1564\":1}}],[\"如果是在全局作用域中调用当前函数\",{\"1\":{\"1386\":1}}],[\"如果是普通函数\",{\"1\":{\"1375\":1}}],[\"如果是\",{\"1\":{\"1004\":1,\"1160\":1,\"1670\":2}}],[\"如果是纯数字形式\",{\"1\":{\"944\":1}}],[\"如果是字符串类型\",{\"1\":{\"558\":1}}],[\"如果是匿名函数\",{\"1\":{\"551\":1}}],[\"如果是对象的话\",{\"1\":{\"407\":1}}],[\"如果是对象\",{\"1\":{\"402\":1}}],[\"如果是数组类型\",{\"1\":{\"402\":1}}],[\"如果返回值是一个对象\",{\"1\":{\"1035\":1,\"1036\":1}}],[\"如果返回的还是引用数据类型\",{\"1\":{\"946\":1}}],[\"如果返回的不是原始数据类型\",{\"1\":{\"946\":1}}],[\"如果返回的是对象\",{\"1\":{\"346\":1}}],[\"如果返回函数是被new了\",{\"1\":{\"394\":1}}],[\"如果传入undefined\",{\"1\":{\"1405\":1}}],[\"如果传入值为\",{\"1\":{\"946\":2}}],[\"如果传入参数\",{\"1\":{\"392\":1}}],[\"如果传的是一个无限大的数字\",{\"1\":{\"374\":1}}],[\"如果所有变量和函数都在全局作用域中\",{\"1\":{\"1681\":1}}],[\"如果所有promise都失败\",{\"1\":{\"383\":1}}],[\"如果所有项目的flex\",{\"1\":{\"332\":1}}],[\"如果项目只有一根轴线\",{\"1\":{\"332\":1}}],[\"如果一条轴线排不下\",{\"1\":{\"332\":1}}],[\"如果一个数组成员是\",{\"1\":{\"1217\":1}}],[\"如果一个数组成员不严格等于\",{\"1\":{\"1217\":1}}],[\"如果一个运算数不是整数\",{\"1\":{\"1142\":1}}],[\"如果一个属性是\",{\"1\":{\"1111\":1}}],[\"如果一个属性的值是个对象\",{\"1\":{\"540\":1,\"706\":1}}],[\"如果一个操作值是布尔值\",{\"1\":{\"953\":1}}],[\"如果一个操作值为\",{\"1\":{\"952\":1}}],[\"如果一个操作数是对象\",{\"1\":{\"953\":1}}],[\"如果一个函数没有返回值\",{\"1\":{\"865\":1}}],[\"如果一个变量未被初始化赋值\",{\"1\":{\"865\":1}}],[\"如果一个对象可以添加新的属性\",{\"1\":{\"812\":1}}],[\"如果一个项目的flex\",{\"1\":{\"332\":1}}],[\"如果一个元素具有多个属性\",{\"1\":{\"117\":1}}],[\"如果一个元素拥有滚动机制\",{\"1\":{\"105\":1}}],[\"如果一个值是\",{\"1\":{\"102\":2}}],[\"如果它们没有妥善地将内部私有的函数或变量隐藏起来\",{\"1\":{\"1683\":1}}],[\"如果它是真值\",{\"1\":{\"1197\":1}}],[\"如果它是原始类型\",{\"1\":{\"951\":1}}],[\"如果它是一个单独的内联盒\",{\"1\":{\"329\":1}}],[\"如果它只有\",{\"1\":{\"532\":2}}],[\"如果它的外部显示类型是\",{\"1\":{\"329\":1}}],[\"如果服务端端没有收到\",{\"1\":{\"304\":1}}],[\"如果攻击者伪造了成千上万的握手报文\",{\"1\":{\"303\":1}}],[\"如果当前这个模块依赖另一个模块怎么办\",{\"1\":{\"1613\":1}}],[\"如果当前数字大于0\",{\"1\":{\"476\":1}}],[\"如果当前语句和随后的非空格字符不能当成一个整体来解析的话\",{\"1\":{\"252\":1,\"253\":1}}],[\"如果当前行无法放下需要被打断的单词\",{\"1\":{\"90\":1}}],[\"如果0b之后有除了\",{\"1\":{\"245\":1}}],[\"如果响应资源进行了压缩\",{\"1\":{\"155\":1}}],[\"如果你经常编写\",{\"1\":{\"1589\":1}}],[\"如果你只是将一个属性的值赋值为\",{\"1\":{\"1110\":1}}],[\"如果你只是想编码一个带有特殊字符\",{\"1\":{\"880\":1,\"886\":1}}],[\"如果你使用\",{\"1\":{\"1110\":1}}],[\"如果你试图删除的属性不存在\",{\"1\":{\"1101\":1}}],[\"如果你重新声明一个\",{\"1\":{\"1065\":1}}],[\"如果你需要在表达式中使用赋值\",{\"1\":{\"1020\":1}}],[\"如果你需要联系页面的作者\",{\"1\":{\"129\":1}}],[\"如果你不想修改语句块中的变量\",{\"1\":{\"993\":1}}],[\"如果你不能获取任何利润\",{\"1\":{\"485\":1}}],[\"如果你用\",{\"1\":{\"893\":1}}],[\"如果你想把\",{\"1\":{\"880\":1,\"886\":1}}],[\"如果你遇到了图标没有被加载的问题\",{\"1\":{\"130\":1}}],[\"如果你的网站使用了内容安全策略\",{\"1\":{\"130\":1}}],[\"如果背景颜色和背景图像都设置了\",{\"1\":{\"99\":1}}],[\"如果按照字面意思来理解\",{\"1\":{\"575\":1}}],[\"如果按照\",{\"1\":{\"94\":1}}],[\"如果要使用的常量非常多\",{\"1\":{\"1661\":1}}],[\"如果要使用斜体外观将应用\",{\"1\":{\"74\":1}}],[\"如果要用\",{\"1\":{\"1374\":1}}],[\"如果要返回多个值\",{\"1\":{\"1230\":1}}],[\"如果要將一个已经声明的变量用于解构赋值\",{\"1\":{\"1218\":1}}],[\"如果要对使用\",{\"1\":{\"880\":1,\"886\":1}}],[\"如果要监听基本数据类型的更改\",{\"1\":{\"408\":1}}],[\"如果要居中对齐就用\",{\"1\":{\"93\":1}}],[\"如果需要返回多个值\",{\"1\":{\"1179\":1}}],[\"如果需要回调函数从数组索引为\",{\"1\":{\"352\":1}}],[\"如果需要\",{\"1\":{\"90\":1}}],[\"如果该参数的值\",{\"1\":{\"1302\":1}}],[\"如果该参数是一个对象\",{\"1\":{\"547\":1}}],[\"如果该值为引用数据类型\",{\"1\":{\"951\":1}}],[\"如果该值为原始数据类型\",{\"1\":{\"951\":1}}],[\"如果该对象内部不存在这个属性\",{\"1\":{\"646\":1}}],[\"如果该对象不是空对象\",{\"1\":{\"539\":1}}],[\"如果该属性不存在\",{\"1\":{\"560\":1}}],[\"如果该盒没有基线\",{\"1\":{\"82\":1}}],[\"如果该元素是块级元素\",{\"1\":{\"37\":1}}],[\"如果定义了多组阴影效果\",{\"1\":{\"59\":1}}],[\"如果元素同时设置了\",{\"1\":{\"59\":1}}],[\"如果有其它消息\",{\"1\":{\"1543\":1}}],[\"如果有的话\",{\"1\":{\"1312\":1}}],[\"如果有定义则使用它\",{\"1\":{\"1197\":1}}],[\"如果有在\",{\"1\":{\"1052\":1}}],[\"如果有返回的是基础类型\",{\"1\":{\"951\":3}}],[\"如果有这么一个对象的话\",{\"1\":{\"640\":1}}],[\"如果有就回到\",{\"1\":{\"458\":1}}],[\"如果有就按照先进先出的原则\",{\"1\":{\"457\":1}}],[\"如果有一个promise成功\",{\"1\":{\"383\":1}}],[\"如果有空间\",{\"1\":{\"329\":1}}],[\"如果有不在\",{\"1\":{\"245\":2}}],[\"如果有\",{\"1\":{\"39\":1,\"458\":1}}],[\"如果\",{\"1\":{\"38\":2,\"94\":1,\"509\":2,\"540\":1,\"683\":1,\"800\":2,\"807\":1,\"913\":1,\"946\":2,\"948\":1,\"960\":1,\"976\":1,\"1014\":1,\"1041\":1,\"1161\":1,\"1218\":2,\"1344\":1,\"1349\":2,\"1593\":1,\"1675\":1,\"1693\":1}}],[\"如果都找不到\",{\"1\":{\"36\":1}}],[\"如果父级不是\",{\"1\":{\"35\":1}}],[\"如果长度值是\",{\"1\":{\"23\":1}}],[\"如\",{\"1\":{\"5\":1,\"37\":1,\"130\":1,\"287\":1,\"291\":1,\"301\":1,\"438\":1,\"464\":1,\"805\":1,\"934\":1,\"943\":1,\"949\":1,\"1055\":1,\"1186\":1,\"1473\":1}}],[\"cb\",{\"1\":{\"1424\":2}}],[\"cbbd\",{\"1\":{\"494\":1}}],[\"c++\",{\"1\":{\"1260\":1,\"1279\":1}}],[\"city\",{\"1\":{\"1166\":1}}],[\"cxk\",{\"1\":{\"587\":1}}],[\"cry\",{\"1\":{\"1658\":6}}],[\"creator\",{\"1\":{\"640\":3,\"656\":2}}],[\"createuser\",{\"1\":{\"587\":3}}],[\"createperson\",{\"1\":{\"586\":4}}],[\"createelement\",{\"1\":{\"584\":1,\"1274\":1,\"1502\":2}}],[\"create\",{\"0\":{\"548\":1,\"652\":1,\"682\":1},\"1\":{\"402\":1,\"408\":1,\"545\":1,\"548\":7,\"640\":4,\"652\":2,\"656\":1,\"659\":3,\"664\":1,\"682\":1,\"683\":1,\"684\":1,\"735\":1,\"748\":1,\"781\":2,\"796\":1,\"803\":1,\"1312\":1,\"1489\":4,\"1581\":1,\"1587\":1}}],[\"crossdomain\",{\"1\":{\"1233\":1}}],[\"cross\",{\"1\":{\"332\":1}}],[\"ceil\",{\"1\":{\"1312\":1}}],[\"cell\",{\"1\":{\"325\":1,\"329\":1}}],[\"centos\",{\"0\":{\"218\":1}}],[\"centos7\",{\"1\":{\"217\":1}}],[\"center\",{\"1\":{\"81\":1,\"102\":1,\"105\":1,\"332\":1}}],[\"ctx则是我们传入要指定this指向的对象\",{\"1\":{\"392\":1}}],[\"ctx\",{\"1\":{\"392\":6,\"393\":5}}],[\"ctrl+f5\",{\"1\":{\"431\":1}}],[\"ctrl+l\",{\"1\":{\"224\":1}}],[\"ctrl+c\",{\"1\":{\"206\":1}}],[\"ctime\",{\"1\":{\"215\":1}}],[\"cpu\",{\"1\":{\"948\":1,\"1432\":1,\"1547\":3,\"1551\":1}}],[\"cpu对应的汇编代码\",{\"1\":{\"144\":1}}],[\"cp\",{\"1\":{\"199\":2}}],[\"cd\",{\"1\":{\"194\":8}}],[\"calculateexponent\",{\"1\":{\"1209\":2}}],[\"calls\",{\"1\":{\"1385\":1}}],[\"caller\",{\"0\":{\"1386\":1},\"1\":{\"1385\":1,\"1386\":13,\"1620\":2}}],[\"callee\",{\"0\":{\"1385\":1},\"1\":{\"1385\":5,\"1394\":1,\"1620\":1,\"1685\":1}}],[\"called\",{\"1\":{\"1077\":2}}],[\"callbackobj\",{\"1\":{\"1457\":2}}],[\"callback\",{\"1\":{\"668\":3,\"1425\":1,\"1452\":4,\"1456\":3,\"1457\":4,\"1502\":8,\"1534\":1}}],[\"callbacks\",{\"1\":{\"458\":2,\"1534\":3}}],[\"callable\",{\"1\":{\"392\":1,\"393\":1,\"394\":1}}],[\"call\",{\"0\":{\"392\":1,\"1304\":1},\"1\":{\"391\":1,\"392\":2,\"394\":2,\"402\":1,\"614\":1,\"621\":1,\"635\":3,\"636\":1,\"659\":2,\"662\":1,\"664\":1,\"684\":1,\"838\":6,\"936\":8,\"1130\":1,\"1304\":1,\"1305\":1,\"1306\":1,\"1307\":2,\"1311\":1,\"1312\":1,\"1375\":6,\"1393\":2,\"1413\":1,\"1418\":2,\"1419\":3,\"1441\":1,\"1504\":6,\"1529\":3,\"1556\":1,\"1580\":5,\"1583\":2,\"1584\":3,\"1586\":2,\"1587\":1,\"1588\":1,\"1589\":2,\"1590\":1}}],[\"callnow\",{\"1\":{\"290\":2}}],[\"carl\",{\"1\":{\"1166\":1}}],[\"cars\",{\"1\":{\"1060\":3,\"1109\":7,\"1110\":6}}],[\"car\",{\"1\":{\"550\":1,\"607\":1,\"986\":3,\"1042\":4,\"1484\":1}}],[\"carakan\",{\"1\":{\"144\":1,\"1550\":1}}],[\"canrun\",{\"1\":{\"1438\":5}}],[\"canvas\",{\"1\":{\"1437\":1}}],[\"can\",{\"1\":{\"928\":2,\"1356\":1}}],[\"cancelbubble\",{\"1\":{\"455\":1}}],[\"cannot\",{\"1\":{\"341\":1,\"408\":1,\"530\":1,\"538\":1,\"539\":2,\"540\":1,\"548\":1,\"563\":2,\"928\":1,\"1185\":1,\"1186\":1,\"1386\":2,\"1403\":2}}],[\"cache\",{\"1\":{\"429\":4,\"430\":2,\"464\":2,\"1233\":1,\"1441\":4}}],[\"case\",{\"1\":{\"249\":1,\"963\":3,\"1039\":1,\"1040\":5,\"1041\":2,\"1042\":3,\"1067\":5}}],[\"catch块是唯一的\",{\"1\":{\"1052\":1}}],[\"catch\",{\"0\":{\"1051\":1,\"1052\":1},\"1\":{\"249\":1,\"1034\":1,\"1045\":2,\"1048\":2,\"1051\":5,\"1052\":9,\"1053\":6,\"1054\":7,\"1055\":4,\"1344\":2,\"1348\":6,\"1349\":3,\"1350\":1,\"1352\":1,\"1357\":1,\"1593\":1,\"1595\":1}}],[\"cat\",{\"1\":{\"206\":1,\"381\":2,\"927\":1,\"1253\":3,\"1254\":6}}],[\"caption\",{\"1\":{\"329\":1}}],[\"capitalize\",{\"1\":{\"84\":1}}],[\"caps\",{\"1\":{\"76\":1}}],[\"csrf\",{\"0\":{\"418\":1},\"1\":{\"418\":1}}],[\"csp\",{\"1\":{\"130\":1,\"848\":1}}],[\"cssom\",{\"1\":{\"437\":3,\"464\":1}}],[\"css和javascript\",{\"1\":{\"425\":1}}],[\"css和js会打破这种布局\",{\"1\":{\"158\":1}}],[\"css选择器的权重和优先级\",{\"0\":{\"335\":1}}],[\"css2\",{\"1\":{\"29\":4,\"31\":3}}],[\"css1\",{\"1\":{\"24\":2,\"25\":7,\"28\":5,\"30\":1}}],[\"css3\",{\"1\":{\"13\":1,\"14\":1,\"15\":1,\"16\":2,\"24\":6,\"26\":4,\"27\":2,\"28\":6,\"29\":2,\"30\":8,\"48\":1,\"108\":1,\"271\":1,\"272\":1}}],[\"css\",{\"0\":{\"2\":1,\"3\":1,\"131\":1,\"1715\":1,\"1729\":1,\"1736\":1},\"1\":{\"2\":3,\"3\":1,\"6\":1,\"14\":1,\"15\":1,\"18\":5,\"19\":2,\"39\":1,\"58\":1,\"59\":2,\"83\":1,\"108\":1,\"109\":1,\"120\":1,\"131\":2,\"139\":1,\"153\":1,\"235\":1,\"256\":2,\"270\":1,\"277\":2,\"329\":6,\"437\":2,\"438\":2,\"1614\":1,\"1621\":4},\"2\":{\"9\":1,\"21\":1,\"33\":1,\"42\":1,\"69\":1,\"96\":1,\"113\":1,\"268\":1,\"279\":1,\"282\":1,\"285\":1,\"328\":1,\"331\":1,\"334\":1,\"339\":1}}],[\"css简述\",{\"0\":{\"1\":1}}],[\"cjk\",{\"1\":{\"91\":3}}],[\"clear掉\",{\"1\":{\"1449\":1}}],[\"cleartimout\",{\"1\":{\"1446\":1}}],[\"cleartimeout\",{\"1\":{\"288\":1,\"289\":1,\"290\":1,\"1433\":1,\"1446\":1,\"1449\":1}}],[\"clearinterval\",{\"1\":{\"1288\":1}}],[\"clean\",{\"1\":{\"169\":1}}],[\"closure\",{\"1\":{\"1287\":2}}],[\"closes\",{\"1\":{\"1000\":1}}],[\"close\",{\"1\":{\"304\":1,\"458\":1,\"1534\":3}}],[\"closing\",{\"1\":{\"116\":1}}],[\"clone\",{\"1\":{\"165\":1,\"656\":3}}],[\"click\",{\"1\":{\"1273\":1,\"1286\":1,\"1375\":1,\"1435\":2,\"1539\":1,\"1540\":1,\"1595\":2}}],[\"climbstairs\",{\"1\":{\"518\":1}}],[\"cli\",{\"1\":{\"161\":2}}],[\"clip\",{\"0\":{\"106\":1,\"271\":1},\"1\":{\"87\":1,\"106\":1,\"271\":1}}],[\"cluster\",{\"1\":{\"85\":1}}],[\"classlist\",{\"1\":{\"999\":1}}],[\"class=\",{\"1\":{\"117\":1}}],[\"classname\",{\"1\":{\"15\":1}}],[\"class^=\",{\"1\":{\"14\":1}}],[\"class\",{\"0\":{\"359\":1,\"1482\":1},\"1\":{\"12\":2,\"14\":1,\"117\":1,\"229\":1,\"249\":1,\"439\":1,\"587\":2,\"593\":1,\"596\":1,\"597\":1,\"599\":2,\"600\":1,\"603\":2,\"604\":1,\"605\":1,\"606\":1,\"607\":2,\"612\":1,\"613\":1,\"614\":1,\"615\":3,\"619\":4,\"621\":2,\"622\":4,\"623\":4,\"624\":7,\"625\":2,\"629\":1,\"630\":1,\"631\":2,\"632\":4,\"684\":3,\"930\":1,\"1131\":1,\"1436\":1,\"1473\":2,\"1483\":1,\"1484\":3,\"1485\":2,\"1486\":1,\"1487\":1,\"1488\":2,\"1489\":1,\"1490\":4,\"1491\":2,\"1492\":2,\"1493\":1,\"1651\":1}}],[\"classes\",{\"1\":{\"11\":1,\"16\":1}}],[\"cn\",{\"1\":{\"79\":1,\"120\":1,\"132\":1}}],[\"customercity\",{\"1\":{\"1166\":1}}],[\"customer\",{\"1\":{\"1166\":2}}],[\"custom\",{\"1\":{\"79\":1}}],[\"curlevelength\",{\"1\":{\"479\":2}}],[\"cur\",{\"1\":{\"473\":6,\"488\":4,\"497\":6,\"500\":6}}],[\"curried\",{\"1\":{\"1587\":4}}],[\"curryn\",{\"1\":{\"1417\":1}}],[\"curry\",{\"1\":{\"1417\":6,\"1418\":1}}],[\"currying\",{\"1\":{\"1416\":2,\"1418\":5}}],[\"curr\",{\"1\":{\"1001\":5}}],[\"currcount\",{\"1\":{\"352\":2}}],[\"current\",{\"1\":{\"1323\":3}}],[\"currentvalue\",{\"1\":{\"351\":2,\"352\":2,\"668\":2}}],[\"currentcolor\",{\"1\":{\"28\":1}}],[\"cursive\",{\"1\":{\"71\":1}}],[\"cmd\",{\"0\":{\"1618\":1},\"1\":{\"1618\":3}}],[\"cm\",{\"1\":{\"25\":1}}],[\"c\",{\"1\":{\"17\":1,\"212\":1,\"213\":1,\"215\":2,\"245\":5,\"354\":6,\"381\":1,\"388\":2,\"392\":5,\"393\":3,\"394\":4,\"539\":3,\"540\":2,\"673\":2,\"689\":2,\"695\":2,\"701\":3,\"733\":1,\"734\":2,\"769\":1,\"787\":1,\"794\":1,\"795\":1,\"807\":6,\"820\":6,\"825\":1,\"843\":1,\"870\":1,\"875\":2,\"941\":1,\"986\":1,\"996\":2,\"1066\":3,\"1068\":3,\"1075\":1,\"1131\":1,\"1181\":3,\"1185\":1,\"1219\":2,\"1224\":4,\"1226\":1,\"1230\":1,\"1242\":3,\"1248\":1,\"1253\":1,\"1254\":1,\"1260\":1,\"1264\":2,\"1273\":1,\"1274\":1,\"1279\":1,\"1284\":1,\"1294\":2,\"1367\":2,\"1395\":1,\"1406\":4,\"1418\":2,\"1564\":2,\"1565\":2,\"1661\":1,\"1674\":3,\"1675\":3,\"1676\":1}}],[\"co\",{\"1\":{\"1338\":1,\"1426\":2}}],[\"cos\",{\"1\":{\"1218\":1}}],[\"core\",{\"1\":{\"1550\":1,\"1636\":2}}],[\"coral\",{\"1\":{\"1109\":1}}],[\"cors\",{\"1\":{\"450\":1}}],[\"code\",{\"1\":{\"749\":2,\"891\":5,\"892\":1,\"943\":1,\"951\":1,\"1035\":1,\"1695\":1}}],[\"court\",{\"1\":{\"581\":3}}],[\"count\",{\"1\":{\"1010\":2}}],[\"counting\",{\"1\":{\"488\":7}}],[\"countingsort\",{\"1\":{\"488\":2}}],[\"countednames\",{\"1\":{\"352\":2}}],[\"cookie\",{\"0\":{\"442\":1,\"443\":1},\"1\":{\"417\":2,\"418\":2}}],[\"collect\",{\"1\":{\"1458\":1}}],[\"collection\",{\"1\":{\"1393\":2,\"1418\":2}}],[\"collating\",{\"1\":{\"1203\":1}}],[\"colse\",{\"1\":{\"458\":1}}],[\"columns\",{\"1\":{\"1580\":3}}],[\"column\",{\"1\":{\"329\":2,\"1218\":2}}],[\"color2不是对象\",{\"1\":{\"1109\":1}}],[\"color2\",{\"1\":{\"1109\":2}}],[\"color1\",{\"1\":{\"1109\":2}}],[\"colors\",{\"1\":{\"662\":1}}],[\"color>\",{\"1\":{\"60\":1,\"83\":1,\"98\":1}}],[\"color\",{\"0\":{\"99\":1},\"1\":{\"2\":1,\"5\":1,\"6\":1,\"7\":1,\"28\":1,\"61\":2,\"99\":2,\"100\":1,\"110\":1,\"439\":2,\"986\":2,\"1156\":2}}],[\"cover\",{\"1\":{\"104\":1}}],[\"comsole\",{\"1\":{\"1699\":1}}],[\"combination\",{\"1\":{\"662\":1}}],[\"completion\",{\"1\":{\"1458\":1}}],[\"completecallback\",{\"1\":{\"1458\":2}}],[\"complete\",{\"1\":{\"1233\":1,\"1458\":1}}],[\"computer\",{\"1\":{\"1411\":1}}],[\"componentwillunmount\",{\"1\":{\"1436\":1}}],[\"componentdidmount\",{\"1\":{\"1436\":1}}],[\"component\",{\"1\":{\"584\":1,\"1436\":2,\"1490\":2}}],[\"compareversion\",{\"1\":{\"509\":2}}],[\"commonjs\",{\"0\":{\"1616\":1},\"1\":{\"1616\":2,\"1617\":1,\"1618\":2,\"1619\":2,\"1636\":1}}],[\"command\",{\"1\":{\"205\":1}}],[\"commit\",{\"1\":{\"165\":1,\"176\":3,\"177\":1}}],[\"com\",{\"1\":{\"100\":1,\"1139\":1,\"1349\":1,\"1403\":3,\"1449\":2,\"1458\":1,\"1502\":1}}],[\"concurrency\",{\"1\":{\"1547\":1}}],[\"concat\",{\"1\":{\"394\":1,\"488\":1,\"1181\":2,\"1274\":1,\"1418\":1,\"1571\":1,\"1587\":1}}],[\"conosole\",{\"1\":{\"1115\":1}}],[\"conditional\",{\"1\":{\"1197\":1}}],[\"condition\",{\"1\":{\"974\":2,\"1018\":2,\"1019\":3,\"1020\":2,\"1596\":1}}],[\"condensed\",{\"1\":{\"77\":4}}],[\"convert\",{\"1\":{\"548\":1,\"928\":3}}],[\"connect\",{\"1\":{\"301\":1}}],[\"connection\",{\"1\":{\"156\":1}}],[\"constants\",{\"1\":{\"1661\":11}}],[\"constant\",{\"1\":{\"1068\":1,\"1693\":1}}],[\"constr\",{\"1\":{\"935\":1}}],[\"construct\",{\"1\":{\"599\":1}}],[\"constructor\",{\"0\":{\"937\":1},\"1\":{\"569\":2,\"576\":3,\"578\":6,\"579\":1,\"587\":1,\"593\":1,\"597\":1,\"599\":1,\"600\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"607\":2,\"613\":1,\"615\":2,\"619\":3,\"621\":2,\"622\":3,\"623\":3,\"625\":2,\"632\":3,\"635\":1,\"644\":4,\"647\":2,\"653\":4,\"659\":5,\"662\":1,\"664\":1,\"684\":2,\"805\":1,\"820\":2,\"928\":1,\"929\":1,\"933\":1,\"935\":1,\"937\":3,\"1035\":2,\"1114\":1,\"1436\":1,\"1473\":1,\"1476\":5,\"1483\":2,\"1484\":3,\"1485\":1,\"1486\":1,\"1487\":1,\"1489\":1,\"1490\":4,\"1491\":2,\"1492\":2,\"1521\":1,\"1525\":1,\"1581\":3}}],[\"construction\",{\"1\":{\"464\":1}}],[\"const有变量提升\",{\"1\":{\"341\":1}}],[\"constdouble\",{\"1\":{\"250\":1}}],[\"const\",{\"0\":{\"341\":1,\"1068\":1,\"1076\":1,\"1693\":1},\"1\":{\"246\":3,\"249\":1,\"290\":2,\"341\":1,\"343\":1,\"344\":2,\"345\":2,\"346\":5,\"347\":1,\"348\":2,\"349\":1,\"350\":2,\"351\":2,\"352\":6,\"353\":3,\"354\":6,\"355\":3,\"364\":1,\"365\":1,\"367\":2,\"368\":2,\"371\":1,\"374\":3,\"377\":3,\"378\":1,\"381\":19,\"384\":2,\"392\":4,\"393\":4,\"394\":1,\"402\":2,\"403\":6,\"408\":7,\"460\":1,\"470\":1,\"473\":1,\"476\":2,\"479\":1,\"488\":7,\"497\":2,\"503\":2,\"506\":4,\"509\":3,\"521\":1,\"533\":1,\"534\":1,\"538\":4,\"539\":4,\"540\":8,\"546\":2,\"548\":6,\"550\":1,\"551\":2,\"556\":1,\"557\":1,\"559\":6,\"560\":1,\"562\":2,\"564\":1,\"565\":1,\"569\":2,\"570\":1,\"572\":1,\"575\":2,\"576\":2,\"579\":1,\"581\":2,\"586\":2,\"587\":2,\"590\":2,\"592\":2,\"599\":1,\"600\":1,\"603\":1,\"605\":1,\"613\":3,\"622\":2,\"624\":1,\"625\":1,\"629\":1,\"636\":1,\"640\":2,\"648\":2,\"650\":1,\"651\":2,\"652\":2,\"659\":2,\"671\":1,\"679\":2,\"684\":1,\"689\":1,\"694\":2,\"695\":1,\"701\":3,\"713\":3,\"714\":4,\"715\":4,\"716\":4,\"721\":1,\"726\":1,\"733\":1,\"734\":1,\"735\":1,\"737\":4,\"742\":4,\"748\":3,\"749\":2,\"756\":1,\"757\":1,\"781\":1,\"794\":1,\"795\":1,\"796\":1,\"807\":1,\"813\":2,\"819\":2,\"820\":2,\"825\":1,\"837\":1,\"838\":1,\"843\":1,\"859\":1,\"935\":2,\"941\":1,\"946\":1,\"955\":6,\"993\":2,\"1000\":1,\"1011\":1,\"1012\":4,\"1067\":1,\"1068\":11,\"1076\":4,\"1080\":10,\"1093\":1,\"1101\":1,\"1115\":5,\"1183\":5,\"1190\":1,\"1191\":1,\"1192\":1,\"1193\":1,\"1204\":2,\"1219\":1,\"1235\":1,\"1253\":1,\"1256\":2,\"1266\":3,\"1267\":2,\"1288\":3,\"1294\":2,\"1295\":2,\"1303\":1,\"1307\":2,\"1319\":4,\"1323\":1,\"1330\":1,\"1331\":1,\"1332\":1,\"1333\":1,\"1334\":2,\"1345\":1,\"1349\":2,\"1350\":1,\"1353\":4,\"1354\":1,\"1355\":2,\"1357\":1,\"1358\":1,\"1362\":1,\"1364\":3,\"1365\":2,\"1366\":1,\"1367\":2,\"1369\":1,\"1370\":1,\"1371\":1,\"1373\":4,\"1375\":2,\"1376\":6,\"1382\":1,\"1385\":1,\"1393\":2,\"1400\":2,\"1412\":1,\"1417\":4,\"1418\":10,\"1419\":2,\"1424\":1,\"1425\":1,\"1427\":1,\"1428\":2,\"1433\":1,\"1435\":1,\"1441\":2,\"1452\":2,\"1457\":1,\"1474\":1,\"1476\":3,\"1481\":1,\"1483\":1,\"1484\":2,\"1485\":2,\"1487\":2,\"1488\":1,\"1489\":1,\"1492\":1,\"1502\":5,\"1504\":3,\"1505\":8,\"1510\":1,\"1518\":2,\"1522\":1,\"1523\":1,\"1524\":2,\"1525\":1,\"1526\":4,\"1561\":2,\"1572\":1,\"1579\":5,\"1580\":2,\"1581\":2,\"1583\":2,\"1584\":2,\"1589\":6,\"1593\":3,\"1603\":3,\"1651\":2,\"1654\":1,\"1661\":6,\"1666\":2,\"1670\":3,\"1677\":2,\"1683\":1,\"1684\":2,\"1693\":12,\"1694\":2,\"1695\":3,\"1698\":2,\"1700\":1,\"1708\":1,\"1710\":1}}],[\"console\",{\"1\":{\"235\":1,\"252\":2,\"275\":1,\"276\":1,\"341\":3,\"342\":1,\"343\":5,\"344\":1,\"345\":1,\"347\":1,\"348\":2,\"349\":1,\"350\":1,\"351\":1,\"352\":2,\"353\":1,\"354\":4,\"355\":2,\"364\":2,\"367\":1,\"368\":1,\"371\":1,\"372\":6,\"374\":3,\"375\":1,\"377\":3,\"378\":2,\"380\":1,\"383\":4,\"388\":5,\"392\":6,\"393\":5,\"394\":8,\"402\":1,\"403\":1,\"408\":3,\"460\":4,\"529\":4,\"530\":3,\"531\":2,\"533\":2,\"534\":2,\"538\":4,\"539\":6,\"540\":5,\"547\":5,\"548\":6,\"552\":3,\"556\":2,\"557\":2,\"560\":2,\"564\":5,\"565\":2,\"569\":5,\"570\":1,\"571\":1,\"572\":1,\"575\":2,\"576\":3,\"578\":2,\"579\":1,\"581\":4,\"586\":1,\"590\":1,\"592\":3,\"593\":1,\"599\":1,\"604\":1,\"606\":1,\"622\":9,\"623\":4,\"624\":4,\"625\":2,\"630\":2,\"632\":2,\"635\":4,\"636\":2,\"640\":3,\"648\":3,\"650\":2,\"651\":2,\"652\":1,\"653\":6,\"656\":1,\"659\":3,\"662\":4,\"679\":1,\"684\":3,\"689\":2,\"694\":2,\"695\":2,\"701\":2,\"714\":2,\"715\":1,\"716\":2,\"733\":1,\"734\":2,\"735\":1,\"742\":3,\"769\":5,\"776\":7,\"781\":4,\"787\":8,\"794\":2,\"795\":2,\"796\":1,\"807\":9,\"825\":5,\"843\":1,\"854\":5,\"861\":2,\"870\":1,\"875\":2,\"881\":2,\"920\":1,\"924\":2,\"928\":2,\"929\":10,\"955\":2,\"962\":1,\"971\":1,\"977\":1,\"985\":1,\"986\":1,\"993\":2,\"994\":1,\"995\":1,\"996\":2,\"997\":1,\"998\":1,\"1000\":2,\"1001\":1,\"1002\":2,\"1003\":1,\"1004\":6,\"1010\":1,\"1011\":1,\"1012\":1,\"1027\":1,\"1033\":1,\"1034\":3,\"1035\":5,\"1048\":1,\"1052\":3,\"1053\":5,\"1054\":5,\"1065\":7,\"1066\":3,\"1067\":2,\"1069\":2,\"1075\":1,\"1076\":2,\"1077\":1,\"1087\":6,\"1093\":1,\"1094\":2,\"1102\":3,\"1115\":10,\"1135\":2,\"1137\":3,\"1144\":1,\"1145\":1,\"1146\":1,\"1147\":1,\"1148\":1,\"1149\":1,\"1153\":5,\"1154\":2,\"1158\":1,\"1159\":2,\"1169\":2,\"1183\":6,\"1190\":2,\"1191\":2,\"1192\":2,\"1193\":2,\"1197\":2,\"1204\":4,\"1208\":2,\"1217\":1,\"1232\":1,\"1234\":1,\"1248\":1,\"1249\":1,\"1253\":1,\"1254\":1,\"1255\":21,\"1256\":2,\"1271\":1,\"1289\":1,\"1293\":3,\"1294\":3,\"1295\":4,\"1296\":1,\"1303\":1,\"1307\":1,\"1312\":1,\"1319\":5,\"1323\":2,\"1329\":6,\"1333\":1,\"1334\":8,\"1340\":1,\"1344\":3,\"1345\":2,\"1346\":1,\"1348\":3,\"1349\":1,\"1352\":2,\"1356\":2,\"1358\":1,\"1375\":8,\"1380\":4,\"1381\":2,\"1382\":7,\"1383\":8,\"1385\":4,\"1386\":5,\"1388\":2,\"1389\":3,\"1393\":1,\"1398\":2,\"1399\":1,\"1402\":1,\"1403\":4,\"1405\":1,\"1407\":8,\"1417\":3,\"1419\":3,\"1424\":1,\"1425\":2,\"1426\":1,\"1427\":1,\"1435\":1,\"1436\":3,\"1438\":2,\"1449\":2,\"1452\":2,\"1457\":4,\"1467\":4,\"1474\":1,\"1476\":2,\"1481\":1,\"1483\":1,\"1485\":2,\"1486\":2,\"1488\":4,\"1489\":2,\"1490\":1,\"1491\":1,\"1492\":1,\"1497\":1,\"1502\":1,\"1504\":1,\"1505\":6,\"1509\":1,\"1510\":2,\"1511\":1,\"1515\":1,\"1516\":2,\"1518\":6,\"1522\":1,\"1523\":1,\"1525\":2,\"1526\":3,\"1529\":2,\"1533\":6,\"1557\":1,\"1561\":7,\"1570\":1,\"1576\":3,\"1578\":3,\"1579\":5,\"1580\":2,\"1583\":1,\"1584\":7,\"1586\":2,\"1589\":1,\"1600\":1,\"1601\":1,\"1611\":3,\"1612\":4,\"1613\":4,\"1614\":3,\"1616\":2,\"1658\":1,\"1661\":4,\"1670\":5,\"1674\":1,\"1675\":2,\"1677\":1,\"1681\":2,\"1682\":1,\"1684\":2,\"1685\":3,\"1686\":4,\"1691\":5,\"1692\":4,\"1693\":1,\"1694\":2,\"1695\":2,\"1698\":1,\"1699\":3,\"1700\":6,\"1701\":4,\"1702\":2,\"1703\":1,\"1704\":2,\"1708\":1,\"1709\":5,\"1710\":1}}],[\"consortium\",{\"1\":{\"139\":2}}],[\"configurable\",{\"1\":{\"528\":1,\"530\":8,\"532\":2,\"539\":1,\"540\":1,\"548\":2,\"688\":1,\"689\":1,\"694\":2,\"695\":1,\"721\":1,\"726\":2,\"776\":2,\"787\":3,\"825\":5,\"852\":1,\"926\":1,\"1101\":1}}],[\"config\",{\"1\":{\"171\":1,\"1233\":2,\"1617\":1,\"1621\":1}}],[\"context\",{\"1\":{\"325\":1,\"1381\":1,\"1386\":2,\"1401\":1,\"1407\":1,\"1532\":1,\"1552\":1,\"1557\":1,\"1580\":1}}],[\"content属性定义了多根轴线的对齐方式\",{\"1\":{\"332\":1}}],[\"content属性定义了项目在主轴上的对齐方式\",{\"1\":{\"332\":1}}],[\"contents\",{\"1\":{\"329\":3}}],[\"content\",{\"1\":{\"16\":2,\"48\":1,\"50\":1,\"58\":1,\"101\":2,\"116\":1,\"129\":2,\"130\":2,\"332\":2}}],[\"control属性\",{\"1\":{\"429\":1}}],[\"control\",{\"1\":{\"298\":1,\"429\":2,\"430\":1,\"464\":2}}],[\"continue\",{\"0\":{\"966\":1},\"1\":{\"249\":1,\"476\":1,\"521\":1,\"966\":1,\"969\":5,\"971\":4,\"1000\":2,\"1009\":1,\"1023\":1,\"1025\":1,\"1027\":1}}],[\"container2\",{\"1\":{\"1583\":4,\"1584\":3,\"1589\":2}}],[\"container1\",{\"1\":{\"1583\":4,\"1584\":10,\"1589\":4}}],[\"container\",{\"1\":{\"325\":1,\"329\":2,\"332\":1,\"1579\":17,\"1580\":5}}],[\"contain\",{\"1\":{\"104\":1}}],[\"containing\",{\"1\":{\"36\":4}}],[\"chunks\",{\"1\":{\"1606\":1}}],[\"china\",{\"1\":{\"1398\":2,\"1399\":2}}],[\"children\",{\"1\":{\"659\":3,\"1658\":7}}],[\"child\",{\"1\":{\"15\":7,\"619\":2,\"620\":1,\"621\":3,\"622\":6,\"623\":4,\"624\":19,\"635\":7,\"636\":5,\"659\":13,\"662\":12,\"664\":7,\"1658\":3}}],[\"choosedrink\",{\"1\":{\"1353\":1}}],[\"choosepizza\",{\"1\":{\"1353\":1}}],[\"chosendrink\",{\"1\":{\"1353\":2}}],[\"chosenpizza\",{\"1\":{\"1353\":2}}],[\"cherry\",{\"1\":{\"1303\":2}}],[\"check`\",{\"1\":{\"1449\":2}}],[\"check\",{\"1\":{\"458\":2,\"1534\":2}}],[\"checkscopecontext\",{\"1\":{\"1572\":5}}],[\"checkscope\",{\"1\":{\"1572\":11}}],[\"checks\",{\"1\":{\"350\":1}}],[\"checkout\",{\"1\":{\"167\":1}}],[\"checked\",{\"1\":{\"15\":1}}],[\"chkconfig\",{\"1\":{\"217\":2}}],[\"chmod\",{\"1\":{\"209\":2}}],[\"chains\",{\"1\":{\"1473\":1}}],[\"change\",{\"1\":{\"756\":2,\"1436\":2}}],[\"changed\",{\"1\":{\"408\":2}}],[\"channel\",{\"1\":{\"397\":2}}],[\"characters\",{\"1\":{\"910\":1}}],[\"charat\",{\"1\":{\"506\":2,\"509\":1}}],[\"charcodeat\",{\"1\":{\"509\":4}}],[\"char\",{\"1\":{\"250\":1}}],[\"charset\",{\"1\":{\"120\":1}}],[\"charset=\",{\"1\":{\"120\":1,\"126\":1,\"128\":1}}],[\"chakra\",{\"1\":{\"144\":1,\"1550\":2}}],[\"chrome在处理匿名函数的\",{\"1\":{\"1334\":1}}],[\"chrome在处理匿名函数的name属性时有问题\",{\"1\":{\"1294\":1}}],[\"chrome\",{\"1\":{\"143\":1,\"144\":1,\"436\":2,\"576\":1,\"1534\":1,\"1549\":1,\"1550\":1}}],[\"chromium\",{\"1\":{\"143\":2,\"1550\":1}}],[\"ch\",{\"1\":{\"24\":1}}],[\"plus5\",{\"1\":{\"1412\":5}}],[\"plus1\",{\"1\":{\"1376\":4}}],[\"play\",{\"1\":{\"1492\":1}}],[\"player\",{\"1\":{\"570\":1,\"571\":1,\"572\":1,\"575\":1,\"1490\":3,\"1491\":2,\"1492\":1}}],[\"place\",{\"1\":{\"500\":1}}],[\"placeholder\",{\"1\":{\"16\":1}}],[\"p3\",{\"1\":{\"1352\":2}}],[\"petals\",{\"1\":{\"1312\":1}}],[\"petalcount\",{\"1\":{\"1312\":2}}],[\"peter\",{\"1\":{\"569\":2,\"640\":5,\"1307\":4}}],[\"persist\",{\"1\":{\"1436\":1}}],[\"person2\",{\"1\":{\"575\":3,\"576\":2,\"581\":3,\"586\":1,\"590\":1,\"592\":2,\"1307\":3,\"1476\":2}}],[\"person1\",{\"1\":{\"575\":3,\"576\":3,\"581\":4,\"586\":1,\"590\":1,\"592\":2,\"1307\":4,\"1476\":4}}],[\"person\",{\"1\":{\"392\":5,\"393\":5,\"394\":5,\"556\":5,\"560\":1,\"569\":5,\"570\":3,\"571\":2,\"572\":3,\"575\":7,\"576\":7,\"578\":9,\"579\":4,\"581\":4,\"586\":7,\"590\":3,\"592\":4,\"593\":1,\"640\":5,\"935\":5,\"1115\":6,\"1367\":3,\"1389\":4,\"1474\":2,\"1476\":6,\"1481\":3,\"1483\":3,\"1484\":1,\"1485\":5,\"1486\":2,\"1487\":3,\"1488\":4,\"1489\":4,\"1490\":5,\"1491\":2,\"1492\":2,\"1497\":3}}],[\"performance\",{\"1\":{\"1285\":2}}],[\"perand\",{\"1\":{\"1121\":1}}],[\"permute\",{\"1\":{\"521\":1}}],[\"perm\",{\"1\":{\"215\":1}}],[\"p2\",{\"1\":{\"500\":6,\"1352\":2}}],[\"p1\",{\"1\":{\"500\":6,\"1352\":2}}],[\"pwa\",{\"1\":{\"1621\":1}}],[\"pwke\",{\"1\":{\"467\":1}}],[\"pwwkew\",{\"1\":{\"467\":1}}],[\"pwd\",{\"1\":{\"201\":1}}],[\"physical\",{\"1\":{\"318\":1}}],[\"php\",{\"1\":{\"153\":1}}],[\"ppdu\",{\"1\":{\"317\":1}}],[\"p点坐标\",{\"1\":{\"274\":1}}],[\"psh\",{\"1\":{\"299\":2}}],[\"ps\",{\"1\":{\"221\":1}}],[\"pseudo\",{\"1\":{\"11\":2,\"16\":2,\"329\":1}}],[\"pgdn向下翻页\",{\"1\":{\"206\":1}}],[\"pgup向上翻页\",{\"1\":{\"206\":1}}],[\"public\",{\"1\":{\"230\":2,\"250\":1,\"429\":1}}],[\"push\",{\"1\":{\"167\":1,\"299\":1,\"402\":3,\"476\":1,\"479\":5,\"482\":1,\"488\":2,\"506\":1,\"512\":1,\"521\":2,\"540\":1,\"569\":1,\"581\":1,\"640\":4,\"659\":1,\"951\":1,\"1068\":1,\"1285\":1,\"1287\":1,\"1323\":1,\"1357\":2,\"1393\":4,\"1413\":1,\"1417\":1,\"1557\":3}}],[\"pull\",{\"1\":{\"167\":1,\"168\":1,\"175\":1}}],[\"png\",{\"1\":{\"130\":1}}],[\"p>\",{\"1\":{\"116\":1,\"117\":1,\"120\":1}}],[\"prto\",{\"1\":{\"653\":1}}],[\"print\",{\"1\":{\"622\":3,\"623\":2,\"1452\":2}}],[\"primitive\",{\"1\":{\"548\":1}}],[\"primitivevalue\",{\"1\":{\"547\":3}}],[\"prices\",{\"1\":{\"485\":8}}],[\"privatefunction\",{\"1\":{\"1613\":2,\"1614\":1}}],[\"private\",{\"1\":{\"230\":1,\"250\":1,\"429\":1}}],[\"prdownloads\",{\"1\":{\"215\":2}}],[\"progressive\",{\"1\":{\"1621\":1}}],[\"programming\",{\"1\":{\"228\":1}}],[\"producing\",{\"1\":{\"1411\":1}}],[\"problem\",{\"1\":{\"1281\":1}}],[\"props\",{\"1\":{\"1490\":7,\"1491\":3,\"1492\":4}}],[\"propagating\",{\"1\":{\"1149\":1}}],[\"propname\",{\"1\":{\"985\":2}}],[\"propnames\",{\"1\":{\"540\":2}}],[\"prop\",{\"1\":{\"540\":5,\"632\":2,\"736\":2,\"986\":4,\"1165\":1,\"1218\":2,\"1220\":2,\"1227\":1,\"1317\":2,\"1321\":3,\"1620\":2}}],[\"propertyisenumerable\",{\"0\":{\"816\":1},\"1\":{\"531\":1,\"806\":1,\"816\":1,\"817\":1,\"819\":2,\"820\":6}}],[\"property\",{\"0\":{\"7\":1,\"736\":1,\"737\":1},\"1\":{\"408\":9,\"527\":1,\"528\":2,\"530\":1,\"531\":1,\"538\":1,\"539\":2,\"540\":1,\"563\":2,\"565\":1,\"676\":1,\"692\":2,\"693\":2,\"699\":1,\"719\":1,\"720\":3,\"724\":1,\"725\":1,\"729\":1,\"730\":1,\"737\":1,\"740\":1,\"741\":1,\"752\":1,\"753\":1,\"774\":1,\"790\":1,\"791\":1,\"796\":1,\"803\":9,\"816\":1,\"817\":2,\"820\":4,\"823\":1,\"825\":1,\"841\":1,\"981\":1,\"982\":1,\"1098\":2,\"1099\":1,\"1165\":1,\"1403\":2}}],[\"properties\",{\"0\":{\"6\":1},\"1\":{\"528\":4,\"548\":2,\"683\":3,\"687\":2,\"688\":3,\"730\":1,\"752\":1,\"803\":3,\"812\":1,\"820\":1,\"1385\":1,\"1386\":2}}],[\"proxymethod\",{\"1\":{\"1505\":2}}],[\"proxyobj\",{\"1\":{\"408\":2}}],[\"proxyvalue\",{\"1\":{\"408\":1}}],[\"proxy只能在对象级别上进行操作\",{\"1\":{\"408\":1}}],[\"proxy无法直接监听基本数据类型\",{\"1\":{\"408\":1}}],[\"proxy默认只代理一层对象的属性\",{\"1\":{\"407\":1}}],[\"proxy能够监听到对象中的对象的引用吗\",{\"0\":{\"407\":1}}],[\"proxy相关\",{\"0\":{\"406\":1}}],[\"proxy\",{\"1\":{\"403\":1,\"408\":3,\"607\":1,\"1505\":5}}],[\"proxydata\",{\"1\":{\"403\":1}}],[\"promises\",{\"1\":{\"1355\":2,\"1358\":4}}],[\"promise\",{\"0\":{\"358\":1,\"372\":1,\"380\":1,\"383\":1,\"1425\":1},\"1\":{\"371\":1,\"372\":2,\"380\":2,\"383\":4,\"457\":1,\"1338\":6,\"1340\":3,\"1341\":1,\"1342\":2,\"1344\":2,\"1345\":3,\"1346\":2,\"1348\":10,\"1349\":1,\"1350\":2,\"1352\":1,\"1353\":1,\"1354\":2,\"1355\":4,\"1356\":2,\"1358\":1,\"1425\":3,\"1426\":2,\"1427\":2,\"1459\":1,\"1533\":5,\"1538\":1,\"1593\":1,\"1602\":1,\"1603\":1,\"1636\":1}}],[\"proto\",{\"1\":{\"402\":1,\"538\":1,\"540\":1,\"548\":2,\"565\":2,\"576\":1,\"603\":3,\"624\":14,\"640\":2,\"644\":4,\"645\":1,\"646\":3,\"647\":1,\"648\":7,\"649\":1,\"650\":3,\"651\":1,\"652\":1,\"653\":19,\"748\":3,\"805\":1,\"829\":3,\"1116\":2}}],[\"prototypemethod\",{\"1\":{\"736\":1}}],[\"prototype\",{\"0\":{\"347\":1,\"348\":1,\"349\":1,\"350\":1,\"351\":1,\"352\":1,\"936\":1},\"1\":{\"388\":2,\"392\":2,\"393\":2,\"394\":19,\"402\":1,\"408\":1,\"548\":2,\"565\":4,\"569\":1,\"570\":1,\"575\":6,\"576\":9,\"578\":3,\"579\":1,\"581\":1,\"597\":1,\"599\":1,\"613\":1,\"621\":1,\"622\":2,\"623\":1,\"624\":22,\"640\":1,\"644\":3,\"645\":4,\"648\":3,\"650\":3,\"651\":2,\"653\":17,\"659\":17,\"662\":6,\"664\":6,\"667\":1,\"684\":4,\"731\":1,\"736\":3,\"737\":1,\"745\":1,\"748\":1,\"749\":3,\"752\":1,\"779\":1,\"781\":8,\"802\":1,\"804\":1,\"805\":3,\"806\":7,\"816\":1,\"820\":3,\"828\":1,\"833\":1,\"838\":3,\"933\":1,\"935\":4,\"936\":12,\"937\":1,\"943\":2,\"955\":1,\"983\":1,\"986\":1,\"999\":1,\"1004\":6,\"1114\":1,\"1115\":1,\"1116\":3,\"1130\":1,\"1220\":2,\"1312\":3,\"1393\":2,\"1441\":1,\"1473\":1,\"1475\":2,\"1481\":1,\"1486\":1,\"1497\":1,\"1503\":3,\"1504\":7,\"1505\":3,\"1581\":1,\"1584\":1,\"1587\":4}}],[\"protocol\",{\"1\":{\"148\":1,\"298\":1,\"309\":1}}],[\"protected\",{\"1\":{\"230\":1,\"250\":1,\"1620\":1}}],[\"process\",{\"0\":{\"422\":1,\"459\":1},\"1\":{\"457\":1,\"461\":1,\"1411\":1,\"1533\":2,\"1547\":1}}],[\"proc\",{\"1\":{\"186\":1}}],[\"provider\",{\"1\":{\"161\":2}}],[\"preset\",{\"1\":{\"1312\":1}}],[\"presto\",{\"1\":{\"143\":4,\"1550\":1}}],[\"prev\",{\"1\":{\"1001\":3}}],[\"preventextensions\",{\"0\":{\"810\":1},\"1\":{\"538\":3,\"768\":1,\"769\":1,\"787\":1,\"803\":1,\"810\":1,\"811\":1,\"812\":1,\"813\":2}}],[\"preferredtype\",{\"1\":{\"946\":3,\"951\":1}}],[\"predicate\",{\"1\":{\"668\":2}}],[\"prepare\",{\"1\":{\"458\":1,\"1534\":2}}],[\"precomposed\",{\"1\":{\"329\":1}}],[\"pre\",{\"1\":{\"92\":4,\"473\":9,\"488\":8,\"524\":4}}],[\"pageheight\",{\"1\":{\"1438\":4}}],[\"pattern\",{\"1\":{\"1080\":1,\"1509\":1,\"1514\":1,\"1521\":1}}],[\"path\",{\"0\":{\"271\":1},\"1\":{\"148\":1,\"271\":1,\"464\":1,\"521\":5,\"1593\":2}}],[\"paid\",{\"1\":{\"716\":1}}],[\"paid=10\",{\"1\":{\"716\":1}}],[\"packet\",{\"1\":{\"317\":1}}],[\"package\",{\"1\":{\"161\":1,\"230\":1,\"250\":1,\"1632\":1}}],[\"parsing\",{\"1\":{\"1533\":1,\"1667\":1}}],[\"parsefloat\",{\"0\":{\"908\":1},\"1\":{\"251\":1,\"904\":1,\"908\":1,\"909\":2,\"910\":8,\"947\":1}}],[\"parseint\",{\"0\":{\"913\":1},\"1\":{\"251\":1,\"348\":1,\"509\":2,\"858\":1,\"904\":1,\"913\":5,\"914\":16,\"926\":1,\"947\":1,\"949\":1,\"1227\":1,\"1561\":3}}],[\"partial\",{\"1\":{\"1411\":5,\"1413\":2,\"1416\":1}}],[\"parallelism\",{\"1\":{\"1547\":1}}],[\"paradise\",{\"1\":{\"1166\":1}}],[\"paragraph\",{\"1\":{\"999\":2}}],[\"parasitic\",{\"1\":{\"656\":1}}],[\"parameters\",{\"1\":{\"1566\":1}}],[\"parameter\",{\"1\":{\"1381\":1,\"1395\":2,\"1401\":1}}],[\"param2\",{\"1\":{\"1364\":1,\"1369\":2,\"1370\":2}}],[\"param1\",{\"1\":{\"1364\":2,\"1369\":2,\"1370\":2}}],[\"paramsn\",{\"1\":{\"1366\":1}}],[\"params2\",{\"1\":{\"1366\":1}}],[\"params1\",{\"1\":{\"1366\":1}}],[\"params\",{\"1\":{\"343\":2,\"716\":2}}],[\"param\",{\"1\":{\"274\":4,\"467\":1,\"470\":2,\"473\":2,\"476\":1,\"479\":1,\"485\":1,\"488\":2,\"491\":1,\"494\":1,\"497\":1,\"500\":4,\"503\":2,\"506\":2,\"1156\":2,\"1433\":2,\"1446\":2}}],[\"parm\",{\"1\":{\"613\":1}}],[\"parent\",{\"1\":{\"81\":1,\"619\":4,\"620\":1,\"621\":4,\"622\":6,\"623\":4,\"624\":20,\"635\":4,\"636\":3,\"659\":13,\"662\":10,\"664\":6,\"1658\":6}}],[\"passwd\",{\"1\":{\"205\":1}}],[\"padding\",{\"0\":{\"57\":1},\"1\":{\"36\":3,\"45\":6,\"50\":1,\"57\":1,\"58\":2,\"101\":3}}],[\"porsche\",{\"1\":{\"1042\":3,\"1109\":1,\"1110\":2}}],[\"port\",{\"1\":{\"148\":1}}],[\"pow\",{\"1\":{\"854\":1}}],[\"poweroff\",{\"1\":{\"190\":1}}],[\"point\",{\"1\":{\"597\":4,\"603\":10,\"615\":1}}],[\"points\",{\"1\":{\"25\":1}}],[\"poll队列对空\",{\"1\":{\"458\":1}}],[\"poll队列不为空\",{\"1\":{\"458\":1}}],[\"poll\",{\"1\":{\"458\":3,\"1534\":2}}],[\"policy\",{\"1\":{\"130\":2}}],[\"pop\",{\"1\":{\"402\":3,\"512\":1,\"521\":1,\"1419\":1,\"1557\":3}}],[\"positive\",{\"1\":{\"853\":1,\"925\":1}}],[\"position++\",{\"1\":{\"1413\":2}}],[\"position>\",{\"1\":{\"98\":1}}],[\"position\",{\"0\":{\"35\":1,\"102\":1},\"1\":{\"35\":1,\"36\":1,\"37\":1,\"38\":9,\"39\":2,\"40\":3,\"51\":3,\"102\":5,\"105\":1,\"325\":1,\"329\":2,\"1413\":2}}],[\"pos\",{\"1\":{\"491\":5}}],[\"post\",{\"1\":{\"152\":1,\"1008\":1,\"1009\":1,\"1449\":2}}],[\"pipeline\",{\"1\":{\"1376\":3}}],[\"pizzadata\",{\"1\":{\"1353\":1}}],[\"pi\",{\"1\":{\"1109\":1,\"1561\":2,\"1693\":2}}],[\"ping\",{\"1\":{\"223\":1}}],[\"pid\",{\"1\":{\"222\":2}}],[\"picas\",{\"1\":{\"25\":1}}],[\"pixels\",{\"1\":{\"25\":1}}],[\"pc\",{\"1\":{\"25\":1,\"1621\":1}}],[\"pt\",{\"1\":{\"25\":1}}],[\"px\",{\"1\":{\"25\":1}}],[\"p\",{\"1\":{\"2\":1,\"81\":1,\"100\":1,\"116\":1,\"274\":4,\"275\":8,\"276\":6,\"485\":3,\"518\":3,\"561\":2,\"597\":1,\"693\":2,\"999\":2,\"1083\":6,\"1115\":2,\"1218\":8,\"1224\":3,\"1226\":3,\"1227\":1,\"1254\":4,\"1402\":2}}],[\"和函数\",{\"1\":{\"1681\":1}}],[\"和函数的\",{\"1\":{\"1386\":1}}],[\"和词法分析\",{\"1\":{\"1666\":1}}],[\"和马上要介绍的\",{\"1\":{\"1618\":1}}],[\"和箭头函数\",{\"1\":{\"1589\":1}}],[\"和箭头函数看起来都可以取代\",{\"1\":{\"1589\":1}}],[\"和栈\",{\"1\":{\"1532\":1}}],[\"和输出数字\",{\"1\":{\"1505\":1}}],[\"和输入框的\",{\"1\":{\"1436\":1}}],[\"和普通方法不一样的是\",{\"1\":{\"1489\":1}}],[\"和普通的函数一样\",{\"1\":{\"1454\":1}}],[\"和原型链\",{\"1\":{\"1473\":1}}],[\"和原始类型的值\",{\"1\":{\"1338\":1}}],[\"和外部全局变量\",{\"1\":{\"1407\":1}}],[\"和变量不同\",{\"1\":{\"1518\":1}}],[\"和变量声明一样\",{\"1\":{\"1329\":1}}],[\"和变量\",{\"1\":{\"1266\":1}}],[\"和至少一个\",{\"1\":{\"1051\":1}}],[\"和允许\",{\"1\":{\"941\":1}}],[\"和目标对象的\",{\"1\":{\"678\":1}}],[\"和类与类之间的松耦合\",{\"1\":{\"584\":1}}],[\"和方法\",{\"1\":{\"569\":1}}],[\"和数据属性不同\",{\"1\":{\"532\":1}}],[\"和修订号\",{\"1\":{\"509\":1}}],[\"和num2\",{\"1\":{\"506\":1}}],[\"和一个整数目标值\",{\"1\":{\"515\":1}}],[\"和一个目标值\",{\"1\":{\"503\":1}}],[\"和一个表示目标和的整数\",{\"1\":{\"470\":1}}],[\"和整数\",{\"1\":{\"482\":1}}],[\"和为目标值\",{\"1\":{\"515\":1}}],[\"和为\",{\"1\":{\"470\":2}}],[\"和之前的文档元素\",{\"1\":{\"464\":1}}],[\"和他们之前的文档内容\",{\"1\":{\"464\":1}}],[\"和其他命名参数的值来初始化函数的活动对象\",{\"1\":{\"1707\":1}}],[\"和其他一些\",{\"1\":{\"1496\":1}}],[\"和其他微任务优先级一样\",{\"1\":{\"461\":1}}],[\"和其他任何编程语言一样\",{\"1\":{\"247\":1}}],[\"和call几乎一模一样\",{\"1\":{\"393\":1}}],[\"和||最大的区别是\",{\"1\":{\"381\":1}}],[\"和垂直的交叉轴\",{\"1\":{\"332\":1}}],[\"和子盒子取代\",{\"1\":{\"329\":1}}],[\"和底行模式\",{\"1\":{\"205\":1}}],[\"和父级的内容区的\",{\"1\":{\"82\":2}}],[\"和多个\",{\"1\":{\"59\":1}}],[\"和\",{\"0\":{\"47\":1,\"131\":1,\"341\":1,\"356\":1,\"381\":1,\"385\":1,\"388\":1,\"400\":1,\"401\":1,\"460\":1,\"1076\":1,\"1186\":1},\"1\":{\"2\":1,\"23\":1,\"24\":1,\"35\":1,\"36\":1,\"38\":2,\"45\":7,\"48\":1,\"56\":3,\"71\":1,\"81\":1,\"86\":1,\"110\":1,\"119\":1,\"121\":2,\"122\":1,\"129\":1,\"143\":2,\"153\":1,\"234\":1,\"235\":2,\"246\":1,\"253\":2,\"272\":1,\"297\":1,\"329\":2,\"332\":1,\"341\":1,\"464\":2,\"476\":1,\"500\":6,\"509\":4,\"527\":1,\"532\":2,\"534\":1,\"544\":1,\"548\":4,\"549\":1,\"561\":1,\"563\":2,\"572\":1,\"576\":1,\"590\":1,\"603\":1,\"604\":2,\"613\":1,\"628\":1,\"635\":1,\"644\":3,\"653\":1,\"659\":1,\"662\":3,\"678\":2,\"692\":1,\"706\":1,\"754\":1,\"762\":2,\"838\":1,\"853\":1,\"858\":1,\"904\":1,\"917\":1,\"921\":1,\"926\":1,\"935\":1,\"942\":1,\"943\":1,\"945\":1,\"948\":1,\"976\":1,\"1004\":5,\"1014\":1,\"1020\":1,\"1053\":1,\"1067\":1,\"1074\":1,\"1076\":1,\"1083\":1,\"1101\":1,\"1142\":1,\"1150\":1,\"1189\":1,\"1200\":2,\"1203\":4,\"1207\":1,\"1218\":1,\"1220\":1,\"1221\":5,\"1229\":1,\"1242\":1,\"1243\":1,\"1274\":1,\"1279\":1,\"1295\":1,\"1306\":1,\"1318\":1,\"1338\":3,\"1353\":1,\"1354\":1,\"1361\":1,\"1403\":2,\"1404\":2,\"1413\":1,\"1427\":3,\"1483\":1,\"1529\":1,\"1533\":1,\"1538\":1,\"1539\":1,\"1541\":1,\"1543\":1,\"1550\":1,\"1555\":1,\"1560\":1,\"1562\":1,\"1566\":1,\"1569\":1,\"1579\":1,\"1580\":1,\"1584\":1,\"1588\":1,\"1593\":1,\"1599\":1,\"1616\":1,\"1618\":3,\"1620\":3,\"1635\":1,\"1641\":1,\"1670\":4,\"1674\":1,\"1675\":2,\"1676\":2,\"1681\":2,\"1692\":2,\"1695\":1,\"1698\":3}}]],\"serializationVersion\":2}";