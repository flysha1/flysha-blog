export const redirects = JSON.parse("{}")

export const routes = Object.fromEntries([
  ["/intro.html", { loader: () => import(/* webpackChunkName: "intro.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/intro.html.js"), meta: {"v":"/assets/images/cover3.jpg","e":"\n<p>将你的个人介绍和档案放置在此处。</p>\n","r":{"minutes":0.08,"words":23},"t":"介绍页","i":"circle-info","y":"a"} }],
  ["/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/index.html.js"), meta: {"t":"博客主页","i":"home"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/css/1.html", { loader: () => import(/* webpackChunkName: "前端技术_css_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/css/1.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["CSS"],"e":"\n<h2>什么是 CSS？</h2>\n<p>和 HTML 类似，CSS 也不是真正的编程语言，甚至不是标记语言。<strong>CSS 是一门样式表语言</strong>，这也就是说人们可以用它来选择性地为 HTML 元素添加样式。举例来说，以下 CSS 代码选择了所有的段落文字，并将它们设置为红色。</p>\n<div class=\"language-css line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.46,"words":439},"t":"CSS简述","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/css/2.html", { loader: () => import(/* webpackChunkName: "前端技术_css_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/css/2.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["CSS"],"e":"\n<h2>选择符</h2>\n<p>选择符分为五类：</p>\n<ul>\n<li>元素选择符 Element Selectors</li>\n<li>关系选择符 Relationship Selectors</li>\n<li>属性选择符 Attribute Selectors</li>\n<li>伪类选择符 Pseudo-Classes Selectors</li>\n<li>伪元素选择符 Pseudo-Element Selectors</li>\n</ul>\n<h3>1. 元素选择符</h3>\n<table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>选择符名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*</code></td>\n<td>通配选择符</td>\n<td>所有元素对象</td>\n</tr>\n<tr>\n<td><code>E</code></td>\n<td>类型选择符</td>\n<td>以文档语言对象类型作为选择符</td>\n</tr>\n<tr>\n<td><code>E#id</code></td>\n<td>ID 选择符</td>\n<td>以唯一标识符 ID 属性的 E 元素作为选择符</td>\n</tr>\n<tr>\n<td><code>E.class</code></td>\n<td>类选择符</td>\n<td>以 <code>class</code> 属性的 E 元素作为选择符</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":6.88,"words":2064},"t":"选择符与优先级","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/css/3.html", { loader: () => import(/* webpackChunkName: "前端技术_css_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/css/3.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["CSS"],"e":"\n<h2>长度</h2>\n<p>长度值适用于 水平 或 垂直 方向的尺寸。长度值表示为 <code>&lt;length&gt;</code>。长度值的格式是：</p>\n<div class=\"language-css line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">number </span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">+</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> 长度单位 = length</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":3.07,"words":922},"t":"取值与单位","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/css/4.html", { loader: () => import(/* webpackChunkName: "前端技术_css_4.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/css/4.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["CSS"],"e":"\n<h2>position</h2>\n<p><code>position</code> 用于指定一个元素在文档中的定位方式。</p>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static</code></td>\n<td>默认值。没有定位，元素出现在正常的文档流中（忽略 top、bottom、left、right 和 z-index 声明）</td>\n</tr>\n<tr>\n<td><code>absolute</code></td>\n<td>生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素 进行定位，如果父级不是，会一直往上到 body，脱离文档流</td>\n</tr>\n<tr>\n<td><code>fixed</code></td>\n<td>生成固定定位的元素，相对于 浏览器窗口 进行定位，脱离文档流。（老 IE 不支持）</td>\n</tr>\n<tr>\n<td><code>relative</code></td>\n<td>生成相对定位的元素，相对于其正常位置进行定位，不脱离文档流</td>\n</tr>\n<tr>\n<td><code>sticky</code></td>\n<td>粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。主要用于 <code>scroll</code> 事件的监听上</td>\n</tr>\n<tr>\n<td><code>unset</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>","r":{"minutes":7.11,"words":2133},"t":"定位","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/css/5.html", { loader: () => import(/* webpackChunkName: "前端技术_css_5.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/css/5.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["CSS"],"e":"\n<h2>display</h2>\n<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>none</code></td>\n<td>隐藏元素</td>\n</tr>\n<tr>\n<td><code>inline</code></td>\n<td>（默认值）指定对象为内联元素，元素前后没有换行符</td>\n</tr>\n<tr>\n<td><code>block</code></td>\n<td>指定对象为块元素，元素前后会带有换行符</td>\n</tr>\n<tr>\n<td><code>inline-block</code></td>\n<td>指定对象为内联块元素</td>\n</tr>\n<tr>\n<td><code>list-item</code></td>\n<td>指定对象为列表项目</td>\n</tr>\n<tr>\n<td><code>table</code></td>\n<td>指定对象作为块元素级的表格，表格前后带有换行符</td>\n</tr>\n<tr>\n<td><code>flex</code></td>\n<td>弹性布局</td>\n</tr>\n<tr>\n<td><code>grid</code></td>\n<td>网格布局</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":9.96,"words":2988},"t":"盒模型","O":5,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/css/6.html", { loader: () => import(/* webpackChunkName: "前端技术_css_6.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/css/6.html.js"), meta: {"d":1512172800000,"l":"2017年12月2日","c":["前端技术"],"g":["CSS"],"e":"\n<h2>字体</h2>\n<p><code>font</code> 为简写属性，用于定义元素的文本特性。</p>\n<p>语法：</p>\n<div class=\"language-css line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">font</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">: [ &lt;font-style&gt; || &lt;font-varient&gt; || &lt;font-weight&gt; || &lt;font-stretch&gt; ]? &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">font-size</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> [ &lt;line-height&gt; ]? &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">font-family</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":10.65,"words":3196},"t":"文字","O":6,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/css/7.html", { loader: () => import(/* webpackChunkName: "前端技术_css_7.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/css/7.html.js"), meta: {"d":1512172800000,"l":"2017年12月2日","c":["前端技术"],"g":["CSS"],"e":"\n<h2>属性说明</h2>\n<p>background</p>\n<p>语法：</p>\n<div class=\"language-css line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">background: &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">background-color</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">background-image</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">background-repeat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">background-attachment</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> | &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">background-position</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":11,"words":3299},"t":"背景","O":7,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/html/1.html", { loader: () => import(/* webpackChunkName: "前端技术_html_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/html/1.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["HTML"],"e":"\n<h2>什么是 HTML?</h2>\n<p><strong>HTML</strong>：（HyperText Markup Language，<em><strong>超文本标记语言</strong></em>）是一种用来告知浏览器如何组织页面的标记语言。HTML 可复杂、可简单，一切取决于 web 开发者。HTML 由一系列的元素组成，这些元素可以用来包围或标记不同部分的内容，使其以某种方式呈现或者工作。两端的标签可以使内容变成超链接，以连接到另一个页面；使字体表现为斜体等。</p>\n<p><strong>注意</strong>：HTML 标签不区分大小写。也就是说，输入标签时既可以使用大写字母也可以使用小写字母。例如，标签 <code>&lt;title&gt;</code> 可以写作 <code>&lt;title&gt;</code>、<code>&lt;TITLE&gt;</code>、<code>&lt;Title&gt;</code>、<code>&lt;TiTlE&gt;</code> 等，也都可以正常工作。不过，从一致性、可读性来说，最好仅使用小写字母。</p>","r":{"minutes":4.93,"words":1480},"t":"1. HTML简述","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/html/2.html", { loader: () => import(/* webpackChunkName: "前端技术_html_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/html/2.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["HTML"],"e":"\n<h2>什么是 HTML 头部</h2>\n<p>HTML 头部包含 HTML <code>&lt;head&gt;</code> 元素的内容，与 <code>&lt;body&gt;</code> 元素内容不同，页面在浏览器加载后它的内容不会在浏览器中显示，它的作用是保存页面的一些元数据。上述示例的头部非常简短：</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" data-title=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">meta</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> charset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"utf-8\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;我的测试页面&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">head</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.76,"words":1129},"t":"2. HTML 元信息","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/html/3.html", { loader: () => import(/* webpackChunkName: "前端技术_html_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/html/3.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["HTML"],"e":"\n<h2>div（内容划分元素）</h2>\n<p><code>div</code> 元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，在不使用CSS的情况下，其对内容或布局没有任何影响。</p>\n<p>作为一个“纯粹的”容器，<code>&lt;div&gt;</code> 元素在语义上不表示任何特定类型的内容。然而，其可以将内容分组，从而可以使用class或是id属性方便的定义内容的格式，也可以在一段文档中划分标记出使用另一种语言书写的内容</p>\n","r":{"minutes":0.52,"words":155},"t":"3. HTML 常见元素","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/1.html", { loader: () => import(/* webpackChunkName: "前端技术_浏览器_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/浏览器/1.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["浏览器"],"e":"\n<p>Web标准是一系列由World Wide Web Consortium（W3C）制定的技术规范和指南，用于确保互联网上的网页和应用程序在不同的平台和设备上能够一致地工作和展示。这些标准旨在提高Web内容的可访问性、互操作性和可持续性。</p>\n<p>主要包含：</p>\n<ol>\n<li>结构标准（HTML）</li>\n<li>表现标准（CSS）</li>\n<li>行为标准（JS）</li>\n</ol>\n<p>W3C（World Wide Web Consortium）是一个国际性组织，由互联网技术领域的各种利益相关者组成，包括浏览器制造商、软件开发者、内容创建者以及网络服务提供商。其使命是制定和推广互联网的标准，以确保Web的长期发展和全球互通。</p>","r":{"minutes":1.49,"words":446},"t":"1. Web标准","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/2.html", { loader: () => import(/* webpackChunkName: "前端技术_浏览器_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/浏览器/2.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["浏览器"],"e":"\n<h2>渲染引擎（浏览器内核）</h2>\n<p>主流浏览器内核：</p>\n<ul>\n<li>\n<p><strong>Trident</strong>：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。</p>\n</li>\n<li>\n<p><strong>Gecko</strong>：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。</p>\n</li>\n<li>\n<p><strong>Presto</strong>：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快 3 倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。</p>\n</li>\n<li>\n<p><strong>Webkit</strong>：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trident，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit 前身是 KDE 小组的KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。</p>\n</li>\n<li>\n<p><strong>Blink</strong>：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是 KHTML 的分支一样。</p>\n</li>\n</ul>","r":{"minutes":2.43,"words":729},"t":"2. 浏览器引擎","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/3.html", { loader: () => import(/* webpackChunkName: "前端技术_浏览器_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/浏览器/3.html.js"), meta: {"d":1512086400000,"l":"2017年12月1日","c":["前端技术"],"g":["浏览器"],"e":"\n<p><em><strong>浏览器输入URL后发生了什么？</strong></em></p>\n<p>主要包括以下几个基本步骤：</p>\n<ol>\n<li>浏览器的地址栏输入URL并按下回车</li>\n<li>浏览器查找当前URL是否存在缓存，并比较缓存是否过期</li>\n<li>DNS解析URL对应的IP</li>\n<li>根据IP建立TCP连接（三次握手）</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求</li>\n<li>返回HTTP响应</li>\n<li>浏览器接受HTTP响应</li>\n<li>关闭TCP连接（四次挥手）</li>\n<li>浏览器解析HTML</li>\n<li>浏览器布局渲染</li>\n</ol>","r":{"minutes":8.9,"words":2669},"t":"3. 浏览器的工作原理","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99.html", { loader: () => import(/* webpackChunkName: "前端技术_问题解决_项目启动报错.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/问题解决/项目启动报错.html.js"), meta: {"d":1577836800000,"l":"2020年1月1日","c":["前端技术"],"g":["Node.js"],"e":"\n<ol>\n<li>在启动vue项目时出现错误 <code>error:0308010C:digital envelope routines::unsupported</code></li>\n</ol>\n<p>解决方式:</p>\n<p>在配置文件 <code>package.json</code> 中配置</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"json\" data-title=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">scripts:{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"serve\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service serve\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"build\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"set NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service build\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.24,"words":72},"t":"项目启动报错","O":1,"y":"a"} }],
  ["/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/1.html", { loader: () => import(/* webpackChunkName: "开发工具_git_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/开发工具/git/1.html.js"), meta: {"d":1512864000000,"l":"2017年12月10日","c":["开发工具"],"g":["git"],"e":"\n<h2>基础命令</h2>\n<ol>\n<li>\n<p><code>git init</code>：初始化一个新的 Git 仓库。</p>\n</li>\n<li>\n<p><code>git clone</code>：从远程仓库克隆项目。</p>\n</li>\n<li>\n<p><code>git add</code>：将工作目录中的更改添加到暂存区。</p>\n</li>\n<li>\n<p><code>git commit</code>：将暂存区的更改提交到本地仓库。</p>\n</li>\n</ol>\n<h2>查看和比较</h2>\n<ol>\n<li>\n<p><code>git status</code>：查看工作目录和暂存区的状态。</p>\n</li>\n<li>\n<p><code>git log</code>：查看提交历史。</p>\n</li>\n<li>\n<p><code>git diff</code>：查看工作目录和暂存区的文件差异。</p>\n</li>\n</ol>","r":{"minutes":1.21,"words":362},"t":"常用命令","O":1,"y":"a"} }],
  ["/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/2.html", { loader: () => import(/* webpackChunkName: "开发工具_git_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/开发工具/git/2.html.js"), meta: {"d":1512864000000,"l":"2017年12月10日","c":["开发工具"],"g":["git"],"e":"\n<h2>1. rebase</h2>\n<p><code>git rebase</code> 用于将一个分支的提交移到另一个分支上，并重新应用这些提交。主要有两种用途：</p>\n<ul>\n<li>\n<p><strong>整理提交历史</strong>：将多个小的提交合并成一个更为清晰的提交历史，避免不必要的历史混乱。</p>\n</li>\n<li>\n<p><strong>将本地提交与远程同步</strong>：在拉取远程更改之前，通过 <code>rebase</code> 将本地提交移动到远程提交的后面，使历史更为干净。</p>\n</li>\n</ul>\n<div class=\"language-cmd line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cmd\" data-title=\"cmd\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"># 从当前分支拉取最新的远程变更并应用到本地分支</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">git </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">pull</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> --</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">rebase</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> origin branch_name</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.48,"words":443},"t":"rebase、reset、revert区别？","y":"a"} }],
  ["/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/npm/1.html", { loader: () => import(/* webpackChunkName: "开发工具_npm_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/开发工具/npm/1.html.js"), meta: {"d":1513123200000,"l":"2017年12月13日","c":["开发工具"],"g":["npm"],"e":"\n","r":{"minutes":0.06,"words":17},"t":"1. npm 常用命令","y":"a"} }],
  ["/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html", { loader: () => import(/* webpackChunkName: "后端技术_Linux_Linux常用命令.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/后端技术/Linux/Linux常用命令.html.js"), meta: {"c":["后端技术"],"g":["linux"],"e":"\n<h2>基础知识</h2>\n<h3>Linux 系统的文件结构</h3>\n<div class=\"language-cmd line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cmd\" data-title=\"cmd\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">bin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        二进制文件，系统常规命令</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">boot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">       系统启动分区，系统启动时读取的文件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dev</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        设备文件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">etc</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        大多数配置文件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">home</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">       普通用户的家目录</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lib</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        32位函数库</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">lib64</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      64位库</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">media</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      手动临时挂载点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">mnt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        手动临时挂载点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">opt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        第三方软件安装位置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">proc</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">       进程信息及硬件信息</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">root</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">       临时设备的默认挂载点</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sbin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">       系统管理命令</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">srv</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sys</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        内核相关信息</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">tmp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        临时文件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">usr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        用户相关设定</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":10.41,"words":3124},"t":"Linux常用命令","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_面向对象编程.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/面向对象编程.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>面向对象程序设计</strong>（Object Oriented Programming）作为一种新方法，其本质是以建立模型体现出来的抽象思维过程和面向对象的方法。模型是用来反映现实世界中事物特征的。任何一个模型都不可能反映客观事物的一切具体特征，只能对事物特征和变化规律的一种抽象，且在它所涉及的范围内更普遍、更集中、更深刻地描述客体的特征。通过建立模型而达到的抽象是人们对客体认识的深化。</p>\n<h2>名词解释</h2>\n<p>面向对象程序设计中的概念主要包括：对象（Object）、类（Class）、数据抽象、继承、动态绑定、数据封装（Encapsulation）、多态性、消息传递。通过这些概念面向对象的思想得到了具体的体现。</p>","r":{"minutes":3.63,"words":1089},"t":"面向对象编程","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%8D%E6%B3%95%E8%AF%AD%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_词法语法.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/词法语法.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>ECMAScript 源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括标识符、控制符、行终止符、注释和空白符。</p>\n<p>同样地，ECMAScript 也定义了一些关键字、字面量以及行尾分号补全的规则</p>\n<h2>字符集</h2>\n<p>JavaScript 程序使用 Unicode 字符集编写。Unicode 是 ASCII 和 Latin-1 的超集，并支持地球上几乎所有在使用的语言。ECMAScript3 要求 JavaScript 的实现必须支持 Unicode2.1 及后续版本，ECMAScript5 则要求支持 Unicode3 及后续版本。</p>\n<h3>区分大小写</h3>","r":{"minutes":8.42,"words":2525},"t":"词法语法","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%8E%9F%E5%88%99.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_设计模式_设计思想与原则.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/设计模式/设计思想与原则.html.js"), meta: {"t":"","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/CSS/%E4%BC%AA%E5%85%83%E7%B4%A0%E6%95%88%E6%9E%9C.html", { loader: () => import(/* webpackChunkName: "前端技术_代码片段_CSS_伪元素效果.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/代码片段/CSS/伪元素效果.html.js"), meta: {"d":1671580800000,"l":"2022年12月21日","c":["前端技术"],"g":["CSS","代码片段"],"e":"\n<p><strong>CSS :before选择器</strong> ：向选定的元素前插入内容。使用content 属性来指定要插入的内容。</p>\n<p><strong>CSS :after选择器</strong>：向选定的元素之后插入内容。使用content 属性来指定要插入的内容。</p>\n<p>这两个伪元素会在真正页面元素之前和之后插入一个额外的元素，从技术角度上讲，它们与下面的HTML标记是等效的。</p>\n<h2>1. 伪类光圈</h2>\n\n<h2>2. 伪类括号效果</h2>\n\n<h2>3. 炫酷丝带效果</h2>\n<h3>双边丝带</h3>\n\n<h3>右边丝带</h3>\n\n<h3>箭头丝带</h3>","r":{"minutes":5.17,"words":1550},"t":"巧用伪元素before和after制作绚丽效果","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/CSS/%E5%AE%9E%E7%8E%B0%E5%88%A4%E6%96%AD%E9%BC%A0%E6%A0%87%E8%BF%9B%E5%85%A5%E6%96%B9%E5%90%91.html", { loader: () => import(/* webpackChunkName: "前端技术_代码片段_CSS_实现判断鼠标进入方向.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/代码片段/CSS/实现判断鼠标进入方向.html.js"), meta: {"d":1671408000000,"l":"2022年12月19日","c":["前端技术"],"g":["CSS","代码片段"],"e":"\n<h2>1. 纯css实现</h2>\n<p>实现纯 CSS 判断鼠标进入方向，主要是先通过将 DIV 以对角线切割为 4 个部分，然后即可为这 4 个部分写入:hover 选择器执行不同方向的动画。</p>\n<figure><img src=\"https://s2.loli.net/2021/12/04/Afdp2u1U4S6oVWL.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h3>Clip-path</h3>\n<p>使用 CSS3 的 clip-path 属性定向裁剪区域</p>\n","r":{"minutes":6.25,"words":1875},"t":"实现判断鼠标进入方向","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/CSS/%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.html", { loader: () => import(/* webpackChunkName: "前端技术_代码片段_CSS_登录界面.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/代码片段/CSS/登录界面.html.js"), meta: {"d":1671494400000,"l":"2022年12月20日","c":["前端技术"],"g":["CSS","代码片段"],"e":"\n\n\n","r":{"minutes":5.17,"words":1550},"t":"登录界面","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/CSS/%E7%9C%8B%E6%9D%BF%E9%A1%B5%E9%9D%A2%E6%A0%B7%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_代码片段_CSS_看板页面样式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/代码片段/CSS/看板页面样式.html.js"), meta: {"d":1608422400000,"l":"2020年12月20日","c":["前端技术"],"g":["CSS","代码片段"],"e":"\n<figure><img src=\"/blog/assets/images/代码片段/看板-light.png\" alt=\"浅色看板\" tabindex=\"0\" loading=\"lazy\"><figcaption>浅色看板</figcaption></figure>\n<figure><img src=\"/blog/assets/images/代码片段/看板-dark.png\" alt=\"深色看板\" tabindex=\"0\" loading=\"lazy\"><figcaption>深色看板</figcaption></figure>\n<figure><img src=\"/blog/assets/images/代码片段/管理看板.png\" alt=\"管理看板\" tabindex=\"0\" loading=\"lazy\"><figcaption>管理看板</figcaption></figure>","r":{"minutes":1.63,"words":490},"t":"看板页面样式","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/JavaScript/1.html", { loader: () => import(/* webpackChunkName: "前端技术_代码片段_JavaScript_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/代码片段/JavaScript/1.html.js"), meta: {"d":1640995200000,"l":"2022年1月1日","c":["前端技术"],"g":["JavaScript","代码片段"],"e":"\n<h2>防抖</h2>\n<p><strong>使用场景</strong>：用于高频触发且有一定停顿的情况，单位时间内事件触发则等待时间会被重置，如：用户在短时间内多次点击登陆、搜索框根据输入的一部分值进行联想搜索(也可以使用节流)、短信验证码、resize等。</p>\n<h3>1. 前缘防抖</h3>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 前缘防抖（定时器版本），在一定时间间隔内的连续触发只执行首次</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> debounceImmediateExecution</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">delay</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> timer</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> args</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">...</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">arguments</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">!</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">timer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){ </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 首次触发或间隔 delay 时间后触发，立即执行 fn</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">            fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">apply</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 设置定时器</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">            timer</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> setTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">                timer</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">delay</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{ </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 在间隔时间内触发</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 取消旧的定时器</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            clearTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">timer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">            // 设置新的延时定时器</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">            timer</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> setTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">                timer</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">delay</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.82,"words":847},"t":"1. 防抖&节流","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE.html", { loader: () => import(/* webpackChunkName: "前端技术_计算机网络_计算机网络体系_传输层协议.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/计算机网络/计算机网络体系/传输层协议.html.js"), meta: {"d":1512950400000,"l":"2017年12月11日","c":["前端技术"],"g":["计算机网络"],"e":"\n<p>传输层（Transport Layer）的主要任务就是负责向两台主机进程之间的通信提供通用的 <strong>数据传输服务</strong>。应用进程利用该服务传送应用层报文。</p>\n<p>网络协议族中有两个具有代表性的传输层协议，分别是 TCP 和 UDP。</p>\n<ul>\n<li>传输控制协议 TCP：提供面向连接的，可靠的数据传输服务</li>\n<li>用户数据协议 UDP：提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）</li>\n</ul>\n<h2>TCP</h2>\n<p><strong>传输控制协议</strong>（Transmission Control Protocol，简称 TCP）是一种 <strong>面向连接</strong>（连接导向）的、可靠的、 基于 IP 协议的传输层协议。</p>","r":{"minutes":11.65,"words":3495},"t":"传输层协议","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB.html", { loader: () => import(/* webpackChunkName: "前端技术_计算机网络_计算机网络体系_计算机网络体系.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/计算机网络/计算机网络体系/计算机网络体系.html.js"), meta: {"d":1512950400000,"l":"2017年12月11日","c":["前端技术"],"g":["计算机网络"],"e":"\n<figure><img src=\"/blog/assets/images/iso.cbce9765.gif\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<figure><img src=\"/blog/assets/images/computer-network.jpg\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2>OSI 七层模型</h2>\n<ol>\n<li><strong>应用层</strong> ：允许访问 OSI 环境的手段（应用协议数据单元 APDU）</li>\n<li><strong>表示层</strong> ：对数据进行翻译、加密和压缩（表示协议数据单元 PPDU）</li>\n<li><strong>会话层</strong> ：建立、管理和终止会话（会话协议数据单元 SPDU）</li>\n<li><strong>传输层</strong> ：提供端到端的可靠报文传递和错误恢复（段 Segment）</li>\n<li><strong>网络层</strong> ：负责数据包从源到宿的传递和网际互连（包 PackeT）</li>\n<li><strong>数据链路层</strong> ：将比特组装成帧和点到点的传递（帧 Frame）</li>\n<li><strong>物理层</strong> ：通过媒介传输比特,确定机械及电气规范（比特 Bit）</li>\n</ol>","r":{"minutes":2.61,"words":784},"t":"计算机网络体系","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/html/1.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_html_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/html/1.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["HTML"],"e":"\n<p><em><strong>Doctype</strong></em>是HTML5的文档声明，通过它可以告诉浏览器，使用哪一个HTML版本标准解析文档。在浏览器发展的过程中，HTML出现过很多版本，不同的版本之间格式书写上略有差异。如果没有事先告诉浏览器，那么浏览器就不知道文档解析标准是什么？此时，大部分浏览器将开启最大兼容模式来解析网页，我们一般称为<em><strong>怪异模式</strong></em>，这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的bug，所以文档声明是必须的。</p>\n","r":{"minutes":0.61,"words":182},"t":"关于Doctype","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/css/1.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_css_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/css/1.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["CSS"],"e":"\n<h2>1. 什么是BFC</h2>\n<p>\"BFC容器\"通常是指\"块级格式化上下文容器\"（Block Formatting Context Container）。块级格式化上下文（BFC）是在CSS中用来管理和控制元素在页面上布局和排列的一种机制。BFC容器是一种具有特定规则的HTML元素或CSS属性，它们会创建一个独立的上下文，影响其内部元素的布局和排列方式。BFC容器是CSS布局中的一个重要概念，可以帮助开发人员更精确地控制元素的布局和排列</p>\n<p>BFC的作用：</p>\n<ol>\n<li>\n<p>清除浮动：BFC容器可以用来清除浮动元素的影响，确保父元素包含浮动子元素的高度，从而避免出现高度塌陷问题。这是BFC最常见的应用之一，特别是在创建多列布局或类似网格的布局时非常有用。</p>\n</li>\n<li>\n<p>防止外边距重叠：在同一个BFC容器内的相邻块级元素的外边距不会发生重叠，这有助于更精确地控制元素之间的间距。这对于垂直外边距塌陷问题的解决非常有帮助。</p>\n</li>\n</ol>","r":{"minutes":1.58,"words":475},"t":"1. BFC和浮动清除","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/css/2.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_css_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/css/2.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["CSS"],"e":"\n<p>CSS display 属性设置元素是否被视为块或者内联元素以及用于子元素的布局，例如流式布局、网格布局或弹性布局。</p>\n<p>形式上，display 属性设置元素的内部和外部的显示类型。外部类型设置元素参与流式布局；内部类型设置子元素的布局。一些 display 值在它们自己的单独规范中完整定义；例如，在 CSS 弹性盒模型的规范中，定义了声明 display: flex 时会发生的细节。</p>\n<div class=\"language-css line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"css\" data-title=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* precomposed values */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: block;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: inline;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">inline-block</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: flex;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">inline-flex</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: grid;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">inline-grid</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flow-root</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* box generation */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: none;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: contents;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* two-value syntax */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: block flow;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: inline flow;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: inline </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flow-root</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: block flex;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: inline flex;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: block grid;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: inline grid;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: block </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">flow-root</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* other values */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: table;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">table-row</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> /* all table elements have an equivalent CSS display value */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">list-item</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* Global values */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: inherit;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: initial;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: revert;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">revert-layer</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">display: unset;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.32,"words":1595},"t":"2. display属性有哪些值","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/css/3.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_css_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/css/3.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["CSS"],"e":"\n<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。\n任何一个容器都可以指定为Flex布局。</p>\n<p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p>","r":{"minutes":7.83,"words":2350},"t":"3. flex弹性布局","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/css/4.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_css_4.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/css/4.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["CSS"],"e":"\n<h2>选择器权重</h2>\n<p>当多个样式规则应用于同一个元素时，浏览器需要决定哪个样式规则应该被优先应用。这就是选择器权重的概念</p>\n<ul>\n<li>ID选择器: 权重为100</li>\n<li>类选择器: 权重为10</li>\n<li>属性选择器: 权重为10</li>\n<li>伪类选择器: 权重为10</li>\n<li>标签选择器: 权重为1</li>\n<li>伪元素选择器: 权重为1</li>\n<li>兄弟选择器: 权重为0</li>\n<li>子选择器: 权重为0</li>\n<li>后代选择器: 权重为0</li>\n<li>通配符选择器: 权重为0</li>\n</ul>\n<h2>优先级规则</h2>","r":{"minutes":1.1,"words":331},"t":"4. CSS选择器的权重和优先级","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/JavaScript/1.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_JavaScript_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/JavaScript/1.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["JavaScript"],"e":"\n<h2>1. let 和 const</h2>\n<ul>\n<li>var有变量提升，有初始化提升，值可变</li>\n<li>let有变量提升，没有初始化提升，值可变</li>\n<li>const有变量提升，没有初始化提升，值不可变，但如果是定义对象，则属性可变</li>\n</ul>\n<p><code>let</code> 和 <code>const</code> 存在暂时性死区</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '张三'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'zhang3'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Cannot access 'name' before initialization</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.83,"words":1449},"t":"1. ES6的常用语法","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/JavaScript/2.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_JavaScript_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/JavaScript/2.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["JavaScript"],"e":"\n<h2>1. ES7</h2>\n<h3>1. includes</h3>\n<p>传入元素，如果数组中能找到此元素，则返回true，否则返回false</p>\n<p>跟indexOF有区别</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> arr</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">NaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">arr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">indexOf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">NaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// -1  indexOf找不到NaN</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">arr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">includes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">NaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true includes能找到NaN</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.42,"words":1326},"t":"2. ES6以上常用语法","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/JavaScript/3.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_JavaScript_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/JavaScript/3.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["JavaScript"],"e":"\n<p><code>for in</code>遍历的是数组的索引（index），而<code>for of</code>遍历的是数组元素值（value）</p>\n<p><code>for in</code>更适合遍历对象，当然也可以遍历数组，但是会存在一些问题：</p>\n<ul>\n<li>index索引为字符串型数字，不能直接进行几何运算</li>\n</ul>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> arr</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> index</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> arr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> res</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> index</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//01 11 21</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.4,"words":420},"t":"3. for...in 和 for...of的区别","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/JavaScript/4.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_JavaScript_4.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/JavaScript/4.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["JavaScript"],"e":"\n<p>call、bind、apply方法</p>\n<h2>1. call</h2>\n<ul>\n<li>使用方法</li>\n</ul>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">c</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();  </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1.直接调用，this指向window</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">           // 打印  window</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">           // 打印  undefined,undefined</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">           </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> obj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"owl\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">18</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)                 </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2.传入指定的this值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                 // 打印 {name: 'owl', age: 18}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                 // owl 18</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">c</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">c</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)          </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3.给person函数传入指定的this值和实参值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                // 打印 1 2 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                // {name: 'owl', age: 18}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">                                // owl 18</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.51,"words":1353},"t":"4. 改变this指向的方法有哪些","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/JavaScript/5.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_JavaScript_5.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/JavaScript/5.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["JavaScript"],"e":"\n<ol>\n<li>\n<p>使用LocalStorage或SessionStorage：这两个Web存储API可在浏览器的不同标签页之间共享数据。当一个标签页发送消息时，将消息存储在LocalStorage或SessionStorage中。其他标签页可以监听该存储区的变化，并读取最新的消息内容来实现通信效果。</p>\n</li>\n<li>\n<p>使用Broadcast Channel API：Broadcast Channel API 可以在浏览器的不同上下文（包括不同的标签页）之间进行双向通信。当一个标签页发送消息到广播频道时，其他标签页可以通过监听相同的广播频道来接收和响应消息。</p>\n</li>\n<li>\n<p>使用SharedWorker：SharedWorker 是一种在多个浏览器上下文之间共享脚本执行的机制，它可以在不同的标签页之间进行通信。可以创建一个SharedWorker，然后在各个标签页中连接到该SharedWorker，使它们能够共享数据和通信。</p>\n</li>\n</ol>","r":{"minutes":1.27,"words":382},"t":"5. 在本地实现一个聊天室，多个tab页相互通信，不能用websocket，有哪些方法？","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/Vue.js/1.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_Vue.js_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/Vue.js/1.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["Vue"],"e":"\n<h2>1. Vue2.0 和 Vue3.0的原理</h2>\n<p>Vue2.0实现MVVM(双向数据绑定)的原理是通过 Object.defineProperty 来劫持各个属性的setter、getter，在数据变动时发布消息给订阅者，触发相应的监听回调。Vue 3.0实现响应式基于ES6的Proxy。两者的差异如下：</p>\n<ul>\n<li>Vue2.0</li>\n</ul>\n<ol>\n<li>基于Object.defineProperty，不具备监听数组的能力，需要重新定义数组的原型来达到响应式。</li>\n<li>Object.defineProperty 无法检测到对象属性的添加和删除 。</li>\n<li>由于Vue会在初始化实例时对属性执行getter/setter转化，所有属性必须在data对象上存在才能让Vue将它转换为响应式。</li>\n<li>深度监听需要一次性递归，对性能影响比较大。</li>\n</ol>","r":{"minutes":2.71,"words":814},"t":"1. Vue2.0 和 Vue3.0 响应式原理区别","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/Vue.js/2.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_Vue.js_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/Vue.js/2.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["Vue"],"e":"\n<h2>1. Proxy能够监听到对象中的对象的引用吗？</h2>\n<p>Proxy默认只代理一层对象的属性</p>\n<p>想代理多层的解决办法是：在返回的时候，判断是否是一个对象，如果是对象的话，再次用Proxy代理，返回代理对象</p>\n<h2>2. 如何让proxy去监听基本数据类型</h2>\n<p>Proxy无法直接监听基本数据类型（如字符串、数字、布尔值等），因为它们是不可变的。Proxy只能在对象级别上进行操作，而不是基本数据类型。</p>\n<p>当我们尝试使用Proxy包装基本数据类型时，会得到一个TypeError错误，因为基本数据类型不具有属性和方法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> handler</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  set</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">target</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">property</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`Setting property '</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">property</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">' to '</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    target</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">property</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> proxyValue</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Proxy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">handler</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// TypeError: Cannot create proxy with a non-object as target</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.49,"words":446},"t":"2. Proxy相关","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/Vue.js/3.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_Vue.js_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/Vue.js/3.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术","面经"],"g":["Vue"],"e":"\n<h2>1. vuex的概念</h2>\n<p>vuex是一个专为 Vue.js 应用程序开发的状态管理模式， 采用集中式存储管理应用的所有组件的状态，解决多组件数据通信。(简单来说就是管理数据的,相当于一个仓库,里面存放着各种需要共享的数据,所有组件都可以拿到里面的数据)</p>\n<p>vuex解决的问题：</p>\n<ul>\n<li>多个组件依赖于同一状态时，对于多层嵌套的组件的传参将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。</li>\n<li>来自不同组件的行为需要变更同一状态。以往采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</li>\n</ul>","r":{"minutes":0.85,"words":255},"t":"3. vuex相关","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/1.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/1.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["浏览器","面经"],"e":"\n<h2>1. XSS（跨站脚本攻击）</h2>\n<p><code>XSS</code> 攻击指的是跨站脚本攻击，是一种 <strong>代码注入攻击</strong>。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 <code>cookie</code> 等。</p>\n<p><strong>避免方式</strong>：</p>\n<ul>\n<li>\n<p>服务端拼接后返回 HTML 是一种避免 XSS 攻击的常见方法，也就是 SSR（Server-Side Rendering，服务端渲染），这种方式可以在服务端进行输入过滤和转义，从而避免恶意脚本的注入用服务端拼接后返回（不使用服务端渲染）</p>\n</li>\n<li>\n<p>对一些敏感信息进行保护，比如 <code>cookie</code> 使用 <code>http-only</code>，使得脚本无法获取。</p>\n</li>\n<li>\n<p>对用户输入的地方和变量都需要仔细检查长度和对 <code>”&lt;”,”&gt;”,”;”,”’”</code> 等字符做过滤</p>\n</li>\n</ul>","r":{"minutes":1.02,"words":306},"t":"1. XSS和CSRF","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/2.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/2.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["浏览器","面经"],"e":"\n<h2>1. 进程（Process）</h2>\n<p>进程是计算机中正在运行的程序的实例，<strong>一个进程就是一个程序运行实例</strong>。它拥有独立的内存空间、代码和数据，并且由操作系统负责调度和管理。<strong>每个进程在执行时都会分配独立的内存空间，不同进程之间的内存是隔离的，一个进程的错误不会直接影响其他进程</strong>。 进程之间通过进程间通信（IPC）机制来交换数据和进行通信，常见的IPC方式包括管道、消息队列、共享内存等。进程的切换开销较大，因为需要保存和恢复进程的完整状态，涉及到内存保护和虚拟内存的切换。</p>\n<h2>2. 线程（Thread）</h2>","r":{"minutes":2.09,"words":627},"t":"2. 进程和线程","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/3.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/3.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["浏览器","面经"],"e":"\n<h2>1. 强缓存</h2>\n<p>使用强缓存策略时，如果缓存资源有效，浏览器会<strong>从本地读取缓存资源并返回200</strong>，不必再向服务器发起请求。强缓存策略可以通过两种方式来设置，分别是 <code>http</code> 头信息中的 <code>Expires</code> 属性和 <code>Cache-Control</code> 属性。</p>\n<p><strong>Expires</strong> 指定资源的过期时间。在过期时间以内，改资源可以被缓存使用，不需要向浏览器发送请求。这个时间依赖于服务器时间，会存在服务器时间和客户端时间不一致。</p>\n<p><strong>Cache-Control属性</strong>：</p>","r":{"minutes":2.94,"words":882},"t":"3. 协商缓存和强缓存","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/4.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_4.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/4.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["浏览器","面经"],"e":"\n<h2>1. 常见浏览器所用内核</h2>\n<ul>\n<li>\n<p>IE浏览器内核，<code>Trident</code> 内核，也是俗称的IE内核</p>\n</li>\n<li>\n<p>Chrome 浏览器内核，以前是 <code>Webkit</code> 内核，现在是 <code>Blink</code> 内核</p>\n</li>\n<li>\n<p>Firefox 浏览器内核：<code>Gecko</code> 内核，俗称 Firefox 内核</p>\n</li>\n<li>\n<p>Safari 浏览器内核：<code>Webkit</code> 内核</p>\n</li>\n<li>\n<p>360浏览器、猎豹浏览器内核：<code>IE + Chrome</code> 双内核</p>\n</li>\n</ul>","r":{"minutes":1.84,"words":552},"t":"4. 浏览器渲染","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/5.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_5.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/5.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["浏览器","面经"],"e":"\n<h2>Cookie</h2>\n<ul>\n<li>\n<p>大小只有4kb</p>\n</li>\n<li>\n<p>跨域不能共享</p>\n</li>\n<li>\n<p>不安全，容易被劫持</p>\n</li>\n<li>\n<p>只存在请求头中</p>\n</li>\n</ul>\n<h2>SessionStorage</h2>\n<ul>\n<li>\n<p>存储在内存中，体积相对较大</p>\n</li>\n<li>\n<p>页面关闭，数据会消失</p>\n</li>\n<li>\n<p>相对Cookie安全</p>\n</li>\n</ul>\n<h2>LocalStorage</h2>\n<ul>\n<li>\n<p>体积大，可以存储更多内容。</p>\n</li>\n<li>\n<p>生命周期长，除非手动删除，不然会一直存在</p>\n</li>\n<li>\n<p>存储在硬盘中，不会像Cookie一样被请求携带</p>\n</li>\n</ul>","r":{"minutes":0.4,"words":120},"t":"5. Cookie、LocalStorage、SessionStorage","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/6.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_6.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/6.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["浏览器","面经"],"e":"\n<h2>同源策略</h2>\n<p>跨域问题其实就是浏览器的同源策略造成的。 同源指的是：协议、端口号、域名必须一致。</p>\n<h2>如何解决跨域问题</h2>\n<ul>\n<li>\n<p>CORS：服务器开启跨域资源共享</p>\n</li>\n<li>\n<p>JSONP：利用 <code>&lt;script&gt;</code> 标签不存在跨域限制，只支持 <code>GET</code> 请求，且不安全。</p>\n</li>\n<li>\n<p>nginx 代理跨域</p>\n</li>\n<li>\n<p>nodejs 中间件代理跨域，通过node开启一个代理服务器。</p>\n</li>\n</ul>","r":{"minutes":0.42,"words":127},"t":"6. 跨域问题","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/7.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_7.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/7.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["浏览器","面经"],"e":"\n<p>事件流分为三个阶段：<strong>捕获阶段</strong>、<strong>目标阶段</strong>、<strong>冒泡阶段</strong>。</p>\n<p>过程如下：</p>\n<ul>\n<li>\n<p><strong>捕获阶段</strong> ：事件从最外层的节点，也就是文档对象开始，逐级向下传播，直到事件的目标节点上。</p>\n</li>\n<li>\n<p><strong>目标阶段</strong>：事件到达目标节点，触发目标节点上的事件处理函数。</p>\n</li>\n<li>\n<p><strong>冒泡阶段</strong>：事件从目标节点开始，逐级向上传播，直到到达最外层节点（文档对象）</p>\n</li>\n</ul>","r":{"minutes":4.72,"words":1416},"t":"7. 事件流","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/8.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_8.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/8.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["浏览器","面经"],"e":"\n<ol>\n<li>在浏览器地址栏输入URL</li>\n<li>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤\n<ul>\n<li>如果资源未缓存，发起新请求</li>\n<li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li>\n<li>检验新鲜通常有两个HTTP头进行控制 <code>Expires</code> 和 <code>Cache-Control</code>：\n<ul>\n<li>HTTP1.0提供 <code>Expires</code>，值为⼀个绝对时间表示缓存新鲜日期</li>\n<li>HTTP1.1增加了 <code>Cache-Control: max-age=time</code>，值为以秒为单位的最⼤新鲜时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>浏览器解析URL获取协议，主机，端口，path</li>\n<li>浏览器组装⼀个HTTP（GET）请求报文</li>\n<li>浏览器获取主机 ip 地址，过程如下：\n<ul>\n<li>浏览器缓存</li>\n<li>本机缓存</li>\n<li>hosts文件</li>\n<li>路由器缓存</li>\n<li>ISP DNS缓存</li>\n<li>DNS递归查询（可能存在负载均衡导致每次IP不⼀样）</li>\n</ul>\n</li>\n<li>打开⼀个 <code>socket</code> 与目标IP地址，端口建立TCP链接（三次握手）</li>\n<li>TCP链接建立后发送HTTP请求</li>\n<li>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</li>\n<li>服务器检查HTTP请求头是否包含缓存验证信息，如果验证缓存新鲜，返回304等对应状态码</li>\n<li>处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</li>\n<li>服务器将响应报文通过TCP连接发送回浏览器</li>\n<li>浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手</li>\n<li>浏览器检查响应状态码：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</li>\n<li>如果资源可缓存，进行缓存</li>\n<li>对响应进行解码（例如gzip压缩）</li>\n</ol>","r":{"minutes":3.83,"words":1149},"t":"8. 输入URL到显示页面的全过程","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/1.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/1.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","双指针","哈希"],"e":"\n<p><a href=\"https://leetcode.cn/problems/merge-sorted-array/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</a></p>\n<p>示例 1:</p>\n<p>输入: s = \"abcabcbb\"</p>\n<p>输出: 3</p>\n<p>解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。</p>\n<p>示例 2:</p>\n<p>输入: s = \"bbbbb\"\n输出: 1</p>","r":{"minutes":0.82,"words":246},"t":"1. 无重复字符的最长子串","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/10.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_10.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/10.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","递归","DFS"],"e":"\n<p><a href=\"https://leetcode.cn/problems/permutations/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。</a></p>\n<p><em><strong>叶子节点</strong></em> 是指没有子节点的节点。</p>","r":{"minutes":1.29,"words":386},"t":"10. 路径总和","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/11.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_11.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/11.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","链表","递归"],"e":"\n<p><a href=\"https://leetcode.cn/problems/reverse-linked-list/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</a></p>\n<ul>\n<li>示例1：</li>\n</ul>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"示例1\" tabindex=\"0\" loading=\"lazy\"><figcaption>示例1</figcaption></figure>","r":{"minutes":0.76,"words":227},"t":"11. 反转链表","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/12.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_12.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/12.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","双指针"],"e":"\n<p><a href=\"https://leetcode.cn/problems/3sum/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请你返回所有和为 0 且不重复的三元组。</a></p>\n<p><em><strong>注意</strong></em>：答案中不可以包含重复的三元组。</p>","r":{"minutes":1.3,"words":389},"t":"12. 三数之和","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/13.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_13.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/13.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","二叉树","BFS"],"e":"\n<p><a href=\"https://leetcode.cn/problems/binary-tree-level-order-traversal/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。</a></p>\n<ul>\n<li>示例1：</li>\n</ul>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" alt=\"示例1\" tabindex=\"0\" loading=\"lazy\"><figcaption>示例1</figcaption></figure>","r":{"minutes":0.64,"words":193},"t":"13. 二叉树的层序遍历","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/14.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_14.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/14.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","排序"],"e":"\n<p><a href=\"https://leetcode.cn/problems/kth-largest-element-in-an-array/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。</a></p>\n<p>请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>\n<p>你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。</p>\n<ul>\n<li>示例 1:</li>\n</ul>","r":{"minutes":1.33,"words":399},"t":"14. 数组中的第K个最大元素","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/15.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_15.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/15.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","贪心","动态规划"],"e":"\n<p><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</a></p>","r":{"minutes":1.06,"words":317},"t":"15. 买卖股票的最佳时机","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/16.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_16.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/16.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","排序"],"e":"\n<p><a href=\"https://leetcode.cn/problems/sort-an-array/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你一个整数数组 nums，请你将该数组升序排列。</a></p>\n<ul>\n<li>示例 1：</li>\n</ul>\n<p>输入：nums = [5,2,3,1]</p>\n<p>输出：[1,2,3,5]</p>\n<ul>\n<li>示例 2：</li>\n</ul>\n<p>输入：nums = [5,1,1,2,0,0]</p>\n<p>输出：[0,0,1,1,2,5]</p>","r":{"minutes":2.54,"words":762},"t":"16. 数组排序","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/17.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_17.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/17.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","双指针","哈希"],"e":"\n<p><a href=\"https://leetcode.cn/problems/linked-list-cycle/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你一个链表的头节点 head ，判断链表中是否有环。</a></p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p>","r":{"minutes":1.1,"words":330},"t":"17. 环形链表","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/18.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_18.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/18.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","动态规划"],"e":"\n<p><a href=\"https://leetcode.cn/problems/longest-palindromic-substring/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你一个字符串 s，找到 s 中最长的回文子串。</a></p>\n<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>\n<ul>\n<li>示例 1：</li>\n</ul>\n<p>输入：s = \"babad\"</p>\n<p>输出：\"bab\"</p>\n<p>解释：\"aba\" 同样是符合题意的答案。</p>","r":{"minutes":0.91,"words":272},"t":"18. 最长回文子串","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/19.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_19.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/19.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","DFS","BFS"],"e":"\n<p><a href=\"https://leetcode.cn/problems/sum-root-to-leaf-numbers/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。每条从根节点到叶节点的路径都代表一个数字，计算从根节点到叶节点生成的 所有数字之和 。</a></p>\n<p>示例 1：</p>\n<figure><img src=\"https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg\" alt=\"示例1\" tabindex=\"0\" loading=\"lazy\"><figcaption>示例1</figcaption></figure>","r":{"minutes":1.06,"words":318},"t":"19. 求根节点到叶节点数字之和","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/2.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/2.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","双指针"],"e":"\n<p><a href=\"https://leetcode.cn/problems/merge-sorted-array/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</a></p>\n<ul>\n<li>示例 1：</li>\n</ul>\n<p>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</p>","r":{"minutes":1.17,"words":352},"t":"2. 合并两个有序数组","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/20.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_20.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/20.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","递归"],"e":"\n<p><a href=\"https://leetcode.cn/problems/binary-search/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</a></p>\n<ul>\n<li>示例 1:</li>\n</ul>\n<p>输入: nums = [-1,0,3,5,9,12], target = 9</p>\n<p>输出: 4</p>","r":{"minutes":0.65,"words":194},"t":"20. 二分查找","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/3.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/3.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","双指针","模拟"],"e":"\n<p><a href=\"https://leetcode.cn/problems/add-strings/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和并同样以字符串形式返回。</a></p>\n<p><strong>注意</strong>：你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。</p>\n<ul>\n<li>\n<p>示例 1：</p>\n<p>输入：num1 = \"11\", num2 = \"123\"</p>\n<p>输出：\"134\"</p>\n</li>\n<li>\n<p>示例 2：</p>\n<p>输入：num1 = \"456\", num2 = \"77\"</p>\n<p>输出：\"533\"</p>\n</li>\n<li>\n<p>示例 3：</p>\n<p>输入：num1 = \"0\", num2 = \"0\"</p>\n<p>输出：\"0\"</p>\n</li>\n</ul>","r":{"minutes":0.72,"words":215},"t":"3. 字符串相加","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/4.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_4.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/4.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","字符串"],"e":"\n<p><a href=\"https://leetcode.cn/problems/compare-version-numbers/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你两个版本号 version1 和 version2 ，请你比较它们。</a></p>\n<p>版本号由一个或多个修订号组成，各修订号由一个 '.' 连接。每个修订号由 多位数字 组成，可能包含 前导零 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，2.5.33 和 0.1 都是有效的版本号。</p>","r":{"minutes":2.78,"words":833},"t":"4. 比较版本号","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/5.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_5.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/5.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","栈"],"e":"\n<p><a href=\"https://leetcode.cn/problems/valid-parentheses/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。</a></p>\n<p>有效字符串需满足：</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>每个右括号都有一个对应的相同类型的左括号。</li>\n</ol>","r":{"minutes":0.59,"words":178},"t":"5. 有效的括号","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/6.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_6.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/6.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","哈希"],"e":"\n<p><a href=\"https://leetcode.cn/problems/two-sum/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</a></p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<ul>\n<li>示例 1：</li>\n</ul>","r":{"minutes":0.72,"words":215},"t":"6. 两数之和","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/7.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_7.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/7.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","递归","动态规划"],"e":"\n<p><a href=\"https://leetcode.cn/problems/climbing-stairs/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</a></p>\n<ul>\n<li>示例 1：</li>\n</ul>\n<p>输入：n = 2</p>\n<p>输出：2</p>\n<p>解释：有两种方法可以爬到楼顶。</p>\n<ol>\n<li>\n<p>1 阶 + 1 阶</p>\n</li>\n<li>\n<p>2 阶</p>\n</li>\n</ol>","r":{"minutes":0.59,"words":176},"t":"7. 爬楼梯","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/8.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_8.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/8.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","回溯","递归"],"e":"\n<p><a href=\"https://leetcode.cn/problems/permutations/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。</a></p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> permute</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">nums</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> res</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [], </span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">path</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    backtracking</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">nums</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">nums</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, []);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> backtracking</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">k</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">used</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> k</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">            res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">from</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> k</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">used</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">continue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">            path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">            used</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 同支</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">            backtracking</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">k</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">used</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">            path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">            used</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.39,"words":116},"t":"8. 全排列","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/9.html", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_9.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/9.html.js"), meta: {"d":1704067200000,"l":"2024年1月1日","c":["前端技术","面经"],"g":["算法","贪心","动态规划"],"e":"\n<p><a href=\"https://leetcode.cn/problems/permutations/description/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>题目</strong>：给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</a></p>\n<p><em><strong>子数组</strong></em> 是数组中的一个连续部分。</p>\n<ul>\n<li>示例 1：</li>\n</ul>\n<p>输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</p>","r":{"minutes":0.78,"words":234},"t":"9. 最大子数组和","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_理解对象_对象属性描述符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/理解对象/对象属性描述符.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>ECMA-262 第五版在定义只有内部才能使用的特性（Attribute）时，描述了属性（Property）的各种特征。这些特性是为了实现 JavaScript 引擎而存在的，因此在 JavaScript 中不能直接访问它们。为了表示特征是内部值，该规范把它们放在了两对儿方括号 <code>[[]]</code>中。</p>\n<p>对象属性描述符的类型分为两种：<strong>数据属性</strong> 和 <strong>访问器属性</strong>。</p>\n<h2>数据属性</h2>\n<p>数据属性（Data Property）包含一个数据值的位置，在这个位置可以读取和写入值。数据属性共有 4 个特性。</p>","r":{"minutes":4.28,"words":1284},"t":"对象属性描述符","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_理解对象_对象状态.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/理解对象/对象状态.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 对象具有扩展、密封以及冻结三大特征。</p>\n<p>这些特征有相对应的方法：</p>\n<ul>\n<li>扩展特性</li>\n<li>密封特性</li>\n<li>冻结特性</li>\n</ul>\n<h2>扩展特性</h2>\n<p>默认情况下，对象是可扩展的，可扩展的对象能够添加新的属性，对象的原型对象也可以被更改。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__proto__</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// { a: 1 }</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.53,"words":1360},"t":"对象状态","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1/%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_理解对象_对象类型.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/理解对象/对象类型.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 的基本数据类型包括 <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>String</code>、<code>Number</code> 和 <code>Object</code>，以及 ES6 新增的 <code>Symbol</code> 类型。</p>\n<p>对象和其他基本类型值不同的是，对象是一种复合值：它可以将多个原始值或者其他对象聚合在一起，可通过键名访问这些值。</p>\n<p>对象也可看作是 <strong>属性的无序集合</strong>，每个属性都是一个键值对。属性名是 <code>String</code> 类型或 <code>Symbol</code> 类型，因此我们可以把对象看成是从字符串到值的映射。</p>","r":{"minutes":4.04,"words":1211},"t":"对象类型","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1/%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_理解对象_属性操作.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/理解对象/属性操作.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>属性查询</h2>\n<p>属性查询在表达式层面也成为 <a href=\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE%E5%99%A8.html\" target=\"_blank\">属性访问器</a>。</p>\n<p>属性查询一般有两种方法：</p>\n<ol>\n<li>点运算符</li>\n<li>方括号运算符</li>\n</ol>","r":{"minutes":5.34,"words":1603},"t":"属性操作","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_创建对象_其他模式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/创建对象/其他模式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>组合使用构造函数模式和原型模式</h2>\n<p>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。</p>\n<p>结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。另外，这种混成模式还支持向构造函数传递参数，可谓是集两种模式之长。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 构造函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">job</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">job</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> job</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">friends</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Amy'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Ben'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 原型模式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  constructor</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  sayName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> uzi</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Uzi'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">22</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Software Engineer'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> tom</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Tom'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Doctor'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">friends</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Peter'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">friends</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'Amy,Ben,Peter'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">friends</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'Amy,Ben'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">friends</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">friends</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sayName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> tom</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.14,"words":1241},"t":"其他模式","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_创建对象_原型模式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/创建对象/原型模式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>我们创建的每个函数都有一个 <code>prototype</code>（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由 <strong>特定类型的所有实例共享的属性和方法</strong>。如果按照字面意思来理解，那么 <code>prototype</code> 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(){}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Uzi'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 22</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">job</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'E-Sports Player'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> person1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">person1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'Uzi'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> person2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">person2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'Uzi'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 共用公用方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">person1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sayName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> person2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// true</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":7.19,"words":2157},"t":"原型模式","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_创建对象_工厂模式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/创建对象/工厂模式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>工厂模式</strong> 是用来创建对象的一种最常用的设计模式。工厂模式不暴露创建对象的具体逻辑，而是将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂。工厂模式常见于大型项目，例如 jQuery 的 $ 对象，我们创建选择器对象之所以没有 <code>new selector</code> 就是因为 <code>$()</code> 已经是一个工厂方法，其他例子例如 <code>React.createElement()</code>、<code>Vue.component()</code> 都是工厂模式的实现。</p>\n<p>工厂模式根据抽象程度的不同可以分为三种：</p>","r":{"minutes":1.91,"words":573},"t":"工厂模式","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_创建对象_构造函数模式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/创建对象/构造函数模式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>ECMAScript 中的构造函数可用来创建特定类型的对象。像 <code>Object</code> 和 <code>Array</code> 这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">job</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">job</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> job</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> person1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Ben'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">21</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'student'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> person2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Gray'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Doctor'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.92,"words":876},"t":"构造函数模式","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%B1%BB/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_类_基本语法.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/类/基本语法.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>ECMAScript 6 中的 Class（类）概念，实际上可以把它看作 ECMAScript 5 对象原型写法的语法糖。</p>\n<h2>基本写法</h2>\n<p>利用 ES5 实现对象原型：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Point</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Point</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '('</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ','</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ')'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Point</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.57,"words":1372},"t":"类的基本语法","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%B1%BB/%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_类_私有成员.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/类/私有成员.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>私有方法和私有属性，指只能在类的内部访问而外部不能访问的方法和属性。</p>\n<p>这是常见需求，有利于代码的封装，但 ES6 不提供，只能通过变通方法模拟实现。</p>\n<h2>私有方法</h2>\n<p>暂时的解决方案（并未真正解决，外部仍可访问）：</p>\n<ul>\n<li>命名区别</li>\n<li>私有方法移出模块</li>\n<li>命名为 Symbol 值</li>\n</ul>\n<h3>命名区别</h3>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Utils</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 公有方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">baz</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">_bar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">baz</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 私有方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  _bar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">baz</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">snaf</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> baz</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.85,"words":554},"t":"私有成员","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%B1%BB/%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_类_类的继承.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/类/类的继承.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>继承，是子类继承父类的特征和行为，使得子类对象具有父类的实例域和方法。 继承是面向对象编程中，不可或缺的一部分。</p>\n<h2>使用方法</h2>\n<p>与 ES5 通过修改原型链实现继承不同，类通过 <code>extends</code> 关键字实现继承，继承父类的所有属性和方法。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Child</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> extends</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  constructor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">    super</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.44,"words":1932},"t":"类的继承","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%B1%BB/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_类_静态成员.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/类/静态成员.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>类的静态成员包括 <strong>静态方法</strong> 和 <strong>静态属性</strong>。</p>\n<ul>\n<li>静态方法定义在类的内部（不是定义在实例对象 <code>this</code> 上）</li>\n<li>静态属性通过对象的属性访问器定义（新提案提供了关键字 <code>static</code> 用于定义）</li>\n</ul>\n<h2>静态方法</h2>\n<p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。</p>\n<p>如果在一个方法前，加上 <code>static</code> 关键字，就表示该方法不会被实例继承，而是需要直接通过类来调用，这就称为 <strong>静态方法</strong>。</p>","r":{"minutes":1.77,"words":530},"t":"静态成员","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%BB%A7%E6%89%BF/%E5%80%9F%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_继承_借用构造函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/继承/借用构造函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>借用构造函数</strong>（Constructor Stealing），即在子类型构造函数的内部调用父类构造函数以实现对父类构造函数属性的继承。</p>\n<p>🌰 示例：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">attr</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    eye</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'blue'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    hair</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'black'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    skin</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'white'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Name'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  Parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayHi</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello world!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> boy</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">boy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">boy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// { eye: 'blue', hair: 'black', skin: 'white', age: 3}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> girl</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">girl</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// { eye: 'blue', hair: 'black', skin: 'white'}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.68,"words":504},"t":"借用构造函数","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%BB%A7%E6%89%BF/%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_继承_原型式继承.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/继承/原型式继承.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>原型式继承是借助原型基于已有的对象创建新对象，同时还不必因此创建自定义类型。</p>\n<p>🌰 示例：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">friendship</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Creator</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">  Creator</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> friendship</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Creator</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.5,"words":451},"t":"原型式继承","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%BB%A7%E6%89%BF/%E5%8E%9F%E5%9E%8B%E9%93%BE.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_继承_原型链.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/继承/原型链.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>ECMAScript 中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>\n<p>搞懂原型对象和原型链其实就是搞懂 <code>prototype</code>、<code>__proto__</code> 和 <code>constructor</code> 之间的相互关系。</p>\n<p>我们通过示例并附加图例阐述这种复杂的相互关系。</p>\n<figure><img src=\"/blog/assets/images/继承原型.svg\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","r":{"minutes":5.45,"words":1635},"t":"原型链","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%BB%A7%E6%89%BF/%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_继承_寄生式继承.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/继承/寄生式继承.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>寄生式继承</strong>（Parasitic Inheritance）：创建一个仅用于封装继承过程的函数，在函数内部以某种方式增强对象</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> creator</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">origin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 以 origin 为原型对象创建一个新对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> clone</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">create</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">origin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 以某种方式来增强这个对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  clone</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayHi</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello world!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 返回这个对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> clone</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> friendship</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Uzi'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  friends</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Amy'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Ben'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Tom'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 具有实例的原型person的所有属性和方法，也有自己的方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> uzi</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> creator</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">friendship</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayHi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Hello world!</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.89,"words":268},"t":"寄生式继承","O":5,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%BB%A7%E6%89%BF/%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_继承_寄生组合式继承.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/继承/寄生组合式继承.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>寄生组合式继承</strong>，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。</p>\n<p>其背后的基本思路是：<strong>不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已</strong>。 本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</p>\n<p>🌰 示例：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> inherit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 创建对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> prototype</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">create</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 增强对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">constructor</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 指定对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">  child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.23,"words":668},"t":"寄生组合式继承","O":6,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%BB%A7%E6%89%BF/%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_继承_组合继承.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/继承/组合继承.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>组合继承</strong>（Combination Inheritance）（也叫伪经典继承），指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。</p>\n<p>其背后的思路是使用原型链实现对原型对象的属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。</p>\n<p>🌰 示例：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">attr</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    eye</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'blue'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    hair</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'black'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    skin</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'white'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 第二次调用 Parent()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // Child.prototype 又得到了 name 和 attr 两个属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 并对上次得到的属性值进行了覆盖</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  Parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第一次调用 Parent()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 使得子类实例的原型对象指向父类实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Child.prototype 得到了 name 和 attr 两个属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Parent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">constructor</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayAge</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第一个实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> uzi</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Uzi'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">height</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 80</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// { eye: 'blue', hair: 'black', skin: 'white', height: 80 }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'Uzi'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayAge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 第二个实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> kat</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Child</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Kat'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">kat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">colors</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// { eye: 'blue', hair: 'black', skin: 'white' }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">kat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'Kat'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">kat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayAge</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.59,"words":778},"t":"组合继承","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Array/filter.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Array_filter.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Array/filter.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Array.prototype.filter()</code> 方法创建一个新数组，其包含通过所提供函数实现的测试的所有元素。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">arr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">filter</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">( </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">callback</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">currentValue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">index</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">arr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {} [, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">thisArg</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ] )</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.82,"words":545},"t":"filter","O":17,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/assign.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_assign.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/assign.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.assign()</code> 方法用于将所有可枚举自有 <code>Property</code> 的值从一个或多个源对象拷贝到目标对象。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">assign</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">target</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">...</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">sources</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// target 目标对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// sources 源对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回目标对象</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.9,"words":271},"t":"assign","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/create.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_create.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/create.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.create()</code> 方法用于创建指定对象为原型对象的新对象。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">create</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">properties</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 新创建对象指向的原型对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// properties 可选参数,添加到新创建对象的可枚举属性（即自身定义的属性，而不是原型链上的枚举属性）</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.67,"words":202},"t":"create","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/defineProperties.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_defineProperties.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/defineProperties.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.defineProperties()</code> 方法用于为一个对象定义 <code>Properties</code> 或修改已有的 <code>Properties</code> 的 <code>Attributes</code>。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">defineProperties</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">properties</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 添加或修改 properties 的目标对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// properties 要定义其可枚举属性或修改的属性描述符的对象</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.71,"words":213},"t":"defineProperties","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/defineProperty.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_defineProperty.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/defineProperty.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.defineProperty()</code> 方法用于为一个对象定义一个自有 Property 和/或修改已有 Property 的 Attributes。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">defineProperty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 定义或修改 Property 的目标对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// p 需要定义的 Property 键名字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// attributes 被定义或修改的 Attributes 对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回变更后的对象</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.77,"words":232},"t":"defineProperty","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/entries.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_entries.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/entries.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>⭐️ ES2017(ES8)新特性</p>\n<p><code>Object.entries()</code> 方法用于枚举指定对象并返回以键值对组成的数组为元素的二维数组。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">entries</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// obj\t用于枚举的对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回值 给定对象自身可枚举 Property 的键值对数组</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.7,"words":211},"t":"entries","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/freeze.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_freeze.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/freeze.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.freeze()</code> 方法用于冻结一个对象。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">freeze</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 将被冻结的对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回被冻结的对象</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.89,"words":266},"t":"freeze","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/fromEntries.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_fromEntries.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/fromEntries.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.fromEntries()</code> 方法把键值对列表转换为一个对象。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fromEntries</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">entries</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// entries 可实现可迭代协议的可迭代对象（例如 Array、Map 等）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回一个由该迭代对象条目提供对应属性的新对象</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.29,"words":387},"t":"fromEntries","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/getOwnPropertyDescriptor.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_getOwnPropertyDescriptor.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/getOwnPropertyDescriptor.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.getOwnPropertyDescriptor()</code> 方法可以获取对象自有 <code>Property</code> 的某个 <code>Attributes</code>。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getOwnPropertyDescriptor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">property</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 需要查找的目标对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// property 目标对象的 Property</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.26,"words":79},"t":"getOwnPropertyDescriptor","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/getOwnPropertyDescriptors.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_getOwnPropertyDescriptors.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/getOwnPropertyDescriptors.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>⭐️ ES2017(ES8)新特性</p>\n<p><code>Object.getOwnPropertyDescriptors()</code> 方法用于获取一个对象的所有自身 <code>Property</code> 的 <code>Attributes</code>。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getOwnPropertyDescriptors</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// obj 用于获取 Property 的 Attributes 的对象</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.35,"words":105},"t":"getOwnPropertyDescriptors","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/getOwnPropertyNames.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_getOwnPropertyNames.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/getOwnPropertyNames.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.getOwnPropertyNames()</code> 方法用于获取指定对象的所有自身 Property 的键名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getOwnPropertyNames</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.52,"words":457},"t":"getOwnPropertyNames","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/getOwnPropertySymbols.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_getOwnPropertySymbols.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/getOwnPropertySymbols.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.getOwnPropertySymbols()</code> 方法用于获取一个给定对象自身的所有 <code>Symbol Property</code> 的数组。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getOwnPropertySymbols</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 用于获取 Symbol Property 键名的目标对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回目标对象 Symbol 组成的数组</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.37,"words":110},"t":"getOwnPropertySymbols","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/getPrototypeOf.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_getPrototypeOf.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/getPrototypeOf.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.getPrototypeOf()</code> 方法用于获取指定对象的原型（内部 <code>[[Prototype]]</code> 属性的值）。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getPrototypeOf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.5,"words":150},"t":"getPrototypeOf","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/hasOwnProperty.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_hasOwnProperty.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/hasOwnProperty.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.prototype.hasOwnProperty</code> 方法用于检测指定对象自有 <code>Properties</code> 中是否具有指定的 <code>Property</code>。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">hasOwnProperty</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">v</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// v 需要检测的 Property 字符串名称或者 Symbol</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回该对象是否含有指定 `Property` 的 `Boolean` 值</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.69,"words":206},"t":"hasOwnProperty","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/is.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_is.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/is.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.is()</code> 方法用于判断两个值是否是相同的值。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">is</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// value1\t比较值 1\tany</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// value2\t比较值 2\tany</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回判断表达式的结果</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.1,"words":330},"t":"is","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/isExtensible.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_isExtensible.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/isExtensible.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.isExtensible()</code> 方法用于检测指定对象是否可扩展。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isExtensible</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 指定用于检测的对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回 Boolean类型的值表示用于检测的对象是否可扩展</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.61,"words":184},"t":"isExtensible","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/isFrozen.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_isFrozen.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/isFrozen.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.isFrozen()</code> 方法用来检测指定对象是否已被冻结。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isFrozen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 指定用于检测的对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回Boolean类型的值表示用于检测的对象是否被冻结</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.77,"words":230},"t":"isFrozen","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/isPrototypeOf.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_isPrototypeOf.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/isPrototypeOf.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.prototype.isPrototypeOf()</code> 方法用于测试指定对象是否存在于目标对象的原型链上。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isPrototypeOf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">V</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// V 目标对象（在该对象原型链上搜寻）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回指定对象是否位于目标对象原型链上的 Boolean 类型值</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.41,"words":123},"t":"isPrototypeOf","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/isSealed.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_isSealed.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/isSealed.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.isSealed()</code> 方法用于检测指定对象是否已被密封。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isSealed</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 指定用于检测的对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回Boolean类型的值表示用于检测的对象是否可扩展</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.74,"words":222},"t":"isSealed","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/keys.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_keys.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/keys.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.keys()</code> 方法用于获取指定对象自身可枚举 Property 组成的键名数组。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">keys</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.64,"words":193},"t":"keys","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/Object.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_Object.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/Object.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 中的 <code>Object</code> 对象，是 JavaScript 中所有对象的基类，也就是说 JavaScript 中的所有对象都是由 <code>Object</code> 对象衍生的。<code>Object</code> 对象主要用于将任意数据封装成对象形式。</p>\n<p>对象也可看做是属性的无序集合，每个属性都是一个名值对。<strong>属性名是字符串，因此我们可以把对象看成是从字符串到值的映射</strong>。</p>\n<h2>语法</h2>\n<ul>\n<li>构造函数</li>\n</ul>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">([</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":3.71,"words":1113},"t":"Object","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/preventExtensions.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_preventExtensions.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/preventExtensions.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.preventExtensions()</code> 方法用于令指定对象无法再添加新的属性。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">preventExtensions</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 将标记为不可扩展的对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回处理后的对象</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.9,"words":271},"t":"preventExtensions","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/propertyIsEnumerable.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_propertyIsEnumerable.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/propertyIsEnumerable.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.prototype.propertyIsEnumerable()</code> 方法用于检测指定 Property 是否可枚举。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">propertyIsEnumerable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\">V</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// V 需要检测的 Property 键名字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回表示指定 Property 键名是否可枚举的 Boolean 类型值</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.54,"words":162},"t":"propertyIsEnumerable","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/seal.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_seal.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/seal.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.seal</code> 方法用于标识指定对象为不可扩展，且所有现有 Property 均不可配置。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">seal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// o 将要被密封的对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回处理后的对象</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.58,"words":174},"t":"seal","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/setPrototypeOf.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_setPrototypeOf.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/setPrototypeOf.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.setPrototypeOf()</code> 方法用于设置一个指定的对象的原型 ( 即，内部 <code>[[Prototype]]</code> 属性）到另一个对象或 <code>null</code>。</p>\n<h2>语法</h2>\n<p>语法：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setPrototypeOf</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">o</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">proto</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.38,"words":114},"t":"setPrototypeOf","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/toString.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_toString.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/toString.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>Object.prototype.toString()</code> 方法用于表示指定对象的字符串。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回表示该对象的字符串</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.53,"words":159},"t":"toString","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/values.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_values.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/values.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>⭐️ ES2017(ES8)新特性</p>\n<p><code>Object.values()</code> 方法用于指定对象自身的所有可枚举 <code>Property</code> 值的数组。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">values</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// obj\t指定对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回的数组中键值的顺序与使用循环语句获取的键值组合一致</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.33,"words":98},"t":"values","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%80%BC%E5%B1%9E%E6%80%A7/globalThis.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-值属性_globalThis.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-值属性/globalThis.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>全局属性 <code>globalThis</code> 包含全局的 <code>this</code> 值，类似于全局对象（global object）。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">globalThis</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.06,"words":317},"t":"globalThis","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%80%BC%E5%B1%9E%E6%80%A7/Infinity.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-值属性_Infinity.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-值属性/Infinity.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>全局属性 <code>Infinity</code> 是一个数值，表示无穷大。</p>\n<p><code>Infinity</code> 属性的属性特性</p>\n<table>\n<thead>\n<tr>\n<th>属性特性</th>\n<th>布尔值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>writable</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>enumerable</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>configurable</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>","r":{"minutes":0.5,"words":151},"t":"Infinity","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%80%BC%E5%B1%9E%E6%80%A7/NaN.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-值属性_NaN.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-值属性/NaN.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>全局属性 <code>NaN</code> 的值表示不是一个数字（Not-A-Number）。</p>\n<h2>说明</h2>\n<ul>\n<li><code>NaN</code> 是一个全局对象的属性。</li>\n<li><code>NaN</code> 属性的初始值就是 <code>NaN</code>，和 <code>Number.NaN</code> 的值一样。</li>\n<li>编码中很少直接使用到 <code>NaN</code>。通常都是在计算失败时，作为 <code>Math</code> 的某个方法的返回值出现的（例如：<code>Math.sqrt(-1)</code>）或者尝试将一个字符串解析成数字但失败了的时候（例如：<code>parseInt('blabla')</code>）。</li>\n</ul>","r":{"minutes":1.82,"words":547},"t":"NaN","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%80%BC%E5%B1%9E%E6%80%A7/undefined.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-值属性_undefined.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-值属性/undefined.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>undefined</code> 属性是一个特殊值。如果已声明了一个变量但还未进行初始化，则其值为 <code>undefined</code>。</p>\n<p>该属性为 <code>Global</code> 对象的一个只读属性(准确地说，是一个常量)。所有主流浏览器均支持该属性。</p>\n<h2>说明</h2>\n<p>如果一个变量未被初始化赋值，则其值为 <code>undefined</code>。如果一个函数没有返回值，则其返回值默认为 <code>undefined</code>。</p>\n","r":{"minutes":0.4,"words":120},"t":"undefined","y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/decodeURI.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_decodeURI.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/decodeURI.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>decodeURI()</code> 函数用于对已编码的统一资源标识符(URI)进行解码，并返回其非编码形式。</p>\n<p>该函数属于 <code>Global</code> 对象，所有主流浏览器均支持该函数。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">decodeURI</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">encodedURIString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// encodedURIString 已编码的 `URI` 字符串</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.57,"words":172},"t":"decodeURI","O":6,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/decodeURIComponent.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_decodeURIComponent.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/decodeURIComponent.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>decodeURIComponent()</code> 函数用于对统一资源标识符(<code>URI</code>)的一个已编码的组件进行解码，并返回其非编码形式。</p>\n<p>该函数属于 <code>Global</code> 对象，所有主流浏览器均支持该函数。</p>\n<p>所谓的 <code>URI</code> 组件，就是 <code>URI</code> 的一部分，尤其是 <code>URI</code> 的参数部分。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">decodeURIComponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">encodedURIString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// encodedURIString 已编码的 URI 字符串</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.59,"words":176},"t":"decodeURIComponent","O":7,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/encodeURI.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_encodeURI.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/encodeURI.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>encodeURI()</code> 函数可把 <code>URI</code> 字符串采用 <code>UTF-8</code> 编码格式转化成 <code>escape</code> 格式的字符串。</p>\n<p>该函数属于 <code>Global</code> 对象，所有主流浏览器均支持该函数。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">encodeURI</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">URIString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// URIString 需要编码的 URI 字符串</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.92,"words":276},"t":"encodeURI","O":8,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/encodeURIComponent.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_encodeURIComponent.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/encodeURIComponent.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>encodeURIComponent()</code> 函数用于对统一资源标识符（<code>URI</code>）的有效组件进行编码，并返回编码后的字符串。</p>\n<p>该函数属于 Global 对象，所有主流浏览器均支持该函数。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">encodeURIComponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">URIString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// URIString 需要编码的 URI 组件字符串</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.95,"words":284},"t":"encodeURIComponent","O":9,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/eval.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_eval.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/eval.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>eval()</code> 函数用于计算并执行以字符串表示的 JavaScript 代码。<code>eval()</code> 函数使 JavaScript 可以动态执行 JavaScript 源代码。</p>\n<p><code>eval()</code> 函数属于 <code>Global</code> 对象，所有主流浏览器均支持该函数。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">eval</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":2.1,"words":629},"t":"eval","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/isFinite.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_isFinite.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/isFinite.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>isFinite()</code> 函数用于判断指定数字是否是有限值。如果指定的数字为 <code>NaN</code>、<code>Infinity</code>、<code>-Infinity</code>，则返回 <code>false</code>，其他数字均返回 <code>true</code>。</p>\n<p>该函数属于 <code>Global</code> 对象，所有主流浏览器均支持该函数。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isFinite</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.79,"words":238},"t":"isFinite","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/isNaN.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_isNaN.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/isNaN.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>isNaN()</code> 函数用于判断指定数字是否是非数字值 NaN。</p>\n<p>该函数属于 <code>Global</code> 对象，所有主流浏览器均支持该函数。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">isNaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">number</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.2,"words":359},"t":"isNaN","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parseFloat.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_parseFloat.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/parseFloat.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>parseFloat()</code> 函数用于将字符串转换为浮点数并返回。</p>\n<p>该函数属于 <code>Global</code> 对象，所有主流浏览器均支持该函数。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">parseFloat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">numberString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// numberString 需要转换为浮点数的字符串</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.71,"words":214},"t":"parseFloat","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/parseInt.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_parseInt.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/parseInt.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>parseInt()</code> 函数用于 将字符串转换为整数并返回。该函数可以将字符串视作指定的进制形式表示。</p>\n<p>该函数属于 <code>Global</code> 对象，所有主流浏览器均支持该函数。</p>\n<p>语法</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">parseInt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">( </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">numString</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">radix</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ] )</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.4,"words":419},"t":"parseInt","O":5,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_数据类型和值_数据类型.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/数据类型和值/数据类型.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 是一种 <strong>弱类型语言</strong> 或者说 <strong>动态语言</strong>。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p>\n<p>这也意味着你可以使用同个相同名称的变量保存不同类型的数据：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 42</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// foo is a Number now</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'bar'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// foo is a String now</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// foo is a Boolean now</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.14,"words":1842},"t":"数据类型","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC/%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_数据类型和值_类型检测.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/数据类型和值/类型检测.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>类型检测的方法：</p>\n<ol>\n<li><code>typeof</code></li>\n<li><code>instanceof</code></li>\n<li><code>Object.prototype.toString</code></li>\n<li><code>constructor</code></li>\n</ol>\n<h2>typeof</h2>\n<p><code>typeof</code> 操作符返回一个字符串，表示未经计算的操作数的类型。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> undefined</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"undefined\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"number\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"number\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"boolean\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'foo'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"string\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () {};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"function\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// \"object\"</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.18,"words":653},"t":"类型检测","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_数据类型和值_类型转换.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/数据类型和值/类型转换.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 作为一种弱类型的语言，不用像 C 语言那样要定义好数据类型，因为允许变量类型的 <strong>隐式类型转换</strong> 和允许 <strong>强制类型转换</strong>。我们在定义一个变量的时候，只需一个 <code>var</code>、<code>let</code>、<code>const</code> 搞定，不用担心数据的类型。</p>\n<h2>基本规则</h2>\n<p>从 ECMAScript Standard 中了解 <code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Array</code> 和 <code>Object</code> 之间的相互转换会更加直观。</p>","r":{"minutes":9.74,"words":2922},"t":"类型转换","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/break%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_break语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/break语句.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>break</code> 语句用于立即退出最内层的循环或 <code>switch</code> 语句。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">break</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">labelname</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.81,"words":242},"t":"break 语句","O":5,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/continue%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_continue语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/continue语句.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>continue</code> 语句用于结束当前（或标签）的循环语句的本次迭代，并继续执行循环的下一次迭代。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">break</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">labelname</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.36,"words":408},"t":"continue 语句","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/do-while.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_do-while.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/do-while.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>do-while</code> 语句创建一个执行指定语句的循环，直到 <code>condition</code> 值为 <code>false</code>。在执行 <code>statement</code> 后检测 <code>condition</code>，所以指定的 <code>statement</code> 至少执行一次。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">do</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  statement</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">} </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.76,"words":229},"t":"do-while 语句","O":11,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/for-in%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_for-in语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/for-in语句.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>for-in</code> 语句用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">property</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">statement</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.84,"words":553},"t":"for-in 语句","O":14,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/for-of%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_for-of语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/for-of语句.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>for-of</code> 语句在可迭代对象（包括 <code>Array</code>，<code>Map</code>，<code>Set</code>，<code>String</code>，<code>TypedArray``，arguments</code> 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">variable</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> of</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> iterable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  //statements</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.91,"words":1173},"t":"for-of 语句","O":15,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/for%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_for语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/for语句.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>for</code> 语句 也是一种前测试循环语句，但它具有在执行循环之前初始化变量和定义循环后要执行的代码的能力。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">initialization</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">post</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> loop</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // statement</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.12,"words":635},"t":"for 语句","O":13,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/if%20%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_if 语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/if 语句.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>条件语句用于基于不同的条件来执行不同的动作。</strong></p>\n<p>在 JavaScript 中，我们可使用以下条件语句：</p>\n<ul>\n<li><code>if</code> 语句：只有当指定条件为 true 时，使用该语句来执行代码</li>\n<li><code>if...else</code> 语句： 当条件为 true 时执行代码，当条件为 false 时执行其他代码</li>\n<li><code>if...else if...else</code> 语句：使用该语句来选择多个代码块之一来执行</li>\n<li><code>switch</code> 语句：使用该语句来选择多个代码块之一来执行</li>\n</ul>","r":{"minutes":1.71,"words":513},"t":"if 语句","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/label%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_label语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/label语句.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>标记语句可以和 <code>break</code> 或 <code>continue</code> 语句一起使用。标记就是在一条语句前面加个可以引用的标识符。</p>\n<blockquote>\n<p>[!warning]\n标记的循环或块非常罕见。通常可以使用函数调用而不是循环跳转。</p>\n</blockquote>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">identifier</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">statement</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.7,"words":209},"t":"label 语句","O":8,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/return%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_return语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/return语句.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>函数中的 <code>return</code> 语句用来返回函数调用后的返回值</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":2.19,"words":658},"t":"return 语句","O":6,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/switch%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_switch语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/switch语句.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>switch</code> 语句允许一个程序求一个表达式的值并且尝试去匹配表达式的值到一个 <code>case</code> 标签。如果匹配成功，这个程序执行相关的语句。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">switch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   case</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> value_1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">      statements_1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">break</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   case</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> value_2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">      statements_2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">break</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">   ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">   default</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">      statements_def</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">break</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.96,"words":287},"t":"switch 语句","O":7,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/throw%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_throw语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/throw语句.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>throw</code> 语句 用来抛出一个用户自定义的异常。当前函数的执行将被停止（ <code>throw</code> 之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个 <code>catch</code> 块。如果调用者函数中没有 <code>catch</code> 块，程序将会终止。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">throw</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.02,"words":305},"t":"throw 语句","O":9,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/try-catch%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_try-catch语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/try-catch语句.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>try...catch</code> 语句将能引发错误的代码放在 <code>try</code> 块中，并且对应一个响应，然后有异常被抛出。</p>\n<p><code>try...catch</code> 语句包含了由一个或者多个语句组成的 <code>try</code> 块, 和至少一个 <code>catch</code> 子句或者一个 <code>finally</code> 子句的其中一个，或者两个兼有。</p>\n<p>下面是三种形式的 <code>try</code> 声明：</p>\n<ul>\n<li><code>try...catch</code></li>\n<li><code>try...finally</code></li>\n<li><code>try...catch...finally</code></li>\n</ul>","r":{"minutes":2.9,"words":870},"t":"try-catch 语句","O":10,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/while.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_while.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/while.html.js"), meta: {"d":1514937600000,"l":"2018年1月3日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>while</code> 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为 <code>true</code> 时结束循环。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">while</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">statement</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.39,"words":118},"t":"while 语句","O":12,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_变量声明.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/变量声明.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用于保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。</p>\n<h2>声明</h2>\n<h3>var</h3>\n<p><code>var</code> 语句用于声明一个变量，可选地将其初始化为一个值。</p>\n<p>变量声明，无论发生在何处，都在执行任何代码之前进行处理。用 var 声明的变量的作用域是它当前的执行上下文，它可以是嵌套的函数，也可以是声明在任何函数外的变量。如果你重新声明一个 JavaScript 变量，它将不会丢失其值。</p>\n<p>将赋值给未声明变量的值在执行赋值时将其隐式地创建为全局变量（它将成为全局对象的属性）。声明和未声明变量之间的差异是：</p>","r":{"minutes":5.8,"words":1739},"t":"变量声明","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/%E5%9D%97%E8%AF%AD%E5%8F%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_块语句.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/块语句.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>块语句（Block）用于组合零个或多个语句。该块由一对大括号 {} 界定，块内形成块级作用域，<strong>块作用域内定义的变量将在离开块作用域后立即被回收</strong>。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  StatementList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.93,"words":578},"t":"块语句","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%AD%97%E9%9D%A2%E9%87%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_表达式_字面量.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/表达式/字面量.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>字面量（Literal），又名直接量，即程序中直接使用的数据值。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Null 字面量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> n</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Undefined 字面量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> u</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> undefined</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Boolean 布尔值字面量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> b1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> b2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Number 数值字面量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> num</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> nan</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> NaN</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// String 字符串字面量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> hello</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'hello'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> world</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'world'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Regexp 正则字面量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> reg</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\"> /pattern/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Template Literal 模版字面量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> temp</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `hello, </span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">world</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.39,"words":117},"t":"字面量","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%AF%B9%E8%B1%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E8%A1%A8%E8%BE%BE%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_表达式_对象初始化表达式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/表达式/对象初始化表达式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>对象和数组初始化表达式实际上是一个新创建的对象和数组。这些初始化表达式有时称作 <strong>对象直接量</strong> 和 <strong>数组直接量</strong>。然而和布尔值直接量不同，它们实际上不是原始表达式，因为它们所包含的成员或者元素都是子表达式。</p>\n<p>对象初始化表达式和数组初始化表达式非常相似，只是方括号被花括号代替，并且每个子表达式都包含一个属性名和一个冒号作为前缀。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 一个拥有两个属性成员的对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> p</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2.3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1.2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 一个空对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> q</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// q 的属性成员和 p 的一样</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">q</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2.3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">q</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1.2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.22,"words":366},"t":"对象初始化表达式","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE%E5%99%A8.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_表达式_属性访问器.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/表达式/属性访问器.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>属性访问表达式运算得到一个对象属性或一个数组元素的值。</p>\n<p>JavaScript 为属性访问定义了两种语法。</p>\n<h2>语法</h2>\n<ul>\n<li>第一种写法是一个表达式后跟随一个句点和标识符。表达式指定对象，标识符则指定需要访问的属性的名称。</li>\n</ul>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">identifiler</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.5,"words":449},"t":"属性访问器","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%A1%A8%E8%BE%BE%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_表达式_数组初始化表达式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/表达式/数组初始化表达式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>数组初始化表达式</strong> 是通过一对方括号和其内由逗号隔开的列表构成的。初始化的结果是一个新创建的数组。</p>\n<h2>逗号分隔</h2>\n<p>数组的元素是 <strong>逗号分隔</strong> 的表达式的值。</p>\n<p>空数组：<code>[]</code> 内留空即表示该数组没有任何元素</p>\n<p>拥有两个元素的数组：第一个是 3，第二个是 7。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.23,"words":368},"t":"数组初始化表达式","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/delete.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_delete.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/delete.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>delete</code> 操作符用于删除对象的某个属性。如果没有指向这个属性的引用了，它最终会被自动地释放。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">delete</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.99,"words":597},"t":"delete","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/in.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_in.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/in.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>in</code> 运算符用于判断属性是否存在于对象中。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">key</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.42,"words":426},"t":"in","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/instanceof.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_instanceof.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/instanceof.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>instanceof</code> 运算符用于测试构造函数的 <code>prototype</code> 属性是否出现在对象的原型链中的任何位置。</p>\n<p>代码示例：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">target</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> instanceof</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> constructor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.87,"words":262},"t":"instanceof","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/typeof.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_typeof.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/typeof.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>typeof</code> 操作符返回一个字符串，表示未经计算的操作数的类型。</p>\n<h2>语法</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> operand</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.61,"words":482},"t":"typeof","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/void.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_void.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/void.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>void</code> 运算符能向期望一个表达式的值是 <code>undefined</code> 的地方插入会产生副作用的表达式。</p>\n<p><code>void</code> 运算符通常只用于获取 <code>undefined</code> 的原始值，一般使用 <code>void(0)</code>（等同于 <code>void 0</code>）。在上述情况中，也可以使用全局变量 <code>undefined</code> 来代替（假定其仍是默认值）。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// undefined</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">void</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// undefined</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.16,"words":347},"t":"void","O":5,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_位运算移位运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/位运算移位运算符.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>位运算符将它的操作数视为 32 位元的二进制串（0 和 1 组成）而非十进制、八进制或十六进制数。例如：十进制数字 <code>9</code> 用二进制表示为 <code>1001</code>，位运算符就是在这个二进制表示上执行运算，但是返回结果是标准的 JavaScript 数值。</p>\n<ul>\n<li>所有 JavaScript 数字存储为根为 10 的 64（8 比特）浮点数。JavaScript 不是类型语言。与许多其他编程语言不同，JavaScript 不定义不同类型的数字，比如整数、短、长、浮点等等。</li>\n<li>整数精度（不使用小数点或指数计数法）最多为 15 位。小数精度的最大位数是 17，但是浮点运算并不总是 100% 准确。</li>\n<li>位运算直接对二进制位进行计算，位运算直接处理每一个比特位，是非常底层的运算，好处是速度极快，缺点是很不直观，许多场合不能够使用。</li>\n<li>位运算只对整数起作用，如果一个运算数不是整数，会自动转为整数后再运行。</li>\n<li>在 JavaScript 内部，数值都是以 64 位浮点数的形式储存，但是做位运算的时候，是以 32 位带符号的整数进行运算的，并且返回值也是一个 32 位带符号的整数。</li>\n</ul>","r":{"minutes":8.12,"words":2436},"t":"位运算移位运算符","O":10,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E5%8F%AF%E9%80%89%E9%93%BE%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_可选链运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/可选链运算符.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>可选链运算符</strong>（<code>?.</code>）允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。<code>?.</code> 运算符的功能类似于 <code>.</code> 链式运算符，不同之处在于，在引用为空 (nullish) (<code>null</code> 或者 <code>undefined</code>) 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。</p>\n<p>当尝试访问可能不存在的对象属性时，可选链运算符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链运算符也是很有帮助的。</p>","r":{"minutes":1.05,"words":314},"t":"可选链运算符","O":17,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_字符串运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/字符串运算符.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>字符串运算符（用 <code>+</code> 加号表示）用于把两个字符串值相连接。操作值位于运算符两侧，运算返回另一个字符串，它是两个操作数串的结合。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ' '</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'world!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'Hello world!'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.42,"words":125},"t":"字符串运算符","O":6,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_扩展运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/扩展运算符.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>扩展运算符允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组字面量）或多个变量（用于解构赋值）的位置扩展。</p>\n<h2>语法</h2>\n<h3>函数调用</h3>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">myFunction</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">...</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">iterableObj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":4.32,"words":1297},"t":"扩展运算符","O":15,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%9B%B4%E6%96%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_更新运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/更新运算符.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>更新运算符包括 <strong>前自增/自减运算符</strong> 和 <strong>后自增/自减运算符</strong>。</p>\n<h2>前自增</h2>\n<p>先自增，再赋值</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> n</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 前自增</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> res</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ++</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 11</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 11</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.8,"words":540},"t":"更新运算符","O":8,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_条件运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/条件运算符.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>条件运算符</strong>（Conditional Operator）是 JavaScript 中 <strong>唯一的一个三元运算符</strong>（三个操作数），有时直接称做 <strong>三元运算符</strong>。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">variable</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> boolean_expression</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> true_value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> :</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> false_value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.62,"words":487},"t":"条件运算符","O":13,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_比较运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/比较运算符.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>比较运算符比较它的操作数并返回一个基于表达式是否为 <code>true</code> 的逻辑值。</p>\n<p>比较运算符分为 <strong>关系运算符</strong>（Relational Operators）和 <strong>等值运算符</strong>（Equality Operators）。</p>\n<ul>\n<li>操作数可以是数字，字符串，逻辑，对象值。</li>\n<li>字符串比较是基于标准的字典顺序，使用 Unicode 值。</li>\n<li>在多数情况下，如果两个操作数不是相同的类型， JavaScript 会尝试转换它们为恰当的类型来比较。这种行为通常发生在数字作为操作数的比较。</li>\n<li>类型转换的例外是使用 <code>===</code> 和 <code>!==</code> 操作符，它们会执行严格的相等和不相等比较。这些运算符不会在检查相等之前转换操作数的类型。下面的表格描述了该示例代码中的各比较运算符。</li>\n</ul>","r":{"minutes":4.3,"words":1291},"t":"比较运算符","O":12,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_算术运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/算术运算符.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>算术运算符使用数值（字面量或者变量）作为操作数进行运算并返回一个数值。</p>\n<p>标准的算术运算符就是加减乘除 <code>+</code>、<code>-</code>、<code>*</code> 和 <code>/</code>。</p>\n<p>当操作数是浮点数时，这些运算符表现得跟它们在大多数编程语言中一样（特殊要注意的是，除零会产生 <code>Infinity</code> ）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加法</td>\n<td style=\"text-align:left\"><code>1 + 1 = 2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减法</td>\n<td style=\"text-align:left\"><code>2 - 1 = 1</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘法</td>\n<td style=\"text-align:left\"><code>3 * 3 = 9</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除法</td>\n<td style=\"text-align:left\"><code>10 / 5 = 2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>%</code></td>\n<td style=\"text-align:left\">求余，返回相除后余值</td>\n<td style=\"text-align:left\"><code>12 % 5 = 2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>++</code></td>\n<td style=\"text-align:left\">自增（更新运算符），分为前自增和后自增</td>\n<td style=\"text-align:left\">具体参考 <a href=\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%9B%B4%E6%96%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html\" target=\"_blank\">更新运算符</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>--</code></td>\n<td style=\"text-align:left\">自减（更新运算符），分为前自减和后自减</td>\n<td style=\"text-align:left\">具体参考 <a href=\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%9B%B4%E6%96%B0%E8%BF%90%E7%AE%97%E7%AC%A6.html\" target=\"_blank\">更新运算符</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">一元负值符，返回操作数的负值</td>\n<td style=\"text-align:left\"><code>-</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">一元正值符，若操作数在操作前非数字类型，将试图将其转换成数字类型</td>\n<td style=\"text-align:left\"><code>+foo</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>**</code></td>\n<td style=\"text-align:left\">指数运算符，计算 base（底数） 的 exponent（指数）次方</td>\n<td style=\"text-align:left\"><code>2 ** 3 = 8</code></td>\n</tr>\n</tbody>\n</table>","r":{"minutes":1.15,"words":345},"t":"算术运算符","O":7,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_解构赋值.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/解构赋值.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>解构赋值</strong>（Destructing）语法是一个 JavaScript 表达式，这使得可以将 <strong>值从数组</strong> 或 <strong>属性从对象</strong> 提取到不同的变量中。</p>\n<h2>数组的解构赋值</h2>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 不使用解构</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> one</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> two</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> three</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 使用解构</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">one</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">two</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">three</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":11.76,"words":3528},"t":"解构赋值","O":16,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_赋值运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/赋值运算符.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>一个 <strong>赋值运算符</strong>（assignment operator）将它右边操作数的值赋给它左边的操作数。</p>\n<p>下列为 ECMAScript 标准规范的 Assignment Operator：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> /=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> %=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> &lt;&lt;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> &gt;&gt;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> &gt;&gt;&gt;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> &amp;=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> ^=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\"> |=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> **=</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.67,"words":201},"t":"赋值运算符","O":9,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_运算符优先级.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/运算符优先级.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。</p>\n<h2>结合性</h2>\n<p>结合性决定了拥有相同优先级的运算符的执行顺序。考虑下面这个表达式：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> OP</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> b</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> OP</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> c</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":2.54,"words":763},"t":"运算符优先级","O":18,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_逗号运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/逗号运算符.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>逗号运算符</strong> 是 <strong>二元运算符</strong>，它的操作数可以是任意类型。</p>\n<p>它首先计算左操作数，然后计算右操作数，最后返回右操作数的值，用逗号运算符可以在一条语句中执行多个运算。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">z</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 计算结果是 2，它和下面的代码基本等价</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">z</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.99,"words":296},"t":"逗号运算符","O":11,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_逻辑运算符.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/逻辑运算符.html.js"), meta: {"d":1514851200000,"l":"2018年1月2日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>逻辑运算符常用于对操作数进行布尔运算，经常和关系运算符一样配合使用。逻辑运算符将多个关系表达式组合起来组成一个更复杂的表达式。逻辑运算符分为逻辑与 <code>&amp;&amp;</code> 、逻辑或 <code>||</code> 、逻辑非 <code>!</code> 三种。</p>\n<h2>逻辑与</h2>\n<p><strong>逻辑与运算符</strong> 由两个和号 <code>&amp;&amp;</code> 表示，有两个操作数，只有在两个操作数都为 <code>true</code> 时，结果才返回 <code>true</code>，否则返回 <code>false</code>。</p>","r":{"minutes":4.4,"words":1321},"t":"逻辑运算符","O":14,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_内存管理_内存模型.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/内存管理/内存模型.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 内存空间分为 栈（Stack）、堆（Heap）、池（一般也会归类为栈中）。其中 栈 存放变量，堆 存放复杂对象，池 存放常量。</p>\n<h2>栈数据结构</h2>\n<p>与 C / C++ 不同，JavaScript 中并没有严格意义上区分栈内存与堆内存。因此我们可以简单粗暴的理解为 JavaScript 的所有数据都保存在堆内存中。但是在某些场景，我们仍然需要基于堆栈数据结构的思维来实现一些功能，比如 JavaScript 的 执行上下文。执行上下文的执行顺序借用了栈数据结构的存取方式。</p>\n<p>要简单理解栈的存取方式，我们可以通过类比乒乓球盒子来分析。</p>","r":{"minutes":5.86,"words":1757},"t":"内存模型","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%86%85%E5%AD%98%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_内存管理_内存生命周期.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/内存管理/内存生命周期.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 环境中分配的内存一般有如下生命周期：</p>\n<ol>\n<li>内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</li>\n<li>内存使用：即读写内存，也就是使用变量、函数等</li>\n<li>内存回收：使用完毕，由 <a href=\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html\" target=\"_blank\">垃圾回收机制</a> 自动回收不再使用的内存</li>\n</ol>","r":{"minutes":2.41,"words":722},"t":"内存生命周期","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_内存管理_垃圾回收.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/内存管理/垃圾回收.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<blockquote>\n<p>由于字符串、对象和数组没有固定大小，所以当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript 序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript 的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。——《JavaScript 权威指南》</p>\n</blockquote>\n<p>在 C 和 C++ 之类的语言中，需要手动来管理内存的，这也是造成许多不必要问题的根源。幸运的是，在编写 JavaScript 的过程中，内存的分配以及内存的回收完全实现了自动管理。</p>","r":{"minutes":8.97,"words":2692},"t":"垃圾回收","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8/%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数内部_函数原型对象属性.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数内部/函数原型对象属性.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>length 属性</h2>\n<p>在函数中，<code>arguments</code> 对象的 <code>length</code> 属性表示实参个数，而函数的 <code>length</code> 属性则表示函数希望接受形参个数。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // do something</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">num1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">num2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // do something</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sayHi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // do something</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Output: 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Output: 2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">sayHi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">length</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Output: 0</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.4,"words":421},"t":"函数原型对象属性","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8/%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数内部_函数原型对象方法.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数内部/函数原型对象方法.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>apply</h2>\n<p><code>apply()</code> 函数用于调用当前函数，并可同时使用指定对象作为本次函数执行时函数内部的 this 指针引用。</p>\n<h3>语法</h3>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">apply</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">( [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">thisArg</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">argsArray</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]])</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":4.5,"words":1350},"t":"函数原型对象方法","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8/%E5%87%BD%E6%95%B0%E5%AD%98%E5%8F%96%E5%99%A8.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数内部_函数存取器.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数内部/函数存取器.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>取值函数</h2>\n<p><code>getter</code> 语法将对象属性绑定到查询该属性时将被调用的函数。</p>\n<h3>语法</h3>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">get</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> prop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // do something</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">get</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">expression</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // do something</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.35,"words":704},"t":"函数存取器","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E/%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E5%AE%9A%E4%B9%89.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数声明_函数声明定义.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数声明/函数声明定义.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>一个函数定义由一系列的 <code>function</code> 关键字组成，依次为：</p>\n<ul>\n<li>函数的名称</li>\n<li>函数的参数列表，包围在括号中并由逗号分隔</li>\n<li>函数执行的语句，用大括号 <code>{}</code> 括起来（函数体）</li>\n</ul>\n<h2>函数声明语句</h2>\n<p>函数声明语句的组成要素：</p>\n<ul>\n<li><code>function</code> 关键字</li>\n<li><code>functionName</code> 函数名</li>\n<li><code>arg</code> 参数（可选）</li>\n<li><code>functionBody</code> 函数体</li>\n</ul>","r":{"minutes":4.33,"words":1299},"t":"函数声明定义","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E/%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数声明_异步函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数声明/异步函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>async</code> 函数是 <code>Generator</code> 函数的语法糖。使用关键字 <code>async</code> 来表示，在函数内部是使用 <code>await</code> 命令来表示异步。</p>\n<p>相较于 <code>Generator</code>，<code>async</code> 函数的改进在于以下四点：</p>\n<ul>\n<li>内置执行器：<code>Generator</code> 函数的执行必须靠执行器，而 <code>async</code> 函数自带执行器，调用方式与普通函数一致。</li>\n<li>更好的语义：<code>async</code> 和 <code>await</code> 相较于星号（<code>*</code>）和 <code>yield</code> 更加语义化。<code>async</code> 表示函数中有异步操作，<code>await</code> 表示紧跟在后面的表达式需要等待结果。</li>\n<li>更广的适用性：co 模块约定，<code>yield</code> 命令后面只能是 <code>Thunk</code> 函数或 <code>Promise</code> 对象，而 <code>async</code> 函数的 <code>await</code> 命令后面则可以是 <code>Promise</code> 和原始类型的值（Number、String 和 Boolean，但这时会自动转成立即 <code>fulfilled</code> 状态的 <code>Promise</code> 对象）。</li>\n<li>返回值是 Promise：<code>async</code> 函数的返回值是 <code>Promise</code> 对象，这比 <code>Generator</code> 函数的返回值是 <code>Iterator</code> 对象方便多了。你可以用 <code>then</code> 方法指定下一步的操作。</li>\n</ul>","r":{"minutes":7.12,"words":2135},"t":"异步函数","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数声明_箭头函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数声明/箭头函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>箭头函数表达式的语法比函数表达式更短，并且没有自己的 <code>this</code>、<code>arguments</code>、<code>super</code> 和 <code>new.target</code>。</p>\n<p>箭头函数表达式更适用于那些本来需要匿名函数的业务场景，并且它们不能用作构造函数。</p>\n<h2>赋值式写法</h2>\n<p>箭头函数只能用 赋值式写法，不能用声明式写法。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> fn</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // do something</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.72,"words":1715},"t":"箭头函数","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数参数_函数参数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数参数/函数参数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>arguments</h2>\n<p>JavaScript 中的函数定义并未指定函数形参的类型，函数调用也未对传入的实参值做任何类型检查。实际上，JavaScript 函数调用甚至不检查传入形参的个数。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// '11'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// NaN</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">foo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.46,"words":1937},"t":"函数参数","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数参数_剩余参数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数参数/剩余参数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>剩余参数</strong>（亦称 rest 参数） 用于获取函数的多余参数，这样就不要使用 <code>arguments</code> 对象了。剩余参数搭配的变量是一个 数组，该变量将多余的参数放入数组中。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">...</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">values</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  let</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> sum</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> val</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> of</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> values</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    sum</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> val</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 10</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.63,"words":490},"t":"剩余参数","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数参数_默认参数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数参数/默认参数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>通常来说，函数调用者不需要传递所有可能存在的参数，没有被传递的参数可由感知到的默认参数进行填充。JavaScript 有严格的默认参数格式，未被传值的参数默认为 <code>undefined</code>。ES6 引入了一种新方式，可以指定任意参数的默认值。</p>\n<p>JavaScript 函数参数的默认值都是<code>undefined</code>， ES5 里，不支持直接在形参里写默认值。所以，要设置默认值，就要检测参数是否为<code>undefined</code>，按需求赋值。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> y</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ||</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'World'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Hello World</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'China'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Hello China</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">''</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Hello World</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":9.84,"words":2953},"t":"默认参数","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E5%81%8F%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_偏函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/偏函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>维基百科中对偏函数（Partial）的定义为：</p>\n<blockquote>\n<p>In computer science, partial application(or partial function application) refers to the process of fixing a number of arguments to a function, producing another function of smaller arity.</p>\n</blockquote>\n<p>在计算机科学中，局部应用是指固定一个函数的一些参数，然后产生另一个更小元的函数。</p>","r":{"minutes":1.81,"words":542},"t":"偏函数","O":12,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_函数柯里化.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/函数柯里化.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<blockquote>\n<p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>\n</blockquote>\n<p>柯里化（Currying），又称部分求值（Partial Evaluation），是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。核心思想是把多参数传入的函数拆成单参数（或部分）函数，内部再返回调用下一个单参数（或部分）函数，依次处理剩余的参数。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 传统写法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 柯里化</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.52,"words":1055},"t":"函数柯里化","O":7,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E5%87%BD%E6%95%B0%E7%9D%A1%E7%9C%A0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_函数睡眠.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/函数睡眠.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>伪命题，JavaScript 引擎线程无法挂起，通过异步实现类似 sleep 的效果。</p>\n<h2>代码实现</h2>\n<h3>回调函数实现</h3>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sleep</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">cb</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">time</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> setTimeout</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">cb</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">time</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sleep</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(() </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello world!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.63,"words":488},"t":"函数睡眠","O":11,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_函数节流.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/函数节流.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>函数节流</strong>：规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。简单来说，触发后立即执行，但如果要执行下一次，需要在离上次执行时间间隔设定时间后再出发才能执行。</p>\n<p>🏕 <strong>生活中的实例</strong>：</p>\n<p>我们知道目前的一种说法是当 1 秒内连续播放 24 张以上的图片时，在人眼的视觉中就会形成一个连贯的动画，所以在电影的播放中基本是以每秒 24 张的速度播放的，为什么不是 100 张或更多呢，主要是因为 24 张就可以满足人类视觉需求的时候，100 张就会显得很浪费资源。</p>","r":{"minutes":4.46,"words":1339},"t":"函数节流","O":8,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E5%87%BD%E6%95%B0%E8%AE%B0%E5%BF%86.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_函数记忆.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/函数记忆.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>函数记忆</strong>： 指将上次的（计算结果）缓存起来，当下次调用时，如果遇到相同的（参数），就直接返回（缓存中的数据）。</p>\n<p>实现原理：将参数和对应的结果保存在对象中，再次调用时，判断对象 <code>key</code> 是否存在，存在返回缓存的值。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> memorize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> cache</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {};</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> key</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Array</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">arguments</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">','</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">key</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> cache</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> cache</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">key</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">cache</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">key</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">apply</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">arguments</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.42,"words":125},"t":"函数记忆","O":10,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_函数防抖.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/函数防抖.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>函数防抖</strong>：在频繁触发的情况下，只有足够的空闲时间，才执行代码一次，如果没有执行完就清除掉，重新执行逻辑。简单来说，当触发后再次触发，会取消上一次触发的执行，直到最后一次触发后过去设定时间后才执行。</p>\n<p>🏕 <strong>生活中的实例</strong>：</p>\n<p>假设你正在乘电梯上楼，当电梯门关闭之前发现有人也要乘电梯，礼貌起见，你会按下开门开关，然后等他进电梯；如果在电梯门块关闭之前，又有人来了，你会继续开门；这样一直进行下去，假定电梯没有容量限制，你可能需要等待几分钟，等到最终没人进电梯了，才会关闭电梯门，然后上楼。</p>\n<p>函数防抖规定函数再次执行需要满足两个条件：</p>","r":{"minutes":4.77,"words":1431},"t":"函数防抖","O":9,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_回调函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/回调函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码。</p>\n<p>在 JavaScript 中函数也是对象的一种，同样对象可以作为参数传递给函数，因此函数也可以作为参数传递给另外一个函数，这个作为参数的函数就是回调函数。</p>\n<p><strong>回调函数</strong></p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">num1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">num2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">callback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> sum</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> num1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> num2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 数值相加后，将相加和作为参数传入回调函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  callback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">num</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">num</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.59,"words":778},"t":"回调函数","O":5,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E6%83%B0%E6%80%A7%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_惰性函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/惰性函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>惰性函数</strong> 表示函数执行的分支只会在函数 <strong>第一次调用</strong> 的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。</p>\n<h2>解决问题</h2>\n<p>在一个方法里面可能会涉及到一些兼容性的问题，不同的浏览器对应不同的方法，第一次我们遍历这些方法找到最合适的那个， 并将这个方法覆盖于遍历它的函数，这就是惰性函数即只遍历一次就找到最佳方案，下次再要找那个方法的时候就不用遍历了，提高了性能。</p>\n<p>🌰 <strong>示例：常见的为 DOM 节点添加事件的函数</strong></p>","r":{"minutes":3.42,"words":1025},"t":"惰性函数","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_构造函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/构造函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>在典型的 OOP 语言中，如 Java 都存在类的概念，类就是对象的模版，对象就是类的实例。但是在 JavaScript 中不存在类的概念，JavaScript 不是基于类，而是通过构造函数（constructor）和原型链（prototype chains）实现的。但在 ES6 中引入了类（class） 这个概念，作为对象的模版，新的 <code>class</code> 写法知识让原型对象的写法更加清晰，这里不重点谈这个。</p>\n<h2>特点</h2>\n<ol>\n<li>构造函数的首字母必须大写，用来区分于普通函数</li>\n<li>内部使用的 <code>this</code> 对象，来指向即将要生成的实例对象</li>\n<li>使用 <code>new</code> 关键字来生成实例对象</li>\n</ol>","r":{"minutes":2.16,"words":648},"t":"构造函数","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E7%B1%BB%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_类构造函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/类构造函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>ES5 中近类的结构</h2>\n<p>ES5 中创建类的方法：新建一个构造函数，定义一个方法并且赋值给构造函数的原型</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'use strict'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">  this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">prototype</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> () {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> uzi</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Uzi'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">uzi</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">());</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Uzi</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.26,"words":1577},"t":"类构造函数","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E7%BA%A7%E8%81%94%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_级联函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/级联函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>级联函数</strong> 也叫 <strong>链式函数</strong>，是一种在一个对象上使用一条连续的代码来重复调用不同方法的技巧。这种技巧在 jQuery 和其他一些 JavaScript 库中很流行，它甚至也是一些 JavaScript 原生方法的内在特性，比如常见的字符串方法。一定程度上可以减少代码量，提高代码可读性，缺点是它占用了函数的返回值。</p>\n<p>级连函数的表达形式如下所示：</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// jQuery</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'#wrapper'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fadeOut</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">html</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Welcome, Sir'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">fadeIn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 字符串操作</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'kankuuii'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">replace</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'k'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'R'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toUpperCase</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">substr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 'RANK'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.27,"words":380},"t":"级联函数","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_高阶函数.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/高阶函数.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>高阶函数</strong> 指操作函数的函数，一般地，有以下两种情况：</p>\n<ol>\n<li>函数可以作为参数被传递</li>\n<li>函数可以作为返回值输出</li>\n</ol>\n<p>JavaScript 中的函数显然满足高阶函数的条件，在实际开发中，无论是将函数当作参数传递，还是让函数的执行结果返回另外一个函数，这两种情形都有很多应用场景。</p>\n<h2>作为参数传递</h2>\n<p>把函数当作参数传递，代表可以抽离出一部分容易变化的业务逻辑，把这部分业务逻辑放在函数参数中，这样一来可以分离业务代码中变化与不变的部分。</p>\n<h3>回调函数</h3>\n<p>其中一个常见的应用场景就是回调函数。</p>","r":{"minutes":5.55,"words":1666},"t":"高阶函数","O":6,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数调用_函数调用模式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数调用/函数调用模式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>函数调用模式</strong>（Function Invocation Pattern）</p>\n<p>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。对于普通的函数调用来说，函数的返回值就是调用表达式的值。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ( </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> sum</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">( </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">( </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 7</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.82,"words":245},"t":"函数调用模式","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数调用_方法调用模式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数调用/方法调用模式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>方法调用模式</strong>（Method Invocation Pattern）</p>\n<p>在面向对象程序设计中，当函数（Function）作为对象属性时被称为方法（Method）。方法被调用时 <code>this</code> 会被绑定到对应的对象。在 JavaScript 中有两种语法可以完成方法调用。</p>\n<h2>函数作为方法调用</h2>\n<p>当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，<code>this</code> 被绑定到该对象。如果调用表达式包含一个提取属性的动作，那么它就是被当做一个方法来调用。</p>","r":{"minutes":2.33,"words":700},"t":"方法调用模式","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数调用_构造函数调用模式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数调用/构造函数调用模式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>构造函数调用模式</strong>（Constructor Invocation Pattern）</p>\n<p>构造函数调用模式的特征：</p>\n<ol>\n<li>构造函数的首字母一般要大写</li>\n<li>一般情况下和关键字 <code>new</code> 一起使用</li>\n<li>构造函数中的 <code>this</code> 指向 <code>new</code> 关键字创建出来的实例对象</li>\n<li>默认返回 <code>new</code> 创建出来的这个对象（<code>this</code>）</li>\n</ol>\n<h2>关键字 new</h2>","r":{"minutes":1.95,"words":585},"t":"构造函数调用模式","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/%E9%97%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数调用_间接调用模式.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数调用/间接调用模式.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 中函数也是对象，函数对象也可以包含方法。<code>call()</code> 和 <code>apply()</code> 方法可以用来间接地调用函数。</p>\n<p>这两个方法都允许显式指定调用所需的 <code>this</code> 值，也就是说，任何函数可以作为任何对象的方法来调用，哪怕这个函数不是那个对象的方法。两个方法都可以指定调用的实参。<code>call()</code> 方法使用它自有的实参列表作为函数的实参，<code>apply()</code> 方法则要求以数组的形式传入参数。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> obj</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">call</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">apply</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">obj</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 3</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.61,"words":184},"t":"间接调用模式","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_并发模型_事件循环.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/并发模型/事件循环.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>为了协调事件、用户交互、脚本、UI 渲染、网络请求，用户代理必须使用 <strong>事件循环机制</strong>（Event Loop）。</p>\n<p>这种事件循环机制是由 JavaScript 的宿主环境来实现的，在浏览器运行环境中由浏览器内核引擎实现，而在 NodeJS 中则由 libuv 引擎实现。</p>\n<p>主线程运行时候，产生堆（Heap）和栈（Stack），栈中的代码调用各种外部 API，它们在任务队列中加入各种事件。只要栈中的代码执行完毕，主线程就会通过事件循环机制读取任务队列，依次执行那些事件所对应的回调函数。</p>\n<p>运行机制：</p>\n<ol>\n<li>所有同步任务都在主线程上执行，形成一个 <strong>执行栈</strong>（Execution Context Stack）</li>\n<li>主线程之外，还存在一个 <strong>任务队列</strong>（Task Queue）。只要异步任务有了运行结果，就在 <strong>任务队列</strong> 之中放置一个事件</li>\n<li>一旦 <strong>执行栈</strong> 中的所有同步任务执行完毕，系统就会读取 <strong>任务队列</strong>，看看里面有哪些待执行事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行</li>\n<li>主线程不断重复上面的第三步</li>\n</ol>","r":{"minutes":3.52,"words":1056},"t":"事件循环","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E5%AE%9A%E6%97%B6%E5%99%A8%E6%9C%BA%E5%88%B6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_并发模型_定时器机制.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/并发模型/定时器机制.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<figure><img src=\"https://www.freeimg.cn/i/2024/07/16/6695c9e442577.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p>让我们看看这里发生了什么事情：</p>\n<ol>\n<li>首先在 0 毫秒的时候有一个持续 18 毫秒的 JavaScript 代码块要执行。</li>\n<li>然后在 0 毫秒的时候设了两个 10 毫秒延迟的定时器，<code>setTimeout</code> 以及 <code>setInterval</code> ，<code>setTimeout</code> 先设定。</li>\n<li>在第 6 毫秒的时候有一个发生了鼠标单击事件。</li>\n</ol>","r":{"minutes":4.27,"words":1280},"t":"定时器机制","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_并发模型_并发模型.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/并发模型/并发模型.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>名词解释</h2>\n<p>在了解 JavaScript 单线程、非阻塞机制之前，先了解几组易混淆的概念。</p>\n<p>进程和线程的概念以及关系：</p>\n<ul>\n<li><strong>进程</strong>（Process）：进程是系统资源分配和调度的单元。一个运行着的程序就对应了一个进程。一个进程包括了运行中的程序和程序所使用到的内存和系统资源。</li>\n<li><strong>线程</strong>（Thread）：线程是进程下的执行者，一个进程至少开启一个线程（主线程），也可以开启多个线程。</li>\n</ul>\n<p>并行和并发的概念：</p>\n<ul>\n<li><strong>并行</strong>（Parallelism）：指程序的运行状态，在同一时间内有几件事情并行在处理。由于一个线程在同一时间只能处理一件事情，所以并行需要多个线程在同一时间执行多件事情。</li>\n<li><strong>并发</strong>（Concurrency）：指程序的设计结构，在同一时间内多件事情能被交替地处理。重点是，在某个时间内只有一件事情在执行。比如单核 CPU 能实现多任务运行的过程就是并发。</li>\n</ul>","r":{"minutes":5.79,"words":1737},"t":"并发模型","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/1.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_执行阶段_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/执行阶段/1.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<figure><img src=\"https://www.freeimg.cn/i/2024/06/26/667b753160d56.jpg\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p>当我们调用一个函数时（激活），一个新的执行上下文就会被创建。</p>\n<p>一个执行上下文的生命周期可分为 <strong>创建阶段</strong> 和 <strong>代码执行阶段</strong> 两个阶段。</p>\n<p><strong>创建阶段</strong>：在这个阶段中，执行上下文会分别进行以下操作</p>","r":{"minutes":3.22,"words":966},"t":"执行上下文栈","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/2.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_执行阶段_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/执行阶段/2.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>变量对象是与 <a href=\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/1.html\" target=\"_blank\">执行上下文</a> 相关的数据作用域，存储了在上下文中定义的 <strong>变量</strong> 和 <strong>函数声明</strong>。</p>\n<p>因为不同执行上下文中的变量对象稍有不同，所以我们来聊聊 全局执行上下文 下的变量对象和 函数执行上下文 下的变量对象。</p>","r":{"minutes":4.78,"words":1435},"t":"变量对象","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/3.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_执行阶段_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/执行阶段/3.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>在 <a href=\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/2.html\" target=\"_blank\">变量对象</a> 中提及到，当查找变量的时候，会先从当前执行上下文的变量对象中查找，如果没有找到，就会从父级（词法层面上的父级）执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的 <strong>变量对象</strong> 构成的链表就叫做作用域链。</p>","r":{"minutes":2.41,"words":724},"t":"作用域链","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/4.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_执行阶段_4.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/执行阶段/4.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>业界没有 <strong>当前执行上下文</strong> 的叫法，但是笔者私自把 <code>this</code> 的指向理解为执行时所指向的执行上下文。</p>\n<h2>调用位置</h2>\n<p>在理解 <code>this</code> 的绑定过程之前，首先要理解 <code>this</code> 的<strong>调用位置</strong>：调用位置就是函数在代码中被调用的位置（而不是声明的位置）。</p>\n<p>而要理解 <code>this</code> 的调用位置，最重要的是要 <strong>分析调用栈</strong>（就是为了到达当前执行位置所调用的所有函数）。我们关心的调用位置就在当前正在执行的函数的前一个调用中。</p>","r":{"minutes":13.76,"words":4129},"t":"当前执行上下文 this","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97%E5%8C%96/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_模块化_动态加载.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/模块化/动态加载.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>import</code> 命令会被 JavaScript 引擎静态分析，先于模块内的其他语句执行（<code>import</code> 命令叫做 <strong>连接</strong>）。因此，下面的代码会报错。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// Error</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> ===</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  import</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> module</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> './module'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.15,"words":944},"t":"动态加载","O":7,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%8C%96.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_模块化_模块化.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/模块化/模块化.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>🌽 <strong>模块化</strong>：把复杂的系统分解到多个模块以方便编码</p>\n<p>在 <strong>模块化编程</strong> 中，开发者将程序分解成离散功能块（discrete chunks of functionality），并称之为模块。</p>\n<p>将一个复杂的程序依据一定的规则（规范）封装成几个块（文件），并进行组合在一起\n块的内部数据相对而言是私有的，只是向外部暴露一些接口与外部其他模块通信\n每个模块具有比完整程序更小的接触面，使得校验、调试、测试轻而易举。 精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。</p>","r":{"minutes":15.3,"words":4589},"t":"模块化","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_模块化_模块导入.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/模块化/模块导入.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>import</code> 命令用于输入其他模块提供的功能。</p>\n<h2>导入方式</h2>\n<p>ECMAScript 规范中的模块化方案提供了四种引入模块的方式：</p>\n<ol>\n<li>命名导入（Named Imports）</li>\n<li>命名空间导入（Namespace Import）</li>\n<li>默认导入（Default Import）</li>\n<li>空的导入（Empty Import）</li>\n</ol>\n<h3>命名导入</h3>\n<p>从源模块导入其原始名称的特定项目。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">originModule</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> './module.js'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// React Hook</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">useState</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">useEffect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'react'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.36,"words":1008},"t":"模块导入 import","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%A4%8D%E5%90%88%E5%86%99%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_模块化_模块导入导出复合写法.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/模块化/模块导入导出复合写法.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>如果在一个模块之中，先输入后输出同一个模块，<code>import</code> 语句可以与 `export 语句写在一起。</p>\n<h2>模块整体转发</h2>\n<p>从 <code>module</code> 模块整体导入后，直接完整导出。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#D19A66\"> *</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'module'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.32,"words":395},"t":"模块导入/导出的复合写法","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_模块化_模块导出.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/模块化/模块导出.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><code>export</code> 命令用于规定模块的对外接口。</p>\n<h2>导出方式</h2>\n<p>ECMAScript 规范中的模块化方案提供了两种导出模块的方式：</p>\n<ul>\n<li>命名导出（Named Exports）</li>\n<li>默认导出（Default Export）</li>\n</ul>\n<h3>命名导出</h3>\n<p>在声明的变量前添加 <code>export</code> 关键字即可将相对应的变量输出。</p>\n<p><strong>导出前声明的值</strong>：</p>\n<p>这种写法能在脚本底部清晰看到所有输出模块，推荐。</p>\n","r":{"minutes":2.57,"words":771},"t":"模块导出 export","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97%E5%8C%96/%E6%A8%A1%E5%9D%97%E7%BB%A7%E6%89%BF.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_模块化_模块继承.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/模块化/模块继承.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>模块之间也可以继承。</p>\n<p>假设有一个 <code>children</code> 模块，继承自 <code>parent</code> 模块。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// children.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#D19A66\"> *</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'parent'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'child'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> cry</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // do something</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.69,"words":207},"t":"模块继承","O":5,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97%E5%8C%96/%E8%B7%A8%E6%A8%A1%E5%9D%97%E5%B8%B8%E9%87%8F.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_模块化_跨模块常量.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/模块化/跨模块常量.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>由于 <code>const</code> 声明的变量只在当前代码块有效，如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以采用下面的写法。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" data-title=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// constants.js 声明后命名导出</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> a</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> b</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> c</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// module1.js 命名空间导入</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#E45649;--shiki-dark:#D19A66\"> *</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> as</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> constants</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> './constants.js'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">constants</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">constants</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// module2.js 命名导入</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> './constants.js'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 2</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.85,"words":254},"t":"跨模块常量","O":6,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/1.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_编译阶段_1.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/编译阶段/1.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<h2>编译原理</h2>\n<p>JavaScript 是一门编译语言。与传统的编译语言不同的是，JavaScript 不是提前编译的，编译结果也不能在分布式系统中进行移植。\n在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为 <strong>编译</strong>。</p>\n<ol>\n<li>分词 / 词法分析</li>\n<li>解析 / 语法分析</li>\n<li>代码生成</li>\n</ol>\n<h3>分词和词法分析</h3>\n<p><strong>词法分析</strong>（Tokenizing / Lexing） 这个过程会将由字符组成的字符串分解成有意义的代码块（对编程语言来说），这些代码块被称为 <strong>词法单元</strong>（Token）。</p>","r":{"minutes":6.61,"words":1983},"t":"编译阶段","O":1,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/2.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_编译阶段_2.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/编译阶段/2.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>作用域就是变量（标识符）适用范围，控制着变量的可见性。</p>\n<p>《You don‘t know js》对作用域的定义：</p>\n<blockquote>\n<p>使用一套严格的规则来分辨哪些标识符对哪些语法有访问权限。</p>\n</blockquote>\n<p>《JavaScript 权威指南》中对变量作用域的描述：</p>\n<blockquote>\n<p>一个变量的作用域（Scope）是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，在 JavaScript 代码中的任何地方都是有定义的。然而在函数内声明的变量只在函数体内有定义。它们是局部变量，作用域是局部性的。函数参数也是局部变量，它们只是在函数体内有定义。</p>\n</blockquote>","r":{"minutes":5.44,"words":1632},"t":"词法作用域","O":2,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/3.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_编译阶段_3.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/编译阶段/3.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p><strong>函数作用域</strong> 指属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。这种设计方案是非常有用的，能充分利用 JavaScript 变量可以根据需要改变值类型的动态特性。</p>\n<h2>隐藏内部实现</h2>\n<p>对函数的传统认知就是先声明一个函数，然后再向里面添加代码。但反过来想也可以带来一些启示：从所写的代码中挑选出一个任意的片段，然后用函数声明对它进行包装，实际上就是把这些代码隐藏起来。</p>\n<p>实际的结果就是在这个代码片段的周围创建了一个作用域气泡，也就是说这段代码中的任何声明（变量或函数）都将绑定在这个新创建的包装函数的作用域中，而不是先前所在的作用域中。换句话说，可以把变量和函数包裹在一个函数的作用域中，然后用这个作用域来隐藏它们。</p>","r":{"minutes":6.84,"words":2053},"t":"函数作用域","O":3,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/4.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_编译阶段_4.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/编译阶段/4.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<blockquote>\n<p>任何一对花括号中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为 <strong>块级作用域</strong>。</p>\n</blockquote>\n<p>尽管函数作用域是最常见的作用域单元，也是现行大多数 JavaScript 最普遍的设计方法，但其他类型的作用域单元也是存在的，并且通过使用其他类型的作用域单元甚至可以实现维护起来更加优秀、简洁的代码，比如块作用域。</p>\n<h2>声明关键字</h2>\n<h3>var</h3>\n<p>ES5 及之前是没有块级变量这个说法的，常规性是用 <strong>闭包</strong> 来防止内存泄漏。</p>","r":{"minutes":5.34,"words":1603},"t":"块作用域","O":4,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/5.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_编译阶段_5.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/编译阶段/5.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>JavaScript 程序的运行阶段分为 <strong>预编译阶段</strong> 和 <strong>执行阶段</strong>。</p>\n<p>在预编译阶段，JavaScript 引擎会做一件事情，那就是 <strong>读取变量的定义</strong> 并 <strong>确定其作用域</strong> 即生效范围。</p>\n<ul>\n<li>变量定义\n使用 <code>var</code> 或 <code>let</code> 关键字定义的变量，在未赋值的情况下，该变量的值是 <code>undefined</code>\n使用 <code>const</code> 关键字定义变量却不赋值，将会抛出错误</li>\n<li>变量作用域\n全局变量的作用域遍布全局\n局部变量的作用域仅在于函数内部及其嵌套函数的作用域\n函数内部的同名变量或参数优先级高于全局同名变量</li>\n</ul>","r":{"minutes":3.95,"words":1184},"t":"声明提升","O":5,"y":"a"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/6.html", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_编译阶段_6.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/编译阶段/6.html.js"), meta: {"d":1514764800000,"l":"2018年1月1日","c":["前端技术"],"g":["JavaScript"],"e":"\n<p>在了解闭包之前，先要熟悉以下几点：</p>\n<ol>\n<li>首先要理解执行环境（<a href=\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/1.html\" target=\"_blank\">执行上下文栈</a>），执行环境定义了变量或函数有权访问的其他数据。</li>\n<li>每个执行环境都有一个与之关联的 <a href=\"/blog/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/2.html\" target=\"_blank\">变量对象</a>，环境中定义的所有变量和函数都保存在这个对象中。</li>\n<li>每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入到一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。</li>\n<li>当某个函数被调用时，会创建一个执行环境及其相应的 <strong>作用域链</strong>。然后使用 <code>arguments</code> 和其他命名参数的值来初始化函数的活动对象。在函数中，活动对象作为变量对象使用（作用域链是由每层的变量对象使用链结构链接起来的）。</li>\n<li>在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，直到作用域链终点即全局执行环境。</li>\n<li><strong>作用域链的本质是一个指向变量对象的指针列表，它只引用但不实际包含变量对象。</strong></li>\n</ol>","r":{"minutes":7.01,"words":2104},"t":"闭包","O":6,"y":"a"} }],
  ["/404.html", { loader: () => import(/* webpackChunkName: "404.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/404.html.js"), meta: {"t":""} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/css/", { loader: () => import(/* webpackChunkName: "前端技术_css_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/css/index.html.js"), meta: {"t":"Css"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/", { loader: () => import(/* webpackChunkName: "前端技术_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/index.html.js"), meta: {"t":"前端技术"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/html/", { loader: () => import(/* webpackChunkName: "前端技术_html_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/html/index.html.js"), meta: {"t":"Html"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E6%B5%8F%E8%A7%88%E5%99%A8/", { loader: () => import(/* webpackChunkName: "前端技术_浏览器_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/浏览器/index.html.js"), meta: {"t":"浏览器"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/", { loader: () => import(/* webpackChunkName: "前端技术_问题解决_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/问题解决/index.html.js"), meta: {"t":"问题解决"} }],
  ["/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/", { loader: () => import(/* webpackChunkName: "开发工具_git_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/开发工具/git/index.html.js"), meta: {"t":"Git"} }],
  ["/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/", { loader: () => import(/* webpackChunkName: "开发工具_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/开发工具/index.html.js"), meta: {"t":"开发工具"} }],
  ["/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/npm/", { loader: () => import(/* webpackChunkName: "开发工具_npm_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/开发工具/npm/index.html.js"), meta: {"t":"Npm"} }],
  ["/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/Linux/", { loader: () => import(/* webpackChunkName: "后端技术_Linux_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/后端技术/Linux/index.html.js"), meta: {"t":"Linux"} }],
  ["/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/", { loader: () => import(/* webpackChunkName: "后端技术_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/后端技术/index.html.js"), meta: {"t":"后端技术"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/index.html.js"), meta: {"t":"OOP"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/index.html.js"), meta: {"t":"Java Script"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/index.html.js"), meta: {"t":"基本语法"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_设计模式_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/设计模式/index.html.js"), meta: {"t":"设计模式"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/CSS/", { loader: () => import(/* webpackChunkName: "前端技术_代码片段_CSS_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/代码片段/CSS/index.html.js"), meta: {"t":"CSS"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/", { loader: () => import(/* webpackChunkName: "前端技术_代码片段_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/代码片段/index.html.js"), meta: {"t":"代码片段"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/JavaScript/", { loader: () => import(/* webpackChunkName: "前端技术_代码片段_JavaScript_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/代码片段/JavaScript/index.html.js"), meta: {"t":"Java Script"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB/", { loader: () => import(/* webpackChunkName: "前端技术_计算机网络_计算机网络体系_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/计算机网络/计算机网络体系/index.html.js"), meta: {"t":"计算机网络体系"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/", { loader: () => import(/* webpackChunkName: "前端技术_计算机网络_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/计算机网络/index.html.js"), meta: {"t":"计算机网络"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/html/", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_html_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/html/index.html.js"), meta: {"t":"Html"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/index.html.js"), meta: {"t":"面试相关"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/css/", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_css_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/css/index.html.js"), meta: {"t":"Css"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/JavaScript/", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_JavaScript_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/JavaScript/index.html.js"), meta: {"t":"Java Script"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/Vue.js/", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_Vue.js_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/Vue.js/index.html.js"), meta: {"t":"Vue.js"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8/", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_浏览器_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/浏览器/index.html.js"), meta: {"t":"浏览器"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E7%AE%97%E6%B3%95/", { loader: () => import(/* webpackChunkName: "前端技术_面试相关_算法_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/面试相关/算法/index.html.js"), meta: {"t":"算法"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%90%86%E8%A7%A3%E5%AF%B9%E8%B1%A1/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_理解对象_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/理解对象/index.html.js"), meta: {"t":"理解对象"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_创建对象_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/创建对象/index.html.js"), meta: {"t":"创建对象"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%B1%BB/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_类_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/类/index.html.js"), meta: {"t":"类"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/OOP/%E7%BB%A7%E6%89%BF/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_OOP_继承_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/OOP/继承/index.html.js"), meta: {"t":"继承"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Array/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Array_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Array/index.html.js"), meta: {"t":"Array"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/index.html.js"), meta: {"t":"内置对象"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/Object/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_Object_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/Object/index.html.js"), meta: {"t":"Object"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%80%BC%E5%B1%9E%E6%80%A7/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-值属性_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-值属性/index.html.js"), meta: {"t":"全局对象 值属性"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1-%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_内置对象_全局对象-函数属性_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/内置对象/全局对象-函数属性/index.html.js"), meta: {"t":"全局对象 函数属性"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_数据类型和值_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/数据类型和值/index.html.js"), meta: {"t":"数据类型和值"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%A3%B0%E6%98%8E/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_语句和声明_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/语句和声明/index.html.js"), meta: {"t":"语句和声明"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%A1%A8%E8%BE%BE%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_表达式_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/表达式/index.html.js"), meta: {"t":"表达式"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_基本语法_运算符_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/基本语法/运算符/index.html.js"), meta: {"t":"运算符"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_内存管理_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/内存管理/index.html.js"), meta: {"t":"内存管理"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/index.html.js"), meta: {"t":"核心模块"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数内部_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数内部/index.html.js"), meta: {"t":"函数内部"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数声明_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数声明/index.html.js"), meta: {"t":"函数声明"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数参数_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数参数/index.html.js"), meta: {"t":"函数参数"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数类型_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数类型/index.html.js"), meta: {"t":"函数类型"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_函数调用_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/函数调用/index.html.js"), meta: {"t":"函数调用"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_并发模型_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/并发模型/index.html.js"), meta: {"t":"并发模型"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_执行阶段_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/执行阶段/index.html.js"), meta: {"t":"执行阶段"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E6%A8%A1%E5%9D%97%E5%8C%96/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_模块化_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/模块化/index.html.js"), meta: {"t":"模块化"} }],
  ["/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5/", { loader: () => import(/* webpackChunkName: "前端技术_JavaScript_核心模块_编译阶段_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/前端技术/JavaScript/核心模块/编译阶段/index.html.js"), meta: {"t":"编译阶段"} }],
  ["/category/", { loader: () => import(/* webpackChunkName: "category_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/category/index.html.js"), meta: {"t":"分类","I":false} }],
  ["/category/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/", { loader: () => import(/* webpackChunkName: "category_前端技术_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/category/前端技术/index.html.js"), meta: {"t":"前端技术 分类","I":false} }],
  ["/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/", { loader: () => import(/* webpackChunkName: "category_开发工具_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/category/开发工具/index.html.js"), meta: {"t":"开发工具 分类","I":false} }],
  ["/category/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/", { loader: () => import(/* webpackChunkName: "category_后端技术_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/category/后端技术/index.html.js"), meta: {"t":"后端技术 分类","I":false} }],
  ["/category/%E9%9D%A2%E7%BB%8F/", { loader: () => import(/* webpackChunkName: "category_面经_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/category/面经/index.html.js"), meta: {"t":"面经 分类","I":false} }],
  ["/tag/", { loader: () => import(/* webpackChunkName: "tag_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/index.html.js"), meta: {"t":"标签","I":false} }],
  ["/tag/css/", { loader: () => import(/* webpackChunkName: "tag_css_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/css/index.html.js"), meta: {"t":"标签: CSS","I":false} }],
  ["/tag/html/", { loader: () => import(/* webpackChunkName: "tag_html_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/html/index.html.js"), meta: {"t":"标签: HTML","I":false} }],
  ["/tag/%E6%B5%8F%E8%A7%88%E5%99%A8/", { loader: () => import(/* webpackChunkName: "tag_浏览器_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/浏览器/index.html.js"), meta: {"t":"标签: 浏览器","I":false} }],
  ["/tag/node.js/", { loader: () => import(/* webpackChunkName: "tag_node.js_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/node.js/index.html.js"), meta: {"t":"标签: Node.js","I":false} }],
  ["/tag/git/", { loader: () => import(/* webpackChunkName: "tag_git_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/git/index.html.js"), meta: {"t":"标签: git","I":false} }],
  ["/tag/npm/", { loader: () => import(/* webpackChunkName: "tag_npm_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/npm/index.html.js"), meta: {"t":"标签: npm","I":false} }],
  ["/tag/linux/", { loader: () => import(/* webpackChunkName: "tag_linux_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/linux/index.html.js"), meta: {"t":"标签: linux","I":false} }],
  ["/tag/javascript/", { loader: () => import(/* webpackChunkName: "tag_javascript_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/javascript/index.html.js"), meta: {"t":"标签: JavaScript","I":false} }],
  ["/tag/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/", { loader: () => import(/* webpackChunkName: "tag_代码片段_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/代码片段/index.html.js"), meta: {"t":"标签: 代码片段","I":false} }],
  ["/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/", { loader: () => import(/* webpackChunkName: "tag_计算机网络_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/计算机网络/index.html.js"), meta: {"t":"标签: 计算机网络","I":false} }],
  ["/tag/vue/", { loader: () => import(/* webpackChunkName: "tag_vue_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/vue/index.html.js"), meta: {"t":"标签: Vue","I":false} }],
  ["/tag/%E9%9D%A2%E7%BB%8F/", { loader: () => import(/* webpackChunkName: "tag_面经_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/面经/index.html.js"), meta: {"t":"标签: 面经","I":false} }],
  ["/tag/%E7%AE%97%E6%B3%95/", { loader: () => import(/* webpackChunkName: "tag_算法_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/算法/index.html.js"), meta: {"t":"标签: 算法","I":false} }],
  ["/tag/%E5%8F%8C%E6%8C%87%E9%92%88/", { loader: () => import(/* webpackChunkName: "tag_双指针_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/双指针/index.html.js"), meta: {"t":"标签: 双指针","I":false} }],
  ["/tag/%E5%93%88%E5%B8%8C/", { loader: () => import(/* webpackChunkName: "tag_哈希_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/哈希/index.html.js"), meta: {"t":"标签: 哈希","I":false} }],
  ["/tag/%E9%80%92%E5%BD%92/", { loader: () => import(/* webpackChunkName: "tag_递归_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/递归/index.html.js"), meta: {"t":"标签: 递归","I":false} }],
  ["/tag/dfs/", { loader: () => import(/* webpackChunkName: "tag_dfs_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/dfs/index.html.js"), meta: {"t":"标签: DFS","I":false} }],
  ["/tag/%E9%93%BE%E8%A1%A8/", { loader: () => import(/* webpackChunkName: "tag_链表_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/链表/index.html.js"), meta: {"t":"标签: 链表","I":false} }],
  ["/tag/%E4%BA%8C%E5%8F%89%E6%A0%91/", { loader: () => import(/* webpackChunkName: "tag_二叉树_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/二叉树/index.html.js"), meta: {"t":"标签: 二叉树","I":false} }],
  ["/tag/bfs/", { loader: () => import(/* webpackChunkName: "tag_bfs_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/bfs/index.html.js"), meta: {"t":"标签: BFS","I":false} }],
  ["/tag/%E6%8E%92%E5%BA%8F/", { loader: () => import(/* webpackChunkName: "tag_排序_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/排序/index.html.js"), meta: {"t":"标签: 排序","I":false} }],
  ["/tag/%E8%B4%AA%E5%BF%83/", { loader: () => import(/* webpackChunkName: "tag_贪心_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/贪心/index.html.js"), meta: {"t":"标签: 贪心","I":false} }],
  ["/tag/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/", { loader: () => import(/* webpackChunkName: "tag_动态规划_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/动态规划/index.html.js"), meta: {"t":"标签: 动态规划","I":false} }],
  ["/tag/%E6%A8%A1%E6%8B%9F/", { loader: () => import(/* webpackChunkName: "tag_模拟_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/模拟/index.html.js"), meta: {"t":"标签: 模拟","I":false} }],
  ["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/", { loader: () => import(/* webpackChunkName: "tag_字符串_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/字符串/index.html.js"), meta: {"t":"标签: 字符串","I":false} }],
  ["/tag/%E6%A0%88/", { loader: () => import(/* webpackChunkName: "tag_栈_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/栈/index.html.js"), meta: {"t":"标签: 栈","I":false} }],
  ["/tag/%E5%9B%9E%E6%BA%AF/", { loader: () => import(/* webpackChunkName: "tag_回溯_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/tag/回溯/index.html.js"), meta: {"t":"标签: 回溯","I":false} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "article_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/article/index.html.js"), meta: {"t":"文章","I":false} }],
  ["/star/", { loader: () => import(/* webpackChunkName: "star_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/star/index.html.js"), meta: {"t":"星标","I":false} }],
  ["/timeline/", { loader: () => import(/* webpackChunkName: "timeline_index.html" */"D:/code/vuepress/flysha-blog/src/.vuepress/.temp/pages/timeline/index.html.js"), meta: {"t":"时间轴","I":false} }],
]);

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updateRoutes) {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
  }
  if (__VUE_HMR_RUNTIME__.updateRedirects) {
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ routes, redirects }) => {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  })
}
